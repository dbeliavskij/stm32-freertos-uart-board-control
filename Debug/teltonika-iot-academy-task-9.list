
teltonika-iot-academy-task-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08008eb4  08008eb4  00018eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009328  08009328  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009328  08009328  00019328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009330  08009330  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009330  08009330  00019330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009334  08009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a20  20000074  080093ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a94  080093ac  00021a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb1e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b91  00000000  00000000  0003fbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f8  00000000  00000000  00043758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a0  00000000  00000000  00044f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000426e  00000000  00000000  000465f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019313  00000000  00000000  0004a85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdf58  00000000  00000000  00063b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00161ac9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065e4  00000000  00000000  00161b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e9c 	.word	0x08008e9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008e9c 	.word	0x08008e9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 ff3a 	bl	8001354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f886 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f91a 	bl	800071c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f8e8 	bl	80006bc <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004ec:	f000 f8d1 	bl	8000692 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	4927      	ldr	r1, [pc, #156]	; (8000590 <main+0xb8>)
 80004f4:	4827      	ldr	r0, [pc, #156]	; (8000594 <main+0xbc>)
 80004f6:	f003 f97d 	bl	80037f4 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fa:	f004 fa4d 	bl	8004998 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UARTTxSemaphore */
  UARTTxSemaphoreHandle = osSemaphoreNew(1, 1, &UARTTxSemaphore_attributes);
 80004fe:	4a26      	ldr	r2, [pc, #152]	; (8000598 <main+0xc0>)
 8000500:	2101      	movs	r1, #1
 8000502:	2001      	movs	r0, #1
 8000504:	f004 fcbd 	bl	8004e82 <osSemaphoreNew>
 8000508:	4603      	mov	r3, r0
 800050a:	4a24      	ldr	r2, [pc, #144]	; (800059c <main+0xc4>)
 800050c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RxQueue */
  RxQueueHandle = osMessageQueueNew (12, sizeof(uint8_t), &RxQueue_attributes);
 800050e:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <main+0xc8>)
 8000510:	2101      	movs	r1, #1
 8000512:	200c      	movs	r0, #12
 8000514:	f004 fdd4 	bl	80050c0 <osMessageQueueNew>
 8000518:	4603      	mov	r3, r0
 800051a:	4a22      	ldr	r2, [pc, #136]	; (80005a4 <main+0xcc>)
 800051c:	6013      	str	r3, [r2, #0]

  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (1, 13, &CommandQueue_attributes);
 800051e:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <main+0xd0>)
 8000520:	210d      	movs	r1, #13
 8000522:	2001      	movs	r0, #1
 8000524:	f004 fdcc 	bl	80050c0 <osMessageQueueNew>
 8000528:	4603      	mov	r3, r0
 800052a:	4a20      	ldr	r2, [pc, #128]	; (80005ac <main+0xd4>)
 800052c:	6013      	str	r3, [r2, #0]

  /* creation of b_rateQueue */
  b_rateQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &b_rateQueue_attributes);
 800052e:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <main+0xd8>)
 8000530:	2102      	movs	r1, #2
 8000532:	2001      	movs	r0, #1
 8000534:	f004 fdc4 	bl	80050c0 <osMessageQueueNew>
 8000538:	4603      	mov	r3, r0
 800053a:	4a1e      	ldr	r2, [pc, #120]	; (80005b4 <main+0xdc>)
 800053c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UARTRx */
  UARTRxHandle = osThreadNew(StartUARTRx, NULL, &UARTRx_attributes);
 800053e:	4a1e      	ldr	r2, [pc, #120]	; (80005b8 <main+0xe0>)
 8000540:	2100      	movs	r1, #0
 8000542:	481e      	ldr	r0, [pc, #120]	; (80005bc <main+0xe4>)
 8000544:	f004 fa72 	bl	8004a2c <osThreadNew>
 8000548:	4603      	mov	r3, r0
 800054a:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <main+0xe8>)
 800054c:	6013      	str	r3, [r2, #0]

  /* creation of TaskHandler */
  TaskHandlerHandle = osThreadNew(StartTTaskHandler, NULL, &TaskHandler_attributes);
 800054e:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <main+0xec>)
 8000550:	2100      	movs	r1, #0
 8000552:	481d      	ldr	r0, [pc, #116]	; (80005c8 <main+0xf0>)
 8000554:	f004 fa6a 	bl	8004a2c <osThreadNew>
 8000558:	4603      	mov	r3, r0
 800055a:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <main+0xf4>)
 800055c:	6013      	str	r3, [r2, #0]

  /* creation of ButTask */
  ButTaskHandle = osThreadNew(StartButTask, NULL, &ButTask_attributes);
 800055e:	4a1c      	ldr	r2, [pc, #112]	; (80005d0 <main+0xf8>)
 8000560:	2100      	movs	r1, #0
 8000562:	481c      	ldr	r0, [pc, #112]	; (80005d4 <main+0xfc>)
 8000564:	f004 fa62 	bl	8004a2c <osThreadNew>
 8000568:	4603      	mov	r3, r0
 800056a:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <main+0x100>)
 800056c:	6013      	str	r3, [r2, #0]

  /* creation of LedBlinkTask */
  LedBlinkTaskHandle = osThreadNew(StartLedBlinkTask, NULL, &LedBlinkTask_attributes);
 800056e:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <main+0x104>)
 8000570:	2100      	movs	r1, #0
 8000572:	481b      	ldr	r0, [pc, #108]	; (80005e0 <main+0x108>)
 8000574:	f004 fa5a 	bl	8004a2c <osThreadNew>
 8000578:	4603      	mov	r3, r0
 800057a:	4a1a      	ldr	r2, [pc, #104]	; (80005e4 <main+0x10c>)
 800057c:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of ButEvents */
  ButEventsHandle = osEventFlagsNew(&ButEvents_attributes);
 800057e:	481a      	ldr	r0, [pc, #104]	; (80005e8 <main+0x110>)
 8000580:	f004 fb43 	bl	8004c0a <osEventFlagsNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a19      	ldr	r2, [pc, #100]	; (80005ec <main+0x114>)
 8000588:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800058a:	f004 fa29 	bl	80049e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058e:	e7fe      	b.n	800058e <main+0xb6>
 8000590:	20001a00 	.word	0x20001a00
 8000594:	20001974 	.word	0x20001974
 8000598:	080091bc 	.word	0x080091bc
 800059c:	2000196c 	.word	0x2000196c
 80005a0:	08009174 	.word	0x08009174
 80005a4:	20001958 	.word	0x20001958
 80005a8:	0800918c 	.word	0x0800918c
 80005ac:	200019f8 	.word	0x200019f8
 80005b0:	080091a4 	.word	0x080091a4
 80005b4:	20001960 	.word	0x20001960
 80005b8:	080090e4 	.word	0x080090e4
 80005bc:	08000889 	.word	0x08000889
 80005c0:	200019fc 	.word	0x200019fc
 80005c4:	08009108 	.word	0x08009108
 80005c8:	08000b41 	.word	0x08000b41
 80005cc:	20001968 	.word	0x20001968
 80005d0:	0800912c 	.word	0x0800912c
 80005d4:	08000f99 	.word	0x08000f99
 80005d8:	20001970 	.word	0x20001970
 80005dc:	08009150 	.word	0x08009150
 80005e0:	08001021 	.word	0x08001021
 80005e4:	20001964 	.word	0x20001964
 80005e8:	080091cc 	.word	0x080091cc
 80005ec:	2000195c 	.word	0x2000195c

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f008 fb90 	bl	8008d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f001 fa41 	bl	8001a9c <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 fd2a 	bl	8001078 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2310      	movs	r3, #16
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800063e:	230a      	movs	r3, #10
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000642:	2307      	movs	r3, #7
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fa78 	bl	8001b48 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800065e:	f000 fd0b 	bl	8001078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	2104      	movs	r1, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fe4a 	bl	8002314 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000686:	f000 fcf7 	bl	8001078 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3758      	adds	r7, #88	; 0x58
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2105      	movs	r1, #5
 800069a:	2026      	movs	r0, #38	; 0x26
 800069c:	f000 ff52 	bl	8001544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006a0:	2026      	movs	r0, #38	; 0x26
 80006a2:	f000 ff6b 	bl	800157c <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2105      	movs	r1, #5
 80006aa:	2028      	movs	r0, #40	; 0x28
 80006ac:	f000 ff4a 	bl	8001544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b0:	2028      	movs	r0, #40	; 0x28
 80006b2:	f000 ff63 	bl	800157c <HAL_NVIC_EnableIRQ>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006c2:	4a15      	ldr	r2, [pc, #84]	; (8000718 <MX_USART2_UART_Init+0x5c>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART2_UART_Init+0x58>)
 8000700:	f002 ffce 	bl	80036a0 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800070a:	f000 fcb5 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20001974 	.word	0x20001974
 8000718:	40004400 	.word	0x40004400

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a24      	ldr	r2, [pc, #144]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f001 f927 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_GPIO_Init+0xc8>)
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_GPIO_Init+0xcc>)
 80007b4:	f000 ff70 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b8:	2320      	movs	r3, #32
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f000 ff61 	bl	8001698 <HAL_GPIO_Init>

}
 80007d6:	bf00      	nop
 80007d8:	3728      	adds	r7, #40	; 0x28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000
 80007e4:	10210000 	.word	0x10210000
 80007e8:	48000800 	.word	0x48000800

080007ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a09      	ldr	r2, [pc, #36]	; (8000820 <HAL_UART_RxCpltCallback+0x34>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d10b      	bne.n	8000816 <HAL_UART_RxCpltCallback+0x2a>
  {
    osMessageQueuePut(RxQueueHandle, &rx_char, 1, 0);
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_UART_RxCpltCallback+0x38>)
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	2300      	movs	r3, #0
 8000804:	2201      	movs	r2, #1
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <HAL_UART_RxCpltCallback+0x3c>)
 8000808:	f004 fcce 	bl	80051a8 <osMessageQueuePut>
	HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 800080c:	2201      	movs	r2, #1
 800080e:	4906      	ldr	r1, [pc, #24]	; (8000828 <HAL_UART_RxCpltCallback+0x3c>)
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <HAL_UART_RxCpltCallback+0x40>)
 8000812:	f002 ffef 	bl	80037f4 <HAL_UART_Receive_IT>

  }
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40004400 	.word	0x40004400
 8000824:	20001958 	.word	0x20001958
 8000828:	20001a00 	.word	0x20001a00
 800082c:	20001974 	.word	0x20001974

08000830 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a05      	ldr	r2, [pc, #20]	; (8000854 <HAL_UART_TxCpltCallback+0x24>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d104      	bne.n	800084c <HAL_UART_TxCpltCallback+0x1c>
	{
		osSemaphoreRelease(UARTTxSemaphoreHandle);
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_UART_TxCpltCallback+0x28>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f004 fbf6 	bl	8005038 <osSemaphoreRelease>

	}
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40004400 	.word	0x40004400
 8000858:	2000196c 	.word	0x2000196c

0800085c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 8000866:	88fb      	ldrh	r3, [r7, #6]
 8000868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800086c:	d105      	bne.n	800087a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		osEventFlagsSet(ButEventsHandle, 0x00000004U);
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_GPIO_EXTI_Callback+0x28>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2104      	movs	r1, #4
 8000874:	4618      	mov	r0, r3
 8000876:	f004 fa07 	bl	8004c88 <osEventFlagsSet>
	}
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000195c 	.word	0x2000195c

08000888 <StartUARTRx>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTRx */
void StartUARTRx(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t temp_rx[2] = { '\0' };
 8000890:	2300      	movs	r3, #0
 8000892:	833b      	strh	r3, [r7, #24]
  char rx_msg[13] = { '\0' };
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	721a      	strb	r2, [r3, #8]
  size_t str_sp = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  osStatus_t status;
  bool send = false;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Infinite loop */
  for(;;)
  {
    status = osMessageQueueGet(RxQueueHandle, temp_rx, NULL, 2000);
 80008ae:	4b9c      	ldr	r3, [pc, #624]	; (8000b20 <StartUARTRx+0x298>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f107 0118 	add.w	r1, r7, #24
 80008b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008ba:	2200      	movs	r2, #0
 80008bc:	f004 fcd4 	bl	8005268 <osMessageQueueGet>
 80008c0:	61f8      	str	r0, [r7, #28]

    if (status == osOK)
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d110      	bne.n	80008ea <StartUARTRx+0x62>
    {
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fc7f 	bl	80001d0 <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	f1c3 030c 	rsb	r3, r3, #12
 80008d8:	623b      	str	r3, [r7, #32]
    	strncat(rx_msg, (char *)temp_rx, str_sp);
 80008da:	f107 0118 	add.w	r1, r7, #24
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	6a3a      	ldr	r2, [r7, #32]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f008 fa25 	bl	8008d34 <strncat>

    }

    str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fc6e 	bl	80001d0 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	f1c3 030c 	rsb	r3, r3, #12
 80008fa:	623b      	str	r3, [r7, #32]

    if (str_sp == 0)
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d11d      	bne.n	800093e <StartUARTRx+0xb6>
    {
    	rx_msg[strlen(rx_msg)-1] = '\r';
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc62 	bl	80001d0 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	3b01      	subs	r3, #1
 8000910:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000914:	4413      	add	r3, r2
 8000916:	220d      	movs	r2, #13
 8000918:	f803 2c20 	strb.w	r2, [r3, #-32]
    	rx_msg[strlen(rx_msg)-2] = '\n';
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fc55 	bl	80001d0 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	3b02      	subs	r3, #2
 800092a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800092e:	4413      	add	r3, r2
 8000930:	220a      	movs	r2, #10
 8000932:	f803 2c20 	strb.w	r2, [r3, #-32]
    	send = true;
 8000936:	2301      	movs	r3, #1
 8000938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800093c:	e088      	b.n	8000a50 <StartUARTRx+0x1c8>

    }

    else if (status == osErrorTimeout && strlen(rx_msg) > 0 && str_sp >= 2)
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	f113 0f02 	cmn.w	r3, #2
 8000944:	d11b      	bne.n	800097e <StartUARTRx+0xf6>
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d016      	beq.n	800097e <StartUARTRx+0xf6>
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d913      	bls.n	800097e <StartUARTRx+0xf6>
    {
    	strncat(rx_msg, "\n\r", str_sp);
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	6a3a      	ldr	r2, [r7, #32]
 800095c:	4971      	ldr	r1, [pc, #452]	; (8000b24 <StartUARTRx+0x29c>)
 800095e:	4618      	mov	r0, r3
 8000960:	f008 f9e8 	bl	8008d34 <strncat>
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fc31 	bl	80001d0 <strlen>
 800096e:	4603      	mov	r3, r0
 8000970:	f1c3 030c 	rsb	r3, r3, #12
 8000974:	623b      	str	r3, [r7, #32]
    	send = true;
 8000976:	2301      	movs	r3, #1
 8000978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800097c:	e068      	b.n	8000a50 <StartUARTRx+0x1c8>

    }

    else if (status == osErrorTimeout && strlen(rx_msg) > 0 && str_sp == 1)
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	f113 0f02 	cmn.w	r3, #2
 8000984:	d128      	bne.n	80009d8 <StartUARTRx+0x150>
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d023      	beq.n	80009d8 <StartUARTRx+0x150>
 8000990:	6a3b      	ldr	r3, [r7, #32]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d120      	bne.n	80009d8 <StartUARTRx+0x150>
    {
    	strncat(rx_msg, "\r", str_sp);
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	6a3a      	ldr	r2, [r7, #32]
 800099c:	4962      	ldr	r1, [pc, #392]	; (8000b28 <StartUARTRx+0x2a0>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f008 f9c8 	bl	8008d34 <strncat>
    	rx_msg[strlen(rx_msg)-2] = '\n';
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fc11 	bl	80001d0 <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	3b02      	subs	r3, #2
 80009b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009b6:	4413      	add	r3, r2
 80009b8:	220a      	movs	r2, #10
 80009ba:	f803 2c20 	strb.w	r2, [r3, #-32]
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fc04 	bl	80001d0 <strlen>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f1c3 030c 	rsb	r3, r3, #12
 80009ce:	623b      	str	r3, [r7, #32]
    	send = true;
 80009d0:	2301      	movs	r3, #1
 80009d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009d6:	e03b      	b.n	8000a50 <StartUARTRx+0x1c8>

    }

    else if (rx_msg[strlen(rx_msg)-1] == '\n' || rx_msg[strlen(rx_msg)-1] == '\r')
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fbf7 	bl	80001d0 <strlen>
 80009e2:	4603      	mov	r3, r0
 80009e4:	3b01      	subs	r3, #1
 80009e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009ea:	4413      	add	r3, r2
 80009ec:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80009f0:	2b0a      	cmp	r3, #10
 80009f2:	d00d      	beq.n	8000a10 <StartUARTRx+0x188>
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fbe9 	bl	80001d0 <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	3b01      	subs	r3, #1
 8000a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a06:	4413      	add	r3, r2
 8000a08:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000a0c:	2b0d      	cmp	r3, #13
 8000a0e:	d11f      	bne.n	8000a50 <StartUARTRx+0x1c8>
    {
    	rx_msg[strlen(rx_msg)-1] = '\n';
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fbdb 	bl	80001d0 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a22:	4413      	add	r3, r2
 8000a24:	220a      	movs	r2, #10
 8000a26:	f803 2c20 	strb.w	r2, [r3, #-32]
    	strncat(rx_msg, "\r", str_sp);
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	6a3a      	ldr	r2, [r7, #32]
 8000a30:	493d      	ldr	r1, [pc, #244]	; (8000b28 <StartUARTRx+0x2a0>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f008 f97e 	bl	8008d34 <strncat>
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fbc7 	bl	80001d0 <strlen>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f1c3 030c 	rsb	r3, r3, #12
 8000a48:	623b      	str	r3, [r7, #32]
    	send = true;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    }

    if (send && strlen(rx_msg) > 8)
 8000a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d037      	beq.n	8000ac8 <StartUARTRx+0x240>
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fbb7 	bl	80001d0 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b08      	cmp	r3, #8
 8000a66:	d92f      	bls.n	8000ac8 <StartUARTRx+0x240>
    {
    	osMessageQueuePut(CommandQueueHandle, rx_msg, 1, osWaitForever);
 8000a68:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <StartUARTRx+0x2a4>)
 8000a6a:	6818      	ldr	r0, [r3, #0]
 8000a6c:	f107 0108 	add.w	r1, r7, #8
 8000a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a74:	2201      	movs	r2, #1
 8000a76:	f004 fb97 	bl	80051a8 <osMessageQueuePut>
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <StartUARTRx+0x2a8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a82:	4618      	mov	r0, r3
 8000a84:	f004 fa86 	bl	8004f94 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Received command:\n\r", 19);
 8000a88:	2213      	movs	r2, #19
 8000a8a:	492a      	ldr	r1, [pc, #168]	; (8000b34 <StartUARTRx+0x2ac>)
 8000a8c:	482a      	ldr	r0, [pc, #168]	; (8000b38 <StartUARTRx+0x2b0>)
 8000a8e:	f002 fe55 	bl	800373c <HAL_UART_Transmit_IT>

    	str_sp = strlen(rx_msg);
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fb9a 	bl	80001d0 <strlen>
 8000a9c:	6238      	str	r0, [r7, #32]
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <StartUARTRx+0x2a8>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 fa74 	bl	8004f94 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)rx_msg, str_sp);
 8000aac:	6a3b      	ldr	r3, [r7, #32]
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4820      	ldr	r0, [pc, #128]	; (8000b38 <StartUARTRx+0x2b0>)
 8000ab8:	f002 fe40 	bl	800373c <HAL_UART_Transmit_IT>
    	rx_msg[0] = '\0';
 8000abc:	2300      	movs	r3, #0
 8000abe:	723b      	strb	r3, [r7, #8]
    	send = false;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ac6:	e02a      	b.n	8000b1e <StartUARTRx+0x296>

    }

    else if (send)
 8000ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	f43f aeee 	beq.w	80008ae <StartUARTRx+0x26>
    {
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <StartUARTRx+0x2a8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ada:	4618      	mov	r0, r3
 8000adc:	f004 fa5a 	bl	8004f94 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Received command too short:\n\r", 29);
 8000ae0:	221d      	movs	r2, #29
 8000ae2:	4916      	ldr	r1, [pc, #88]	; (8000b3c <StartUARTRx+0x2b4>)
 8000ae4:	4814      	ldr	r0, [pc, #80]	; (8000b38 <StartUARTRx+0x2b0>)
 8000ae6:	f002 fe29 	bl	800373c <HAL_UART_Transmit_IT>
    	str_sp = strlen(rx_msg);
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fb6e 	bl	80001d0 <strlen>
 8000af4:	6238      	str	r0, [r7, #32]
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <StartUARTRx+0x2a8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000afe:	4618      	mov	r0, r3
 8000b00:	f004 fa48 	bl	8004f94 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)rx_msg, str_sp);
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480a      	ldr	r0, [pc, #40]	; (8000b38 <StartUARTRx+0x2b0>)
 8000b10:	f002 fe14 	bl	800373c <HAL_UART_Transmit_IT>
    	rx_msg[0] = '\0';
 8000b14:	2300      	movs	r3, #0
 8000b16:	723b      	strb	r3, [r7, #8]
    	send = false;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = osMessageQueueGet(RxQueueHandle, temp_rx, NULL, 2000);
 8000b1e:	e6c6      	b.n	80008ae <StartUARTRx+0x26>
 8000b20:	20001958 	.word	0x20001958
 8000b24:	08008f20 	.word	0x08008f20
 8000b28:	08008f24 	.word	0x08008f24
 8000b2c:	200019f8 	.word	0x200019f8
 8000b30:	2000196c 	.word	0x2000196c
 8000b34:	08008f28 	.word	0x08008f28
 8000b38:	20001974 	.word	0x20001974
 8000b3c:	08008f3c 	.word	0x08008f3c

08000b40 <StartTTaskHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTTaskHandler */
void StartTTaskHandler(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTTaskHandler */
  osThreadSuspend(LedBlinkTaskHandle);
 8000b48:	4bbb      	ldr	r3, [pc, #748]	; (8000e38 <StartTTaskHandler+0x2f8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 ffff 	bl	8004b50 <osThreadSuspend>

  char command[13] = { '\0' };
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	721a      	strb	r2, [r3, #8]
  bool led_b_sus = true;
 8000b62:	2301      	movs	r3, #1
 8000b64:	77fb      	strb	r3, [r7, #31]
  int temp_num;
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(CommandQueueHandle, command, NULL, osWaitForever);
 8000b66:	4bb5      	ldr	r3, [pc, #724]	; (8000e3c <StartTTaskHandler+0x2fc>)
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	f107 0110 	add.w	r1, r7, #16
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b72:	2200      	movs	r2, #0
 8000b74:	f004 fb78 	bl	8005268 <osMessageQueueGet>

    if (!strncmp(command, "LED", 3) || !strncmp(command, "led", 3))
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	49b0      	ldr	r1, [pc, #704]	; (8000e40 <StartTTaskHandler+0x300>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f008 f8ea 	bl	8008d5a <strncmp>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00a      	beq.n	8000ba2 <StartTTaskHandler+0x62>
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	2203      	movs	r2, #3
 8000b92:	49ac      	ldr	r1, [pc, #688]	; (8000e44 <StartTTaskHandler+0x304>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f008 f8e0 	bl	8008d5a <strncmp>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f040 811a 	bne.w	8000dd6 <StartTTaskHandler+0x296>
    {

    	if ((command[4] == 'b' || command[4] == 'B') && atoi(command+6) > 0)
 8000ba2:	7d3b      	ldrb	r3, [r7, #20]
 8000ba4:	2b62      	cmp	r3, #98	; 0x62
 8000ba6:	d002      	beq.n	8000bae <StartTTaskHandler+0x6e>
 8000ba8:	7d3b      	ldrb	r3, [r7, #20]
 8000baa:	2b42      	cmp	r3, #66	; 0x42
 8000bac:	d177      	bne.n	8000c9e <StartTTaskHandler+0x15e>
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	3306      	adds	r3, #6
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f008 f879 	bl	8008cac <atoi>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dd6e      	ble.n	8000c9e <StartTTaskHandler+0x15e>
    	{
    		if (led_b_sus)
 8000bc0:	7ffb      	ldrb	r3, [r7, #31]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d04d      	beq.n	8000c62 <StartTTaskHandler+0x122>
    		{
    			osThreadResume(LedBlinkTaskHandle);
 8000bc6:	4b9c      	ldr	r3, [pc, #624]	; (8000e38 <StartTTaskHandler+0x2f8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f003 ffe1 	bl	8004b92 <osThreadResume>
    			temp_num = atoi(command+6);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	3306      	adds	r3, #6
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f008 f868 	bl	8008cac <atoi>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	60fb      	str	r3, [r7, #12]
    			osMessageQueuePut(b_rateQueueHandle, &temp_num, 1, osWaitForever);
 8000be0:	4b99      	ldr	r3, [pc, #612]	; (8000e48 <StartTTaskHandler+0x308>)
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	f107 010c 	add.w	r1, r7, #12
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bec:	2201      	movs	r2, #1
 8000bee:	f004 fadb 	bl	80051a8 <osMessageQueuePut>
    			led_b_sus = !led_b_sus;
 8000bf2:	7ffb      	ldrb	r3, [r7, #31]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	bf14      	ite	ne
 8000bf8:	2301      	movne	r3, #1
 8000bfa:	2300      	moveq	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f083 0301 	eor.w	r3, r3, #1
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	77fb      	strb	r3, [r7, #31]
 8000c06:	7ffb      	ldrb	r3, [r7, #31]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	77fb      	strb	r3, [r7, #31]
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000c0e:	4b8f      	ldr	r3, [pc, #572]	; (8000e4c <StartTTaskHandler+0x30c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c16:	4618      	mov	r0, r3
 8000c18:	f004 f9bc 	bl	8004f94 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task started\n\r", 27);
 8000c1c:	221b      	movs	r2, #27
 8000c1e:	498c      	ldr	r1, [pc, #560]	; (8000e50 <StartTTaskHandler+0x310>)
 8000c20:	488c      	ldr	r0, [pc, #560]	; (8000e54 <StartTTaskHandler+0x314>)
 8000c22:	f002 fd8b 	bl	800373c <HAL_UART_Transmit_IT>
    			if (osEventFlagsGet(ButEventsHandle) & 0x00000002U)
 8000c26:	4b8c      	ldr	r3, [pc, #560]	; (8000e58 <StartTTaskHandler+0x318>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f004 f8a2 	bl	8004d74 <osEventFlagsGet>
 8000c30:	4603      	mov	r3, r0
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 80cb 	beq.w	8000dd2 <StartTTaskHandler+0x292>
    			{
    				osEventFlagsClear(ButEventsHandle, 0x00000002U);
 8000c3c:	4b86      	ldr	r3, [pc, #536]	; (8000e58 <StartTTaskHandler+0x318>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2102      	movs	r1, #2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f004 f864 	bl	8004d10 <osEventFlagsClear>
    				osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000c48:	4b80      	ldr	r3, [pc, #512]	; (8000e4c <StartTTaskHandler+0x30c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c50:	4618      	mov	r0, r3
 8000c52:	f004 f99f 	bl	8004f94 <osSemaphoreAcquire>
    				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED control with button turned off\n\r", 36);
 8000c56:	2224      	movs	r2, #36	; 0x24
 8000c58:	4980      	ldr	r1, [pc, #512]	; (8000e5c <StartTTaskHandler+0x31c>)
 8000c5a:	487e      	ldr	r0, [pc, #504]	; (8000e54 <StartTTaskHandler+0x314>)
 8000c5c:	f002 fd6e 	bl	800373c <HAL_UART_Transmit_IT>
    		if (led_b_sus)
 8000c60:	e0b7      	b.n	8000dd2 <StartTTaskHandler+0x292>

    		}

    		else
    		{
    			temp_num = atoi(command+6);
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	3306      	adds	r3, #6
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f008 f81f 	bl	8008cac <atoi>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	60fb      	str	r3, [r7, #12]
    			osMessageQueuePut(b_rateQueueHandle, &temp_num, 1, osWaitForever);
 8000c72:	4b75      	ldr	r3, [pc, #468]	; (8000e48 <StartTTaskHandler+0x308>)
 8000c74:	6818      	ldr	r0, [r3, #0]
 8000c76:	f107 010c 	add.w	r1, r7, #12
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f004 fa92 	bl	80051a8 <osMessageQueuePut>
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000c84:	4b71      	ldr	r3, [pc, #452]	; (8000e4c <StartTTaskHandler+0x30c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 f981 	bl	8004f94 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking rate updated\n\r", 27);
 8000c92:	221b      	movs	r2, #27
 8000c94:	4972      	ldr	r1, [pc, #456]	; (8000e60 <StartTTaskHandler+0x320>)
 8000c96:	486f      	ldr	r0, [pc, #444]	; (8000e54 <StartTTaskHandler+0x314>)
 8000c98:	f002 fd50 	bl	800373c <HAL_UART_Transmit_IT>
    		if (led_b_sus)
 8000c9c:	e099      	b.n	8000dd2 <StartTTaskHandler+0x292>

    		}
    	}

    	else if (command[4] == 'b' || command[4] == 'B')
 8000c9e:	7d3b      	ldrb	r3, [r7, #20]
 8000ca0:	2b62      	cmp	r3, #98	; 0x62
 8000ca2:	d002      	beq.n	8000caa <StartTTaskHandler+0x16a>
 8000ca4:	7d3b      	ldrb	r3, [r7, #20]
 8000ca6:	2b42      	cmp	r3, #66	; 0x42
 8000ca8:	d132      	bne.n	8000d10 <StartTTaskHandler+0x1d0>
    	{
    		if (!led_b_sus)
 8000caa:	7ffb      	ldrb	r3, [r7, #31]
 8000cac:	f083 0301 	eor.w	r3, r3, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d01f      	beq.n	8000cf6 <StartTTaskHandler+0x1b6>
			{

				osThreadSuspend(LedBlinkTaskHandle);
 8000cb6:	4b60      	ldr	r3, [pc, #384]	; (8000e38 <StartTTaskHandler+0x2f8>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 ff48 	bl	8004b50 <osThreadSuspend>
				led_b_sus = !led_b_sus;
 8000cc0:	7ffb      	ldrb	r3, [r7, #31]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	bf14      	ite	ne
 8000cc6:	2301      	movne	r3, #1
 8000cc8:	2300      	moveq	r3, #0
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	f083 0301 	eor.w	r3, r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	77fb      	strb	r3, [r7, #31]
 8000cd4:	7ffb      	ldrb	r3, [r7, #31]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	77fb      	strb	r3, [r7, #31]
				osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000cdc:	4b5b      	ldr	r3, [pc, #364]	; (8000e4c <StartTTaskHandler+0x30c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f004 f955 	bl	8004f94 <osSemaphoreAcquire>
				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task stopped\n\r", 27);
 8000cea:	221b      	movs	r2, #27
 8000cec:	495d      	ldr	r1, [pc, #372]	; (8000e64 <StartTTaskHandler+0x324>)
 8000cee:	4859      	ldr	r0, [pc, #356]	; (8000e54 <StartTTaskHandler+0x314>)
 8000cf0:	f002 fd24 	bl	800373c <HAL_UART_Transmit_IT>
    		if (!led_b_sus)
 8000cf4:	e06e      	b.n	8000dd4 <StartTTaskHandler+0x294>

			}

			else
			{
				osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000cf6:	4b55      	ldr	r3, [pc, #340]	; (8000e4c <StartTTaskHandler+0x30c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f004 f948 	bl	8004f94 <osSemaphoreAcquire>
				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task already stopped\n\r", 35);
 8000d04:	2223      	movs	r2, #35	; 0x23
 8000d06:	4958      	ldr	r1, [pc, #352]	; (8000e68 <StartTTaskHandler+0x328>)
 8000d08:	4852      	ldr	r0, [pc, #328]	; (8000e54 <StartTTaskHandler+0x314>)
 8000d0a:	f002 fd17 	bl	800373c <HAL_UART_Transmit_IT>
    		if (!led_b_sus)
 8000d0e:	e061      	b.n	8000dd4 <StartTTaskHandler+0x294>

			}

    	}

    	else if (command[4] == 'u' || command[4] == 'U')
 8000d10:	7d3b      	ldrb	r3, [r7, #20]
 8000d12:	2b75      	cmp	r3, #117	; 0x75
 8000d14:	d002      	beq.n	8000d1c <StartTTaskHandler+0x1dc>
 8000d16:	7d3b      	ldrb	r3, [r7, #20]
 8000d18:	2b55      	cmp	r3, #85	; 0x55
 8000d1a:	d14d      	bne.n	8000db8 <StartTTaskHandler+0x278>
    	{
    		if (!led_b_sus)
 8000d1c:	7ffb      	ldrb	r3, [r7, #31]
 8000d1e:	f083 0301 	eor.w	r3, r3, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d01e      	beq.n	8000d66 <StartTTaskHandler+0x226>
			{
				osThreadSuspend(LedBlinkTaskHandle);
 8000d28:	4b43      	ldr	r3, [pc, #268]	; (8000e38 <StartTTaskHandler+0x2f8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f003 ff0f 	bl	8004b50 <osThreadSuspend>
				led_b_sus = !led_b_sus;
 8000d32:	7ffb      	ldrb	r3, [r7, #31]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	bf14      	ite	ne
 8000d38:	2301      	movne	r3, #1
 8000d3a:	2300      	moveq	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f083 0301 	eor.w	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	77fb      	strb	r3, [r7, #31]
 8000d46:	7ffb      	ldrb	r3, [r7, #31]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	77fb      	strb	r3, [r7, #31]
				osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000d4e:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <StartTTaskHandler+0x30c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d56:	4618      	mov	r0, r3
 8000d58:	f004 f91c 	bl	8004f94 <osSemaphoreAcquire>
				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task stopped\n\r", 27);
 8000d5c:	221b      	movs	r2, #27
 8000d5e:	4941      	ldr	r1, [pc, #260]	; (8000e64 <StartTTaskHandler+0x324>)
 8000d60:	483c      	ldr	r0, [pc, #240]	; (8000e54 <StartTTaskHandler+0x314>)
 8000d62:	f002 fceb 	bl	800373c <HAL_UART_Transmit_IT>

			}

    		if (command[6] == '1')
 8000d66:	7dbb      	ldrb	r3, [r7, #22]
 8000d68:	2b31      	cmp	r3, #49	; 0x31
 8000d6a:	d112      	bne.n	8000d92 <StartTTaskHandler+0x252>
    		{
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000d6c:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <StartTTaskHandler+0x30c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d74:	4618      	mov	r0, r3
 8000d76:	f004 f90d 	bl	8004f94 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED turned on\n\r", 15);
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	493b      	ldr	r1, [pc, #236]	; (8000e6c <StartTTaskHandler+0x32c>)
 8000d7e:	4835      	ldr	r0, [pc, #212]	; (8000e54 <StartTTaskHandler+0x314>)
 8000d80:	f002 fcdc 	bl	800373c <HAL_UART_Transmit_IT>
    			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2120      	movs	r1, #32
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8c:	f000 fe2e 	bl	80019ec <HAL_GPIO_WritePin>
    		if (command[6] == '1')
 8000d90:	e020      	b.n	8000dd4 <StartTTaskHandler+0x294>

    		}

    		else
    		{
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <StartTTaskHandler+0x30c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f004 f8fa 	bl	8004f94 <osSemaphoreAcquire>
				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED turned off\n\r", 16);
 8000da0:	2210      	movs	r2, #16
 8000da2:	4933      	ldr	r1, [pc, #204]	; (8000e70 <StartTTaskHandler+0x330>)
 8000da4:	482b      	ldr	r0, [pc, #172]	; (8000e54 <StartTTaskHandler+0x314>)
 8000da6:	f002 fcc9 	bl	800373c <HAL_UART_Transmit_IT>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2120      	movs	r1, #32
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db2:	f000 fe1b 	bl	80019ec <HAL_GPIO_WritePin>
    		if (command[6] == '1')
 8000db6:	e00d      	b.n	8000dd4 <StartTTaskHandler+0x294>
    		}
    	}

    	else
    	{
    		osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <StartTTaskHandler+0x30c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 f8e7 	bl	8004f94 <osSemaphoreAcquire>
    		HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Invalid command\n\r", 17);
 8000dc6:	2211      	movs	r2, #17
 8000dc8:	492a      	ldr	r1, [pc, #168]	; (8000e74 <StartTTaskHandler+0x334>)
 8000dca:	4822      	ldr	r0, [pc, #136]	; (8000e54 <StartTTaskHandler+0x314>)
 8000dcc:	f002 fcb6 	bl	800373c <HAL_UART_Transmit_IT>
    	if ((command[4] == 'b' || command[4] == 'B') && atoi(command+6) > 0)
 8000dd0:	e0ce      	b.n	8000f70 <StartTTaskHandler+0x430>
    		if (led_b_sus)
 8000dd2:	bf00      	nop
    	if ((command[4] == 'b' || command[4] == 'B') && atoi(command+6) > 0)
 8000dd4:	e0cc      	b.n	8000f70 <StartTTaskHandler+0x430>
    	}


    }

    else if (!strncmp(command, "BUT", 3) || !strncmp(command, "but", 3))
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	2203      	movs	r2, #3
 8000ddc:	4926      	ldr	r1, [pc, #152]	; (8000e78 <StartTTaskHandler+0x338>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f007 ffbb 	bl	8008d5a <strncmp>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00a      	beq.n	8000e00 <StartTTaskHandler+0x2c0>
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	2203      	movs	r2, #3
 8000df0:	4922      	ldr	r1, [pc, #136]	; (8000e7c <StartTTaskHandler+0x33c>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	f007 ffb1 	bl	8008d5a <strncmp>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f040 80aa 	bne.w	8000f54 <StartTTaskHandler+0x414>
    {
    	if (command[4] == 'r' || command[4] == 'R')
 8000e00:	7d3b      	ldrb	r3, [r7, #20]
 8000e02:	2b72      	cmp	r3, #114	; 0x72
 8000e04:	d002      	beq.n	8000e0c <StartTTaskHandler+0x2cc>
 8000e06:	7d3b      	ldrb	r3, [r7, #20]
 8000e08:	2b52      	cmp	r3, #82	; 0x52
 8000e0a:	d14e      	bne.n	8000eaa <StartTTaskHandler+0x36a>
    	{
    		if (command[6] == '1')
 8000e0c:	7dbb      	ldrb	r3, [r7, #22]
 8000e0e:	2b31      	cmp	r3, #49	; 0x31
 8000e10:	d138      	bne.n	8000e84 <StartTTaskHandler+0x344>
    		{
    			osEventFlagsSet(ButEventsHandle, 0x00000001U);
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <StartTTaskHandler+0x318>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2101      	movs	r1, #1
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f003 ff35 	bl	8004c88 <osEventFlagsSet>
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <StartTTaskHandler+0x30c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e26:	4618      	mov	r0, r3
 8000e28:	f004 f8b4 	bl	8004f94 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button press notifications turned on\n\r", 38);
 8000e2c:	2226      	movs	r2, #38	; 0x26
 8000e2e:	4914      	ldr	r1, [pc, #80]	; (8000e80 <StartTTaskHandler+0x340>)
 8000e30:	4808      	ldr	r0, [pc, #32]	; (8000e54 <StartTTaskHandler+0x314>)
 8000e32:	f002 fc83 	bl	800373c <HAL_UART_Transmit_IT>
    		if (command[6] == '1')
 8000e36:	e08c      	b.n	8000f52 <StartTTaskHandler+0x412>
 8000e38:	20001964 	.word	0x20001964
 8000e3c:	200019f8 	.word	0x200019f8
 8000e40:	08008f5c 	.word	0x08008f5c
 8000e44:	08008f60 	.word	0x08008f60
 8000e48:	20001960 	.word	0x20001960
 8000e4c:	2000196c 	.word	0x2000196c
 8000e50:	08008f64 	.word	0x08008f64
 8000e54:	20001974 	.word	0x20001974
 8000e58:	2000195c 	.word	0x2000195c
 8000e5c:	08008f80 	.word	0x08008f80
 8000e60:	08008fa8 	.word	0x08008fa8
 8000e64:	08008fc4 	.word	0x08008fc4
 8000e68:	08008fe0 	.word	0x08008fe0
 8000e6c:	08009004 	.word	0x08009004
 8000e70:	08009014 	.word	0x08009014
 8000e74:	08009028 	.word	0x08009028
 8000e78:	0800903c 	.word	0x0800903c
 8000e7c:	08009040 	.word	0x08009040
 8000e80:	08009044 	.word	0x08009044

    		}

    		else
    		{
    			osEventFlagsClear(ButEventsHandle, 0x00000001U);
 8000e84:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <StartTTaskHandler+0x434>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 ff40 	bl	8004d10 <osEventFlagsClear>
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000e90:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <StartTTaskHandler+0x438>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f004 f87b 	bl	8004f94 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button press notifications turned off\n\r", 39);
 8000e9e:	2227      	movs	r2, #39	; 0x27
 8000ea0:	4936      	ldr	r1, [pc, #216]	; (8000f7c <StartTTaskHandler+0x43c>)
 8000ea2:	4837      	ldr	r0, [pc, #220]	; (8000f80 <StartTTaskHandler+0x440>)
 8000ea4:	f002 fc4a 	bl	800373c <HAL_UART_Transmit_IT>
    		if (command[6] == '1')
 8000ea8:	e053      	b.n	8000f52 <StartTTaskHandler+0x412>

    		}
    	}

    		else if (command[4] == 'l' || command[4] == 'L')
 8000eaa:	7d3b      	ldrb	r3, [r7, #20]
 8000eac:	2b6c      	cmp	r3, #108	; 0x6c
 8000eae:	d002      	beq.n	8000eb6 <StartTTaskHandler+0x376>
 8000eb0:	7d3b      	ldrb	r3, [r7, #20]
 8000eb2:	2b4c      	cmp	r3, #76	; 0x4c
 8000eb4:	d15b      	bne.n	8000f6e <StartTTaskHandler+0x42e>
    		{
    			if (command[6] == '1')
 8000eb6:	7dbb      	ldrb	r3, [r7, #22]
 8000eb8:	2b31      	cmp	r3, #49	; 0x31
 8000eba:	d137      	bne.n	8000f2c <StartTTaskHandler+0x3ec>
				{
					osEventFlagsSet(ButEventsHandle, 0x00000002U);
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <StartTTaskHandler+0x434>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fee0 	bl	8004c88 <osEventFlagsSet>
					osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000ec8:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <StartTTaskHandler+0x438>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f004 f85f 	bl	8004f94 <osSemaphoreAcquire>
					HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED control with button turned on\n\r", 35);
 8000ed6:	2223      	movs	r2, #35	; 0x23
 8000ed8:	492a      	ldr	r1, [pc, #168]	; (8000f84 <StartTTaskHandler+0x444>)
 8000eda:	4829      	ldr	r0, [pc, #164]	; (8000f80 <StartTTaskHandler+0x440>)
 8000edc:	f002 fc2e 	bl	800373c <HAL_UART_Transmit_IT>

					if (!led_b_sus)
 8000ee0:	7ffb      	ldrb	r3, [r7, #31]
 8000ee2:	f083 0301 	eor.w	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d040      	beq.n	8000f6e <StartTTaskHandler+0x42e>
					{
						osThreadSuspend(LedBlinkTaskHandle);
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <StartTTaskHandler+0x448>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f003 fe2d 	bl	8004b50 <osThreadSuspend>
						led_b_sus = !led_b_sus;
 8000ef6:	7ffb      	ldrb	r3, [r7, #31]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	bf14      	ite	ne
 8000efc:	2301      	movne	r3, #1
 8000efe:	2300      	moveq	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f083 0301 	eor.w	r3, r3, #1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	77fb      	strb	r3, [r7, #31]
 8000f0a:	7ffb      	ldrb	r3, [r7, #31]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	77fb      	strb	r3, [r7, #31]
						osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <StartTTaskHandler+0x438>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 f83a 	bl	8004f94 <osSemaphoreAcquire>
						HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task stopped\n\r", 27);
 8000f20:	221b      	movs	r2, #27
 8000f22:	491a      	ldr	r1, [pc, #104]	; (8000f8c <StartTTaskHandler+0x44c>)
 8000f24:	4816      	ldr	r0, [pc, #88]	; (8000f80 <StartTTaskHandler+0x440>)
 8000f26:	f002 fc09 	bl	800373c <HAL_UART_Transmit_IT>
    	if (command[4] == 'r' || command[4] == 'R')
 8000f2a:	e020      	b.n	8000f6e <StartTTaskHandler+0x42e>

				}

				else
				{
					osEventFlagsClear(ButEventsHandle, 0x00000002U);
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <StartTTaskHandler+0x434>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2102      	movs	r1, #2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 feec 	bl	8004d10 <osEventFlagsClear>
					osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <StartTTaskHandler+0x438>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f40:	4618      	mov	r0, r3
 8000f42:	f004 f827 	bl	8004f94 <osSemaphoreAcquire>
					HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED control with button turned off\n\r", 36);
 8000f46:	2224      	movs	r2, #36	; 0x24
 8000f48:	4911      	ldr	r1, [pc, #68]	; (8000f90 <StartTTaskHandler+0x450>)
 8000f4a:	480d      	ldr	r0, [pc, #52]	; (8000f80 <StartTTaskHandler+0x440>)
 8000f4c:	f002 fbf6 	bl	800373c <HAL_UART_Transmit_IT>
    	if (command[4] == 'r' || command[4] == 'R')
 8000f50:	e00d      	b.n	8000f6e <StartTTaskHandler+0x42e>
 8000f52:	e00c      	b.n	8000f6e <StartTTaskHandler+0x42e>

    }

    else
    {
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <StartTTaskHandler+0x438>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f004 f819 	bl	8004f94 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Invalid command\n\r", 17);
 8000f62:	2211      	movs	r2, #17
 8000f64:	490b      	ldr	r1, [pc, #44]	; (8000f94 <StartTTaskHandler+0x454>)
 8000f66:	4806      	ldr	r0, [pc, #24]	; (8000f80 <StartTTaskHandler+0x440>)
 8000f68:	f002 fbe8 	bl	800373c <HAL_UART_Transmit_IT>
 8000f6c:	e5fb      	b.n	8000b66 <StartTTaskHandler+0x26>
    	if (command[4] == 'r' || command[4] == 'R')
 8000f6e:	bf00      	nop
    osMessageQueueGet(CommandQueueHandle, command, NULL, osWaitForever);
 8000f70:	e5f9      	b.n	8000b66 <StartTTaskHandler+0x26>
 8000f72:	bf00      	nop
 8000f74:	2000195c 	.word	0x2000195c
 8000f78:	2000196c 	.word	0x2000196c
 8000f7c:	0800906c 	.word	0x0800906c
 8000f80:	20001974 	.word	0x20001974
 8000f84:	08009094 	.word	0x08009094
 8000f88:	20001964 	.word	0x20001964
 8000f8c:	08008fc4 	.word	0x08008fc4
 8000f90:	08008f80 	.word	0x08008f80
 8000f94:	08009028 	.word	0x08009028

08000f98 <StartButTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButTask */
void StartButTask(void *argument)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButTask */
  /* Infinite loop */
  for(;;)
  {
	switch (osEventFlagsWait(ButEventsHandle, 0x00000004U, osFlagsWaitAny, osWaitForever))
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <StartButTask+0x78>)
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2104      	movs	r1, #4
 8000fac:	f003 ff03 	bl	8004db6 <osEventFlagsWait>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	d019      	beq.n	8000fea <StartButTask+0x52>
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	d828      	bhi.n	800100c <StartButTask+0x74>
 8000fba:	2b05      	cmp	r3, #5
 8000fbc:	d002      	beq.n	8000fc4 <StartButTask+0x2c>
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d00d      	beq.n	8000fde <StartButTask+0x46>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button pressed!\n\r", 17);

		default:
			break;
 8000fc2:	e023      	b.n	800100c <StartButTask+0x74>
			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <StartButTask+0x7c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 ffe1 	bl	8004f94 <osSemaphoreAcquire>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button pressed!\n\r", 17);
 8000fd2:	2211      	movs	r2, #17
 8000fd4:	4910      	ldr	r1, [pc, #64]	; (8001018 <StartButTask+0x80>)
 8000fd6:	4811      	ldr	r0, [pc, #68]	; (800101c <StartButTask+0x84>)
 8000fd8:	f002 fbb0 	bl	800373c <HAL_UART_Transmit_IT>
			break;
 8000fdc:	e017      	b.n	800100e <StartButTask+0x76>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fde:	2120      	movs	r1, #32
 8000fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe4:	f000 fd1a 	bl	8001a1c <HAL_GPIO_TogglePin>
			break;
 8000fe8:	e011      	b.n	800100e <StartButTask+0x76>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fea:	2120      	movs	r1, #32
 8000fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff0:	f000 fd14 	bl	8001a1c <HAL_GPIO_TogglePin>
			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <StartButTask+0x7c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f003 ffc9 	bl	8004f94 <osSemaphoreAcquire>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button pressed!\n\r", 17);
 8001002:	2211      	movs	r2, #17
 8001004:	4904      	ldr	r1, [pc, #16]	; (8001018 <StartButTask+0x80>)
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <StartButTask+0x84>)
 8001008:	f002 fb98 	bl	800373c <HAL_UART_Transmit_IT>
			break;
 800100c:	bf00      	nop
	switch (osEventFlagsWait(ButEventsHandle, 0x00000004U, osFlagsWaitAny, osWaitForever))
 800100e:	e7c7      	b.n	8000fa0 <StartButTask+0x8>
 8001010:	2000195c 	.word	0x2000195c
 8001014:	2000196c 	.word	0x2000196c
 8001018:	080090b8 	.word	0x080090b8
 800101c:	20001974 	.word	0x20001974

08001020 <StartLedBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedBlinkTask */
void StartLedBlinkTask(void *argument)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedBlinkTask */
  int rate = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(b_rateQueueHandle, &rate, NULL, 0);
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <StartLedBlinkTask+0x30>)
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	f107 010c 	add.w	r1, r7, #12
 8001034:	2300      	movs	r3, #0
 8001036:	2200      	movs	r2, #0
 8001038:	f004 f916 	bl	8005268 <osMessageQueueGet>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800103c:	2120      	movs	r1, #32
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f000 fceb 	bl	8001a1c <HAL_GPIO_TogglePin>
    osDelay(rate);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fdc3 	bl	8004bd4 <osDelay>
    osMessageQueueGet(b_rateQueueHandle, &rate, NULL, 0);
 800104e:	e7ed      	b.n	800102c <StartLedBlinkTask+0xc>
 8001050:	20001960 	.word	0x20001960

08001054 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001066:	f000 f995 	bl	8001394 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40001000 	.word	0x40001000

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	e7fe      	b.n	8001080 <Error_Handler+0x8>
	...

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_MspInit+0x4c>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <HAL_MspInit+0x4c>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6613      	str	r3, [r2, #96]	; 0x60
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_MspInit+0x4c>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_MspInit+0x4c>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <HAL_MspInit+0x4c>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_MspInit+0x4c>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	210f      	movs	r1, #15
 80010be:	f06f 0001 	mvn.w	r0, #1
 80010c2:	f000 fa3f 	bl	8001544 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ac      	sub	sp, #176	; 0xb0
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2288      	movs	r2, #136	; 0x88
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f007 fe15 	bl	8008d24 <memset>
  if(huart->Instance==USART2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a21      	ldr	r2, [pc, #132]	; (8001184 <HAL_UART_MspInit+0xb0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d13b      	bne.n	800117c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001104:	2302      	movs	r3, #2
 8001106:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4618      	mov	r0, r3
 8001112:	f001 fb37 	bl	8002784 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800111c:	f7ff ffac 	bl	8001078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_UART_MspInit+0xb4>)
 8001122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001124:	4a18      	ldr	r2, [pc, #96]	; (8001188 <HAL_UART_MspInit+0xb4>)
 8001126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112a:	6593      	str	r3, [r2, #88]	; 0x58
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_UART_MspInit+0xb4>)
 800112e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_UART_MspInit+0xb4>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	4a12      	ldr	r2, [pc, #72]	; (8001188 <HAL_UART_MspInit+0xb4>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <HAL_UART_MspInit+0xb4>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001150:	230c      	movs	r3, #12
 8001152:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001168:	2307      	movs	r3, #7
 800116a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001172:	4619      	mov	r1, r3
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f000 fa8e 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	37b0      	adds	r7, #176	; 0xb0
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40004400 	.word	0x40004400
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	2036      	movs	r0, #54	; 0x36
 80011a2:	f000 f9cf 	bl	8001544 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011a6:	2036      	movs	r0, #54	; 0x36
 80011a8:	f000 f9e8 	bl	800157c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <HAL_InitTick+0x9c>)
 80011ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_InitTick+0x9c>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	6593      	str	r3, [r2, #88]	; 0x58
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_InitTick+0x9c>)
 80011ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011c4:	f107 0210 	add.w	r2, r7, #16
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fa46 	bl	8002660 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011d4:	f001 fa18 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 80011d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011dc:	4a13      	ldr	r2, [pc, #76]	; (800122c <HAL_InitTick+0xa0>)
 80011de:	fba2 2303 	umull	r2, r3, r2, r3
 80011e2:	0c9b      	lsrs	r3, r3, #18
 80011e4:	3b01      	subs	r3, #1
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_InitTick+0xa4>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <HAL_InitTick+0xa8>)
 80011ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_InitTick+0xa4>)
 80011f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011f6:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <HAL_InitTick+0xa4>)
 80011f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <HAL_InitTick+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_InitTick+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <HAL_InitTick+0xa4>)
 800120a:	f001 ff77 	bl	80030fc <HAL_TIM_Base_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d104      	bne.n	800121e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <HAL_InitTick+0xa4>)
 8001216:	f001 ffd3 	bl	80031c0 <HAL_TIM_Base_Start_IT>
 800121a:	4603      	mov	r3, r0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3730      	adds	r7, #48	; 0x30
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000
 800122c:	431bde83 	.word	0x431bde83
 8001230:	20001a04 	.word	0x20001a04
 8001234:	40001000 	.word	0x40001000

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800123c:	e7fe      	b.n	800123c <NMI_Handler+0x4>

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <USART2_IRQHandler+0x10>)
 800126a:	f002 fb07 	bl	800387c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20001974 	.word	0x20001974

08001278 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800127c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001280:	f000 fbe6 	bl	8001a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <TIM6_DAC_IRQHandler+0x10>)
 800128e:	f002 f807 	bl	80032a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20001a04 	.word	0x20001a04

0800129c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <SystemInit+0x5c>)
 80012a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a6:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <SystemInit+0x5c>)
 80012a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <SystemInit+0x60>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a11      	ldr	r2, [pc, #68]	; (80012fc <SystemInit+0x60>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <SystemInit+0x60>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <SystemInit+0x60>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <SystemInit+0x60>)
 80012c8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012cc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <SystemInit+0x60>)
 80012d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <SystemInit+0x60>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a07      	ldr	r2, [pc, #28]	; (80012fc <SystemInit+0x60>)
 80012e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <SystemInit+0x60>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00
 80012fc:	40021000 	.word	0x40021000

08001300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001338 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001304:	f7ff ffca 	bl	800129c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001308:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800130a:	e003      	b.n	8001314 <LoopCopyDataInit>

0800130c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800130e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001310:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001312:	3104      	adds	r1, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001314:	480a      	ldr	r0, [pc, #40]	; (8001340 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001318:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800131a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800131c:	d3f6      	bcc.n	800130c <CopyDataInit>
	ldr	r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001320:	e002      	b.n	8001328 <LoopFillZerobss>

08001322 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001322:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001324:	f842 3b04 	str.w	r3, [r2], #4

08001328 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <LoopForever+0x16>)
	cmp	r2, r3
 800132a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800132c:	d3f9      	bcc.n	8001322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132e:	f007 fcc7 	bl	8008cc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001332:	f7ff f8d1 	bl	80004d8 <main>

08001336 <LoopForever>:

LoopForever:
    b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001338:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800133c:	08009338 	.word	0x08009338
	ldr	r0, =_sdata
 8001340:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001344:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001348:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800134c:	20001a94 	.word	0x20001a94

08001350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC1_2_IRQHandler>
	...

08001354 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_Init+0x3c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <HAL_Init+0x3c>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001368:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136a:	2003      	movs	r0, #3
 800136c:	f000 f8df 	bl	800152e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001370:	200f      	movs	r0, #15
 8001372:	f7ff ff0b 	bl	800118c <HAL_InitTick>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	e001      	b.n	8001386 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001382:	f7ff fe7f 	bl	8001084 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001386:	79fb      	ldrb	r3, [r7, #7]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40022000 	.word	0x40022000

08001394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x20>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x24>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_IncTick+0x24>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000008 	.word	0x20000008
 80013b8:	20001a50 	.word	0x20001a50

080013bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <HAL_GetTick+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20001a50 	.word	0x20001a50

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4907      	ldr	r1, [pc, #28]	; (8001470 <__NVIC_EnableIRQ+0x38>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
         );
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ff4c 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001556:	f7ff ff61 	bl	800141c <__NVIC_GetPriorityGrouping>
 800155a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	68b9      	ldr	r1, [r7, #8]
 8001560:	6978      	ldr	r0, [r7, #20]
 8001562:	f7ff ffb1 	bl	80014c8 <NVIC_EncodePriority>
 8001566:	4602      	mov	r2, r0
 8001568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff80 	bl	8001474 <__NVIC_SetPriority>
}
 8001574:	bf00      	nop
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff54 	bl	8001438 <__NVIC_EnableIRQ>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d008      	beq.n	80015c2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2204      	movs	r2, #4
 80015b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e022      	b.n	8001608 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 020e 	bic.w	r2, r2, #14
 80015d0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0201 	bic.w	r2, r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f003 021c 	and.w	r2, r3, #28
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d005      	beq.n	8001638 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2204      	movs	r2, #4
 8001630:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	e029      	b.n	800168c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 020e 	bic.w	r2, r2, #14
 8001646:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0201 	bic.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	f003 021c 	and.w	r2, r3, #28
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	2101      	movs	r1, #1
 8001666:	fa01 f202 	lsl.w	r2, r1, r2
 800166a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	4798      	blx	r3
    }
  }
  return status;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a6:	e17f      	b.n	80019a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2101      	movs	r1, #1
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8171 	beq.w	80019a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d00b      	beq.n	80016e0 <HAL_GPIO_Init+0x48>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d007      	beq.n	80016e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016d4:	2b11      	cmp	r3, #17
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b12      	cmp	r3, #18
 80016de:	d130      	bne.n	8001742 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001716:	2201      	movs	r2, #1
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	f003 0201 	and.w	r2, r3, #1
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b03      	cmp	r3, #3
 800174c:	d118      	bne.n	8001780 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001754:	2201      	movs	r2, #1
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	08db      	lsrs	r3, r3, #3
 800176a:	f003 0201 	and.w	r2, r3, #1
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x128>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b12      	cmp	r3, #18
 80017be:	d123      	bne.n	8001808 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	08da      	lsrs	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3208      	adds	r2, #8
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	6939      	ldr	r1, [r7, #16]
 8001804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0203 	and.w	r2, r3, #3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80ac 	beq.w	80019a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	4b5f      	ldr	r3, [pc, #380]	; (80019c8 <HAL_GPIO_Init+0x330>)
 800184c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184e:	4a5e      	ldr	r2, [pc, #376]	; (80019c8 <HAL_GPIO_Init+0x330>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6613      	str	r3, [r2, #96]	; 0x60
 8001856:	4b5c      	ldr	r3, [pc, #368]	; (80019c8 <HAL_GPIO_Init+0x330>)
 8001858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001862:	4a5a      	ldr	r2, [pc, #360]	; (80019cc <HAL_GPIO_Init+0x334>)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800188c:	d025      	beq.n	80018da <HAL_GPIO_Init+0x242>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <HAL_GPIO_Init+0x338>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01f      	beq.n	80018d6 <HAL_GPIO_Init+0x23e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4e      	ldr	r2, [pc, #312]	; (80019d4 <HAL_GPIO_Init+0x33c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d019      	beq.n	80018d2 <HAL_GPIO_Init+0x23a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4d      	ldr	r2, [pc, #308]	; (80019d8 <HAL_GPIO_Init+0x340>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d013      	beq.n	80018ce <HAL_GPIO_Init+0x236>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <HAL_GPIO_Init+0x344>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00d      	beq.n	80018ca <HAL_GPIO_Init+0x232>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4b      	ldr	r2, [pc, #300]	; (80019e0 <HAL_GPIO_Init+0x348>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d007      	beq.n	80018c6 <HAL_GPIO_Init+0x22e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4a      	ldr	r2, [pc, #296]	; (80019e4 <HAL_GPIO_Init+0x34c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d101      	bne.n	80018c2 <HAL_GPIO_Init+0x22a>
 80018be:	2306      	movs	r3, #6
 80018c0:	e00c      	b.n	80018dc <HAL_GPIO_Init+0x244>
 80018c2:	2307      	movs	r3, #7
 80018c4:	e00a      	b.n	80018dc <HAL_GPIO_Init+0x244>
 80018c6:	2305      	movs	r3, #5
 80018c8:	e008      	b.n	80018dc <HAL_GPIO_Init+0x244>
 80018ca:	2304      	movs	r3, #4
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x244>
 80018ce:	2303      	movs	r3, #3
 80018d0:	e004      	b.n	80018dc <HAL_GPIO_Init+0x244>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e002      	b.n	80018dc <HAL_GPIO_Init+0x244>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x244>
 80018da:	2300      	movs	r3, #0
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	f002 0203 	and.w	r2, r2, #3
 80018e2:	0092      	lsls	r2, r2, #2
 80018e4:	4093      	lsls	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ec:	4937      	ldr	r1, [pc, #220]	; (80019cc <HAL_GPIO_Init+0x334>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_GPIO_Init+0x350>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800191e:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <HAL_GPIO_Init+0x350>)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001924:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <HAL_GPIO_Init+0x350>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001948:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <HAL_GPIO_Init+0x350>)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_GPIO_Init+0x350>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001972:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_GPIO_Init+0x350>)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_GPIO_Init+0x350>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800199c:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <HAL_GPIO_Init+0x350>)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f47f ae78 	bne.w	80016a8 <HAL_GPIO_Init+0x10>
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	371c      	adds	r7, #28
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000
 80019d0:	48000400 	.word	0x48000400
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48000c00 	.word	0x48000c00
 80019dc:	48001000 	.word	0x48001000
 80019e0:	48001400 	.word	0x48001400
 80019e4:	48001800 	.word	0x48001800
 80019e8:	40010400 	.word	0x40010400

080019ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43d9      	mvns	r1, r3
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	619a      	str	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fef4 	bl	800085c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40010400 	.word	0x40010400

08001a80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40007000 	.word	0x40007000

08001a9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aaa:	d130      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab8:	d038      	beq.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ac2:	4a1e      	ldr	r2, [pc, #120]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2232      	movs	r2, #50	; 0x32
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0c9b      	lsrs	r3, r3, #18
 8001adc:	3301      	adds	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae0:	e002      	b.n	8001ae8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af4:	d102      	bne.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f2      	bne.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b08:	d110      	bne.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e00f      	b.n	8001b2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1a:	d007      	beq.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b24:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	20000000 	.word	0x20000000
 8001b44:	431bde83 	.word	0x431bde83

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e3d4      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5a:	4ba1      	ldr	r3, [pc, #644]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b64:	4b9e      	ldr	r3, [pc, #632]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80e4 	beq.w	8001d44 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HAL_RCC_OscConfig+0x4a>
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	f040 808b 	bne.w	8001ca0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	f040 8087 	bne.w	8001ca0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b92:	4b93      	ldr	r3, [pc, #588]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <HAL_RCC_OscConfig+0x62>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e3ac      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1a      	ldr	r2, [r3, #32]
 8001bae:	4b8c      	ldr	r3, [pc, #560]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d004      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x7c>
 8001bba:	4b89      	ldr	r3, [pc, #548]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc2:	e005      	b.n	8001bd0 <HAL_RCC_OscConfig+0x88>
 8001bc4:	4b86      	ldr	r3, [pc, #536]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d223      	bcs.n	8001c1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fd73 	bl	80026c4 <RCC_SetFlashLatencyFromMSIRange>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e38d      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be8:	4b7d      	ldr	r3, [pc, #500]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a7c      	ldr	r2, [pc, #496]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001bee:	f043 0308 	orr.w	r3, r3, #8
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b7a      	ldr	r3, [pc, #488]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4977      	ldr	r1, [pc, #476]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c06:	4b76      	ldr	r3, [pc, #472]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	4972      	ldr	r1, [pc, #456]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
 8001c1a:	e025      	b.n	8001c68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c1c:	4b70      	ldr	r3, [pc, #448]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a6f      	ldr	r2, [pc, #444]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001c22:	f043 0308 	orr.w	r3, r3, #8
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b6d      	ldr	r3, [pc, #436]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	496a      	ldr	r1, [pc, #424]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c3a:	4b69      	ldr	r3, [pc, #420]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	4965      	ldr	r1, [pc, #404]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 fd33 	bl	80026c4 <RCC_SetFlashLatencyFromMSIRange>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e34d      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c68:	f000 fc36 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b5c      	ldr	r3, [pc, #368]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	495a      	ldr	r1, [pc, #360]	; (8001de4 <HAL_RCC_OscConfig+0x29c>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	4a58      	ldr	r2, [pc, #352]	; (8001de8 <HAL_RCC_OscConfig+0x2a0>)
 8001c86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c88:	4b58      	ldr	r3, [pc, #352]	; (8001dec <HAL_RCC_OscConfig+0x2a4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fa7d 	bl	800118c <HAL_InitTick>
 8001c92:	4603      	mov	r3, r0
 8001c94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d052      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	e331      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d032      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ca8:	4b4d      	ldr	r3, [pc, #308]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a4c      	ldr	r2, [pc, #304]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fb82 	bl	80013bc <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fb7e 	bl	80013bc <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e31a      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cce:	4b44      	ldr	r3, [pc, #272]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cda:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a40      	ldr	r2, [pc, #256]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001ce0:	f043 0308 	orr.w	r3, r3, #8
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	493b      	ldr	r1, [pc, #236]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf8:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	4936      	ldr	r1, [pc, #216]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
 8001d0c:	e01a      	b.n	8001d44 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d0e:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a33      	ldr	r2, [pc, #204]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d1a:	f7ff fb4f 	bl	80013bc <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d22:	f7ff fb4b 	bl	80013bc <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e2e7      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d34:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x1da>
 8001d40:	e000      	b.n	8001d44 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d074      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d005      	beq.n	8001d62 <HAL_RCC_OscConfig+0x21a>
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	2b0c      	cmp	r3, #12
 8001d5a:	d10e      	bne.n	8001d7a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d10b      	bne.n	8001d7a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d064      	beq.n	8001e38 <HAL_RCC_OscConfig+0x2f0>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d160      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e2c4      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x24a>
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a15      	ldr	r2, [pc, #84]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	e01d      	b.n	8001dce <HAL_RCC_OscConfig+0x286>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x26e>
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0f      	ldr	r2, [pc, #60]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	e00b      	b.n	8001dce <HAL_RCC_OscConfig+0x286>
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_RCC_OscConfig+0x298>)
 8001dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dcc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d01c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd6:	f7ff faf1 	bl	80013bc <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ddc:	e011      	b.n	8001e02 <HAL_RCC_OscConfig+0x2ba>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	080091dc 	.word	0x080091dc
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff fae4 	bl	80013bc <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e280      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e02:	4baf      	ldr	r3, [pc, #700]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x2a8>
 8001e0e:	e014      	b.n	8001e3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff fad4 	bl	80013bc <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff fad0 	bl	80013bc <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e26c      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e2a:	4ba5      	ldr	r3, [pc, #660]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2d0>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d060      	beq.n	8001f08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_OscConfig+0x310>
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	d119      	bne.n	8001e86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d116      	bne.n	8001e86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e58:	4b99      	ldr	r3, [pc, #612]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_OscConfig+0x328>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e249      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b93      	ldr	r3, [pc, #588]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	061b      	lsls	r3, r3, #24
 8001e7e:	4990      	ldr	r1, [pc, #576]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e84:	e040      	b.n	8001f08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d023      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8e:	4b8c      	ldr	r3, [pc, #560]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a8b      	ldr	r2, [pc, #556]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fa8f 	bl	80013bc <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7ff fa8b 	bl	80013bc <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e227      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb4:	4b82      	ldr	r3, [pc, #520]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec0:	4b7f      	ldr	r3, [pc, #508]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	497c      	ldr	r1, [pc, #496]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
 8001ed4:	e018      	b.n	8001f08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed6:	4b7a      	ldr	r3, [pc, #488]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a79      	ldr	r2, [pc, #484]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fa6b 	bl	80013bc <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eea:	f7ff fa67 	bl	80013bc <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e203      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001efc:	4b70      	ldr	r3, [pc, #448]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d03c      	beq.n	8001f8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1c:	4b68      	ldr	r3, [pc, #416]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f22:	4a67      	ldr	r2, [pc, #412]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2c:	f7ff fa46 	bl	80013bc <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f34:	f7ff fa42 	bl	80013bc <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1de      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f46:	4b5e      	ldr	r3, [pc, #376]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ef      	beq.n	8001f34 <HAL_RCC_OscConfig+0x3ec>
 8001f54:	e01b      	b.n	8001f8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f56:	4b5a      	ldr	r3, [pc, #360]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5c:	4a58      	ldr	r2, [pc, #352]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7ff fa29 	bl	80013bc <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7ff fa25 	bl	80013bc <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e1c1      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f80:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1ef      	bne.n	8001f6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80a6 	beq.w	80020e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fa0:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10d      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4b44      	ldr	r3, [pc, #272]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	4a43      	ldr	r2, [pc, #268]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb8:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc8:	4b3e      	ldr	r3, [pc, #248]	; (80020c4 <HAL_RCC_OscConfig+0x57c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d118      	bne.n	8002006 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_RCC_OscConfig+0x57c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a3a      	ldr	r2, [pc, #232]	; (80020c4 <HAL_RCC_OscConfig+0x57c>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f9ec 	bl	80013bc <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe8:	f7ff f9e8 	bl	80013bc <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e184      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffa:	4b32      	ldr	r3, [pc, #200]	; (80020c4 <HAL_RCC_OscConfig+0x57c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d108      	bne.n	8002020 <HAL_RCC_OscConfig+0x4d8>
 800200e:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	4a2a      	ldr	r2, [pc, #168]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800201e:	e024      	b.n	800206a <HAL_RCC_OscConfig+0x522>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b05      	cmp	r3, #5
 8002026:	d110      	bne.n	800204a <HAL_RCC_OscConfig+0x502>
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202e:	4a24      	ldr	r2, [pc, #144]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	4a20      	ldr	r2, [pc, #128]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002048:	e00f      	b.n	800206a <HAL_RCC_OscConfig+0x522>
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002050:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002060:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8002062:	f023 0304 	bic.w	r3, r3, #4
 8002066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d016      	beq.n	80020a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7ff f9a3 	bl	80013bc <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7ff f99f 	bl	80013bc <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e139      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0ed      	beq.n	800207a <HAL_RCC_OscConfig+0x532>
 800209e:	e01a      	b.n	80020d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7ff f98c 	bl	80013bc <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020a6:	e00f      	b.n	80020c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f7ff f988 	bl	80013bc <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d906      	bls.n	80020c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e122      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c8:	4b90      	ldr	r3, [pc, #576]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1e8      	bne.n	80020a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d6:	7ffb      	ldrb	r3, [r7, #31]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020dc:	4b8b      	ldr	r3, [pc, #556]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	4a8a      	ldr	r2, [pc, #552]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 80020e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8108 	beq.w	8002302 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	f040 80d0 	bne.w	800229c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020fc:	4b83      	ldr	r3, [pc, #524]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	429a      	cmp	r2, r3
 800210e:	d130      	bne.n	8002172 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	3b01      	subs	r3, #1
 800211c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d127      	bne.n	8002172 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d11f      	bne.n	8002172 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800213c:	2a07      	cmp	r2, #7
 800213e:	bf14      	ite	ne
 8002140:	2201      	movne	r2, #1
 8002142:	2200      	moveq	r2, #0
 8002144:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002146:	4293      	cmp	r3, r2
 8002148:	d113      	bne.n	8002172 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002154:	085b      	lsrs	r3, r3, #1
 8002156:	3b01      	subs	r3, #1
 8002158:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d109      	bne.n	8002172 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	085b      	lsrs	r3, r3, #1
 800216a:	3b01      	subs	r3, #1
 800216c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d06e      	beq.n	8002250 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b0c      	cmp	r3, #12
 8002176:	d069      	beq.n	800224c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002178:	4b64      	ldr	r3, [pc, #400]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002184:	4b61      	ldr	r3, [pc, #388]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0b7      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002194:	4b5d      	ldr	r3, [pc, #372]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a5c      	ldr	r2, [pc, #368]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 800219a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800219e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021a0:	f7ff f90c 	bl	80013bc <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff f908 	bl	80013bc <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0a4      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ba:	4b54      	ldr	r3, [pc, #336]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c6:	4b51      	ldr	r3, [pc, #324]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	4b51      	ldr	r3, [pc, #324]	; (8002310 <HAL_RCC_OscConfig+0x7c8>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021d6:	3a01      	subs	r2, #1
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	4311      	orrs	r1, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021e0:	0212      	lsls	r2, r2, #8
 80021e2:	4311      	orrs	r1, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021e8:	0852      	lsrs	r2, r2, #1
 80021ea:	3a01      	subs	r2, #1
 80021ec:	0552      	lsls	r2, r2, #21
 80021ee:	4311      	orrs	r1, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021f4:	0852      	lsrs	r2, r2, #1
 80021f6:	3a01      	subs	r2, #1
 80021f8:	0652      	lsls	r2, r2, #25
 80021fa:	4311      	orrs	r1, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002200:	0912      	lsrs	r2, r2, #4
 8002202:	0452      	lsls	r2, r2, #17
 8002204:	430a      	orrs	r2, r1
 8002206:	4941      	ldr	r1, [pc, #260]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 8002208:	4313      	orrs	r3, r2
 800220a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800220c:	4b3f      	ldr	r3, [pc, #252]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a3e      	ldr	r2, [pc, #248]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 8002212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002216:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002218:	4b3c      	ldr	r3, [pc, #240]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a3b      	ldr	r2, [pc, #236]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 800221e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002222:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002224:	f7ff f8ca 	bl	80013bc <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7ff f8c6 	bl	80013bc <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e062      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223e:	4b33      	ldr	r3, [pc, #204]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800224a:	e05a      	b.n	8002302 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e059      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002250:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d152      	bne.n	8002302 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2a      	ldr	r2, [pc, #168]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 8002262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002266:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002268:	4b28      	ldr	r3, [pc, #160]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a27      	ldr	r2, [pc, #156]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 800226e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002272:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002274:	f7ff f8a2 	bl	80013bc <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227c:	f7ff f89e 	bl	80013bc <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e03a      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228e:	4b1f      	ldr	r3, [pc, #124]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x734>
 800229a:	e032      	b.n	8002302 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2b0c      	cmp	r3, #12
 80022a0:	d02d      	beq.n	80022fe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a2:	4b1a      	ldr	r3, [pc, #104]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a19      	ldr	r2, [pc, #100]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 80022a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80022ae:	4b17      	ldr	r3, [pc, #92]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d105      	bne.n	80022c6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022ba:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	4a13      	ldr	r2, [pc, #76]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 80022c0:	f023 0303 	bic.w	r3, r3, #3
 80022c4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	4a10      	ldr	r2, [pc, #64]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 80022cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7ff f871 	bl	80013bc <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7ff f86d 	bl	80013bc <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e009      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_OscConfig+0x7c4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f0      	bne.n	80022de <HAL_RCC_OscConfig+0x796>
 80022fc:	e001      	b.n	8002302 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3720      	adds	r7, #32
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	f99d808c 	.word	0xf99d808c

08002314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0c8      	b.n	80024ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002328:	4b66      	ldr	r3, [pc, #408]	; (80024c4 <HAL_RCC_ClockConfig+0x1b0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d910      	bls.n	8002358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	4b63      	ldr	r3, [pc, #396]	; (80024c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 0207 	bic.w	r2, r3, #7
 800233e:	4961      	ldr	r1, [pc, #388]	; (80024c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b5f      	ldr	r3, [pc, #380]	; (80024c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0b0      	b.n	80024ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d04c      	beq.n	80023fe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d107      	bne.n	800237c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236c:	4b56      	ldr	r3, [pc, #344]	; (80024c8 <HAL_RCC_ClockConfig+0x1b4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d121      	bne.n	80023bc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e09e      	b.n	80024ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d107      	bne.n	8002394 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002384:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d115      	bne.n	80023bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e092      	b.n	80024ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d107      	bne.n	80023ac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800239c:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <HAL_RCC_ClockConfig+0x1b4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d109      	bne.n	80023bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e086      	b.n	80024ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ac:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <HAL_RCC_ClockConfig+0x1b4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e07e      	b.n	80024ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023bc:	4b42      	ldr	r3, [pc, #264]	; (80024c8 <HAL_RCC_ClockConfig+0x1b4>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f023 0203 	bic.w	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	493f      	ldr	r1, [pc, #252]	; (80024c8 <HAL_RCC_ClockConfig+0x1b4>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ce:	f7fe fff5 	bl	80013bc <HAL_GetTick>
 80023d2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d6:	f7fe fff1 	bl	80013bc <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e066      	b.n	80024ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ec:	4b36      	ldr	r3, [pc, #216]	; (80024c8 <HAL_RCC_ClockConfig+0x1b4>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 020c 	and.w	r2, r3, #12
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d1eb      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d008      	beq.n	800241c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240a:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <HAL_RCC_ClockConfig+0x1b4>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	492c      	ldr	r1, [pc, #176]	; (80024c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <HAL_RCC_ClockConfig+0x1b0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d210      	bcs.n	800244c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <HAL_RCC_ClockConfig+0x1b0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 0207 	bic.w	r2, r3, #7
 8002432:	4924      	ldr	r1, [pc, #144]	; (80024c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_RCC_ClockConfig+0x1b0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e036      	b.n	80024ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_RCC_ClockConfig+0x1b4>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4918      	ldr	r1, [pc, #96]	; (80024c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002476:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4910      	ldr	r1, [pc, #64]	; (80024c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800248a:	f000 f825 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 800248e:	4602      	mov	r2, r0
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	490c      	ldr	r1, [pc, #48]	; (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	5ccb      	ldrb	r3, [r1, r3]
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fe6c 	bl	800118c <HAL_InitTick>
 80024b4:	4603      	mov	r3, r0
 80024b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80024b8:	7afb      	ldrb	r3, [r7, #11]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40022000 	.word	0x40022000
 80024c8:	40021000 	.word	0x40021000
 80024cc:	080091dc 	.word	0x080091dc
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000004 	.word	0x20000004

080024d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	; 0x24
 80024dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e6:	4b3e      	ldr	r3, [pc, #248]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f0:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x34>
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b0c      	cmp	r3, #12
 8002504:	d121      	bne.n	800254a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d11e      	bne.n	800254a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800250c:	4b34      	ldr	r3, [pc, #208]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d107      	bne.n	8002528 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002518:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800251a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	e005      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002528:	4b2d      	ldr	r3, [pc, #180]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002534:	4a2b      	ldr	r2, [pc, #172]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10d      	bne.n	8002560 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002548:	e00a      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d102      	bne.n	8002556 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002550:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	e004      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b08      	cmp	r3, #8
 800255a:	d101      	bne.n	8002560 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800255c:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_RCC_GetSysClockFreq+0x114>)
 800255e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	2b0c      	cmp	r3, #12
 8002564:	d134      	bne.n	80025d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002566:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d003      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0xa6>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d003      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0xac>
 800257c:	e005      	b.n	800258a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002580:	617b      	str	r3, [r7, #20]
      break;
 8002582:	e005      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002586:	617b      	str	r3, [r7, #20]
      break;
 8002588:	e002      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	617b      	str	r3, [r7, #20]
      break;
 800258e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	3301      	adds	r3, #1
 800259c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	fb02 f203 	mul.w	r2, r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	0e5b      	lsrs	r3, r3, #25
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	3301      	adds	r3, #1
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025d0:	69bb      	ldr	r3, [r7, #24]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
 80025e4:	080091f4 	.word	0x080091f4
 80025e8:	00f42400 	.word	0x00f42400
 80025ec:	007a1200 	.word	0x007a1200

080025f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_RCC_GetHCLKFreq+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000000 	.word	0x20000000

08002608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800260c:	f7ff fff0 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4904      	ldr	r1, [pc, #16]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x28>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	080091ec 	.word	0x080091ec

08002634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002638:	f7ff ffda 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 800263c:	4602      	mov	r2, r0
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	0adb      	lsrs	r3, r3, #11
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	4904      	ldr	r1, [pc, #16]	; (800265c <HAL_RCC_GetPCLK2Freq+0x28>)
 800264a:	5ccb      	ldrb	r3, [r1, r3]
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	080091ec 	.word	0x080091ec

08002660 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	220f      	movs	r2, #15
 800266e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_RCC_GetClockConfig+0x5c>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0203 	and.w	r2, r3, #3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <HAL_RCC_GetClockConfig+0x5c>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <HAL_RCC_GetClockConfig+0x5c>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_RCC_GetClockConfig+0x5c>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	08db      	lsrs	r3, r3, #3
 800269a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80026a2:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <HAL_RCC_GetClockConfig+0x60>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0207 	and.w	r2, r3, #7
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	601a      	str	r2, [r3, #0]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40022000 	.word	0x40022000

080026c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026d0:	4b2a      	ldr	r3, [pc, #168]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026dc:	f7ff f9d0 	bl	8001a80 <HAL_PWREx_GetVoltageRange>
 80026e0:	6178      	str	r0, [r7, #20]
 80026e2:	e014      	b.n	800270e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	4a24      	ldr	r2, [pc, #144]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6593      	str	r3, [r2, #88]	; 0x58
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026fc:	f7ff f9c0 	bl	8001a80 <HAL_PWREx_GetVoltageRange>
 8002700:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	4a1d      	ldr	r2, [pc, #116]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002714:	d10b      	bne.n	800272e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b80      	cmp	r3, #128	; 0x80
 800271a:	d919      	bls.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2ba0      	cmp	r3, #160	; 0xa0
 8002720:	d902      	bls.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002722:	2302      	movs	r3, #2
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	e013      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002728:	2301      	movs	r3, #1
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	e010      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b80      	cmp	r3, #128	; 0x80
 8002732:	d902      	bls.n	800273a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002734:	2303      	movs	r3, #3
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	e00a      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b80      	cmp	r3, #128	; 0x80
 800273e:	d102      	bne.n	8002746 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002740:	2302      	movs	r3, #2
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	e004      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b70      	cmp	r3, #112	; 0x70
 800274a:	d101      	bne.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800274c:	2301      	movs	r3, #1
 800274e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 0207 	bic.w	r2, r3, #7
 8002758:	4909      	ldr	r1, [pc, #36]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	40022000 	.word	0x40022000

08002784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800278c:	2300      	movs	r3, #0
 800278e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002790:	2300      	movs	r3, #0
 8002792:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800279c:	2b00      	cmp	r3, #0
 800279e:	d041      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027a8:	d02a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027ae:	d824      	bhi.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027b4:	d008      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027ba:	d81e      	bhi.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c4:	d010      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027c6:	e018      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027c8:	4b86      	ldr	r3, [pc, #536]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4a85      	ldr	r2, [pc, #532]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027d4:	e015      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3304      	adds	r3, #4
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fabb 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 80027e2:	4603      	mov	r3, r0
 80027e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027e6:	e00c      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3320      	adds	r3, #32
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fba6 	bl	8002f40 <RCCEx_PLLSAI2_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027f8:	e003      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	74fb      	strb	r3, [r7, #19]
      break;
 80027fe:	e000      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10b      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002808:	4b76      	ldr	r3, [pc, #472]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002816:	4973      	ldr	r1, [pc, #460]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800281e:	e001      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d041      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002834:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002838:	d02a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800283a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800283e:	d824      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002844:	d008      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800284a:	d81e      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002854:	d010      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002856:	e018      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002858:	4b62      	ldr	r3, [pc, #392]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a61      	ldr	r2, [pc, #388]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002862:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002864:	e015      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3304      	adds	r3, #4
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fa73 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002872:	4603      	mov	r3, r0
 8002874:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002876:	e00c      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3320      	adds	r3, #32
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fb5e 	bl	8002f40 <RCCEx_PLLSAI2_Config>
 8002884:	4603      	mov	r3, r0
 8002886:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002888:	e003      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	74fb      	strb	r3, [r7, #19]
      break;
 800288e:	e000      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002890:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10b      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002898:	4b52      	ldr	r3, [pc, #328]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a6:	494f      	ldr	r1, [pc, #316]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028ae:	e001      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80a0 	beq.w	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028d6:	2300      	movs	r3, #0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00d      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028dc:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	4a40      	ldr	r2, [pc, #256]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e6:	6593      	str	r3, [r2, #88]	; 0x58
 80028e8:	4b3e      	ldr	r3, [pc, #248]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f4:	2301      	movs	r3, #1
 80028f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f8:	4b3b      	ldr	r3, [pc, #236]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a3a      	ldr	r2, [pc, #232]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002902:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002904:	f7fe fd5a 	bl	80013bc <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800290a:	e009      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290c:	f7fe fd56 	bl	80013bc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d902      	bls.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	74fb      	strb	r3, [r7, #19]
        break;
 800291e:	e005      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002920:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0ef      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d15c      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002932:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01f      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	429a      	cmp	r2, r3
 800294e:	d019      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800295c:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	4a20      	ldr	r2, [pc, #128]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800296c:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800297c:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d016      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7fe fd15 	bl	80013bc <HAL_GetTick>
 8002992:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002994:	e00b      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7fe fd11 	bl	80013bc <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d902      	bls.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	74fb      	strb	r3, [r7, #19]
            break;
 80029ac:	e006      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0ec      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10c      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d2:	4904      	ldr	r1, [pc, #16]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029da:	e009      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	74bb      	strb	r3, [r7, #18]
 80029e0:	e006      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f0:	7c7b      	ldrb	r3, [r7, #17]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d105      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f6:	4b9e      	ldr	r3, [pc, #632]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	4a9d      	ldr	r2, [pc, #628]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a0e:	4b98      	ldr	r3, [pc, #608]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f023 0203 	bic.w	r2, r3, #3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1c:	4994      	ldr	r1, [pc, #592]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a30:	4b8f      	ldr	r3, [pc, #572]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f023 020c 	bic.w	r2, r3, #12
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	498c      	ldr	r1, [pc, #560]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a52:	4b87      	ldr	r3, [pc, #540]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	4983      	ldr	r1, [pc, #524]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a74:	4b7e      	ldr	r3, [pc, #504]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	497b      	ldr	r1, [pc, #492]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a96:	4b76      	ldr	r3, [pc, #472]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa4:	4972      	ldr	r1, [pc, #456]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ab8:	4b6d      	ldr	r3, [pc, #436]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	496a      	ldr	r1, [pc, #424]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ada:	4b65      	ldr	r3, [pc, #404]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	4961      	ldr	r1, [pc, #388]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002afc:	4b5c      	ldr	r3, [pc, #368]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0a:	4959      	ldr	r1, [pc, #356]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b1e:	4b54      	ldr	r3, [pc, #336]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2c:	4950      	ldr	r1, [pc, #320]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b40:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	4948      	ldr	r1, [pc, #288]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b62:	4b43      	ldr	r3, [pc, #268]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	493f      	ldr	r1, [pc, #252]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d028      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b84:	4b3a      	ldr	r3, [pc, #232]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b92:	4937      	ldr	r1, [pc, #220]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba4:	4b32      	ldr	r3, [pc, #200]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a31      	ldr	r2, [pc, #196]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bae:	60d3      	str	r3, [r2, #12]
 8002bb0:	e011      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f8c8 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d028      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002be2:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	491f      	ldr	r1, [pc, #124]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c00:	d106      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	4a1a      	ldr	r2, [pc, #104]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c0c:	60d3      	str	r3, [r2, #12]
 8002c0e:	e011      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2101      	movs	r1, #1
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 f899 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d02b      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4e:	4908      	ldr	r1, [pc, #32]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c5e:	d109      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4a02      	ldr	r2, [pc, #8]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c6a:	60d3      	str	r3, [r2, #12]
 8002c6c:	e014      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3304      	adds	r3, #4
 8002c82:	2101      	movs	r1, #1
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 f867 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c8e:	7cfb      	ldrb	r3, [r7, #19]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d02f      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb2:	4928      	ldr	r1, [pc, #160]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cc2:	d10d      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	2102      	movs	r1, #2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f844 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d014      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	74bb      	strb	r3, [r7, #18]
 8002cde:	e011      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3320      	adds	r3, #32
 8002cee:	2102      	movs	r1, #2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 f925 	bl	8002f40 <RCCEx_PLLSAI2_Config>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cfa:	7cfb      	ldrb	r3, [r7, #19]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d1e:	490d      	ldr	r1, [pc, #52]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d42:	4904      	ldr	r1, [pc, #16]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000

08002d58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d66:	4b75      	ldr	r3, [pc, #468]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d018      	beq.n	8002da4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d72:	4b72      	ldr	r3, [pc, #456]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0203 	and.w	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d10d      	bne.n	8002d9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
       ||
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d8a:	4b6c      	ldr	r3, [pc, #432]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
       ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d047      	beq.n	8002e2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
 8002da2:	e044      	b.n	8002e2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d018      	beq.n	8002dde <RCCEx_PLLSAI1_Config+0x86>
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d825      	bhi.n	8002dfc <RCCEx_PLLSAI1_Config+0xa4>
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d002      	beq.n	8002dba <RCCEx_PLLSAI1_Config+0x62>
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d009      	beq.n	8002dcc <RCCEx_PLLSAI1_Config+0x74>
 8002db8:	e020      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dba:	4b60      	ldr	r3, [pc, #384]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d11d      	bne.n	8002e02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dca:	e01a      	b.n	8002e02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dcc:	4b5b      	ldr	r3, [pc, #364]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d116      	bne.n	8002e06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ddc:	e013      	b.n	8002e06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dde:	4b57      	ldr	r3, [pc, #348]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10f      	bne.n	8002e0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dea:	4b54      	ldr	r3, [pc, #336]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dfa:	e006      	b.n	8002e0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002e00:	e004      	b.n	8002e0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e02:	bf00      	nop
 8002e04:	e002      	b.n	8002e0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e06:	bf00      	nop
 8002e08:	e000      	b.n	8002e0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10d      	bne.n	8002e2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e12:	4b4a      	ldr	r3, [pc, #296]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6819      	ldr	r1, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	430b      	orrs	r3, r1
 8002e28:	4944      	ldr	r1, [pc, #272]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d17d      	bne.n	8002f30 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e34:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a40      	ldr	r2, [pc, #256]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e40:	f7fe fabc 	bl	80013bc <HAL_GetTick>
 8002e44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e46:	e009      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e48:	f7fe fab8 	bl	80013bc <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d902      	bls.n	8002e5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	73fb      	strb	r3, [r7, #15]
        break;
 8002e5a:	e005      	b.n	8002e68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e5c:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ef      	bne.n	8002e48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d160      	bne.n	8002f30 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d111      	bne.n	8002e98 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6892      	ldr	r2, [r2, #8]
 8002e84:	0211      	lsls	r1, r2, #8
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68d2      	ldr	r2, [r2, #12]
 8002e8a:	0912      	lsrs	r2, r2, #4
 8002e8c:	0452      	lsls	r2, r2, #17
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	492a      	ldr	r1, [pc, #168]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	610b      	str	r3, [r1, #16]
 8002e96:	e027      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d112      	bne.n	8002ec4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e9e:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ea6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6892      	ldr	r2, [r2, #8]
 8002eae:	0211      	lsls	r1, r2, #8
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6912      	ldr	r2, [r2, #16]
 8002eb4:	0852      	lsrs	r2, r2, #1
 8002eb6:	3a01      	subs	r2, #1
 8002eb8:	0552      	lsls	r2, r2, #21
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	491f      	ldr	r1, [pc, #124]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	610b      	str	r3, [r1, #16]
 8002ec2:	e011      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ecc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6892      	ldr	r2, [r2, #8]
 8002ed4:	0211      	lsls	r1, r2, #8
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6952      	ldr	r2, [r2, #20]
 8002eda:	0852      	lsrs	r2, r2, #1
 8002edc:	3a01      	subs	r2, #1
 8002ede:	0652      	lsls	r2, r2, #25
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	4916      	ldr	r1, [pc, #88]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ee8:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ef2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe fa62 	bl	80013bc <HAL_GetTick>
 8002ef8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002efa:	e009      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002efc:	f7fe fa5e 	bl	80013bc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d902      	bls.n	8002f10 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f0e:	e005      	b.n	8002f1c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ef      	beq.n	8002efc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	4904      	ldr	r1, [pc, #16]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000

08002f40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f4e:	4b6a      	ldr	r3, [pc, #424]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d018      	beq.n	8002f8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f5a:	4b67      	ldr	r3, [pc, #412]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0203 	and.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d10d      	bne.n	8002f86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f72:	4b61      	ldr	r3, [pc, #388]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
       ||
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d047      	beq.n	8003016 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	e044      	b.n	8003016 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d018      	beq.n	8002fc6 <RCCEx_PLLSAI2_Config+0x86>
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d825      	bhi.n	8002fe4 <RCCEx_PLLSAI2_Config+0xa4>
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d002      	beq.n	8002fa2 <RCCEx_PLLSAI2_Config+0x62>
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d009      	beq.n	8002fb4 <RCCEx_PLLSAI2_Config+0x74>
 8002fa0:	e020      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fa2:	4b55      	ldr	r3, [pc, #340]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d11d      	bne.n	8002fea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb2:	e01a      	b.n	8002fea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fb4:	4b50      	ldr	r3, [pc, #320]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d116      	bne.n	8002fee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc4:	e013      	b.n	8002fee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fc6:	4b4c      	ldr	r3, [pc, #304]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fd2:	4b49      	ldr	r3, [pc, #292]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fe2:	e006      	b.n	8002ff2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe8:	e004      	b.n	8002ff4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fea:	bf00      	nop
 8002fec:	e002      	b.n	8002ff4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e000      	b.n	8002ff4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ff2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10d      	bne.n	8003016 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ffa:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6819      	ldr	r1, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	430b      	orrs	r3, r1
 8003010:	4939      	ldr	r1, [pc, #228]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003012:	4313      	orrs	r3, r2
 8003014:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d167      	bne.n	80030ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800301c:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a35      	ldr	r2, [pc, #212]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003028:	f7fe f9c8 	bl	80013bc <HAL_GetTick>
 800302c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800302e:	e009      	b.n	8003044 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003030:	f7fe f9c4 	bl	80013bc <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d902      	bls.n	8003044 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	73fb      	strb	r3, [r7, #15]
        break;
 8003042:	e005      	b.n	8003050 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003044:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ef      	bne.n	8003030 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d14a      	bne.n	80030ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d111      	bne.n	8003080 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800305c:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6892      	ldr	r2, [r2, #8]
 800306c:	0211      	lsls	r1, r2, #8
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68d2      	ldr	r2, [r2, #12]
 8003072:	0912      	lsrs	r2, r2, #4
 8003074:	0452      	lsls	r2, r2, #17
 8003076:	430a      	orrs	r2, r1
 8003078:	491f      	ldr	r1, [pc, #124]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307a:	4313      	orrs	r3, r2
 800307c:	614b      	str	r3, [r1, #20]
 800307e:	e011      	b.n	80030a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003088:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6892      	ldr	r2, [r2, #8]
 8003090:	0211      	lsls	r1, r2, #8
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6912      	ldr	r2, [r2, #16]
 8003096:	0852      	lsrs	r2, r2, #1
 8003098:	3a01      	subs	r2, #1
 800309a:	0652      	lsls	r2, r2, #25
 800309c:	430a      	orrs	r2, r1
 800309e:	4916      	ldr	r1, [pc, #88]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a13      	ldr	r2, [pc, #76]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fe f984 	bl	80013bc <HAL_GetTick>
 80030b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030b6:	e009      	b.n	80030cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030b8:	f7fe f980 	bl	80013bc <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d902      	bls.n	80030cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	73fb      	strb	r3, [r7, #15]
          break;
 80030ca:	e005      	b.n	80030d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ef      	beq.n	80030b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	4904      	ldr	r1, [pc, #16]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000

080030fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e049      	b.n	80031a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f841 	bl	80031aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3304      	adds	r3, #4
 8003138:	4619      	mov	r1, r3
 800313a:	4610      	mov	r0, r2
 800313c:	f000 f9f8 	bl	8003530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d001      	beq.n	80031d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e04f      	b.n	8003278 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a23      	ldr	r2, [pc, #140]	; (8003284 <HAL_TIM_Base_Start_IT+0xc4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d01d      	beq.n	8003236 <HAL_TIM_Base_Start_IT+0x76>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003202:	d018      	beq.n	8003236 <HAL_TIM_Base_Start_IT+0x76>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <HAL_TIM_Base_Start_IT+0xc8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d013      	beq.n	8003236 <HAL_TIM_Base_Start_IT+0x76>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1e      	ldr	r2, [pc, #120]	; (800328c <HAL_TIM_Base_Start_IT+0xcc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00e      	beq.n	8003236 <HAL_TIM_Base_Start_IT+0x76>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1c      	ldr	r2, [pc, #112]	; (8003290 <HAL_TIM_Base_Start_IT+0xd0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d009      	beq.n	8003236 <HAL_TIM_Base_Start_IT+0x76>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1b      	ldr	r2, [pc, #108]	; (8003294 <HAL_TIM_Base_Start_IT+0xd4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d004      	beq.n	8003236 <HAL_TIM_Base_Start_IT+0x76>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a19      	ldr	r2, [pc, #100]	; (8003298 <HAL_TIM_Base_Start_IT+0xd8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d115      	bne.n	8003262 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	4b17      	ldr	r3, [pc, #92]	; (800329c <HAL_TIM_Base_Start_IT+0xdc>)
 800323e:	4013      	ands	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b06      	cmp	r3, #6
 8003246:	d015      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0xb4>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324e:	d011      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003260:	e008      	b.n	8003274 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0201 	orr.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e000      	b.n	8003276 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40000c00 	.word	0x40000c00
 8003294:	40013400 	.word	0x40013400
 8003298:	40014000 	.word	0x40014000
 800329c:	00010007 	.word	0x00010007

080032a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d122      	bne.n	80032fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d11b      	bne.n	80032fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0202 	mvn.w	r2, #2
 80032cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f905 	bl	80034f2 <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f8f7 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f908 	bl	8003506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b04      	cmp	r3, #4
 8003308:	d122      	bne.n	8003350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b04      	cmp	r3, #4
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0204 	mvn.w	r2, #4
 8003320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f8db 	bl	80034f2 <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8cd 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f8de 	bl	8003506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b08      	cmp	r3, #8
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b08      	cmp	r3, #8
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0208 	mvn.w	r2, #8
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2204      	movs	r2, #4
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f8b1 	bl	80034f2 <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8a3 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f8b4 	bl	8003506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0210 	mvn.w	r2, #16
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2208      	movs	r2, #8
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f887 	bl	80034f2 <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f879 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f88a 	bl	8003506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d10e      	bne.n	8003424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d107      	bne.n	8003424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0201 	mvn.w	r2, #1
 800341c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fd fe18 	bl	8001054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b80      	cmp	r3, #128	; 0x80
 8003430:	d10e      	bne.n	8003450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d107      	bne.n	8003450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f914 	bl	8003678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800345e:	d10e      	bne.n	800347e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346a:	2b80      	cmp	r3, #128	; 0x80
 800346c:	d107      	bne.n	800347e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f907 	bl	800368c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003488:	2b40      	cmp	r3, #64	; 0x40
 800348a:	d10e      	bne.n	80034aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003496:	2b40      	cmp	r3, #64	; 0x40
 8003498:	d107      	bne.n	80034aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f838 	bl	800351a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d10e      	bne.n	80034d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d107      	bne.n	80034d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f06f 0220 	mvn.w	r2, #32
 80034ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f8c7 	bl	8003664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a40      	ldr	r2, [pc, #256]	; (8003644 <TIM_Base_SetConfig+0x114>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d013      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354e:	d00f      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a3d      	ldr	r2, [pc, #244]	; (8003648 <TIM_Base_SetConfig+0x118>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00b      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a3c      	ldr	r2, [pc, #240]	; (800364c <TIM_Base_SetConfig+0x11c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d007      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a3b      	ldr	r2, [pc, #236]	; (8003650 <TIM_Base_SetConfig+0x120>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d003      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a3a      	ldr	r2, [pc, #232]	; (8003654 <TIM_Base_SetConfig+0x124>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d108      	bne.n	8003582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a2f      	ldr	r2, [pc, #188]	; (8003644 <TIM_Base_SetConfig+0x114>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01f      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003590:	d01b      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <TIM_Base_SetConfig+0x118>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d017      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a2b      	ldr	r2, [pc, #172]	; (800364c <TIM_Base_SetConfig+0x11c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <TIM_Base_SetConfig+0x120>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00f      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a29      	ldr	r2, [pc, #164]	; (8003654 <TIM_Base_SetConfig+0x124>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00b      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a28      	ldr	r2, [pc, #160]	; (8003658 <TIM_Base_SetConfig+0x128>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d007      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a27      	ldr	r2, [pc, #156]	; (800365c <TIM_Base_SetConfig+0x12c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <TIM_Base_SetConfig+0x9a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a26      	ldr	r2, [pc, #152]	; (8003660 <TIM_Base_SetConfig+0x130>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d108      	bne.n	80035dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a10      	ldr	r2, [pc, #64]	; (8003644 <TIM_Base_SetConfig+0x114>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00f      	beq.n	8003628 <TIM_Base_SetConfig+0xf8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a12      	ldr	r2, [pc, #72]	; (8003654 <TIM_Base_SetConfig+0x124>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00b      	beq.n	8003628 <TIM_Base_SetConfig+0xf8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a11      	ldr	r2, [pc, #68]	; (8003658 <TIM_Base_SetConfig+0x128>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d007      	beq.n	8003628 <TIM_Base_SetConfig+0xf8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a10      	ldr	r2, [pc, #64]	; (800365c <TIM_Base_SetConfig+0x12c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_Base_SetConfig+0xf8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a0f      	ldr	r2, [pc, #60]	; (8003660 <TIM_Base_SetConfig+0x130>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d103      	bne.n	8003630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	615a      	str	r2, [r3, #20]
}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	40000c00 	.word	0x40000c00
 8003654:	40013400 	.word	0x40013400
 8003658:	40014000 	.word	0x40014000
 800365c:	40014400 	.word	0x40014400
 8003660:	40014800 	.word	0x40014800

08003664 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e040      	b.n	8003734 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fd fd06 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2224      	movs	r2, #36	; 0x24
 80036cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fae4 	bl	8003cac <UART_SetConfig>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e022      	b.n	8003734 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fd62 	bl	80041c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800370a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800371a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fde9 	bl	8004304 <UART_CheckIdleState>
 8003732:	4603      	mov	r3, r0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800374e:	2b20      	cmp	r3, #32
 8003750:	d145      	bne.n	80037de <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_UART_Transmit_IT+0x22>
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e03e      	b.n	80037e0 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_UART_Transmit_IT+0x34>
 800376c:	2302      	movs	r3, #2
 800376e:	e037      	b.n	80037e0 <HAL_UART_Transmit_IT+0xa4>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	88fa      	ldrh	r2, [r7, #6]
 8003782:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	88fa      	ldrh	r2, [r7, #6]
 800378a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2221      	movs	r2, #33	; 0x21
 80037a0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037aa:	d107      	bne.n	80037bc <HAL_UART_Transmit_IT+0x80>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d103      	bne.n	80037bc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a0d      	ldr	r2, [pc, #52]	; (80037ec <HAL_UART_Transmit_IT+0xb0>)
 80037b8:	669a      	str	r2, [r3, #104]	; 0x68
 80037ba:	e002      	b.n	80037c2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a0c      	ldr	r2, [pc, #48]	; (80037f0 <HAL_UART_Transmit_IT+0xb4>)
 80037c0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	0800469f 	.word	0x0800469f
 80037f0:	0800462b 	.word	0x0800462b

080037f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003806:	2b20      	cmp	r3, #32
 8003808:	d131      	bne.n	800386e <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <HAL_UART_Receive_IT+0x22>
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e02a      	b.n	8003870 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_UART_Receive_IT+0x34>
 8003824:	2302      	movs	r3, #2
 8003826:	e023      	b.n	8003870 <HAL_UART_Receive_IT+0x7c>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a0f      	ldr	r2, [pc, #60]	; (8003878 <HAL_UART_Receive_IT+0x84>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00e      	beq.n	800385e <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800385c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	461a      	mov	r2, r3
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fe13 	bl	8004490 <UART_Start_Receive_IT>
 800386a:	4603      	mov	r3, r0
 800386c:	e000      	b.n	8003870 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800386e:	2302      	movs	r3, #2
  }
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40008000 	.word	0x40008000

0800387c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	f640 030f 	movw	r3, #2063	; 0x80f
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d113      	bne.n	80038d4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00e      	beq.n	80038d4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d009      	beq.n	80038d4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 81ce 	beq.w	8003c66 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
      }
      return;
 80038d2:	e1c8      	b.n	8003c66 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80e3 	beq.w	8003aa2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4ba6      	ldr	r3, [pc, #664]	; (8003b84 <HAL_UART_IRQHandler+0x308>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80d8 	beq.w	8003aa2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d010      	beq.n	800391e <HAL_UART_IRQHandler+0xa2>
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00b      	beq.n	800391e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2201      	movs	r2, #1
 800390c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003914:	f043 0201 	orr.w	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <HAL_UART_IRQHandler+0xce>
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2202      	movs	r2, #2
 8003938:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003940:	f043 0204 	orr.w	r2, r3, #4
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <HAL_UART_IRQHandler+0xfa>
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2204      	movs	r2, #4
 8003964:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800396c:	f043 0202 	orr.w	r2, r3, #2
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d015      	beq.n	80039ac <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00b      	beq.n	80039ac <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2208      	movs	r2, #8
 800399a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a2:	f043 0208 	orr.w	r2, r3, #8
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d011      	beq.n	80039da <HAL_UART_IRQHandler+0x15e>
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00c      	beq.n	80039da <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8142 	beq.w	8003c6a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00c      	beq.n	8003a0a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a10:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1c:	2b40      	cmp	r3, #64	; 0x40
 8003a1e:	d004      	beq.n	8003a2a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d031      	beq.n	8003a8e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fdb8 	bl	80045a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d123      	bne.n	8003a86 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d013      	beq.n	8003a7e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	4a4b      	ldr	r2, [pc, #300]	; (8003b88 <HAL_UART_IRQHandler+0x30c>)
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd fdd6 	bl	8001614 <HAL_DMA_Abort_IT>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d017      	beq.n	8003a9e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	e00f      	b.n	8003a9e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8fe 	bl	8003c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a84:	e00b      	b.n	8003a9e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8fa 	bl	8003c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	e007      	b.n	8003a9e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f8f6 	bl	8003c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003a9c:	e0e5      	b.n	8003c6a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9e:	bf00      	nop
    return;
 8003aa0:	e0e3      	b.n	8003c6a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	f040 80a9 	bne.w	8003bfe <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80a3 	beq.w	8003bfe <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 809d 	beq.w	8003bfe <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2210      	movs	r2, #16
 8003aca:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b40      	cmp	r3, #64	; 0x40
 8003ad8:	d158      	bne.n	8003b8c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003ae4:	893b      	ldrh	r3, [r7, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80c1 	beq.w	8003c6e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003af2:	893a      	ldrh	r2, [r7, #8]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	f080 80ba 	bcs.w	8003c6e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	893a      	ldrh	r2, [r7, #8]
 8003afe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d12a      	bne.n	8003b68 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b20:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b40:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0210 	bic.w	r2, r2, #16
 8003b5c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fd fd18 	bl	8001598 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f889 	bl	8003c94 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b82:	e074      	b.n	8003c6e <HAL_UART_IRQHandler+0x3f2>
 8003b84:	04000120 	.word	0x04000120
 8003b88:	080045ff 	.word	0x080045ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d063      	beq.n	8003c72 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003baa:	897b      	ldrh	r3, [r7, #10]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d060      	beq.n	8003c72 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bbe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0210 	bic.w	r2, r2, #16
 8003bf0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bf2:	897b      	ldrh	r3, [r7, #10]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f84c 	bl	8003c94 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bfc:	e039      	b.n	8003c72 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00d      	beq.n	8003c24 <HAL_UART_IRQHandler+0x3a8>
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fe6d 	bl	80048fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c22:	e029      	b.n	8003c78 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00d      	beq.n	8003c4a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01a      	beq.n	8003c76 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4798      	blx	r3
    }
    return;
 8003c48:	e015      	b.n	8003c76 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d011      	beq.n	8003c78 <HAL_UART_IRQHandler+0x3fc>
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00c      	beq.n	8003c78 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fd5b 	bl	800471a <UART_EndTransmit_IT>
    return;
 8003c64:	e008      	b.n	8003c78 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003c66:	bf00      	nop
 8003c68:	e006      	b.n	8003c78 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003c6a:	bf00      	nop
 8003c6c:	e004      	b.n	8003c78 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003c6e:	bf00      	nop
 8003c70:	e002      	b.n	8003c78 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003c72:	bf00      	nop
 8003c74:	e000      	b.n	8003c78 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003c76:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop

08003c80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cac:	b5b0      	push	{r4, r5, r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4bad      	ldr	r3, [pc, #692]	; (8003f8c <UART_SetConfig+0x2e0>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	69f9      	ldr	r1, [r7, #28]
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4aa2      	ldr	r2, [pc, #648]	; (8003f90 <UART_SetConfig+0x2e4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d004      	beq.n	8003d14 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a99      	ldr	r2, [pc, #612]	; (8003f94 <UART_SetConfig+0x2e8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d121      	bne.n	8003d76 <UART_SetConfig+0xca>
 8003d32:	4b99      	ldr	r3, [pc, #612]	; (8003f98 <UART_SetConfig+0x2ec>)
 8003d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d817      	bhi.n	8003d70 <UART_SetConfig+0xc4>
 8003d40:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <UART_SetConfig+0x9c>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d59 	.word	0x08003d59
 8003d4c:	08003d65 	.word	0x08003d65
 8003d50:	08003d5f 	.word	0x08003d5f
 8003d54:	08003d6b 	.word	0x08003d6b
 8003d58:	2301      	movs	r3, #1
 8003d5a:	76fb      	strb	r3, [r7, #27]
 8003d5c:	e0e7      	b.n	8003f2e <UART_SetConfig+0x282>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	76fb      	strb	r3, [r7, #27]
 8003d62:	e0e4      	b.n	8003f2e <UART_SetConfig+0x282>
 8003d64:	2304      	movs	r3, #4
 8003d66:	76fb      	strb	r3, [r7, #27]
 8003d68:	e0e1      	b.n	8003f2e <UART_SetConfig+0x282>
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	76fb      	strb	r3, [r7, #27]
 8003d6e:	e0de      	b.n	8003f2e <UART_SetConfig+0x282>
 8003d70:	2310      	movs	r3, #16
 8003d72:	76fb      	strb	r3, [r7, #27]
 8003d74:	e0db      	b.n	8003f2e <UART_SetConfig+0x282>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a88      	ldr	r2, [pc, #544]	; (8003f9c <UART_SetConfig+0x2f0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d132      	bne.n	8003de6 <UART_SetConfig+0x13a>
 8003d80:	4b85      	ldr	r3, [pc, #532]	; (8003f98 <UART_SetConfig+0x2ec>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b0c      	cmp	r3, #12
 8003d8c:	d828      	bhi.n	8003de0 <UART_SetConfig+0x134>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <UART_SetConfig+0xe8>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003dc9 	.word	0x08003dc9
 8003d98:	08003de1 	.word	0x08003de1
 8003d9c:	08003de1 	.word	0x08003de1
 8003da0:	08003de1 	.word	0x08003de1
 8003da4:	08003dd5 	.word	0x08003dd5
 8003da8:	08003de1 	.word	0x08003de1
 8003dac:	08003de1 	.word	0x08003de1
 8003db0:	08003de1 	.word	0x08003de1
 8003db4:	08003dcf 	.word	0x08003dcf
 8003db8:	08003de1 	.word	0x08003de1
 8003dbc:	08003de1 	.word	0x08003de1
 8003dc0:	08003de1 	.word	0x08003de1
 8003dc4:	08003ddb 	.word	0x08003ddb
 8003dc8:	2300      	movs	r3, #0
 8003dca:	76fb      	strb	r3, [r7, #27]
 8003dcc:	e0af      	b.n	8003f2e <UART_SetConfig+0x282>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	76fb      	strb	r3, [r7, #27]
 8003dd2:	e0ac      	b.n	8003f2e <UART_SetConfig+0x282>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	76fb      	strb	r3, [r7, #27]
 8003dd8:	e0a9      	b.n	8003f2e <UART_SetConfig+0x282>
 8003dda:	2308      	movs	r3, #8
 8003ddc:	76fb      	strb	r3, [r7, #27]
 8003dde:	e0a6      	b.n	8003f2e <UART_SetConfig+0x282>
 8003de0:	2310      	movs	r3, #16
 8003de2:	76fb      	strb	r3, [r7, #27]
 8003de4:	e0a3      	b.n	8003f2e <UART_SetConfig+0x282>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a6d      	ldr	r2, [pc, #436]	; (8003fa0 <UART_SetConfig+0x2f4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d120      	bne.n	8003e32 <UART_SetConfig+0x186>
 8003df0:	4b69      	ldr	r3, [pc, #420]	; (8003f98 <UART_SetConfig+0x2ec>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dfa:	2b30      	cmp	r3, #48	; 0x30
 8003dfc:	d013      	beq.n	8003e26 <UART_SetConfig+0x17a>
 8003dfe:	2b30      	cmp	r3, #48	; 0x30
 8003e00:	d814      	bhi.n	8003e2c <UART_SetConfig+0x180>
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d009      	beq.n	8003e1a <UART_SetConfig+0x16e>
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	d810      	bhi.n	8003e2c <UART_SetConfig+0x180>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <UART_SetConfig+0x168>
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d006      	beq.n	8003e20 <UART_SetConfig+0x174>
 8003e12:	e00b      	b.n	8003e2c <UART_SetConfig+0x180>
 8003e14:	2300      	movs	r3, #0
 8003e16:	76fb      	strb	r3, [r7, #27]
 8003e18:	e089      	b.n	8003f2e <UART_SetConfig+0x282>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	76fb      	strb	r3, [r7, #27]
 8003e1e:	e086      	b.n	8003f2e <UART_SetConfig+0x282>
 8003e20:	2304      	movs	r3, #4
 8003e22:	76fb      	strb	r3, [r7, #27]
 8003e24:	e083      	b.n	8003f2e <UART_SetConfig+0x282>
 8003e26:	2308      	movs	r3, #8
 8003e28:	76fb      	strb	r3, [r7, #27]
 8003e2a:	e080      	b.n	8003f2e <UART_SetConfig+0x282>
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	76fb      	strb	r3, [r7, #27]
 8003e30:	e07d      	b.n	8003f2e <UART_SetConfig+0x282>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a5b      	ldr	r2, [pc, #364]	; (8003fa4 <UART_SetConfig+0x2f8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d120      	bne.n	8003e7e <UART_SetConfig+0x1d2>
 8003e3c:	4b56      	ldr	r3, [pc, #344]	; (8003f98 <UART_SetConfig+0x2ec>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e46:	2bc0      	cmp	r3, #192	; 0xc0
 8003e48:	d013      	beq.n	8003e72 <UART_SetConfig+0x1c6>
 8003e4a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e4c:	d814      	bhi.n	8003e78 <UART_SetConfig+0x1cc>
 8003e4e:	2b80      	cmp	r3, #128	; 0x80
 8003e50:	d009      	beq.n	8003e66 <UART_SetConfig+0x1ba>
 8003e52:	2b80      	cmp	r3, #128	; 0x80
 8003e54:	d810      	bhi.n	8003e78 <UART_SetConfig+0x1cc>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <UART_SetConfig+0x1b4>
 8003e5a:	2b40      	cmp	r3, #64	; 0x40
 8003e5c:	d006      	beq.n	8003e6c <UART_SetConfig+0x1c0>
 8003e5e:	e00b      	b.n	8003e78 <UART_SetConfig+0x1cc>
 8003e60:	2300      	movs	r3, #0
 8003e62:	76fb      	strb	r3, [r7, #27]
 8003e64:	e063      	b.n	8003f2e <UART_SetConfig+0x282>
 8003e66:	2302      	movs	r3, #2
 8003e68:	76fb      	strb	r3, [r7, #27]
 8003e6a:	e060      	b.n	8003f2e <UART_SetConfig+0x282>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	76fb      	strb	r3, [r7, #27]
 8003e70:	e05d      	b.n	8003f2e <UART_SetConfig+0x282>
 8003e72:	2308      	movs	r3, #8
 8003e74:	76fb      	strb	r3, [r7, #27]
 8003e76:	e05a      	b.n	8003f2e <UART_SetConfig+0x282>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	76fb      	strb	r3, [r7, #27]
 8003e7c:	e057      	b.n	8003f2e <UART_SetConfig+0x282>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a49      	ldr	r2, [pc, #292]	; (8003fa8 <UART_SetConfig+0x2fc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d125      	bne.n	8003ed4 <UART_SetConfig+0x228>
 8003e88:	4b43      	ldr	r3, [pc, #268]	; (8003f98 <UART_SetConfig+0x2ec>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e96:	d017      	beq.n	8003ec8 <UART_SetConfig+0x21c>
 8003e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e9c:	d817      	bhi.n	8003ece <UART_SetConfig+0x222>
 8003e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea2:	d00b      	beq.n	8003ebc <UART_SetConfig+0x210>
 8003ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea8:	d811      	bhi.n	8003ece <UART_SetConfig+0x222>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <UART_SetConfig+0x20a>
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb2:	d006      	beq.n	8003ec2 <UART_SetConfig+0x216>
 8003eb4:	e00b      	b.n	8003ece <UART_SetConfig+0x222>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	76fb      	strb	r3, [r7, #27]
 8003eba:	e038      	b.n	8003f2e <UART_SetConfig+0x282>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	76fb      	strb	r3, [r7, #27]
 8003ec0:	e035      	b.n	8003f2e <UART_SetConfig+0x282>
 8003ec2:	2304      	movs	r3, #4
 8003ec4:	76fb      	strb	r3, [r7, #27]
 8003ec6:	e032      	b.n	8003f2e <UART_SetConfig+0x282>
 8003ec8:	2308      	movs	r3, #8
 8003eca:	76fb      	strb	r3, [r7, #27]
 8003ecc:	e02f      	b.n	8003f2e <UART_SetConfig+0x282>
 8003ece:	2310      	movs	r3, #16
 8003ed0:	76fb      	strb	r3, [r7, #27]
 8003ed2:	e02c      	b.n	8003f2e <UART_SetConfig+0x282>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a2d      	ldr	r2, [pc, #180]	; (8003f90 <UART_SetConfig+0x2e4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d125      	bne.n	8003f2a <UART_SetConfig+0x27e>
 8003ede:	4b2e      	ldr	r3, [pc, #184]	; (8003f98 <UART_SetConfig+0x2ec>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ee8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eec:	d017      	beq.n	8003f1e <UART_SetConfig+0x272>
 8003eee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ef2:	d817      	bhi.n	8003f24 <UART_SetConfig+0x278>
 8003ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef8:	d00b      	beq.n	8003f12 <UART_SetConfig+0x266>
 8003efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efe:	d811      	bhi.n	8003f24 <UART_SetConfig+0x278>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <UART_SetConfig+0x260>
 8003f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f08:	d006      	beq.n	8003f18 <UART_SetConfig+0x26c>
 8003f0a:	e00b      	b.n	8003f24 <UART_SetConfig+0x278>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	76fb      	strb	r3, [r7, #27]
 8003f10:	e00d      	b.n	8003f2e <UART_SetConfig+0x282>
 8003f12:	2302      	movs	r3, #2
 8003f14:	76fb      	strb	r3, [r7, #27]
 8003f16:	e00a      	b.n	8003f2e <UART_SetConfig+0x282>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	76fb      	strb	r3, [r7, #27]
 8003f1c:	e007      	b.n	8003f2e <UART_SetConfig+0x282>
 8003f1e:	2308      	movs	r3, #8
 8003f20:	76fb      	strb	r3, [r7, #27]
 8003f22:	e004      	b.n	8003f2e <UART_SetConfig+0x282>
 8003f24:	2310      	movs	r3, #16
 8003f26:	76fb      	strb	r3, [r7, #27]
 8003f28:	e001      	b.n	8003f2e <UART_SetConfig+0x282>
 8003f2a:	2310      	movs	r3, #16
 8003f2c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a17      	ldr	r2, [pc, #92]	; (8003f90 <UART_SetConfig+0x2e4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	f040 8087 	bne.w	8004048 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f3a:	7efb      	ldrb	r3, [r7, #27]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d837      	bhi.n	8003fb0 <UART_SetConfig+0x304>
 8003f40:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <UART_SetConfig+0x29c>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f6d 	.word	0x08003f6d
 8003f4c:	08003fb1 	.word	0x08003fb1
 8003f50:	08003f75 	.word	0x08003f75
 8003f54:	08003fb1 	.word	0x08003fb1
 8003f58:	08003f7b 	.word	0x08003f7b
 8003f5c:	08003fb1 	.word	0x08003fb1
 8003f60:	08003fb1 	.word	0x08003fb1
 8003f64:	08003fb1 	.word	0x08003fb1
 8003f68:	08003f83 	.word	0x08003f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f6c:	f7fe fb4c 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 8003f70:	6178      	str	r0, [r7, #20]
        break;
 8003f72:	e022      	b.n	8003fba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f74:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <UART_SetConfig+0x300>)
 8003f76:	617b      	str	r3, [r7, #20]
        break;
 8003f78:	e01f      	b.n	8003fba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f7a:	f7fe faad 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8003f7e:	6178      	str	r0, [r7, #20]
        break;
 8003f80:	e01b      	b.n	8003fba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f86:	617b      	str	r3, [r7, #20]
        break;
 8003f88:	e017      	b.n	8003fba <UART_SetConfig+0x30e>
 8003f8a:	bf00      	nop
 8003f8c:	efff69f3 	.word	0xefff69f3
 8003f90:	40008000 	.word	0x40008000
 8003f94:	40013800 	.word	0x40013800
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40004400 	.word	0x40004400
 8003fa0:	40004800 	.word	0x40004800
 8003fa4:	40004c00 	.word	0x40004c00
 8003fa8:	40005000 	.word	0x40005000
 8003fac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	76bb      	strb	r3, [r7, #26]
        break;
 8003fb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80f1 	beq.w	80041a4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4413      	add	r3, r2
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d305      	bcc.n	8003fde <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d902      	bls.n	8003fe4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	76bb      	strb	r3, [r7, #26]
 8003fe2:	e0df      	b.n	80041a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f04f 0100 	mov.w	r1, #0
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	020b      	lsls	r3, r1, #8
 8003ff6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ffa:	0202      	lsls	r2, r0, #8
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	6849      	ldr	r1, [r1, #4]
 8004000:	0849      	lsrs	r1, r1, #1
 8004002:	4608      	mov	r0, r1
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	1814      	adds	r4, r2, r0
 800400a:	eb43 0501 	adc.w	r5, r3, r1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	461a      	mov	r2, r3
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	4620      	mov	r0, r4
 800401a:	4629      	mov	r1, r5
 800401c:	f7fc f8e0 	bl	80001e0 <__aeabi_uldivmod>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4613      	mov	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402e:	d308      	bcc.n	8004042 <UART_SetConfig+0x396>
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004036:	d204      	bcs.n	8004042 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	60da      	str	r2, [r3, #12]
 8004040:	e0b0      	b.n	80041a4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	76bb      	strb	r3, [r7, #26]
 8004046:	e0ad      	b.n	80041a4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004050:	d15c      	bne.n	800410c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004052:	7efb      	ldrb	r3, [r7, #27]
 8004054:	2b08      	cmp	r3, #8
 8004056:	d828      	bhi.n	80040aa <UART_SetConfig+0x3fe>
 8004058:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <UART_SetConfig+0x3b4>)
 800405a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405e:	bf00      	nop
 8004060:	08004085 	.word	0x08004085
 8004064:	0800408d 	.word	0x0800408d
 8004068:	08004095 	.word	0x08004095
 800406c:	080040ab 	.word	0x080040ab
 8004070:	0800409b 	.word	0x0800409b
 8004074:	080040ab 	.word	0x080040ab
 8004078:	080040ab 	.word	0x080040ab
 800407c:	080040ab 	.word	0x080040ab
 8004080:	080040a3 	.word	0x080040a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004084:	f7fe fac0 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 8004088:	6178      	str	r0, [r7, #20]
        break;
 800408a:	e013      	b.n	80040b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800408c:	f7fe fad2 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 8004090:	6178      	str	r0, [r7, #20]
        break;
 8004092:	e00f      	b.n	80040b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004094:	4b49      	ldr	r3, [pc, #292]	; (80041bc <UART_SetConfig+0x510>)
 8004096:	617b      	str	r3, [r7, #20]
        break;
 8004098:	e00c      	b.n	80040b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800409a:	f7fe fa1d 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 800409e:	6178      	str	r0, [r7, #20]
        break;
 80040a0:	e008      	b.n	80040b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a6:	617b      	str	r3, [r7, #20]
        break;
 80040a8:	e004      	b.n	80040b4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	76bb      	strb	r3, [r7, #26]
        break;
 80040b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d074      	beq.n	80041a4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	005a      	lsls	r2, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	441a      	add	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b0f      	cmp	r3, #15
 80040d6:	d916      	bls.n	8004106 <UART_SetConfig+0x45a>
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040de:	d212      	bcs.n	8004106 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f023 030f 	bic.w	r3, r3, #15
 80040e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	085b      	lsrs	r3, r3, #1
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	89fb      	ldrh	r3, [r7, #14]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	89fa      	ldrh	r2, [r7, #14]
 8004102:	60da      	str	r2, [r3, #12]
 8004104:	e04e      	b.n	80041a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	76bb      	strb	r3, [r7, #26]
 800410a:	e04b      	b.n	80041a4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800410c:	7efb      	ldrb	r3, [r7, #27]
 800410e:	2b08      	cmp	r3, #8
 8004110:	d827      	bhi.n	8004162 <UART_SetConfig+0x4b6>
 8004112:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <UART_SetConfig+0x46c>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	0800413d 	.word	0x0800413d
 800411c:	08004145 	.word	0x08004145
 8004120:	0800414d 	.word	0x0800414d
 8004124:	08004163 	.word	0x08004163
 8004128:	08004153 	.word	0x08004153
 800412c:	08004163 	.word	0x08004163
 8004130:	08004163 	.word	0x08004163
 8004134:	08004163 	.word	0x08004163
 8004138:	0800415b 	.word	0x0800415b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800413c:	f7fe fa64 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 8004140:	6178      	str	r0, [r7, #20]
        break;
 8004142:	e013      	b.n	800416c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004144:	f7fe fa76 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 8004148:	6178      	str	r0, [r7, #20]
        break;
 800414a:	e00f      	b.n	800416c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <UART_SetConfig+0x510>)
 800414e:	617b      	str	r3, [r7, #20]
        break;
 8004150:	e00c      	b.n	800416c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004152:	f7fe f9c1 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8004156:	6178      	str	r0, [r7, #20]
        break;
 8004158:	e008      	b.n	800416c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800415e:	617b      	str	r3, [r7, #20]
        break;
 8004160:	e004      	b.n	800416c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	76bb      	strb	r3, [r7, #26]
        break;
 800416a:	bf00      	nop
    }

    if (pclk != 0U)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d018      	beq.n	80041a4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	085a      	lsrs	r2, r3, #1
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	441a      	add	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	b29b      	uxth	r3, r3
 8004186:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b0f      	cmp	r3, #15
 800418c:	d908      	bls.n	80041a0 <UART_SetConfig+0x4f4>
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004194:	d204      	bcs.n	80041a0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	e001      	b.n	80041a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3720      	adds	r7, #32
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bdb0      	pop	{r4, r5, r7, pc}
 80041ba:	bf00      	nop
 80041bc:	00f42400 	.word	0x00f42400

080041c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01a      	beq.n	80042d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042be:	d10a      	bne.n	80042d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
  }
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af02      	add	r7, sp, #8
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004314:	f7fd f852 	bl	80013bc <HAL_GetTick>
 8004318:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b08      	cmp	r3, #8
 8004326:	d10e      	bne.n	8004346 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f82d 	bl	8004396 <UART_WaitOnFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e023      	b.n	800438e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b04      	cmp	r3, #4
 8004352:	d10e      	bne.n	8004372 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f817 	bl	8004396 <UART_WaitOnFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e00d      	b.n	800438e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	4613      	mov	r3, r2
 80043a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a6:	e05e      	b.n	8004466 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ae:	d05a      	beq.n	8004466 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b0:	f7fd f804 	bl	80013bc <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d302      	bcc.n	80043c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11b      	bne.n	80043fe <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e043      	b.n	8004486 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d02c      	beq.n	8004466 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800441a:	d124      	bne.n	8004466 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004424:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004434:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0201 	bic.w	r2, r2, #1
 8004444:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e00f      	b.n	8004486 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4013      	ands	r3, r2
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	bf0c      	ite	eq
 8004476:	2301      	moveq	r3, #1
 8004478:	2300      	movne	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	429a      	cmp	r2, r3
 8004482:	d091      	beq.n	80043a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	88fa      	ldrh	r2, [r7, #6]
 80044a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	88fa      	ldrh	r2, [r7, #6]
 80044b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c2:	d10e      	bne.n	80044e2 <UART_Start_Receive_IT+0x52>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <UART_Start_Receive_IT+0x48>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044d6:	e02d      	b.n	8004534 <UART_Start_Receive_IT+0xa4>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	22ff      	movs	r2, #255	; 0xff
 80044dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044e0:	e028      	b.n	8004534 <UART_Start_Receive_IT+0xa4>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10d      	bne.n	8004506 <UART_Start_Receive_IT+0x76>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <UART_Start_Receive_IT+0x6c>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	22ff      	movs	r2, #255	; 0xff
 80044f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044fa:	e01b      	b.n	8004534 <UART_Start_Receive_IT+0xa4>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	227f      	movs	r2, #127	; 0x7f
 8004500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004504:	e016      	b.n	8004534 <UART_Start_Receive_IT+0xa4>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800450e:	d10d      	bne.n	800452c <UART_Start_Receive_IT+0x9c>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <UART_Start_Receive_IT+0x92>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	227f      	movs	r2, #127	; 0x7f
 800451c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004520:	e008      	b.n	8004534 <UART_Start_Receive_IT+0xa4>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	223f      	movs	r2, #63	; 0x3f
 8004526:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800452a:	e003      	b.n	8004534 <UART_Start_Receive_IT+0xa4>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2222      	movs	r2, #34	; 0x22
 8004540:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0201 	orr.w	r2, r2, #1
 8004550:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455a:	d107      	bne.n	800456c <UART_Start_Receive_IT+0xdc>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a0c      	ldr	r2, [pc, #48]	; (8004598 <UART_Start_Receive_IT+0x108>)
 8004568:	665a      	str	r2, [r3, #100]	; 0x64
 800456a:	e002      	b.n	8004572 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a0b      	ldr	r2, [pc, #44]	; (800459c <UART_Start_Receive_IT+0x10c>)
 8004570:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004588:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	08004825 	.word	0x08004825
 800459c:	0800474d 	.word	0x0800474d

080045a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d107      	bne.n	80045e0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0210 	bic.w	r2, r2, #16
 80045de:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff fb2f 	bl	8003c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004636:	2b21      	cmp	r3, #33	; 0x21
 8004638:	d12b      	bne.n	8004692 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d110      	bne.n	8004668 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004654:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004664:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004666:	e014      	b.n	8004692 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466c:	781a      	ldrb	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	b292      	uxth	r2, r2
 8004674:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046aa:	2b21      	cmp	r3, #33	; 0x21
 80046ac:	d12f      	bne.n	800470e <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d110      	bne.n	80046dc <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046d8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80046da:	e018      	b.n	800470e <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	881a      	ldrh	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046ee:	b292      	uxth	r2, r2
 80046f0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f6:	1c9a      	adds	r2, r3, #2
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800470e:	bf00      	nop
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004730:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc f876 	bl	8000830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800475a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004760:	2b22      	cmp	r3, #34	; 0x22
 8004762:	d151      	bne.n	8004808 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800476a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800476c:	89bb      	ldrh	r3, [r7, #12]
 800476e:	b2d9      	uxtb	r1, r3
 8004770:	89fb      	ldrh	r3, [r7, #14]
 8004772:	b2da      	uxtb	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004778:	400a      	ands	r2, r1
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d13a      	bne.n	800481c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0201 	bic.w	r2, r2, #1
 80047c4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d10f      	bne.n	80047fa <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0210 	bic.w	r2, r2, #16
 80047e8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff fa4e 	bl	8003c94 <HAL_UARTEx_RxEventCallback>
 80047f8:	e002      	b.n	8004800 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fb fff6 	bl	80007ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004806:	e009      	b.n	800481c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	8b1b      	ldrh	r3, [r3, #24]
 800480e:	b29a      	uxth	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0208 	orr.w	r2, r2, #8
 8004818:	b292      	uxth	r2, r2
 800481a:	831a      	strh	r2, [r3, #24]
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004832:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004838:	2b22      	cmp	r3, #34	; 0x22
 800483a:	d151      	bne.n	80048e0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004842:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004848:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800484a:	89ba      	ldrh	r2, [r7, #12]
 800484c:	89fb      	ldrh	r3, [r7, #14]
 800484e:	4013      	ands	r3, r2
 8004850:	b29a      	uxth	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	1c9a      	adds	r2, r3, #2
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d13a      	bne.n	80048f4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800488c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d10f      	bne.n	80048d2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0210 	bic.w	r2, r2, #16
 80048c0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048c8:	4619      	mov	r1, r3
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff f9e2 	bl	8003c94 <HAL_UARTEx_RxEventCallback>
 80048d0:	e002      	b.n	80048d8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fb ff8a 	bl	80007ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048de:	e009      	b.n	80048f4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	8b1b      	ldrh	r3, [r3, #24]
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0208 	orr.w	r2, r2, #8
 80048f0:	b292      	uxth	r2, r2
 80048f2:	831a      	strh	r2, [r3, #24]
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <__NVIC_SetPriority>:
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	6039      	str	r1, [r7, #0]
 800491a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800491c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004920:	2b00      	cmp	r3, #0
 8004922:	db0a      	blt.n	800493a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	b2da      	uxtb	r2, r3
 8004928:	490c      	ldr	r1, [pc, #48]	; (800495c <__NVIC_SetPriority+0x4c>)
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	0112      	lsls	r2, r2, #4
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	440b      	add	r3, r1
 8004934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004938:	e00a      	b.n	8004950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	b2da      	uxtb	r2, r3
 800493e:	4908      	ldr	r1, [pc, #32]	; (8004960 <__NVIC_SetPriority+0x50>)
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	3b04      	subs	r3, #4
 8004948:	0112      	lsls	r2, r2, #4
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	440b      	add	r3, r1
 800494e:	761a      	strb	r2, [r3, #24]
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	e000e100 	.word	0xe000e100
 8004960:	e000ed00 	.word	0xe000ed00

08004964 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <SysTick_Handler+0x1c>)
 800496a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800496c:	f002 fffe 	bl	800796c <xTaskGetSchedulerState>
 8004970:	4603      	mov	r3, r0
 8004972:	2b01      	cmp	r3, #1
 8004974:	d001      	beq.n	800497a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004976:	f003 ff1f 	bl	80087b8 <xPortSysTickHandler>
  }
}
 800497a:	bf00      	nop
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	e000e010 	.word	0xe000e010

08004984 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004988:	2100      	movs	r1, #0
 800498a:	f06f 0004 	mvn.w	r0, #4
 800498e:	f7ff ffbf 	bl	8004910 <__NVIC_SetPriority>
#endif
}
 8004992:	bf00      	nop
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800499e:	f3ef 8305 	mrs	r3, IPSR
 80049a2:	603b      	str	r3, [r7, #0]
  return(result);
 80049a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80049aa:	f06f 0305 	mvn.w	r3, #5
 80049ae:	607b      	str	r3, [r7, #4]
 80049b0:	e00c      	b.n	80049cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80049b2:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <osKernelInitialize+0x44>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d105      	bne.n	80049c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80049ba:	4b08      	ldr	r3, [pc, #32]	; (80049dc <osKernelInitialize+0x44>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	607b      	str	r3, [r7, #4]
 80049c4:	e002      	b.n	80049cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80049c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049cc:	687b      	ldr	r3, [r7, #4]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20000090 	.word	0x20000090

080049e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049e6:	f3ef 8305 	mrs	r3, IPSR
 80049ea:	603b      	str	r3, [r7, #0]
  return(result);
 80049ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80049f2:	f06f 0305 	mvn.w	r3, #5
 80049f6:	607b      	str	r3, [r7, #4]
 80049f8:	e010      	b.n	8004a1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <osKernelStart+0x48>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d109      	bne.n	8004a16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004a02:	f7ff ffbf 	bl	8004984 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004a06:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <osKernelStart+0x48>)
 8004a08:	2202      	movs	r2, #2
 8004a0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004a0c:	f002 fac8 	bl	8006fa0 <vTaskStartScheduler>
      stat = osOK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	607b      	str	r3, [r7, #4]
 8004a14:	e002      	b.n	8004a1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a1c:	687b      	ldr	r3, [r7, #4]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000090 	.word	0x20000090

08004a2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08e      	sub	sp, #56	; 0x38
 8004a30:	af04      	add	r7, sp, #16
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a3c:	f3ef 8305 	mrs	r3, IPSR
 8004a40:	617b      	str	r3, [r7, #20]
  return(result);
 8004a42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d17e      	bne.n	8004b46 <osThreadNew+0x11a>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d07b      	beq.n	8004b46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004a4e:	2380      	movs	r3, #128	; 0x80
 8004a50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004a52:	2318      	movs	r3, #24
 8004a54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d045      	beq.n	8004af2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <osThreadNew+0x48>
        name = attr->name;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <osThreadNew+0x6e>
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2b38      	cmp	r3, #56	; 0x38
 8004a8c:	d805      	bhi.n	8004a9a <osThreadNew+0x6e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <osThreadNew+0x72>
        return (NULL);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e054      	b.n	8004b48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	089b      	lsrs	r3, r3, #2
 8004aac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00e      	beq.n	8004ad4 <osThreadNew+0xa8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b5b      	cmp	r3, #91	; 0x5b
 8004abc:	d90a      	bls.n	8004ad4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d006      	beq.n	8004ad4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <osThreadNew+0xa8>
        mem = 1;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	61bb      	str	r3, [r7, #24]
 8004ad2:	e010      	b.n	8004af6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10c      	bne.n	8004af6 <osThreadNew+0xca>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d108      	bne.n	8004af6 <osThreadNew+0xca>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <osThreadNew+0xca>
          mem = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	e001      	b.n	8004af6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d110      	bne.n	8004b1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b04:	9202      	str	r2, [sp, #8]
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	6a3a      	ldr	r2, [r7, #32]
 8004b10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f001 ff68 	bl	80069e8 <xTaskCreateStatic>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	e013      	b.n	8004b46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d110      	bne.n	8004b46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	f107 0310 	add.w	r3, r7, #16
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f001 ffb3 	bl	8006aa2 <xTaskCreate>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d001      	beq.n	8004b46 <osThreadNew+0x11a>
            hTask = NULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b46:	693b      	ldr	r3, [r7, #16]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3728      	adds	r7, #40	; 0x28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b5c:	f3ef 8305 	mrs	r3, IPSR
 8004b60:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b62:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8004b68:	f06f 0305 	mvn.w	r3, #5
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	e00b      	b.n	8004b88 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8004b76:	f06f 0303 	mvn.w	r3, #3
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e004      	b.n	8004b88 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8004b82:	6938      	ldr	r0, [r7, #16]
 8004b84:	f002 f906 	bl	8006d94 <vTaskSuspend>
  }

  return (stat);
 8004b88:	697b      	ldr	r3, [r7, #20]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b086      	sub	sp, #24
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b9e:	f3ef 8305 	mrs	r3, IPSR
 8004ba2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <osThreadResume+0x20>
    stat = osErrorISR;
 8004baa:	f06f 0305 	mvn.w	r3, #5
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e00b      	b.n	8004bca <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d103      	bne.n	8004bc0 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8004bb8:	f06f 0303 	mvn.w	r3, #3
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	e004      	b.n	8004bca <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8004bc4:	6938      	ldr	r0, [r7, #16]
 8004bc6:	f002 f98d 	bl	8006ee4 <vTaskResume>
  }

  return (stat);
 8004bca:	697b      	ldr	r3, [r7, #20]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bdc:	f3ef 8305 	mrs	r3, IPSR
 8004be0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004be2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <osDelay+0x1c>
    stat = osErrorISR;
 8004be8:	f06f 0305 	mvn.w	r3, #5
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e007      	b.n	8004c00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f002 f896 	bl	8006d2c <vTaskDelay>
    }
  }

  return (stat);
 8004c00:	68fb      	ldr	r3, [r7, #12]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b086      	sub	sp, #24
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c16:	f3ef 8305 	mrs	r3, IPSR
 8004c1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c1c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d12d      	bne.n	8004c7e <osEventFlagsNew+0x74>
    mem = -1;
 8004c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c26:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d015      	beq.n	8004c5a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d006      	beq.n	8004c44 <osEventFlagsNew+0x3a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	2b1f      	cmp	r3, #31
 8004c3c:	d902      	bls.n	8004c44 <osEventFlagsNew+0x3a>
        mem = 1;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	e00c      	b.n	8004c5e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d108      	bne.n	8004c5e <osEventFlagsNew+0x54>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d104      	bne.n	8004c5e <osEventFlagsNew+0x54>
          mem = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	e001      	b.n	8004c5e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d106      	bne.n	8004c72 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fb8f 	bl	800538c <xEventGroupCreateStatic>
 8004c6e:	6178      	str	r0, [r7, #20]
 8004c70:	e005      	b.n	8004c7e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004c78:	f000 fbbf 	bl	80053fa <xEventGroupCreate>
 8004c7c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004c7e:	697b      	ldr	r3, [r7, #20]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d004      	beq.n	8004ca6 <osEventFlagsSet+0x1e>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004ca6:	f06f 0303 	mvn.w	r3, #3
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e028      	b.n	8004d00 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cae:	f3ef 8305 	mrs	r3, IPSR
 8004cb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01d      	beq.n	8004cf6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004cbe:	f107 0308 	add.w	r3, r7, #8
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	6839      	ldr	r1, [r7, #0]
 8004cc6:	6938      	ldr	r0, [r7, #16]
 8004cc8:	f000 fdb8 	bl	800583c <xEventGroupSetBitsFromISR>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d103      	bne.n	8004cda <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8004cd2:	f06f 0302 	mvn.w	r3, #2
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e012      	b.n	8004d00 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00d      	beq.n	8004d00 <osEventFlagsSet+0x78>
 8004ce4:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <osEventFlagsSet+0x84>)
 8004ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	e004      	b.n	8004d00 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004cf6:	6839      	ldr	r1, [r7, #0]
 8004cf8:	6938      	ldr	r0, [r7, #16]
 8004cfa:	f000 fcd7 	bl	80056ac <xEventGroupSetBits>
 8004cfe:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004d00:	697b      	ldr	r3, [r7, #20]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	e000ed04 	.word	0xe000ed04

08004d10 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <osEventFlagsClear+0x1e>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004d2e:	f06f 0303 	mvn.w	r3, #3
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	e019      	b.n	8004d6a <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d36:	f3ef 8305 	mrs	r3, IPSR
 8004d3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00e      	beq.n	8004d60 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004d42:	6938      	ldr	r0, [r7, #16]
 8004d44:	f000 fc8e 	bl	8005664 <xEventGroupGetBitsFromISR>
 8004d48:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8004d4a:	6839      	ldr	r1, [r7, #0]
 8004d4c:	6938      	ldr	r0, [r7, #16]
 8004d4e:	f000 fc75 	bl	800563c <xEventGroupClearBitsFromISR>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d108      	bne.n	8004d6a <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8004d58:	f06f 0302 	mvn.w	r3, #2
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	e004      	b.n	8004d6a <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8004d60:	6839      	ldr	r1, [r7, #0]
 8004d62:	6938      	ldr	r0, [r7, #16]
 8004d64:	f000 fc32 	bl	80055cc <xEventGroupClearBits>
 8004d68:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004d6a:	697b      	ldr	r3, [r7, #20]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <osEventFlagsGet+0x18>
    rflags = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	e00f      	b.n	8004dac <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d8c:	f3ef 8305 	mrs	r3, IPSR
 8004d90:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d92:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d004      	beq.n	8004da2 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004d98:	6938      	ldr	r0, [r7, #16]
 8004d9a:	f000 fc63 	bl	8005664 <xEventGroupGetBitsFromISR>
 8004d9e:	6178      	str	r0, [r7, #20]
 8004da0:	e004      	b.n	8004dac <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8004da2:	2100      	movs	r1, #0
 8004da4:	6938      	ldr	r0, [r7, #16]
 8004da6:	f000 fc11 	bl	80055cc <xEventGroupClearBits>
 8004daa:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004dac:	697b      	ldr	r3, [r7, #20]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b08c      	sub	sp, #48	; 0x30
 8004dba:	af02      	add	r7, sp, #8
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
 8004dc2:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d004      	beq.n	8004dd8 <osEventFlagsWait+0x22>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8004dd8:	f06f 0303 	mvn.w	r3, #3
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	e04b      	b.n	8004e78 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004de0:	f3ef 8305 	mrs	r3, IPSR
 8004de4:	617b      	str	r3, [r7, #20]
  return(result);
 8004de6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8004dec:	f06f 0305 	mvn.w	r3, #5
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	e041      	b.n	8004e78 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
 8004e02:	e001      	b.n	8004e08 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	623b      	str	r3, [r7, #32]
 8004e16:	e001      	b.n	8004e1c <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	6a3a      	ldr	r2, [r7, #32]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	69b8      	ldr	r0, [r7, #24]
 8004e28:	f000 fb02 	bl	8005430 <xEventGroupWaitBits>
 8004e2c:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d010      	beq.n	8004e5a <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d019      	beq.n	8004e78 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8004e4a:	f06f 0301 	mvn.w	r3, #1
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	e012      	b.n	8004e78 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004e52:	f06f 0302 	mvn.w	r3, #2
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	e00e      	b.n	8004e78 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d109      	bne.n	8004e78 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8004e6a:	f06f 0301 	mvn.w	r3, #1
 8004e6e:	61fb      	str	r3, [r7, #28]
 8004e70:	e002      	b.n	8004e78 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004e72:	f06f 0302 	mvn.w	r3, #2
 8004e76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8004e78:	69fb      	ldr	r3, [r7, #28]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3728      	adds	r7, #40	; 0x28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b08a      	sub	sp, #40	; 0x28
 8004e86:	af02      	add	r7, sp, #8
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e92:	f3ef 8305 	mrs	r3, IPSR
 8004e96:	613b      	str	r3, [r7, #16]
  return(result);
 8004e98:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d175      	bne.n	8004f8a <osSemaphoreNew+0x108>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d072      	beq.n	8004f8a <osSemaphoreNew+0x108>
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d86e      	bhi.n	8004f8a <osSemaphoreNew+0x108>
    mem = -1;
 8004eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eb0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d015      	beq.n	8004ee4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d006      	beq.n	8004ece <osSemaphoreNew+0x4c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	2b4f      	cmp	r3, #79	; 0x4f
 8004ec6:	d902      	bls.n	8004ece <osSemaphoreNew+0x4c>
        mem = 1;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	61bb      	str	r3, [r7, #24]
 8004ecc:	e00c      	b.n	8004ee8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d108      	bne.n	8004ee8 <osSemaphoreNew+0x66>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d104      	bne.n	8004ee8 <osSemaphoreNew+0x66>
          mem = 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	e001      	b.n	8004ee8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eee:	d04c      	beq.n	8004f8a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d128      	bne.n	8004f48 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d10a      	bne.n	8004f12 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2203      	movs	r2, #3
 8004f02:	9200      	str	r2, [sp, #0]
 8004f04:	2200      	movs	r2, #0
 8004f06:	2100      	movs	r1, #0
 8004f08:	2001      	movs	r0, #1
 8004f0a:	f000 fdc7 	bl	8005a9c <xQueueGenericCreateStatic>
 8004f0e:	61f8      	str	r0, [r7, #28]
 8004f10:	e005      	b.n	8004f1e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004f12:	2203      	movs	r2, #3
 8004f14:	2100      	movs	r1, #0
 8004f16:	2001      	movs	r0, #1
 8004f18:	f000 fe38 	bl	8005b8c <xQueueGenericCreate>
 8004f1c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d022      	beq.n	8004f6a <osSemaphoreNew+0xe8>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01f      	beq.n	8004f6a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2100      	movs	r1, #0
 8004f30:	69f8      	ldr	r0, [r7, #28]
 8004f32:	f000 fef3 	bl	8005d1c <xQueueGenericSend>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d016      	beq.n	8004f6a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004f3c:	69f8      	ldr	r0, [r7, #28]
 8004f3e:	f001 fb7f 	bl	8006640 <vQueueDelete>
            hSemaphore = NULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]
 8004f46:	e010      	b.n	8004f6a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d108      	bne.n	8004f60 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	461a      	mov	r2, r3
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 fe75 	bl	8005c46 <xQueueCreateCountingSemaphoreStatic>
 8004f5c:	61f8      	str	r0, [r7, #28]
 8004f5e:	e004      	b.n	8004f6a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 fea6 	bl	8005cb4 <xQueueCreateCountingSemaphore>
 8004f68:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00c      	beq.n	8004f8a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <osSemaphoreNew+0xfc>
          name = attr->name;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	e001      	b.n	8004f82 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004f82:	6979      	ldr	r1, [r7, #20]
 8004f84:	69f8      	ldr	r0, [r7, #28]
 8004f86:	f001 fca7 	bl	80068d8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004f8a:	69fb      	ldr	r3, [r7, #28]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3720      	adds	r7, #32
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d103      	bne.n	8004fb4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004fac:	f06f 0303 	mvn.w	r3, #3
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	e039      	b.n	8005028 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb4:	f3ef 8305 	mrs	r3, IPSR
 8004fb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d022      	beq.n	8005006 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004fc6:	f06f 0303 	mvn.w	r3, #3
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	e02c      	b.n	8005028 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004fd2:	f107 0308 	add.w	r3, r7, #8
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2100      	movs	r1, #0
 8004fda:	6938      	ldr	r0, [r7, #16]
 8004fdc:	f001 fab0 	bl	8006540 <xQueueReceiveFromISR>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d003      	beq.n	8004fee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004fe6:	f06f 0302 	mvn.w	r3, #2
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	e01c      	b.n	8005028 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d019      	beq.n	8005028 <osSemaphoreAcquire+0x94>
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <osSemaphoreAcquire+0xa0>)
 8004ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	e010      	b.n	8005028 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005006:	6839      	ldr	r1, [r7, #0]
 8005008:	6938      	ldr	r0, [r7, #16]
 800500a:	f001 f98d 	bl	8006328 <xQueueSemaphoreTake>
 800500e:	4603      	mov	r3, r0
 8005010:	2b01      	cmp	r3, #1
 8005012:	d009      	beq.n	8005028 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800501a:	f06f 0301 	mvn.w	r3, #1
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	e002      	b.n	8005028 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005022:	f06f 0302 	mvn.w	r3, #2
 8005026:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005028:	697b      	ldr	r3, [r7, #20]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	e000ed04 	.word	0xe000ed04

08005038 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d103      	bne.n	8005056 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800504e:	f06f 0303 	mvn.w	r3, #3
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e02c      	b.n	80050b0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005056:	f3ef 8305 	mrs	r3, IPSR
 800505a:	60fb      	str	r3, [r7, #12]
  return(result);
 800505c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01a      	beq.n	8005098 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005062:	2300      	movs	r3, #0
 8005064:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005066:	f107 0308 	add.w	r3, r7, #8
 800506a:	4619      	mov	r1, r3
 800506c:	6938      	ldr	r0, [r7, #16]
 800506e:	f000 ffee 	bl	800604e <xQueueGiveFromISR>
 8005072:	4603      	mov	r3, r0
 8005074:	2b01      	cmp	r3, #1
 8005076:	d003      	beq.n	8005080 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005078:	f06f 0302 	mvn.w	r3, #2
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	e017      	b.n	80050b0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d014      	beq.n	80050b0 <osSemaphoreRelease+0x78>
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <osSemaphoreRelease+0x84>)
 8005088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	e00b      	b.n	80050b0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005098:	2300      	movs	r3, #0
 800509a:	2200      	movs	r2, #0
 800509c:	2100      	movs	r1, #0
 800509e:	6938      	ldr	r0, [r7, #16]
 80050a0:	f000 fe3c 	bl	8005d1c <xQueueGenericSend>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d002      	beq.n	80050b0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80050aa:	f06f 0302 	mvn.w	r3, #2
 80050ae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80050b0:	697b      	ldr	r3, [r7, #20]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050d0:	f3ef 8305 	mrs	r3, IPSR
 80050d4:	613b      	str	r3, [r7, #16]
  return(result);
 80050d6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d15f      	bne.n	800519c <osMessageQueueNew+0xdc>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d05c      	beq.n	800519c <osMessageQueueNew+0xdc>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d059      	beq.n	800519c <osMessageQueueNew+0xdc>
    mem = -1;
 80050e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d029      	beq.n	8005148 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d012      	beq.n	8005122 <osMessageQueueNew+0x62>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b4f      	cmp	r3, #79	; 0x4f
 8005102:	d90e      	bls.n	8005122 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	695a      	ldr	r2, [r3, #20]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	429a      	cmp	r2, r3
 800511a:	d302      	bcc.n	8005122 <osMessageQueueNew+0x62>
        mem = 1;
 800511c:	2301      	movs	r3, #1
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e014      	b.n	800514c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d110      	bne.n	800514c <osMessageQueueNew+0x8c>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10c      	bne.n	800514c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005136:	2b00      	cmp	r3, #0
 8005138:	d108      	bne.n	800514c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d104      	bne.n	800514c <osMessageQueueNew+0x8c>
          mem = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	e001      	b.n	800514c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d10b      	bne.n	800516a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2100      	movs	r1, #0
 800515c:	9100      	str	r1, [sp, #0]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fc9b 	bl	8005a9c <xQueueGenericCreateStatic>
 8005166:	61f8      	str	r0, [r7, #28]
 8005168:	e008      	b.n	800517c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005170:	2200      	movs	r2, #0
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 fd09 	bl	8005b8c <xQueueGenericCreate>
 800517a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00c      	beq.n	800519c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e001      	b.n	8005194 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005194:	6979      	ldr	r1, [r7, #20]
 8005196:	69f8      	ldr	r0, [r7, #28]
 8005198:	f001 fb9e 	bl	80068d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800519c:	69fb      	ldr	r3, [r7, #28]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	4613      	mov	r3, r2
 80051b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051c0:	f3ef 8305 	mrs	r3, IPSR
 80051c4:	617b      	str	r3, [r7, #20]
  return(result);
 80051c6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d028      	beq.n	800521e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d005      	beq.n	80051de <osMessageQueuePut+0x36>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <osMessageQueuePut+0x36>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80051de:	f06f 0303 	mvn.w	r3, #3
 80051e2:	61fb      	str	r3, [r7, #28]
 80051e4:	e038      	b.n	8005258 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80051e6:	2300      	movs	r3, #0
 80051e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80051ea:	f107 0210 	add.w	r2, r7, #16
 80051ee:	2300      	movs	r3, #0
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	69b8      	ldr	r0, [r7, #24]
 80051f4:	f000 fe90 	bl	8005f18 <xQueueGenericSendFromISR>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d003      	beq.n	8005206 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80051fe:	f06f 0302 	mvn.w	r3, #2
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	e028      	b.n	8005258 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d025      	beq.n	8005258 <osMessageQueuePut+0xb0>
 800520c:	4b15      	ldr	r3, [pc, #84]	; (8005264 <osMessageQueuePut+0xbc>)
 800520e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	e01c      	b.n	8005258 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <osMessageQueuePut+0x82>
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800522a:	f06f 0303 	mvn.w	r3, #3
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	e012      	b.n	8005258 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005232:	2300      	movs	r3, #0
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	69b8      	ldr	r0, [r7, #24]
 800523a:	f000 fd6f 	bl	8005d1c <xQueueGenericSend>
 800523e:	4603      	mov	r3, r0
 8005240:	2b01      	cmp	r3, #1
 8005242:	d009      	beq.n	8005258 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800524a:	f06f 0301 	mvn.w	r3, #1
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	e002      	b.n	8005258 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005252:	f06f 0302 	mvn.w	r3, #2
 8005256:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005258:	69fb      	ldr	r3, [r7, #28]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3720      	adds	r7, #32
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800527e:	f3ef 8305 	mrs	r3, IPSR
 8005282:	617b      	str	r3, [r7, #20]
  return(result);
 8005284:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005286:	2b00      	cmp	r3, #0
 8005288:	d028      	beq.n	80052dc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <osMessageQueueGet+0x34>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <osMessageQueueGet+0x34>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800529c:	f06f 0303 	mvn.w	r3, #3
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	e037      	b.n	8005314 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80052a8:	f107 0310 	add.w	r3, r7, #16
 80052ac:	461a      	mov	r2, r3
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	69b8      	ldr	r0, [r7, #24]
 80052b2:	f001 f945 	bl	8006540 <xQueueReceiveFromISR>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d003      	beq.n	80052c4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80052bc:	f06f 0302 	mvn.w	r3, #2
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	e027      	b.n	8005314 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d024      	beq.n	8005314 <osMessageQueueGet+0xac>
 80052ca:	4b15      	ldr	r3, [pc, #84]	; (8005320 <osMessageQueueGet+0xb8>)
 80052cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	e01b      	b.n	8005314 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <osMessageQueueGet+0x80>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d103      	bne.n	80052f0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80052e8:	f06f 0303 	mvn.w	r3, #3
 80052ec:	61fb      	str	r3, [r7, #28]
 80052ee:	e011      	b.n	8005314 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	69b8      	ldr	r0, [r7, #24]
 80052f6:	f000 ff37 	bl	8006168 <xQueueReceive>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d009      	beq.n	8005314 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005306:	f06f 0301 	mvn.w	r3, #1
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	e002      	b.n	8005314 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800530e:	f06f 0302 	mvn.w	r3, #2
 8005312:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005314:	69fb      	ldr	r3, [r7, #28]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	e000ed04 	.word	0xe000ed04

08005324 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a07      	ldr	r2, [pc, #28]	; (8005350 <vApplicationGetIdleTaskMemory+0x2c>)
 8005334:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4a06      	ldr	r2, [pc, #24]	; (8005354 <vApplicationGetIdleTaskMemory+0x30>)
 800533a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2280      	movs	r2, #128	; 0x80
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20000094 	.word	0x20000094
 8005354:	200000f0 	.word	0x200000f0

08005358 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a07      	ldr	r2, [pc, #28]	; (8005384 <vApplicationGetTimerTaskMemory+0x2c>)
 8005368:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4a06      	ldr	r2, [pc, #24]	; (8005388 <vApplicationGetTimerTaskMemory+0x30>)
 800536e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005376:	601a      	str	r2, [r3, #0]
}
 8005378:	bf00      	nop
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	200002f0 	.word	0x200002f0
 8005388:	2000034c 	.word	0x2000034c

0800538c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053ac:	bf00      	nop
 80053ae:	e7fe      	b.n	80053ae <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80053b0:	2320      	movs	r3, #32
 80053b2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d00a      	beq.n	80053d0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	60fb      	str	r3, [r7, #12]
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	3304      	adds	r3, #4
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fa3d 	bl	8005864 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2201      	movs	r2, #1
 80053ee:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80053f0:	697b      	ldr	r3, [r7, #20]
	}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005400:	2020      	movs	r0, #32
 8005402:	f003 fa69 	bl	80088d8 <pvPortMalloc>
 8005406:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fa23 	bl	8005864 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005424:	687b      	ldr	r3, [r7, #4]
	}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b090      	sub	sp, #64	; 0x40
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005446:	2300      	movs	r3, #0
 8005448:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <xEventGroupWaitBits+0x36>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	623b      	str	r3, [r7, #32]
}
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <xEventGroupWaitBits+0x56>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	61fb      	str	r3, [r7, #28]
}
 8005482:	bf00      	nop
 8005484:	e7fe      	b.n	8005484 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <xEventGroupWaitBits+0x72>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	61bb      	str	r3, [r7, #24]
}
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054a2:	f002 fa63 	bl	800796c <xTaskGetSchedulerState>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d102      	bne.n	80054b2 <xEventGroupWaitBits+0x82>
 80054ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <xEventGroupWaitBits+0x86>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <xEventGroupWaitBits+0x88>
 80054b6:	2300      	movs	r3, #0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	617b      	str	r3, [r7, #20]
}
 80054ce:	bf00      	nop
 80054d0:	e7fe      	b.n	80054d0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80054d2:	f001 fdcb 	bl	800706c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80054d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054e2:	f000 f988 	bl	80057f6 <prvTestWaitCondition>
 80054e6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00e      	beq.n	800550c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80054ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d028      	beq.n	800554e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	43db      	mvns	r3, r3
 8005504:	401a      	ands	r2, r3
 8005506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	e020      	b.n	800554e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800550c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800550e:	2b00      	cmp	r3, #0
 8005510:	d104      	bne.n	800551c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005516:	2301      	movs	r3, #1
 8005518:	633b      	str	r3, [r7, #48]	; 0x30
 800551a:	e018      	b.n	800554e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005528:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005536:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553a:	1d18      	adds	r0, r3, #4
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	4313      	orrs	r3, r2
 8005542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005544:	4619      	mov	r1, r3
 8005546:	f001 ff89 	bl	800745c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800554e:	f001 fd9b 	bl	8007088 <xTaskResumeAll>
 8005552:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005556:	2b00      	cmp	r3, #0
 8005558:	d031      	beq.n	80055be <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	d107      	bne.n	8005570 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8005560:	4b19      	ldr	r3, [pc, #100]	; (80055c8 <xEventGroupWaitBits+0x198>)
 8005562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005570:	f002 fb72 	bl	8007c58 <uxTaskResetEventItemValue>
 8005574:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d11a      	bne.n	80055b6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8005580:	f003 f888 	bl	8008694 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005590:	f000 f931 	bl	80057f6 <prvTestWaitCondition>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d006      	beq.n	80055ae <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	43db      	mvns	r3, r3
 80055a8:	401a      	ands	r2, r3
 80055aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ac:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80055ae:	2301      	movs	r3, #1
 80055b0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80055b2:	f003 f89f 	bl	80086f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80055b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80055be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3740      	adds	r7, #64	; 0x40
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <xEventGroupClearBits+0x2a>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	60fb      	str	r3, [r7, #12]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <xEventGroupClearBits+0x4a>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	60bb      	str	r3, [r7, #8]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8005616:	f003 f83d 	bl	8008694 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	43db      	mvns	r3, r3
 8005628:	401a      	ands	r2, r3
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800562e:	f003 f861 	bl	80086f4 <vPortExitCritical>

	return uxReturn;
 8005632:	693b      	ldr	r3, [r7, #16]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005646:	2300      	movs	r3, #0
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	4804      	ldr	r0, [pc, #16]	; (8005660 <xEventGroupClearBitsFromISR+0x24>)
 800564e:	f002 fed1 	bl	80083f4 <xTimerPendFunctionCallFromISR>
 8005652:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8005654:	68fb      	ldr	r3, [r7, #12]
	}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	080057dd 	.word	0x080057dd

08005664 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8005664:	b480      	push	{r7}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005670:	f3ef 8211 	mrs	r2, BASEPRI
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	60fa      	str	r2, [r7, #12]
 8005686:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005688:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800568a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800569c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800569e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80056a0:	4618      	mov	r0, r3
 80056a2:	3724      	adds	r7, #36	; 0x24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08e      	sub	sp, #56	; 0x38
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80056b6:	2300      	movs	r3, #0
 80056b8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80056be:	2300      	movs	r3, #0
 80056c0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10a      	bne.n	80056de <xEventGroupSetBits+0x32>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	613b      	str	r3, [r7, #16]
}
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <xEventGroupSetBits+0x52>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	60fb      	str	r3, [r7, #12]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	3304      	adds	r3, #4
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	3308      	adds	r3, #8
 8005708:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800570a:	f001 fcaf 	bl	800706c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	431a      	orrs	r2, r3
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005720:	e03c      	b.n	800579c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800572e:	2300      	movs	r3, #0
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005738:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005740:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d108      	bne.n	800575e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	4013      	ands	r3, r2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00b      	beq.n	8005770 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005758:	2301      	movs	r3, #1
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575c:	e008      	b.n	8005770 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	4013      	ands	r3, r2
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	429a      	cmp	r2, r3
 800576a:	d101      	bne.n	8005770 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005772:	2b00      	cmp	r3, #0
 8005774:	d010      	beq.n	8005798 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	4313      	orrs	r3, r2
 8005786:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005790:	4619      	mov	r1, r3
 8005792:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005794:	f001 ff2e 	bl	80075f4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800579c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d1be      	bne.n	8005722 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	43db      	mvns	r3, r3
 80057ac:	401a      	ands	r2, r3
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80057b2:	f001 fc69 	bl	8007088 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	681b      	ldr	r3, [r3, #0]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3738      	adds	r7, #56	; 0x38
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b082      	sub	sp, #8
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff ff6c 	bl	80056ac <xEventGroupSetBits>
}
 80057d4:	bf00      	nop
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff feef 	bl	80055cc <xEventGroupClearBits>
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80057f6:	b480      	push	{r7}
 80057f8:	b087      	sub	sp, #28
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d107      	bne.n	800581c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	4013      	ands	r3, r2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005816:	2301      	movs	r3, #1
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e007      	b.n	800582c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4013      	ands	r3, r2
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	429a      	cmp	r2, r3
 8005826:	d101      	bne.n	800582c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005828:	2301      	movs	r3, #1
 800582a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800582c:	697b      	ldr	r3, [r7, #20]
}
 800582e:	4618      	mov	r0, r3
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	68f9      	ldr	r1, [r7, #12]
 800584e:	4804      	ldr	r0, [pc, #16]	; (8005860 <xEventGroupSetBitsFromISR+0x24>)
 8005850:	f002 fdd0 	bl	80083f4 <xTimerPendFunctionCallFromISR>
 8005854:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005856:	697b      	ldr	r3, [r7, #20]
	}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	080057c3 	.word	0x080057c3

08005864 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f103 0208 	add.w	r2, r3, #8
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800587c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f103 0208 	add.w	r2, r3, #8
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f103 0208 	add.w	r2, r3, #8
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058be:	b480      	push	{r7}
 80058c0:	b085      	sub	sp, #20
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	601a      	str	r2, [r3, #0]
}
 80058fa:	bf00      	nop
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005906:	b480      	push	{r7}
 8005908:	b085      	sub	sp, #20
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800591c:	d103      	bne.n	8005926 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	e00c      	b.n	8005940 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3308      	adds	r3, #8
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	e002      	b.n	8005934 <vListInsert+0x2e>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	429a      	cmp	r2, r3
 800593e:	d2f6      	bcs.n	800592e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	601a      	str	r2, [r3, #0]
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6892      	ldr	r2, [r2, #8]
 800598e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6852      	ldr	r2, [r2, #4]
 8005998:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d103      	bne.n	80059ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	1e5a      	subs	r2, r3, #1
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <xQueueGenericReset+0x2a>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	60bb      	str	r3, [r7, #8]
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80059f6:	f002 fe4d 	bl	8008694 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a06:	fb01 f303 	mul.w	r3, r1, r3
 8005a0a:	441a      	add	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a26:	3b01      	subs	r3, #1
 8005a28:	68f9      	ldr	r1, [r7, #12]
 8005a2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	441a      	add	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	22ff      	movs	r2, #255	; 0xff
 8005a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	22ff      	movs	r2, #255	; 0xff
 8005a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d114      	bne.n	8005a76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01a      	beq.n	8005a8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3310      	adds	r3, #16
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f001 fd67 	bl	800752c <xTaskRemoveFromEventList>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d012      	beq.n	8005a8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <xQueueGenericReset+0xcc>)
 8005a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	e009      	b.n	8005a8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3310      	adds	r3, #16
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fef2 	bl	8005864 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3324      	adds	r3, #36	; 0x24
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff feed 	bl	8005864 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a8a:	f002 fe33 	bl	80086f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a8e:	2301      	movs	r3, #1
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08e      	sub	sp, #56	; 0x38
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <xQueueGenericCreateStatic+0x52>
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <xQueueGenericCreateStatic+0x56>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <xQueueGenericCreateStatic+0x58>
 8005af2:	2300      	movs	r3, #0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	623b      	str	r3, [r7, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	e7fe      	b.n	8005b0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d102      	bne.n	8005b1a <xQueueGenericCreateStatic+0x7e>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <xQueueGenericCreateStatic+0x82>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <xQueueGenericCreateStatic+0x84>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	61fb      	str	r3, [r7, #28]
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b3a:	2350      	movs	r3, #80	; 0x50
 8005b3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b50      	cmp	r3, #80	; 0x50
 8005b42:	d00a      	beq.n	8005b5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	61bb      	str	r3, [r7, #24]
}
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00d      	beq.n	8005b82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	4613      	mov	r3, r2
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 f83f 	bl	8005c00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3730      	adds	r7, #48	; 0x30
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08a      	sub	sp, #40	; 0x28
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	4613      	mov	r3, r2
 8005b98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	613b      	str	r3, [r7, #16]
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	3350      	adds	r3, #80	; 0x50
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f002 fe87 	bl	80088d8 <pvPortMalloc>
 8005bca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d011      	beq.n	8005bf6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	3350      	adds	r3, #80	; 0x50
 8005bda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005be4:	79fa      	ldrb	r2, [r7, #7]
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	4613      	mov	r3, r2
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f805 	bl	8005c00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
	}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d103      	bne.n	8005c1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	e002      	b.n	8005c22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c2e:	2101      	movs	r1, #1
 8005c30:	69b8      	ldr	r0, [r7, #24]
 8005c32:	f7ff fecb 	bl	80059cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	78fa      	ldrb	r2, [r7, #3]
 8005c3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b08a      	sub	sp, #40	; 0x28
 8005c4a:	af02      	add	r7, sp, #8
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10a      	bne.n	8005c6e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	61bb      	str	r3, [r7, #24]
}
 8005c6a:	bf00      	nop
 8005c6c:	e7fe      	b.n	8005c6c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d90a      	bls.n	8005c8c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	617b      	str	r3, [r7, #20]
}
 8005c88:	bf00      	nop
 8005c8a:	e7fe      	b.n	8005c8a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	2100      	movs	r1, #0
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7ff ff00 	bl	8005a9c <xQueueGenericCreateStatic>
 8005c9c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005caa:	69fb      	ldr	r3, [r7, #28]
	}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3720      	adds	r7, #32
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	613b      	str	r3, [r7, #16]
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d90a      	bls.n	8005cf8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	60fb      	str	r3, [r7, #12]
}
 8005cf4:	bf00      	nop
 8005cf6:	e7fe      	b.n	8005cf6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff ff45 	bl	8005b8c <xQueueGenericCreate>
 8005d02:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005d10:	697b      	ldr	r3, [r7, #20]
	}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08e      	sub	sp, #56	; 0x38
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <xQueueGenericSend+0x32>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d103      	bne.n	8005d5c <xQueueGenericSend+0x40>
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <xQueueGenericSend+0x44>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <xQueueGenericSend+0x46>
 8005d60:	2300      	movs	r3, #0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10a      	bne.n	8005d7c <xQueueGenericSend+0x60>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d103      	bne.n	8005d8a <xQueueGenericSend+0x6e>
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <xQueueGenericSend+0x72>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <xQueueGenericSend+0x74>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <xQueueGenericSend+0x8e>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	623b      	str	r3, [r7, #32]
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005daa:	f001 fddf 	bl	800796c <xTaskGetSchedulerState>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d102      	bne.n	8005dba <xQueueGenericSend+0x9e>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <xQueueGenericSend+0xa2>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <xQueueGenericSend+0xa4>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <xQueueGenericSend+0xbe>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	61fb      	str	r3, [r7, #28]
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dda:	f002 fc5b 	bl	8008694 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <xQueueGenericSend+0xd4>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d129      	bne.n	8005e44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005df6:	f000 fc5e 	bl	80066b6 <prvCopyDataToQueue>
 8005dfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d010      	beq.n	8005e26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	3324      	adds	r3, #36	; 0x24
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f001 fb8f 	bl	800752c <xTaskRemoveFromEventList>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d013      	beq.n	8005e3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e14:	4b3f      	ldr	r3, [pc, #252]	; (8005f14 <xQueueGenericSend+0x1f8>)
 8005e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	e00a      	b.n	8005e3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e2c:	4b39      	ldr	r3, [pc, #228]	; (8005f14 <xQueueGenericSend+0x1f8>)
 8005e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e3c:	f002 fc5a 	bl	80086f4 <vPortExitCritical>
				return pdPASS;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e063      	b.n	8005f0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e4a:	f002 fc53 	bl	80086f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e05c      	b.n	8005f0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d106      	bne.n	8005e66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e58:	f107 0314 	add.w	r3, r7, #20
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 fc2b 	bl	80076b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e62:	2301      	movs	r3, #1
 8005e64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e66:	f002 fc45 	bl	80086f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e6a:	f001 f8ff 	bl	800706c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e6e:	f002 fc11 	bl	8008694 <vPortEnterCritical>
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e78:	b25b      	sxtb	r3, r3
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e7e:	d103      	bne.n	8005e88 <xQueueGenericSend+0x16c>
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e8e:	b25b      	sxtb	r3, r3
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e94:	d103      	bne.n	8005e9e <xQueueGenericSend+0x182>
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e9e:	f002 fc29 	bl	80086f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ea2:	1d3a      	adds	r2, r7, #4
 8005ea4:	f107 0314 	add.w	r3, r7, #20
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 fc1a 	bl	80076e4 <xTaskCheckForTimeOut>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d124      	bne.n	8005f00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005eb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eb8:	f000 fcf5 	bl	80068a6 <prvIsQueueFull>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d018      	beq.n	8005ef4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	3310      	adds	r3, #16
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 faa2 	bl	8007414 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ed2:	f000 fc80 	bl	80067d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ed6:	f001 f8d7 	bl	8007088 <xTaskResumeAll>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f47f af7c 	bne.w	8005dda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005ee2:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <xQueueGenericSend+0x1f8>)
 8005ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	e772      	b.n	8005dda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ef6:	f000 fc6e 	bl	80067d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005efa:	f001 f8c5 	bl	8007088 <xTaskResumeAll>
 8005efe:	e76c      	b.n	8005dda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f02:	f000 fc68 	bl	80067d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f06:	f001 f8bf 	bl	8007088 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3738      	adds	r7, #56	; 0x38
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	e000ed04 	.word	0xe000ed04

08005f18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b090      	sub	sp, #64	; 0x40
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d103      	bne.n	8005f54 <xQueueGenericSendFromISR+0x3c>
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <xQueueGenericSendFromISR+0x40>
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <xQueueGenericSendFromISR+0x42>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10a      	bne.n	8005f74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f70:	bf00      	nop
 8005f72:	e7fe      	b.n	8005f72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d103      	bne.n	8005f82 <xQueueGenericSendFromISR+0x6a>
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <xQueueGenericSendFromISR+0x6e>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <xQueueGenericSendFromISR+0x70>
 8005f86:	2300      	movs	r3, #0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	623b      	str	r3, [r7, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fa2:	f002 fc59 	bl	8008858 <vPortValidateInterruptPriority>
	__asm volatile
 8005fa6:	f3ef 8211 	mrs	r2, BASEPRI
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	61fa      	str	r2, [r7, #28]
 8005fbc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005fbe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <xQueueGenericSendFromISR+0xbc>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d12f      	bne.n	8006034 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fea:	f000 fb64 	bl	80066b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff6:	d112      	bne.n	800601e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d016      	beq.n	800602e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006002:	3324      	adds	r3, #36	; 0x24
 8006004:	4618      	mov	r0, r3
 8006006:	f001 fa91 	bl	800752c <xTaskRemoveFromEventList>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00e      	beq.n	800602e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00b      	beq.n	800602e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	e007      	b.n	800602e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800601e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006022:	3301      	adds	r3, #1
 8006024:	b2db      	uxtb	r3, r3
 8006026:	b25a      	sxtb	r2, r3
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800602e:	2301      	movs	r3, #1
 8006030:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006032:	e001      	b.n	8006038 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006034:	2300      	movs	r3, #0
 8006036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f383 8811 	msr	BASEPRI, r3
}
 8006042:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006046:	4618      	mov	r0, r3
 8006048:	3740      	adds	r7, #64	; 0x40
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b08e      	sub	sp, #56	; 0x38
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10a      	bne.n	8006078 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	623b      	str	r3, [r7, #32]
}
 8006074:	bf00      	nop
 8006076:	e7fe      	b.n	8006076 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	61fb      	str	r3, [r7, #28]
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d103      	bne.n	80060a6 <xQueueGiveFromISR+0x58>
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <xQueueGiveFromISR+0x5c>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <xQueueGiveFromISR+0x5e>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	61bb      	str	r3, [r7, #24]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060c6:	f002 fbc7 	bl	8008858 <vPortValidateInterruptPriority>
	__asm volatile
 80060ca:	f3ef 8211 	mrs	r2, BASEPRI
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	617a      	str	r2, [r7, #20]
 80060e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80060e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d22b      	bcs.n	800614e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006108:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006110:	d112      	bne.n	8006138 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	d016      	beq.n	8006148 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	3324      	adds	r3, #36	; 0x24
 800611e:	4618      	mov	r0, r3
 8006120:	f001 fa04 	bl	800752c <xTaskRemoveFromEventList>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00e      	beq.n	8006148 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00b      	beq.n	8006148 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2201      	movs	r2, #1
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	e007      	b.n	8006148 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800613c:	3301      	adds	r3, #1
 800613e:	b2db      	uxtb	r3, r3
 8006140:	b25a      	sxtb	r2, r3
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006148:	2301      	movs	r3, #1
 800614a:	637b      	str	r3, [r7, #52]	; 0x34
 800614c:	e001      	b.n	8006152 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800614e:	2300      	movs	r3, #0
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f383 8811 	msr	BASEPRI, r3
}
 800615c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006160:	4618      	mov	r0, r3
 8006162:	3738      	adds	r7, #56	; 0x38
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08c      	sub	sp, #48	; 0x30
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006174:	2300      	movs	r3, #0
 8006176:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10a      	bne.n	8006198 <xQueueReceive+0x30>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	623b      	str	r3, [r7, #32]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d103      	bne.n	80061a6 <xQueueReceive+0x3e>
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <xQueueReceive+0x42>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e000      	b.n	80061ac <xQueueReceive+0x44>
 80061aa:	2300      	movs	r3, #0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <xQueueReceive+0x5e>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	61fb      	str	r3, [r7, #28]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061c6:	f001 fbd1 	bl	800796c <xTaskGetSchedulerState>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <xQueueReceive+0x6e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <xQueueReceive+0x72>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <xQueueReceive+0x74>
 80061da:	2300      	movs	r3, #0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <xQueueReceive+0x8e>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	61bb      	str	r3, [r7, #24]
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061f6:	f002 fa4d 	bl	8008694 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01f      	beq.n	8006246 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800620a:	f000 fabe 	bl	800678a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	1e5a      	subs	r2, r3, #1
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00f      	beq.n	800623e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	3310      	adds	r3, #16
 8006222:	4618      	mov	r0, r3
 8006224:	f001 f982 	bl	800752c <xTaskRemoveFromEventList>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800622e:	4b3d      	ldr	r3, [pc, #244]	; (8006324 <xQueueReceive+0x1bc>)
 8006230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800623e:	f002 fa59 	bl	80086f4 <vPortExitCritical>
				return pdPASS;
 8006242:	2301      	movs	r3, #1
 8006244:	e069      	b.n	800631a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d103      	bne.n	8006254 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800624c:	f002 fa52 	bl	80086f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006250:	2300      	movs	r3, #0
 8006252:	e062      	b.n	800631a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800625a:	f107 0310 	add.w	r3, r7, #16
 800625e:	4618      	mov	r0, r3
 8006260:	f001 fa2a 	bl	80076b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006264:	2301      	movs	r3, #1
 8006266:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006268:	f002 fa44 	bl	80086f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800626c:	f000 fefe 	bl	800706c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006270:	f002 fa10 	bl	8008694 <vPortEnterCritical>
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800627a:	b25b      	sxtb	r3, r3
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006280:	d103      	bne.n	800628a <xQueueReceive+0x122>
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006290:	b25b      	sxtb	r3, r3
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006296:	d103      	bne.n	80062a0 <xQueueReceive+0x138>
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062a0:	f002 fa28 	bl	80086f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062a4:	1d3a      	adds	r2, r7, #4
 80062a6:	f107 0310 	add.w	r3, r7, #16
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f001 fa19 	bl	80076e4 <xTaskCheckForTimeOut>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d123      	bne.n	8006300 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ba:	f000 fade 	bl	800687a <prvIsQueueEmpty>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d017      	beq.n	80062f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	3324      	adds	r3, #36	; 0x24
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	4611      	mov	r1, r2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f001 f8a1 	bl	8007414 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d4:	f000 fa7f 	bl	80067d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062d8:	f000 fed6 	bl	8007088 <xTaskResumeAll>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d189      	bne.n	80061f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80062e2:	4b10      	ldr	r3, [pc, #64]	; (8006324 <xQueueReceive+0x1bc>)
 80062e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	e780      	b.n	80061f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f6:	f000 fa6e 	bl	80067d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062fa:	f000 fec5 	bl	8007088 <xTaskResumeAll>
 80062fe:	e77a      	b.n	80061f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006302:	f000 fa68 	bl	80067d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006306:	f000 febf 	bl	8007088 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800630a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800630c:	f000 fab5 	bl	800687a <prvIsQueueEmpty>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	f43f af6f 	beq.w	80061f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006318:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800631a:	4618      	mov	r0, r3
 800631c:	3730      	adds	r7, #48	; 0x30
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	e000ed04 	.word	0xe000ed04

08006328 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08e      	sub	sp, #56	; 0x38
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006332:	2300      	movs	r3, #0
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800633a:	2300      	movs	r3, #0
 800633c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	623b      	str	r3, [r7, #32]
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	61fb      	str	r3, [r7, #28]
}
 8006374:	bf00      	nop
 8006376:	e7fe      	b.n	8006376 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006378:	f001 faf8 	bl	800796c <xTaskGetSchedulerState>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d102      	bne.n	8006388 <xQueueSemaphoreTake+0x60>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <xQueueSemaphoreTake+0x64>
 8006388:	2301      	movs	r3, #1
 800638a:	e000      	b.n	800638e <xQueueSemaphoreTake+0x66>
 800638c:	2300      	movs	r3, #0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	61bb      	str	r3, [r7, #24]
}
 80063a4:	bf00      	nop
 80063a6:	e7fe      	b.n	80063a6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063a8:	f002 f974 	bl	8008694 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d024      	beq.n	8006402 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	1e5a      	subs	r2, r3, #1
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d104      	bne.n	80063d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80063c8:	f001 fc5e 	bl	8007c88 <pvTaskIncrementMutexHeldCount>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00f      	beq.n	80063fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	3310      	adds	r3, #16
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 f8a4 	bl	800752c <xTaskRemoveFromEventList>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063ea:	4b54      	ldr	r3, [pc, #336]	; (800653c <xQueueSemaphoreTake+0x214>)
 80063ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063fa:	f002 f97b 	bl	80086f4 <vPortExitCritical>
				return pdPASS;
 80063fe:	2301      	movs	r3, #1
 8006400:	e097      	b.n	8006532 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d111      	bne.n	800642c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	617b      	str	r3, [r7, #20]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006424:	f002 f966 	bl	80086f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006428:	2300      	movs	r3, #0
 800642a:	e082      	b.n	8006532 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800642c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642e:	2b00      	cmp	r3, #0
 8006430:	d106      	bne.n	8006440 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006432:	f107 030c 	add.w	r3, r7, #12
 8006436:	4618      	mov	r0, r3
 8006438:	f001 f93e 	bl	80076b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800643c:	2301      	movs	r3, #1
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006440:	f002 f958 	bl	80086f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006444:	f000 fe12 	bl	800706c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006448:	f002 f924 	bl	8008694 <vPortEnterCritical>
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006452:	b25b      	sxtb	r3, r3
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006458:	d103      	bne.n	8006462 <xQueueSemaphoreTake+0x13a>
 800645a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006468:	b25b      	sxtb	r3, r3
 800646a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800646e:	d103      	bne.n	8006478 <xQueueSemaphoreTake+0x150>
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006478:	f002 f93c 	bl	80086f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800647c:	463a      	mov	r2, r7
 800647e:	f107 030c 	add.w	r3, r7, #12
 8006482:	4611      	mov	r1, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f001 f92d 	bl	80076e4 <xTaskCheckForTimeOut>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d132      	bne.n	80064f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006492:	f000 f9f2 	bl	800687a <prvIsQueueEmpty>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d026      	beq.n	80064ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80064a4:	f002 f8f6 	bl	8008694 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f001 fa7b 	bl	80079a8 <xTaskPriorityInherit>
 80064b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80064b4:	f002 f91e 	bl	80086f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ba:	3324      	adds	r3, #36	; 0x24
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	4611      	mov	r1, r2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 ffa7 	bl	8007414 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064c8:	f000 f985 	bl	80067d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064cc:	f000 fddc 	bl	8007088 <xTaskResumeAll>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f47f af68 	bne.w	80063a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80064d8:	4b18      	ldr	r3, [pc, #96]	; (800653c <xQueueSemaphoreTake+0x214>)
 80064da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	e75e      	b.n	80063a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80064ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064ec:	f000 f973 	bl	80067d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064f0:	f000 fdca 	bl	8007088 <xTaskResumeAll>
 80064f4:	e758      	b.n	80063a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80064f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064f8:	f000 f96d 	bl	80067d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064fc:	f000 fdc4 	bl	8007088 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006500:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006502:	f000 f9ba 	bl	800687a <prvIsQueueEmpty>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	f43f af4d 	beq.w	80063a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00d      	beq.n	8006530 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006514:	f002 f8be 	bl	8008694 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800651a:	f000 f8b4 	bl	8006686 <prvGetDisinheritPriorityAfterTimeout>
 800651e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006526:	4618      	mov	r0, r3
 8006528:	f001 fb14 	bl	8007b54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800652c:	f002 f8e2 	bl	80086f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006530:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006532:	4618      	mov	r0, r3
 8006534:	3738      	adds	r7, #56	; 0x38
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	e000ed04 	.word	0xe000ed04

08006540 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08e      	sub	sp, #56	; 0x38
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	623b      	str	r3, [r7, #32]
}
 8006568:	bf00      	nop
 800656a:	e7fe      	b.n	800656a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <xQueueReceiveFromISR+0x3a>
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <xQueueReceiveFromISR+0x3e>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <xQueueReceiveFromISR+0x40>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	61fb      	str	r3, [r7, #28]
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800659a:	f002 f95d 	bl	8008858 <vPortValidateInterruptPriority>
	__asm volatile
 800659e:	f3ef 8211 	mrs	r2, BASEPRI
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	61ba      	str	r2, [r7, #24]
 80065b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d02f      	beq.n	8006626 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065d4:	f000 f8d9 	bl	800678a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	1e5a      	subs	r2, r3, #1
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80065e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e8:	d112      	bne.n	8006610 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d016      	beq.n	8006620 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	3310      	adds	r3, #16
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 ff98 	bl	800752c <xTaskRemoveFromEventList>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00e      	beq.n	8006620 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e007      	b.n	8006620 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006614:	3301      	adds	r3, #1
 8006616:	b2db      	uxtb	r3, r3
 8006618:	b25a      	sxtb	r2, r3
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006620:	2301      	movs	r3, #1
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
 8006624:	e001      	b.n	800662a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006626:	2300      	movs	r3, #0
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
 800662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f383 8811 	msr	BASEPRI, r3
}
 8006634:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006638:	4618      	mov	r0, r3
 800663a:	3738      	adds	r7, #56	; 0x38
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <vQueueDelete+0x28>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	60bb      	str	r3, [r7, #8]
}
 8006664:	bf00      	nop
 8006666:	e7fe      	b.n	8006666 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 f95f 	bl	800692c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006674:	2b00      	cmp	r3, #0
 8006676:	d102      	bne.n	800667e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f002 f9f9 	bl	8008a70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800667e:	bf00      	nop
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006686:	b480      	push	{r7}
 8006688:	b085      	sub	sp, #20
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	2b00      	cmp	r3, #0
 8006694:	d006      	beq.n	80066a4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	e001      	b.n	80066a8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80066a8:	68fb      	ldr	r3, [r7, #12]
	}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b086      	sub	sp, #24
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10d      	bne.n	80066f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d14d      	bne.n	8006778 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f001 f9c9 	bl	8007a78 <xTaskPriorityDisinherit>
 80066e6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	609a      	str	r2, [r3, #8]
 80066ee:	e043      	b.n	8006778 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d119      	bne.n	800672a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6858      	ldr	r0, [r3, #4]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	461a      	mov	r2, r3
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	f002 fb01 	bl	8008d08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	441a      	add	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	429a      	cmp	r2, r3
 800671e:	d32b      	bcc.n	8006778 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	605a      	str	r2, [r3, #4]
 8006728:	e026      	b.n	8006778 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	68d8      	ldr	r0, [r3, #12]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	461a      	mov	r2, r3
 8006734:	68b9      	ldr	r1, [r7, #8]
 8006736:	f002 fae7 	bl	8008d08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	425b      	negs	r3, r3
 8006744:	441a      	add	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d207      	bcs.n	8006766 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	425b      	negs	r3, r3
 8006760:	441a      	add	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d105      	bne.n	8006778 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	3b01      	subs	r3, #1
 8006776:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006780:	697b      	ldr	r3, [r7, #20]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b082      	sub	sp, #8
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d018      	beq.n	80067ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a4:	441a      	add	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d303      	bcc.n	80067be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68d9      	ldr	r1, [r3, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	461a      	mov	r2, r3
 80067c8:	6838      	ldr	r0, [r7, #0]
 80067ca:	f002 fa9d 	bl	8008d08 <memcpy>
	}
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067de:	f001 ff59 	bl	8008694 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067ea:	e011      	b.n	8006810 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d012      	beq.n	800681a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3324      	adds	r3, #36	; 0x24
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fe97 	bl	800752c <xTaskRemoveFromEventList>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006804:	f000 ffd0 	bl	80077a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	3b01      	subs	r3, #1
 800680c:	b2db      	uxtb	r3, r3
 800680e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006814:	2b00      	cmp	r3, #0
 8006816:	dce9      	bgt.n	80067ec <prvUnlockQueue+0x16>
 8006818:	e000      	b.n	800681c <prvUnlockQueue+0x46>
					break;
 800681a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	22ff      	movs	r2, #255	; 0xff
 8006820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006824:	f001 ff66 	bl	80086f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006828:	f001 ff34 	bl	8008694 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006832:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006834:	e011      	b.n	800685a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d012      	beq.n	8006864 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3310      	adds	r3, #16
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fe72 	bl	800752c <xTaskRemoveFromEventList>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800684e:	f000 ffab 	bl	80077a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006852:	7bbb      	ldrb	r3, [r7, #14]
 8006854:	3b01      	subs	r3, #1
 8006856:	b2db      	uxtb	r3, r3
 8006858:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800685a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800685e:	2b00      	cmp	r3, #0
 8006860:	dce9      	bgt.n	8006836 <prvUnlockQueue+0x60>
 8006862:	e000      	b.n	8006866 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006864:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	22ff      	movs	r2, #255	; 0xff
 800686a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800686e:	f001 ff41 	bl	80086f4 <vPortExitCritical>
}
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006882:	f001 ff07 	bl	8008694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	2b00      	cmp	r3, #0
 800688c:	d102      	bne.n	8006894 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800688e:	2301      	movs	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e001      	b.n	8006898 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006898:	f001 ff2c 	bl	80086f4 <vPortExitCritical>

	return xReturn;
 800689c:	68fb      	ldr	r3, [r7, #12]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068ae:	f001 fef1 	bl	8008694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d102      	bne.n	80068c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068be:	2301      	movs	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e001      	b.n	80068c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068c8:	f001 ff14 	bl	80086f4 <vPortExitCritical>

	return xReturn;
 80068cc:	68fb      	ldr	r3, [r7, #12]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	e014      	b.n	8006912 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068e8:	4a0f      	ldr	r2, [pc, #60]	; (8006928 <vQueueAddToRegistry+0x50>)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10b      	bne.n	800690c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068f4:	490c      	ldr	r1, [pc, #48]	; (8006928 <vQueueAddToRegistry+0x50>)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068fe:	4a0a      	ldr	r2, [pc, #40]	; (8006928 <vQueueAddToRegistry+0x50>)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	4413      	add	r3, r2
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800690a:	e006      	b.n	800691a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b07      	cmp	r3, #7
 8006916:	d9e7      	bls.n	80068e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006918:	bf00      	nop
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20001a54 	.word	0x20001a54

0800692c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	e016      	b.n	8006968 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800693a:	4a10      	ldr	r2, [pc, #64]	; (800697c <vQueueUnregisterQueue+0x50>)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4413      	add	r3, r2
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	429a      	cmp	r2, r3
 8006948:	d10b      	bne.n	8006962 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800694a:	4a0c      	ldr	r2, [pc, #48]	; (800697c <vQueueUnregisterQueue+0x50>)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2100      	movs	r1, #0
 8006950:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006954:	4a09      	ldr	r2, [pc, #36]	; (800697c <vQueueUnregisterQueue+0x50>)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	4413      	add	r3, r2
 800695c:	2200      	movs	r2, #0
 800695e:	605a      	str	r2, [r3, #4]
				break;
 8006960:	e006      	b.n	8006970 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3301      	adds	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b07      	cmp	r3, #7
 800696c:	d9e5      	bls.n	800693a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800696e:	bf00      	nop
 8006970:	bf00      	nop
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	20001a54 	.word	0x20001a54

08006980 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006990:	f001 fe80 	bl	8008694 <vPortEnterCritical>
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800699a:	b25b      	sxtb	r3, r3
 800699c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069a0:	d103      	bne.n	80069aa <vQueueWaitForMessageRestricted+0x2a>
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069b0:	b25b      	sxtb	r3, r3
 80069b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069b6:	d103      	bne.n	80069c0 <vQueueWaitForMessageRestricted+0x40>
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069c0:	f001 fe98 	bl	80086f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d106      	bne.n	80069da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	3324      	adds	r3, #36	; 0x24
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	68b9      	ldr	r1, [r7, #8]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fd7d 	bl	80074d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80069da:	6978      	ldr	r0, [r7, #20]
 80069dc:	f7ff fefb 	bl	80067d6 <prvUnlockQueue>
	}
 80069e0:	bf00      	nop
 80069e2:	3718      	adds	r7, #24
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08e      	sub	sp, #56	; 0x38
 80069ec:	af04      	add	r7, sp, #16
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10a      	bne.n	8006a12 <xTaskCreateStatic+0x2a>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	623b      	str	r3, [r7, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	e7fe      	b.n	8006a10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <xTaskCreateStatic+0x46>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	61fb      	str	r3, [r7, #28]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a2e:	235c      	movs	r3, #92	; 0x5c
 8006a30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	2b5c      	cmp	r3, #92	; 0x5c
 8006a36:	d00a      	beq.n	8006a4e <xTaskCreateStatic+0x66>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	61bb      	str	r3, [r7, #24]
}
 8006a4a:	bf00      	nop
 8006a4c:	e7fe      	b.n	8006a4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d01e      	beq.n	8006a94 <xTaskCreateStatic+0xac>
 8006a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01b      	beq.n	8006a94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	2202      	movs	r2, #2
 8006a6a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a6e:	2300      	movs	r3, #0
 8006a70:	9303      	str	r3, [sp, #12]
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	9302      	str	r3, [sp, #8]
 8006a76:	f107 0314 	add.w	r3, r7, #20
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 f850 	bl	8006b2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a8e:	f000 f8dd 	bl	8006c4c <prvAddNewTaskToReadyList>
 8006a92:	e001      	b.n	8006a98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a98:	697b      	ldr	r3, [r7, #20]
	}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3728      	adds	r7, #40	; 0x28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b08c      	sub	sp, #48	; 0x30
 8006aa6:	af04      	add	r7, sp, #16
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 ff0e 	bl	80088d8 <pvPortMalloc>
 8006abc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00e      	beq.n	8006ae2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ac4:	205c      	movs	r0, #92	; 0x5c
 8006ac6:	f001 ff07 	bl	80088d8 <pvPortMalloc>
 8006aca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ad8:	e005      	b.n	8006ae6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ada:	6978      	ldr	r0, [r7, #20]
 8006adc:	f001 ffc8 	bl	8008a70 <vPortFree>
 8006ae0:	e001      	b.n	8006ae6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d017      	beq.n	8006b1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006af4:	88fa      	ldrh	r2, [r7, #6]
 8006af6:	2300      	movs	r3, #0
 8006af8:	9303      	str	r3, [sp, #12]
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	9302      	str	r3, [sp, #8]
 8006afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 f80e 	bl	8006b2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b10:	69f8      	ldr	r0, [r7, #28]
 8006b12:	f000 f89b 	bl	8006c4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b16:	2301      	movs	r3, #1
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	e002      	b.n	8006b22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b22:	69bb      	ldr	r3, [r7, #24]
	}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3720      	adds	r7, #32
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	461a      	mov	r2, r3
 8006b44:	21a5      	movs	r1, #165	; 0xa5
 8006b46:	f002 f8ed 	bl	8008d24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b54:	3b01      	subs	r3, #1
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	f023 0307 	bic.w	r3, r3, #7
 8006b62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	617b      	str	r3, [r7, #20]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d01f      	beq.n	8006bca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	61fb      	str	r3, [r7, #28]
 8006b8e:	e012      	b.n	8006bb6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	4413      	add	r3, r2
 8006b96:	7819      	ldrb	r1, [r3, #0]
 8006b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	3334      	adds	r3, #52	; 0x34
 8006ba0:	460a      	mov	r2, r1
 8006ba2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	4413      	add	r3, r2
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d006      	beq.n	8006bbe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	2b0f      	cmp	r3, #15
 8006bba:	d9e9      	bls.n	8006b90 <prvInitialiseNewTask+0x64>
 8006bbc:	e000      	b.n	8006bc0 <prvInitialiseNewTask+0x94>
			{
				break;
 8006bbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bc8:	e003      	b.n	8006bd2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd4:	2b37      	cmp	r3, #55	; 0x37
 8006bd6:	d901      	bls.n	8006bdc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bd8:	2337      	movs	r3, #55	; 0x37
 8006bda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006be0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006be6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	2200      	movs	r2, #0
 8006bec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe fe56 	bl	80058a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	3318      	adds	r3, #24
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fe fe51 	bl	80058a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	68f9      	ldr	r1, [r7, #12]
 8006c2a:	69b8      	ldr	r0, [r7, #24]
 8006c2c:	f001 fc02 	bl	8008434 <pxPortInitialiseStack>
 8006c30:	4602      	mov	r2, r0
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c42:	bf00      	nop
 8006c44:	3720      	adds	r7, #32
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c54:	f001 fd1e 	bl	8008694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c58:	4b2d      	ldr	r3, [pc, #180]	; (8006d10 <prvAddNewTaskToReadyList+0xc4>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	4a2c      	ldr	r2, [pc, #176]	; (8006d10 <prvAddNewTaskToReadyList+0xc4>)
 8006c60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c62:	4b2c      	ldr	r3, [pc, #176]	; (8006d14 <prvAddNewTaskToReadyList+0xc8>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d109      	bne.n	8006c7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c6a:	4a2a      	ldr	r2, [pc, #168]	; (8006d14 <prvAddNewTaskToReadyList+0xc8>)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c70:	4b27      	ldr	r3, [pc, #156]	; (8006d10 <prvAddNewTaskToReadyList+0xc4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d110      	bne.n	8006c9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c78:	f000 fdba 	bl	80077f0 <prvInitialiseTaskLists>
 8006c7c:	e00d      	b.n	8006c9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c7e:	4b26      	ldr	r3, [pc, #152]	; (8006d18 <prvAddNewTaskToReadyList+0xcc>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d109      	bne.n	8006c9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c86:	4b23      	ldr	r3, [pc, #140]	; (8006d14 <prvAddNewTaskToReadyList+0xc8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d802      	bhi.n	8006c9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c94:	4a1f      	ldr	r2, [pc, #124]	; (8006d14 <prvAddNewTaskToReadyList+0xc8>)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c9a:	4b20      	ldr	r3, [pc, #128]	; (8006d1c <prvAddNewTaskToReadyList+0xd0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	4a1e      	ldr	r2, [pc, #120]	; (8006d1c <prvAddNewTaskToReadyList+0xd0>)
 8006ca2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ca4:	4b1d      	ldr	r3, [pc, #116]	; (8006d1c <prvAddNewTaskToReadyList+0xd0>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb0:	4b1b      	ldr	r3, [pc, #108]	; (8006d20 <prvAddNewTaskToReadyList+0xd4>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d903      	bls.n	8006cc0 <prvAddNewTaskToReadyList+0x74>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	4a18      	ldr	r2, [pc, #96]	; (8006d20 <prvAddNewTaskToReadyList+0xd4>)
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4a15      	ldr	r2, [pc, #84]	; (8006d24 <prvAddNewTaskToReadyList+0xd8>)
 8006cce:	441a      	add	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	f7fe fdf1 	bl	80058be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cdc:	f001 fd0a 	bl	80086f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ce0:	4b0d      	ldr	r3, [pc, #52]	; (8006d18 <prvAddNewTaskToReadyList+0xcc>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00e      	beq.n	8006d06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ce8:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <prvAddNewTaskToReadyList+0xc8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d207      	bcs.n	8006d06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cf6:	4b0c      	ldr	r3, [pc, #48]	; (8006d28 <prvAddNewTaskToReadyList+0xdc>)
 8006cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d06:	bf00      	nop
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000c20 	.word	0x20000c20
 8006d14:	2000074c 	.word	0x2000074c
 8006d18:	20000c2c 	.word	0x20000c2c
 8006d1c:	20000c3c 	.word	0x20000c3c
 8006d20:	20000c28 	.word	0x20000c28
 8006d24:	20000750 	.word	0x20000750
 8006d28:	e000ed04 	.word	0xe000ed04

08006d2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d017      	beq.n	8006d6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d3e:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <vTaskDelay+0x60>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00a      	beq.n	8006d5c <vTaskDelay+0x30>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	60bb      	str	r3, [r7, #8]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d5c:	f000 f986 	bl	800706c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d60:	2100      	movs	r1, #0
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 ffa4 	bl	8007cb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d68:	f000 f98e 	bl	8007088 <xTaskResumeAll>
 8006d6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d107      	bne.n	8006d84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d74:	4b06      	ldr	r3, [pc, #24]	; (8006d90 <vTaskDelay+0x64>)
 8006d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d84:	bf00      	nop
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20000c48 	.word	0x20000c48
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006d9c:	f001 fc7a 	bl	8008694 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <vTaskSuspend+0x18>
 8006da6:	4b30      	ldr	r3, [pc, #192]	; (8006e68 <vTaskSuspend+0xd4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	e000      	b.n	8006dae <vTaskSuspend+0x1a>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3304      	adds	r3, #4
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe fddf 	bl	8005978 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3318      	adds	r3, #24
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fdd6 	bl	8005978 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	4826      	ldr	r0, [pc, #152]	; (8006e6c <vTaskSuspend+0xd8>)
 8006dd4:	f7fe fd73 	bl	80058be <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d103      	bne.n	8006dec <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006dec:	f001 fc82 	bl	80086f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006df0:	4b1f      	ldr	r3, [pc, #124]	; (8006e70 <vTaskSuspend+0xdc>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006df8:	f001 fc4c 	bl	8008694 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006dfc:	f000 fd96 	bl	800792c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006e00:	f001 fc78 	bl	80086f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006e04:	4b18      	ldr	r3, [pc, #96]	; (8006e68 <vTaskSuspend+0xd4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d127      	bne.n	8006e5e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8006e0e:	4b18      	ldr	r3, [pc, #96]	; (8006e70 <vTaskSuspend+0xdc>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d017      	beq.n	8006e46 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006e16:	4b17      	ldr	r3, [pc, #92]	; (8006e74 <vTaskSuspend+0xe0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <vTaskSuspend+0xa0>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	60bb      	str	r3, [r7, #8]
}
 8006e30:	bf00      	nop
 8006e32:	e7fe      	b.n	8006e32 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8006e34:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <vTaskSuspend+0xe4>)
 8006e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e44:	e00b      	b.n	8006e5e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006e46:	4b09      	ldr	r3, [pc, #36]	; (8006e6c <vTaskSuspend+0xd8>)
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <vTaskSuspend+0xe8>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d103      	bne.n	8006e5a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8006e52:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <vTaskSuspend+0xd4>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]
	}
 8006e58:	e001      	b.n	8006e5e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8006e5a:	f000 fa7d 	bl	8007358 <vTaskSwitchContext>
	}
 8006e5e:	bf00      	nop
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	2000074c 	.word	0x2000074c
 8006e6c:	20000c0c 	.word	0x20000c0c
 8006e70:	20000c2c 	.word	0x20000c2c
 8006e74:	20000c48 	.word	0x20000c48
 8006e78:	e000ed04 	.word	0xe000ed04
 8006e7c:	20000c20 	.word	0x20000c20

08006e80 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10a      	bne.n	8006eac <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	60fb      	str	r3, [r7, #12]
}
 8006ea8:	bf00      	nop
 8006eaa:	e7fe      	b.n	8006eaa <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	4a0a      	ldr	r2, [pc, #40]	; (8006edc <prvTaskIsTaskSuspended+0x5c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d10a      	bne.n	8006ecc <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eba:	4a09      	ldr	r2, [pc, #36]	; (8006ee0 <prvTaskIsTaskSuspended+0x60>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d005      	beq.n	8006ecc <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ecc:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006ece:	4618      	mov	r0, r3
 8006ed0:	371c      	adds	r7, #28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	20000c0c 	.word	0x20000c0c
 8006ee0:	20000be0 	.word	0x20000be0

08006ee4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10a      	bne.n	8006f0c <vTaskResume+0x28>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	60bb      	str	r3, [r7, #8]
}
 8006f08:	bf00      	nop
 8006f0a:	e7fe      	b.n	8006f0a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006f0c:	4b20      	ldr	r3, [pc, #128]	; (8006f90 <vTaskResume+0xac>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d038      	beq.n	8006f88 <vTaskResume+0xa4>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d035      	beq.n	8006f88 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8006f1c:	f001 fbba 	bl	8008694 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7ff ffad 	bl	8006e80 <prvTaskIsTaskSuspended>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d02b      	beq.n	8006f84 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe fd21 	bl	8005978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f3a:	4b16      	ldr	r3, [pc, #88]	; (8006f94 <vTaskResume+0xb0>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d903      	bls.n	8006f4a <vTaskResume+0x66>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f46:	4a13      	ldr	r2, [pc, #76]	; (8006f94 <vTaskResume+0xb0>)
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4a10      	ldr	r2, [pc, #64]	; (8006f98 <vTaskResume+0xb4>)
 8006f58:	441a      	add	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f7fe fcac 	bl	80058be <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6a:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <vTaskResume+0xac>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d307      	bcc.n	8006f84 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006f74:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <vTaskResume+0xb8>)
 8006f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006f84:	f001 fbb6 	bl	80086f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f88:	bf00      	nop
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	2000074c 	.word	0x2000074c
 8006f94:	20000c28 	.word	0x20000c28
 8006f98:	20000750 	.word	0x20000750
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08a      	sub	sp, #40	; 0x28
 8006fa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fae:	463a      	mov	r2, r7
 8006fb0:	1d39      	adds	r1, r7, #4
 8006fb2:	f107 0308 	add.w	r3, r7, #8
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe f9b4 	bl	8005324 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	9202      	str	r2, [sp, #8]
 8006fc4:	9301      	str	r3, [sp, #4]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	460a      	mov	r2, r1
 8006fce:	4921      	ldr	r1, [pc, #132]	; (8007054 <vTaskStartScheduler+0xb4>)
 8006fd0:	4821      	ldr	r0, [pc, #132]	; (8007058 <vTaskStartScheduler+0xb8>)
 8006fd2:	f7ff fd09 	bl	80069e8 <xTaskCreateStatic>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	4a20      	ldr	r2, [pc, #128]	; (800705c <vTaskStartScheduler+0xbc>)
 8006fda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fdc:	4b1f      	ldr	r3, [pc, #124]	; (800705c <vTaskStartScheduler+0xbc>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	e001      	b.n	8006fee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d102      	bne.n	8006ffa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ff4:	f000 feb0 	bl	8007d58 <xTimerCreateTimerTask>
 8006ff8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d116      	bne.n	800702e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	613b      	str	r3, [r7, #16]
}
 8007012:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007014:	4b12      	ldr	r3, [pc, #72]	; (8007060 <vTaskStartScheduler+0xc0>)
 8007016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800701a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800701c:	4b11      	ldr	r3, [pc, #68]	; (8007064 <vTaskStartScheduler+0xc4>)
 800701e:	2201      	movs	r2, #1
 8007020:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007022:	4b11      	ldr	r3, [pc, #68]	; (8007068 <vTaskStartScheduler+0xc8>)
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007028:	f001 fa92 	bl	8008550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800702c:	e00e      	b.n	800704c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007034:	d10a      	bne.n	800704c <vTaskStartScheduler+0xac>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	60fb      	str	r3, [r7, #12]
}
 8007048:	bf00      	nop
 800704a:	e7fe      	b.n	800704a <vTaskStartScheduler+0xaa>
}
 800704c:	bf00      	nop
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	080090cc 	.word	0x080090cc
 8007058:	080077c1 	.word	0x080077c1
 800705c:	20000c44 	.word	0x20000c44
 8007060:	20000c40 	.word	0x20000c40
 8007064:	20000c2c 	.word	0x20000c2c
 8007068:	20000c24 	.word	0x20000c24

0800706c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007070:	4b04      	ldr	r3, [pc, #16]	; (8007084 <vTaskSuspendAll+0x18>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3301      	adds	r3, #1
 8007076:	4a03      	ldr	r2, [pc, #12]	; (8007084 <vTaskSuspendAll+0x18>)
 8007078:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800707a:	bf00      	nop
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	20000c48 	.word	0x20000c48

08007088 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007092:	2300      	movs	r3, #0
 8007094:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007096:	4b42      	ldr	r3, [pc, #264]	; (80071a0 <xTaskResumeAll+0x118>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	603b      	str	r3, [r7, #0]
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070b4:	f001 faee 	bl	8008694 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070b8:	4b39      	ldr	r3, [pc, #228]	; (80071a0 <xTaskResumeAll+0x118>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3b01      	subs	r3, #1
 80070be:	4a38      	ldr	r2, [pc, #224]	; (80071a0 <xTaskResumeAll+0x118>)
 80070c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070c2:	4b37      	ldr	r3, [pc, #220]	; (80071a0 <xTaskResumeAll+0x118>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d162      	bne.n	8007190 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070ca:	4b36      	ldr	r3, [pc, #216]	; (80071a4 <xTaskResumeAll+0x11c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d05e      	beq.n	8007190 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070d2:	e02f      	b.n	8007134 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d4:	4b34      	ldr	r3, [pc, #208]	; (80071a8 <xTaskResumeAll+0x120>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3318      	adds	r3, #24
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe fc49 	bl	8005978 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3304      	adds	r3, #4
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fe fc44 	bl	8005978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f4:	4b2d      	ldr	r3, [pc, #180]	; (80071ac <xTaskResumeAll+0x124>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d903      	bls.n	8007104 <xTaskResumeAll+0x7c>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	4a2a      	ldr	r2, [pc, #168]	; (80071ac <xTaskResumeAll+0x124>)
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007108:	4613      	mov	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4a27      	ldr	r2, [pc, #156]	; (80071b0 <xTaskResumeAll+0x128>)
 8007112:	441a      	add	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3304      	adds	r3, #4
 8007118:	4619      	mov	r1, r3
 800711a:	4610      	mov	r0, r2
 800711c:	f7fe fbcf 	bl	80058be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007124:	4b23      	ldr	r3, [pc, #140]	; (80071b4 <xTaskResumeAll+0x12c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	429a      	cmp	r2, r3
 800712c:	d302      	bcc.n	8007134 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800712e:	4b22      	ldr	r3, [pc, #136]	; (80071b8 <xTaskResumeAll+0x130>)
 8007130:	2201      	movs	r2, #1
 8007132:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007134:	4b1c      	ldr	r3, [pc, #112]	; (80071a8 <xTaskResumeAll+0x120>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1cb      	bne.n	80070d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007142:	f000 fbf3 	bl	800792c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007146:	4b1d      	ldr	r3, [pc, #116]	; (80071bc <xTaskResumeAll+0x134>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d010      	beq.n	8007174 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007152:	f000 f847 	bl	80071e4 <xTaskIncrementTick>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800715c:	4b16      	ldr	r3, [pc, #88]	; (80071b8 <xTaskResumeAll+0x130>)
 800715e:	2201      	movs	r2, #1
 8007160:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3b01      	subs	r3, #1
 8007166:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f1      	bne.n	8007152 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800716e:	4b13      	ldr	r3, [pc, #76]	; (80071bc <xTaskResumeAll+0x134>)
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007174:	4b10      	ldr	r3, [pc, #64]	; (80071b8 <xTaskResumeAll+0x130>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d009      	beq.n	8007190 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800717c:	2301      	movs	r3, #1
 800717e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007180:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <xTaskResumeAll+0x138>)
 8007182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007190:	f001 fab0 	bl	80086f4 <vPortExitCritical>

	return xAlreadyYielded;
 8007194:	68bb      	ldr	r3, [r7, #8]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000c48 	.word	0x20000c48
 80071a4:	20000c20 	.word	0x20000c20
 80071a8:	20000be0 	.word	0x20000be0
 80071ac:	20000c28 	.word	0x20000c28
 80071b0:	20000750 	.word	0x20000750
 80071b4:	2000074c 	.word	0x2000074c
 80071b8:	20000c34 	.word	0x20000c34
 80071bc:	20000c30 	.word	0x20000c30
 80071c0:	e000ed04 	.word	0xe000ed04

080071c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <xTaskGetTickCount+0x1c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071d0:	687b      	ldr	r3, [r7, #4]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	20000c24 	.word	0x20000c24

080071e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ee:	4b4f      	ldr	r3, [pc, #316]	; (800732c <xTaskIncrementTick+0x148>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f040 808f 	bne.w	8007316 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071f8:	4b4d      	ldr	r3, [pc, #308]	; (8007330 <xTaskIncrementTick+0x14c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3301      	adds	r3, #1
 80071fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007200:	4a4b      	ldr	r2, [pc, #300]	; (8007330 <xTaskIncrementTick+0x14c>)
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d120      	bne.n	800724e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800720c:	4b49      	ldr	r3, [pc, #292]	; (8007334 <xTaskIncrementTick+0x150>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <xTaskIncrementTick+0x48>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	603b      	str	r3, [r7, #0]
}
 8007228:	bf00      	nop
 800722a:	e7fe      	b.n	800722a <xTaskIncrementTick+0x46>
 800722c:	4b41      	ldr	r3, [pc, #260]	; (8007334 <xTaskIncrementTick+0x150>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	4b41      	ldr	r3, [pc, #260]	; (8007338 <xTaskIncrementTick+0x154>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a3f      	ldr	r2, [pc, #252]	; (8007334 <xTaskIncrementTick+0x150>)
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	4a3f      	ldr	r2, [pc, #252]	; (8007338 <xTaskIncrementTick+0x154>)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	4b3e      	ldr	r3, [pc, #248]	; (800733c <xTaskIncrementTick+0x158>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	4a3d      	ldr	r2, [pc, #244]	; (800733c <xTaskIncrementTick+0x158>)
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	f000 fb6f 	bl	800792c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800724e:	4b3c      	ldr	r3, [pc, #240]	; (8007340 <xTaskIncrementTick+0x15c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	429a      	cmp	r2, r3
 8007256:	d349      	bcc.n	80072ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007258:	4b36      	ldr	r3, [pc, #216]	; (8007334 <xTaskIncrementTick+0x150>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d104      	bne.n	800726c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007262:	4b37      	ldr	r3, [pc, #220]	; (8007340 <xTaskIncrementTick+0x15c>)
 8007264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007268:	601a      	str	r2, [r3, #0]
					break;
 800726a:	e03f      	b.n	80072ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800726c:	4b31      	ldr	r3, [pc, #196]	; (8007334 <xTaskIncrementTick+0x150>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	429a      	cmp	r2, r3
 8007282:	d203      	bcs.n	800728c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007284:	4a2e      	ldr	r2, [pc, #184]	; (8007340 <xTaskIncrementTick+0x15c>)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800728a:	e02f      	b.n	80072ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	3304      	adds	r3, #4
 8007290:	4618      	mov	r0, r3
 8007292:	f7fe fb71 	bl	8005978 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729a:	2b00      	cmp	r3, #0
 800729c:	d004      	beq.n	80072a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	3318      	adds	r3, #24
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fb68 	bl	8005978 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ac:	4b25      	ldr	r3, [pc, #148]	; (8007344 <xTaskIncrementTick+0x160>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d903      	bls.n	80072bc <xTaskIncrementTick+0xd8>
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	4a22      	ldr	r2, [pc, #136]	; (8007344 <xTaskIncrementTick+0x160>)
 80072ba:	6013      	str	r3, [r2, #0]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4a1f      	ldr	r2, [pc, #124]	; (8007348 <xTaskIncrementTick+0x164>)
 80072ca:	441a      	add	r2, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	3304      	adds	r3, #4
 80072d0:	4619      	mov	r1, r3
 80072d2:	4610      	mov	r0, r2
 80072d4:	f7fe faf3 	bl	80058be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072dc:	4b1b      	ldr	r3, [pc, #108]	; (800734c <xTaskIncrementTick+0x168>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d3b8      	bcc.n	8007258 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80072e6:	2301      	movs	r3, #1
 80072e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072ea:	e7b5      	b.n	8007258 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072ec:	4b17      	ldr	r3, [pc, #92]	; (800734c <xTaskIncrementTick+0x168>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f2:	4915      	ldr	r1, [pc, #84]	; (8007348 <xTaskIncrementTick+0x164>)
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	440b      	add	r3, r1
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d901      	bls.n	8007308 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007304:	2301      	movs	r3, #1
 8007306:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007308:	4b11      	ldr	r3, [pc, #68]	; (8007350 <xTaskIncrementTick+0x16c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d007      	beq.n	8007320 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007310:	2301      	movs	r3, #1
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	e004      	b.n	8007320 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007316:	4b0f      	ldr	r3, [pc, #60]	; (8007354 <xTaskIncrementTick+0x170>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3301      	adds	r3, #1
 800731c:	4a0d      	ldr	r2, [pc, #52]	; (8007354 <xTaskIncrementTick+0x170>)
 800731e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007320:	697b      	ldr	r3, [r7, #20]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000c48 	.word	0x20000c48
 8007330:	20000c24 	.word	0x20000c24
 8007334:	20000bd8 	.word	0x20000bd8
 8007338:	20000bdc 	.word	0x20000bdc
 800733c:	20000c38 	.word	0x20000c38
 8007340:	20000c40 	.word	0x20000c40
 8007344:	20000c28 	.word	0x20000c28
 8007348:	20000750 	.word	0x20000750
 800734c:	2000074c 	.word	0x2000074c
 8007350:	20000c34 	.word	0x20000c34
 8007354:	20000c30 	.word	0x20000c30

08007358 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800735e:	4b28      	ldr	r3, [pc, #160]	; (8007400 <vTaskSwitchContext+0xa8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007366:	4b27      	ldr	r3, [pc, #156]	; (8007404 <vTaskSwitchContext+0xac>)
 8007368:	2201      	movs	r2, #1
 800736a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800736c:	e041      	b.n	80073f2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800736e:	4b25      	ldr	r3, [pc, #148]	; (8007404 <vTaskSwitchContext+0xac>)
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007374:	4b24      	ldr	r3, [pc, #144]	; (8007408 <vTaskSwitchContext+0xb0>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	e010      	b.n	800739e <vTaskSwitchContext+0x46>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10a      	bne.n	8007398 <vTaskSwitchContext+0x40>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	607b      	str	r3, [r7, #4]
}
 8007394:	bf00      	nop
 8007396:	e7fe      	b.n	8007396 <vTaskSwitchContext+0x3e>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3b01      	subs	r3, #1
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	491b      	ldr	r1, [pc, #108]	; (800740c <vTaskSwitchContext+0xb4>)
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4613      	mov	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	440b      	add	r3, r1
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0e4      	beq.n	800737c <vTaskSwitchContext+0x24>
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4a13      	ldr	r2, [pc, #76]	; (800740c <vTaskSwitchContext+0xb4>)
 80073be:	4413      	add	r3, r2
 80073c0:	60bb      	str	r3, [r7, #8]
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	605a      	str	r2, [r3, #4]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	3308      	adds	r3, #8
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d104      	bne.n	80073e2 <vTaskSwitchContext+0x8a>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	605a      	str	r2, [r3, #4]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	4a09      	ldr	r2, [pc, #36]	; (8007410 <vTaskSwitchContext+0xb8>)
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	4a06      	ldr	r2, [pc, #24]	; (8007408 <vTaskSwitchContext+0xb0>)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6013      	str	r3, [r2, #0]
}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	20000c48 	.word	0x20000c48
 8007404:	20000c34 	.word	0x20000c34
 8007408:	20000c28 	.word	0x20000c28
 800740c:	20000750 	.word	0x20000750
 8007410:	2000074c 	.word	0x2000074c

08007414 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10a      	bne.n	800743a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	60fb      	str	r3, [r7, #12]
}
 8007436:	bf00      	nop
 8007438:	e7fe      	b.n	8007438 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800743a:	4b07      	ldr	r3, [pc, #28]	; (8007458 <vTaskPlaceOnEventList+0x44>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3318      	adds	r3, #24
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fe fa5f 	bl	8005906 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007448:	2101      	movs	r1, #1
 800744a:	6838      	ldr	r0, [r7, #0]
 800744c:	f000 fc30 	bl	8007cb0 <prvAddCurrentTaskToDelayedList>
}
 8007450:	bf00      	nop
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	2000074c 	.word	0x2000074c

0800745c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	617b      	str	r3, [r7, #20]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007484:	4b11      	ldr	r3, [pc, #68]	; (80074cc <vTaskPlaceOnUnorderedEventList+0x70>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10a      	bne.n	80074a2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	613b      	str	r3, [r7, #16]
}
 800749e:	bf00      	nop
 80074a0:	e7fe      	b.n	80074a0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80074a2:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80074ac:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074ae:	4b08      	ldr	r3, [pc, #32]	; (80074d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3318      	adds	r3, #24
 80074b4:	4619      	mov	r1, r3
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f7fe fa01 	bl	80058be <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074bc:	2101      	movs	r1, #1
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fbf6 	bl	8007cb0 <prvAddCurrentTaskToDelayedList>
}
 80074c4:	bf00      	nop
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	20000c48 	.word	0x20000c48
 80074d0:	2000074c 	.word	0x2000074c

080074d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	617b      	str	r3, [r7, #20]
}
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <vTaskPlaceOnEventListRestricted+0x54>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3318      	adds	r3, #24
 8007502:	4619      	mov	r1, r3
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f7fe f9da 	bl	80058be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007514:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	68b8      	ldr	r0, [r7, #8]
 800751a:	f000 fbc9 	bl	8007cb0 <prvAddCurrentTaskToDelayedList>
	}
 800751e:	bf00      	nop
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	2000074c 	.word	0x2000074c

0800752c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10a      	bne.n	8007558 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	60fb      	str	r3, [r7, #12]
}
 8007554:	bf00      	nop
 8007556:	e7fe      	b.n	8007556 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	3318      	adds	r3, #24
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe fa0b 	bl	8005978 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007562:	4b1e      	ldr	r3, [pc, #120]	; (80075dc <xTaskRemoveFromEventList+0xb0>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d11d      	bne.n	80075a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	3304      	adds	r3, #4
 800756e:	4618      	mov	r0, r3
 8007570:	f7fe fa02 	bl	8005978 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007578:	4b19      	ldr	r3, [pc, #100]	; (80075e0 <xTaskRemoveFromEventList+0xb4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	429a      	cmp	r2, r3
 800757e:	d903      	bls.n	8007588 <xTaskRemoveFromEventList+0x5c>
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	4a16      	ldr	r2, [pc, #88]	; (80075e0 <xTaskRemoveFromEventList+0xb4>)
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4a13      	ldr	r2, [pc, #76]	; (80075e4 <xTaskRemoveFromEventList+0xb8>)
 8007596:	441a      	add	r2, r3
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	3304      	adds	r3, #4
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f7fe f98d 	bl	80058be <vListInsertEnd>
 80075a4:	e005      	b.n	80075b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	3318      	adds	r3, #24
 80075aa:	4619      	mov	r1, r3
 80075ac:	480e      	ldr	r0, [pc, #56]	; (80075e8 <xTaskRemoveFromEventList+0xbc>)
 80075ae:	f7fe f986 	bl	80058be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b6:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <xTaskRemoveFromEventList+0xc0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075bc:	429a      	cmp	r2, r3
 80075be:	d905      	bls.n	80075cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075c0:	2301      	movs	r3, #1
 80075c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075c4:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <xTaskRemoveFromEventList+0xc4>)
 80075c6:	2201      	movs	r2, #1
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	e001      	b.n	80075d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80075cc:	2300      	movs	r3, #0
 80075ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80075d0:	697b      	ldr	r3, [r7, #20]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20000c48 	.word	0x20000c48
 80075e0:	20000c28 	.word	0x20000c28
 80075e4:	20000750 	.word	0x20000750
 80075e8:	20000be0 	.word	0x20000be0
 80075ec:	2000074c 	.word	0x2000074c
 80075f0:	20000c34 	.word	0x20000c34

080075f4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80075fe:	4b29      	ldr	r3, [pc, #164]	; (80076a4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10a      	bne.n	800761c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	613b      	str	r3, [r7, #16]
}
 8007618:	bf00      	nop
 800761a:	e7fe      	b.n	800761a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	60fb      	str	r3, [r7, #12]
}
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7fe f995 	bl	8005978 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	3304      	adds	r3, #4
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe f990 	bl	8005978 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765c:	4b12      	ldr	r3, [pc, #72]	; (80076a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d903      	bls.n	800766c <vTaskRemoveFromUnorderedEventList+0x78>
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	4a0f      	ldr	r2, [pc, #60]	; (80076a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4a0c      	ldr	r2, [pc, #48]	; (80076ac <vTaskRemoveFromUnorderedEventList+0xb8>)
 800767a:	441a      	add	r2, r3
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	3304      	adds	r3, #4
 8007680:	4619      	mov	r1, r3
 8007682:	4610      	mov	r0, r2
 8007684:	f7fe f91b 	bl	80058be <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768c:	4b08      	ldr	r3, [pc, #32]	; (80076b0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007692:	429a      	cmp	r2, r3
 8007694:	d902      	bls.n	800769c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007696:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007698:	2201      	movs	r2, #1
 800769a:	601a      	str	r2, [r3, #0]
	}
}
 800769c:	bf00      	nop
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20000c48 	.word	0x20000c48
 80076a8:	20000c28 	.word	0x20000c28
 80076ac:	20000750 	.word	0x20000750
 80076b0:	2000074c 	.word	0x2000074c
 80076b4:	20000c34 	.word	0x20000c34

080076b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076c0:	4b06      	ldr	r3, [pc, #24]	; (80076dc <vTaskInternalSetTimeOutState+0x24>)
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <vTaskInternalSetTimeOutState+0x28>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	605a      	str	r2, [r3, #4]
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	20000c38 	.word	0x20000c38
 80076e0:	20000c24 	.word	0x20000c24

080076e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b088      	sub	sp, #32
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	613b      	str	r3, [r7, #16]
}
 8007706:	bf00      	nop
 8007708:	e7fe      	b.n	8007708 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10a      	bne.n	8007726 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	60fb      	str	r3, [r7, #12]
}
 8007722:	bf00      	nop
 8007724:	e7fe      	b.n	8007724 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007726:	f000 ffb5 	bl	8008694 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800772a:	4b1d      	ldr	r3, [pc, #116]	; (80077a0 <xTaskCheckForTimeOut+0xbc>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007742:	d102      	bne.n	800774a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007744:	2300      	movs	r3, #0
 8007746:	61fb      	str	r3, [r7, #28]
 8007748:	e023      	b.n	8007792 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	4b15      	ldr	r3, [pc, #84]	; (80077a4 <xTaskCheckForTimeOut+0xc0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	429a      	cmp	r2, r3
 8007754:	d007      	beq.n	8007766 <xTaskCheckForTimeOut+0x82>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	429a      	cmp	r2, r3
 800775e:	d302      	bcc.n	8007766 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007760:	2301      	movs	r3, #1
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	e015      	b.n	8007792 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	429a      	cmp	r2, r3
 800776e:	d20b      	bcs.n	8007788 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	1ad2      	subs	r2, r2, r3
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff ff9b 	bl	80076b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007782:	2300      	movs	r3, #0
 8007784:	61fb      	str	r3, [r7, #28]
 8007786:	e004      	b.n	8007792 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800778e:	2301      	movs	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007792:	f000 ffaf 	bl	80086f4 <vPortExitCritical>

	return xReturn;
 8007796:	69fb      	ldr	r3, [r7, #28]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3720      	adds	r7, #32
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	20000c24 	.word	0x20000c24
 80077a4:	20000c38 	.word	0x20000c38

080077a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077ac:	4b03      	ldr	r3, [pc, #12]	; (80077bc <vTaskMissedYield+0x14>)
 80077ae:	2201      	movs	r2, #1
 80077b0:	601a      	str	r2, [r3, #0]
}
 80077b2:	bf00      	nop
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	20000c34 	.word	0x20000c34

080077c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077c8:	f000 f852 	bl	8007870 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077cc:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <prvIdleTask+0x28>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d9f9      	bls.n	80077c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <prvIdleTask+0x2c>)
 80077d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077e4:	e7f0      	b.n	80077c8 <prvIdleTask+0x8>
 80077e6:	bf00      	nop
 80077e8:	20000750 	.word	0x20000750
 80077ec:	e000ed04 	.word	0xe000ed04

080077f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077f6:	2300      	movs	r3, #0
 80077f8:	607b      	str	r3, [r7, #4]
 80077fa:	e00c      	b.n	8007816 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4a12      	ldr	r2, [pc, #72]	; (8007850 <prvInitialiseTaskLists+0x60>)
 8007808:	4413      	add	r3, r2
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe f82a 	bl	8005864 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3301      	adds	r3, #1
 8007814:	607b      	str	r3, [r7, #4]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b37      	cmp	r3, #55	; 0x37
 800781a:	d9ef      	bls.n	80077fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800781c:	480d      	ldr	r0, [pc, #52]	; (8007854 <prvInitialiseTaskLists+0x64>)
 800781e:	f7fe f821 	bl	8005864 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007822:	480d      	ldr	r0, [pc, #52]	; (8007858 <prvInitialiseTaskLists+0x68>)
 8007824:	f7fe f81e 	bl	8005864 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007828:	480c      	ldr	r0, [pc, #48]	; (800785c <prvInitialiseTaskLists+0x6c>)
 800782a:	f7fe f81b 	bl	8005864 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800782e:	480c      	ldr	r0, [pc, #48]	; (8007860 <prvInitialiseTaskLists+0x70>)
 8007830:	f7fe f818 	bl	8005864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007834:	480b      	ldr	r0, [pc, #44]	; (8007864 <prvInitialiseTaskLists+0x74>)
 8007836:	f7fe f815 	bl	8005864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800783a:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <prvInitialiseTaskLists+0x78>)
 800783c:	4a05      	ldr	r2, [pc, #20]	; (8007854 <prvInitialiseTaskLists+0x64>)
 800783e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007840:	4b0a      	ldr	r3, [pc, #40]	; (800786c <prvInitialiseTaskLists+0x7c>)
 8007842:	4a05      	ldr	r2, [pc, #20]	; (8007858 <prvInitialiseTaskLists+0x68>)
 8007844:	601a      	str	r2, [r3, #0]
}
 8007846:	bf00      	nop
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20000750 	.word	0x20000750
 8007854:	20000bb0 	.word	0x20000bb0
 8007858:	20000bc4 	.word	0x20000bc4
 800785c:	20000be0 	.word	0x20000be0
 8007860:	20000bf4 	.word	0x20000bf4
 8007864:	20000c0c 	.word	0x20000c0c
 8007868:	20000bd8 	.word	0x20000bd8
 800786c:	20000bdc 	.word	0x20000bdc

08007870 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007876:	e019      	b.n	80078ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007878:	f000 ff0c 	bl	8008694 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800787c:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <prvCheckTasksWaitingTermination+0x50>)
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3304      	adds	r3, #4
 8007888:	4618      	mov	r0, r3
 800788a:	f7fe f875 	bl	8005978 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800788e:	4b0d      	ldr	r3, [pc, #52]	; (80078c4 <prvCheckTasksWaitingTermination+0x54>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3b01      	subs	r3, #1
 8007894:	4a0b      	ldr	r2, [pc, #44]	; (80078c4 <prvCheckTasksWaitingTermination+0x54>)
 8007896:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007898:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <prvCheckTasksWaitingTermination+0x58>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3b01      	subs	r3, #1
 800789e:	4a0a      	ldr	r2, [pc, #40]	; (80078c8 <prvCheckTasksWaitingTermination+0x58>)
 80078a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078a2:	f000 ff27 	bl	80086f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f810 	bl	80078cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078ac:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <prvCheckTasksWaitingTermination+0x58>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e1      	bne.n	8007878 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000bf4 	.word	0x20000bf4
 80078c4:	20000c20 	.word	0x20000c20
 80078c8:	20000c08 	.word	0x20000c08

080078cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d108      	bne.n	80078f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e2:	4618      	mov	r0, r3
 80078e4:	f001 f8c4 	bl	8008a70 <vPortFree>
				vPortFree( pxTCB );
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 f8c1 	bl	8008a70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078ee:	e018      	b.n	8007922 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d103      	bne.n	8007902 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f001 f8b8 	bl	8008a70 <vPortFree>
	}
 8007900:	e00f      	b.n	8007922 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007908:	2b02      	cmp	r3, #2
 800790a:	d00a      	beq.n	8007922 <prvDeleteTCB+0x56>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	60fb      	str	r3, [r7, #12]
}
 800791e:	bf00      	nop
 8007920:	e7fe      	b.n	8007920 <prvDeleteTCB+0x54>
	}
 8007922:	bf00      	nop
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007932:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <prvResetNextTaskUnblockTime+0x38>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d104      	bne.n	8007946 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800793c:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <prvResetNextTaskUnblockTime+0x3c>)
 800793e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007942:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007944:	e008      	b.n	8007958 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007946:	4b07      	ldr	r3, [pc, #28]	; (8007964 <prvResetNextTaskUnblockTime+0x38>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	4a04      	ldr	r2, [pc, #16]	; (8007968 <prvResetNextTaskUnblockTime+0x3c>)
 8007956:	6013      	str	r3, [r2, #0]
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	20000bd8 	.word	0x20000bd8
 8007968:	20000c40 	.word	0x20000c40

0800796c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007972:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <xTaskGetSchedulerState+0x34>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d102      	bne.n	8007980 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800797a:	2301      	movs	r3, #1
 800797c:	607b      	str	r3, [r7, #4]
 800797e:	e008      	b.n	8007992 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007980:	4b08      	ldr	r3, [pc, #32]	; (80079a4 <xTaskGetSchedulerState+0x38>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d102      	bne.n	800798e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007988:	2302      	movs	r3, #2
 800798a:	607b      	str	r3, [r7, #4]
 800798c:	e001      	b.n	8007992 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800798e:	2300      	movs	r3, #0
 8007990:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007992:	687b      	ldr	r3, [r7, #4]
	}
 8007994:	4618      	mov	r0, r3
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	20000c2c 	.word	0x20000c2c
 80079a4:	20000c48 	.word	0x20000c48

080079a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80079b4:	2300      	movs	r3, #0
 80079b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d051      	beq.n	8007a62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c2:	4b2a      	ldr	r3, [pc, #168]	; (8007a6c <xTaskPriorityInherit+0xc4>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d241      	bcs.n	8007a50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	db06      	blt.n	80079e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d4:	4b25      	ldr	r3, [pc, #148]	; (8007a6c <xTaskPriorityInherit+0xc4>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	6959      	ldr	r1, [r3, #20]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4a1f      	ldr	r2, [pc, #124]	; (8007a70 <xTaskPriorityInherit+0xc8>)
 80079f4:	4413      	add	r3, r2
 80079f6:	4299      	cmp	r1, r3
 80079f8:	d122      	bne.n	8007a40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	3304      	adds	r3, #4
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fd ffba 	bl	8005978 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a04:	4b19      	ldr	r3, [pc, #100]	; (8007a6c <xTaskPriorityInherit+0xc4>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a12:	4b18      	ldr	r3, [pc, #96]	; (8007a74 <xTaskPriorityInherit+0xcc>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d903      	bls.n	8007a22 <xTaskPriorityInherit+0x7a>
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	4a15      	ldr	r2, [pc, #84]	; (8007a74 <xTaskPriorityInherit+0xcc>)
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4a10      	ldr	r2, [pc, #64]	; (8007a70 <xTaskPriorityInherit+0xc8>)
 8007a30:	441a      	add	r2, r3
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	3304      	adds	r3, #4
 8007a36:	4619      	mov	r1, r3
 8007a38:	4610      	mov	r0, r2
 8007a3a:	f7fd ff40 	bl	80058be <vListInsertEnd>
 8007a3e:	e004      	b.n	8007a4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a40:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <xTaskPriorityInherit+0xc4>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	e008      	b.n	8007a62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a54:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <xTaskPriorityInherit+0xc4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d201      	bcs.n	8007a62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a62:	68fb      	ldr	r3, [r7, #12]
	}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	2000074c 	.word	0x2000074c
 8007a70:	20000750 	.word	0x20000750
 8007a74:	20000c28 	.word	0x20000c28

08007a78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a84:	2300      	movs	r3, #0
 8007a86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d056      	beq.n	8007b3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a8e:	4b2e      	ldr	r3, [pc, #184]	; (8007b48 <xTaskPriorityDisinherit+0xd0>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d00a      	beq.n	8007aae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	60fb      	str	r3, [r7, #12]
}
 8007aaa:	bf00      	nop
 8007aac:	e7fe      	b.n	8007aac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10a      	bne.n	8007acc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	60bb      	str	r3, [r7, #8]
}
 8007ac8:	bf00      	nop
 8007aca:	e7fe      	b.n	8007aca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad0:	1e5a      	subs	r2, r3, #1
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d02c      	beq.n	8007b3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d128      	bne.n	8007b3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	3304      	adds	r3, #4
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fd ff42 	bl	8005978 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0c:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <xTaskPriorityDisinherit+0xd4>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d903      	bls.n	8007b1c <xTaskPriorityDisinherit+0xa4>
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	4a0c      	ldr	r2, [pc, #48]	; (8007b4c <xTaskPriorityDisinherit+0xd4>)
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4a09      	ldr	r2, [pc, #36]	; (8007b50 <xTaskPriorityDisinherit+0xd8>)
 8007b2a:	441a      	add	r2, r3
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	3304      	adds	r3, #4
 8007b30:	4619      	mov	r1, r3
 8007b32:	4610      	mov	r0, r2
 8007b34:	f7fd fec3 	bl	80058be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b3c:	697b      	ldr	r3, [r7, #20]
	}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	2000074c 	.word	0x2000074c
 8007b4c:	20000c28 	.word	0x20000c28
 8007b50:	20000750 	.word	0x20000750

08007b54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b62:	2301      	movs	r3, #1
 8007b64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d06a      	beq.n	8007c42 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	60fb      	str	r3, [r7, #12]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d902      	bls.n	8007b9a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	61fb      	str	r3, [r7, #28]
 8007b98:	e002      	b.n	8007ba0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	69fa      	ldr	r2, [r7, #28]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d04b      	beq.n	8007c42 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d146      	bne.n	8007c42 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007bb4:	4b25      	ldr	r3, [pc, #148]	; (8007c4c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d10a      	bne.n	8007bd4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	60bb      	str	r3, [r7, #8]
}
 8007bd0:	bf00      	nop
 8007bd2:	e7fe      	b.n	8007bd2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	69fa      	ldr	r2, [r7, #28]
 8007bde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	db04      	blt.n	8007bf2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	6959      	ldr	r1, [r3, #20]
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4a13      	ldr	r2, [pc, #76]	; (8007c50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007c02:	4413      	add	r3, r2
 8007c04:	4299      	cmp	r1, r3
 8007c06:	d11c      	bne.n	8007c42 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fd feb3 	bl	8005978 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c16:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d903      	bls.n	8007c26 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	4a0c      	ldr	r2, [pc, #48]	; (8007c54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007c24:	6013      	str	r3, [r2, #0]
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4a07      	ldr	r2, [pc, #28]	; (8007c50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007c34:	441a      	add	r2, r3
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	3304      	adds	r3, #4
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f7fd fe3e 	bl	80058be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c42:	bf00      	nop
 8007c44:	3720      	adds	r7, #32
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	2000074c 	.word	0x2000074c
 8007c50:	20000750 	.word	0x20000750
 8007c54:	20000c28 	.word	0x20000c28

08007c58 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007c5e:	4b09      	ldr	r3, [pc, #36]	; (8007c84 <uxTaskResetEventItemValue+0x2c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c66:	4b07      	ldr	r3, [pc, #28]	; (8007c84 <uxTaskResetEventItemValue+0x2c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6c:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <uxTaskResetEventItemValue+0x2c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007c74:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007c76:	687b      	ldr	r3, [r7, #4]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	2000074c 	.word	0x2000074c

08007c88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007c88:	b480      	push	{r7}
 8007c8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c8c:	4b07      	ldr	r3, [pc, #28]	; (8007cac <pvTaskIncrementMutexHeldCount+0x24>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d004      	beq.n	8007c9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c94:	4b05      	ldr	r3, [pc, #20]	; (8007cac <pvTaskIncrementMutexHeldCount+0x24>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c9a:	3201      	adds	r2, #1
 8007c9c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007c9e:	4b03      	ldr	r3, [pc, #12]	; (8007cac <pvTaskIncrementMutexHeldCount+0x24>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
	}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	2000074c 	.word	0x2000074c

08007cb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cba:	4b21      	ldr	r3, [pc, #132]	; (8007d40 <prvAddCurrentTaskToDelayedList+0x90>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cc0:	4b20      	ldr	r3, [pc, #128]	; (8007d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fd fe56 	bl	8005978 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cd2:	d10a      	bne.n	8007cea <prvAddCurrentTaskToDelayedList+0x3a>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d007      	beq.n	8007cea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cda:	4b1a      	ldr	r3, [pc, #104]	; (8007d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4819      	ldr	r0, [pc, #100]	; (8007d48 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ce4:	f7fd fdeb 	bl	80058be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ce8:	e026      	b.n	8007d38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4413      	add	r3, r2
 8007cf0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cf2:	4b14      	ldr	r3, [pc, #80]	; (8007d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d209      	bcs.n	8007d16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d02:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b0f      	ldr	r3, [pc, #60]	; (8007d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4610      	mov	r0, r2
 8007d10:	f7fd fdf9 	bl	8005906 <vListInsert>
}
 8007d14:	e010      	b.n	8007d38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d16:	4b0e      	ldr	r3, [pc, #56]	; (8007d50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	4b0a      	ldr	r3, [pc, #40]	; (8007d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	4619      	mov	r1, r3
 8007d22:	4610      	mov	r0, r2
 8007d24:	f7fd fdef 	bl	8005906 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d28:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d202      	bcs.n	8007d38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d32:	4a08      	ldr	r2, [pc, #32]	; (8007d54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	6013      	str	r3, [r2, #0]
}
 8007d38:	bf00      	nop
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	20000c24 	.word	0x20000c24
 8007d44:	2000074c 	.word	0x2000074c
 8007d48:	20000c0c 	.word	0x20000c0c
 8007d4c:	20000bdc 	.word	0x20000bdc
 8007d50:	20000bd8 	.word	0x20000bd8
 8007d54:	20000c40 	.word	0x20000c40

08007d58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	; 0x28
 8007d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d62:	f000 fb07 	bl	8008374 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d66:	4b1c      	ldr	r3, [pc, #112]	; (8007dd8 <xTimerCreateTimerTask+0x80>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d021      	beq.n	8007db2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d72:	2300      	movs	r3, #0
 8007d74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d76:	1d3a      	adds	r2, r7, #4
 8007d78:	f107 0108 	add.w	r1, r7, #8
 8007d7c:	f107 030c 	add.w	r3, r7, #12
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fd fae9 	bl	8005358 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	9202      	str	r2, [sp, #8]
 8007d8e:	9301      	str	r3, [sp, #4]
 8007d90:	2302      	movs	r3, #2
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	2300      	movs	r3, #0
 8007d96:	460a      	mov	r2, r1
 8007d98:	4910      	ldr	r1, [pc, #64]	; (8007ddc <xTimerCreateTimerTask+0x84>)
 8007d9a:	4811      	ldr	r0, [pc, #68]	; (8007de0 <xTimerCreateTimerTask+0x88>)
 8007d9c:	f7fe fe24 	bl	80069e8 <xTaskCreateStatic>
 8007da0:	4603      	mov	r3, r0
 8007da2:	4a10      	ldr	r2, [pc, #64]	; (8007de4 <xTimerCreateTimerTask+0x8c>)
 8007da4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007da6:	4b0f      	ldr	r3, [pc, #60]	; (8007de4 <xTimerCreateTimerTask+0x8c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007dae:	2301      	movs	r3, #1
 8007db0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	613b      	str	r3, [r7, #16]
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007dce:	697b      	ldr	r3, [r7, #20]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3718      	adds	r7, #24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20000c7c 	.word	0x20000c7c
 8007ddc:	080090d4 	.word	0x080090d4
 8007de0:	08007f1d 	.word	0x08007f1d
 8007de4:	20000c80 	.word	0x20000c80

08007de8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08a      	sub	sp, #40	; 0x28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007df6:	2300      	movs	r3, #0
 8007df8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	623b      	str	r3, [r7, #32]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e16:	4b1a      	ldr	r3, [pc, #104]	; (8007e80 <xTimerGenericCommand+0x98>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d02a      	beq.n	8007e74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b05      	cmp	r3, #5
 8007e2e:	dc18      	bgt.n	8007e62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e30:	f7ff fd9c 	bl	800796c <xTaskGetSchedulerState>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d109      	bne.n	8007e4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e3a:	4b11      	ldr	r3, [pc, #68]	; (8007e80 <xTimerGenericCommand+0x98>)
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	f107 0110 	add.w	r1, r7, #16
 8007e42:	2300      	movs	r3, #0
 8007e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e46:	f7fd ff69 	bl	8005d1c <xQueueGenericSend>
 8007e4a:	6278      	str	r0, [r7, #36]	; 0x24
 8007e4c:	e012      	b.n	8007e74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e4e:	4b0c      	ldr	r3, [pc, #48]	; (8007e80 <xTimerGenericCommand+0x98>)
 8007e50:	6818      	ldr	r0, [r3, #0]
 8007e52:	f107 0110 	add.w	r1, r7, #16
 8007e56:	2300      	movs	r3, #0
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f7fd ff5f 	bl	8005d1c <xQueueGenericSend>
 8007e5e:	6278      	str	r0, [r7, #36]	; 0x24
 8007e60:	e008      	b.n	8007e74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e62:	4b07      	ldr	r3, [pc, #28]	; (8007e80 <xTimerGenericCommand+0x98>)
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	f107 0110 	add.w	r1, r7, #16
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	f7fe f853 	bl	8005f18 <xQueueGenericSendFromISR>
 8007e72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3728      	adds	r7, #40	; 0x28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000c7c 	.word	0x20000c7c

08007e84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af02      	add	r7, sp, #8
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e8e:	4b22      	ldr	r3, [pc, #136]	; (8007f18 <prvProcessExpiredTimer+0x94>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fd fd6b 	bl	8005978 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d022      	beq.n	8007ef6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	18d1      	adds	r1, r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	6978      	ldr	r0, [r7, #20]
 8007ebe:	f000 f8d1 	bl	8008064 <prvInsertTimerInActiveList>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01f      	beq.n	8007f08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ec8:	2300      	movs	r3, #0
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	6978      	ldr	r0, [r7, #20]
 8007ed4:	f7ff ff88 	bl	8007de8 <xTimerGenericCommand>
 8007ed8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d113      	bne.n	8007f08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	60fb      	str	r3, [r7, #12]
}
 8007ef2:	bf00      	nop
 8007ef4:	e7fe      	b.n	8007ef4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007efc:	f023 0301 	bic.w	r3, r3, #1
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	6a1b      	ldr	r3, [r3, #32]
 8007f0c:	6978      	ldr	r0, [r7, #20]
 8007f0e:	4798      	blx	r3
}
 8007f10:	bf00      	nop
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	20000c74 	.word	0x20000c74

08007f1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f24:	f107 0308 	add.w	r3, r7, #8
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 f857 	bl	8007fdc <prvGetNextExpireTime>
 8007f2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	4619      	mov	r1, r3
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 f803 	bl	8007f40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f3a:	f000 f8d5 	bl	80080e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f3e:	e7f1      	b.n	8007f24 <prvTimerTask+0x8>

08007f40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f4a:	f7ff f88f 	bl	800706c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f4e:	f107 0308 	add.w	r3, r7, #8
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 f866 	bl	8008024 <prvSampleTimeNow>
 8007f58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d130      	bne.n	8007fc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10a      	bne.n	8007f7c <prvProcessTimerOrBlockTask+0x3c>
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d806      	bhi.n	8007f7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f6e:	f7ff f88b 	bl	8007088 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f72:	68f9      	ldr	r1, [r7, #12]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff ff85 	bl	8007e84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f7a:	e024      	b.n	8007fc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d008      	beq.n	8007f94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f82:	4b13      	ldr	r3, [pc, #76]	; (8007fd0 <prvProcessTimerOrBlockTask+0x90>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <prvProcessTimerOrBlockTask+0x50>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e000      	b.n	8007f92 <prvProcessTimerOrBlockTask+0x52>
 8007f90:	2300      	movs	r3, #0
 8007f92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f94:	4b0f      	ldr	r3, [pc, #60]	; (8007fd4 <prvProcessTimerOrBlockTask+0x94>)
 8007f96:	6818      	ldr	r0, [r3, #0]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	f7fe fced 	bl	8006980 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fa6:	f7ff f86f 	bl	8007088 <xTaskResumeAll>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10a      	bne.n	8007fc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fb0:	4b09      	ldr	r3, [pc, #36]	; (8007fd8 <prvProcessTimerOrBlockTask+0x98>)
 8007fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	f3bf 8f6f 	isb	sy
}
 8007fc0:	e001      	b.n	8007fc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007fc2:	f7ff f861 	bl	8007088 <xTaskResumeAll>
}
 8007fc6:	bf00      	nop
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	20000c78 	.word	0x20000c78
 8007fd4:	20000c7c 	.word	0x20000c7c
 8007fd8:	e000ed04 	.word	0xe000ed04

08007fdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007fe4:	4b0e      	ldr	r3, [pc, #56]	; (8008020 <prvGetNextExpireTime+0x44>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <prvGetNextExpireTime+0x16>
 8007fee:	2201      	movs	r2, #1
 8007ff0:	e000      	b.n	8007ff4 <prvGetNextExpireTime+0x18>
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d105      	bne.n	800800c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008000:	4b07      	ldr	r3, [pc, #28]	; (8008020 <prvGetNextExpireTime+0x44>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	e001      	b.n	8008010 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008010:	68fb      	ldr	r3, [r7, #12]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	20000c74 	.word	0x20000c74

08008024 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800802c:	f7ff f8ca 	bl	80071c4 <xTaskGetTickCount>
 8008030:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008032:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <prvSampleTimeNow+0x3c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	429a      	cmp	r2, r3
 800803a:	d205      	bcs.n	8008048 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800803c:	f000 f936 	bl	80082ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	e002      	b.n	800804e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800804e:	4a04      	ldr	r2, [pc, #16]	; (8008060 <prvSampleTimeNow+0x3c>)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008054:	68fb      	ldr	r3, [r7, #12]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000c84 	.word	0x20000c84

08008064 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008072:	2300      	movs	r3, #0
 8008074:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	429a      	cmp	r2, r3
 8008088:	d812      	bhi.n	80080b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	1ad2      	subs	r2, r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	429a      	cmp	r2, r3
 8008096:	d302      	bcc.n	800809e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008098:	2301      	movs	r3, #1
 800809a:	617b      	str	r3, [r7, #20]
 800809c:	e01b      	b.n	80080d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800809e:	4b10      	ldr	r3, [pc, #64]	; (80080e0 <prvInsertTimerInActiveList+0x7c>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3304      	adds	r3, #4
 80080a6:	4619      	mov	r1, r3
 80080a8:	4610      	mov	r0, r2
 80080aa:	f7fd fc2c 	bl	8005906 <vListInsert>
 80080ae:	e012      	b.n	80080d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d206      	bcs.n	80080c6 <prvInsertTimerInActiveList+0x62>
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d302      	bcc.n	80080c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080c0:	2301      	movs	r3, #1
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	e007      	b.n	80080d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080c6:	4b07      	ldr	r3, [pc, #28]	; (80080e4 <prvInsertTimerInActiveList+0x80>)
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3304      	adds	r3, #4
 80080ce:	4619      	mov	r1, r3
 80080d0:	4610      	mov	r0, r2
 80080d2:	f7fd fc18 	bl	8005906 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80080d6:	697b      	ldr	r3, [r7, #20]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	20000c78 	.word	0x20000c78
 80080e4:	20000c74 	.word	0x20000c74

080080e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08e      	sub	sp, #56	; 0x38
 80080ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080ee:	e0ca      	b.n	8008286 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	da18      	bge.n	8008128 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80080f6:	1d3b      	adds	r3, r7, #4
 80080f8:	3304      	adds	r3, #4
 80080fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80080fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10a      	bne.n	8008118 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	61fb      	str	r3, [r7, #28]
}
 8008114:	bf00      	nop
 8008116:	e7fe      	b.n	8008116 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800811e:	6850      	ldr	r0, [r2, #4]
 8008120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008122:	6892      	ldr	r2, [r2, #8]
 8008124:	4611      	mov	r1, r2
 8008126:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	f2c0 80aa 	blt.w	8008284 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d004      	beq.n	8008146 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	3304      	adds	r3, #4
 8008140:	4618      	mov	r0, r3
 8008142:	f7fd fc19 	bl	8005978 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008146:	463b      	mov	r3, r7
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff ff6b 	bl	8008024 <prvSampleTimeNow>
 800814e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b09      	cmp	r3, #9
 8008154:	f200 8097 	bhi.w	8008286 <prvProcessReceivedCommands+0x19e>
 8008158:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <prvProcessReceivedCommands+0x78>)
 800815a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815e:	bf00      	nop
 8008160:	08008189 	.word	0x08008189
 8008164:	08008189 	.word	0x08008189
 8008168:	08008189 	.word	0x08008189
 800816c:	080081fd 	.word	0x080081fd
 8008170:	08008211 	.word	0x08008211
 8008174:	0800825b 	.word	0x0800825b
 8008178:	08008189 	.word	0x08008189
 800817c:	08008189 	.word	0x08008189
 8008180:	080081fd 	.word	0x080081fd
 8008184:	08008211 	.word	0x08008211
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800818e:	f043 0301 	orr.w	r3, r3, #1
 8008192:	b2da      	uxtb	r2, r3
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	18d1      	adds	r1, r2, r3
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081a8:	f7ff ff5c 	bl	8008064 <prvInsertTimerInActiveList>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d069      	beq.n	8008286 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081c0:	f003 0304 	and.w	r3, r3, #4
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d05e      	beq.n	8008286 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	441a      	add	r2, r3
 80081d0:	2300      	movs	r3, #0
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	2300      	movs	r3, #0
 80081d6:	2100      	movs	r1, #0
 80081d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081da:	f7ff fe05 	bl	8007de8 <xTimerGenericCommand>
 80081de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d14f      	bne.n	8008286 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ea:	f383 8811 	msr	BASEPRI, r3
 80081ee:	f3bf 8f6f 	isb	sy
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	61bb      	str	r3, [r7, #24]
}
 80081f8:	bf00      	nop
 80081fa:	e7fe      	b.n	80081fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008202:	f023 0301 	bic.w	r3, r3, #1
 8008206:	b2da      	uxtb	r2, r3
 8008208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800820e:	e03a      	b.n	8008286 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	b2da      	uxtb	r2, r3
 800821c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10a      	bne.n	8008246 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	617b      	str	r3, [r7, #20]
}
 8008242:	bf00      	nop
 8008244:	e7fe      	b.n	8008244 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008248:	699a      	ldr	r2, [r3, #24]
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	18d1      	adds	r1, r2, r3
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008254:	f7ff ff06 	bl	8008064 <prvInsertTimerInActiveList>
					break;
 8008258:	e015      	b.n	8008286 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d103      	bne.n	8008270 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800826a:	f000 fc01 	bl	8008a70 <vPortFree>
 800826e:	e00a      	b.n	8008286 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008276:	f023 0301 	bic.w	r3, r3, #1
 800827a:	b2da      	uxtb	r2, r3
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008282:	e000      	b.n	8008286 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008284:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008286:	4b08      	ldr	r3, [pc, #32]	; (80082a8 <prvProcessReceivedCommands+0x1c0>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	1d39      	adds	r1, r7, #4
 800828c:	2200      	movs	r2, #0
 800828e:	4618      	mov	r0, r3
 8008290:	f7fd ff6a 	bl	8006168 <xQueueReceive>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	f47f af2a 	bne.w	80080f0 <prvProcessReceivedCommands+0x8>
	}
}
 800829c:	bf00      	nop
 800829e:	bf00      	nop
 80082a0:	3730      	adds	r7, #48	; 0x30
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20000c7c 	.word	0x20000c7c

080082ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082b2:	e048      	b.n	8008346 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082b4:	4b2d      	ldr	r3, [pc, #180]	; (800836c <prvSwitchTimerLists+0xc0>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082be:	4b2b      	ldr	r3, [pc, #172]	; (800836c <prvSwitchTimerLists+0xc0>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fd fb53 	bl	8005978 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d02e      	beq.n	8008346 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	4413      	add	r3, r2
 80082f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d90e      	bls.n	8008318 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008306:	4b19      	ldr	r3, [pc, #100]	; (800836c <prvSwitchTimerLists+0xc0>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3304      	adds	r3, #4
 800830e:	4619      	mov	r1, r3
 8008310:	4610      	mov	r0, r2
 8008312:	f7fd faf8 	bl	8005906 <vListInsert>
 8008316:	e016      	b.n	8008346 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008318:	2300      	movs	r3, #0
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	2300      	movs	r3, #0
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	2100      	movs	r1, #0
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f7ff fd60 	bl	8007de8 <xTimerGenericCommand>
 8008328:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	603b      	str	r3, [r7, #0]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008346:	4b09      	ldr	r3, [pc, #36]	; (800836c <prvSwitchTimerLists+0xc0>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1b1      	bne.n	80082b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008350:	4b06      	ldr	r3, [pc, #24]	; (800836c <prvSwitchTimerLists+0xc0>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008356:	4b06      	ldr	r3, [pc, #24]	; (8008370 <prvSwitchTimerLists+0xc4>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a04      	ldr	r2, [pc, #16]	; (800836c <prvSwitchTimerLists+0xc0>)
 800835c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800835e:	4a04      	ldr	r2, [pc, #16]	; (8008370 <prvSwitchTimerLists+0xc4>)
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	6013      	str	r3, [r2, #0]
}
 8008364:	bf00      	nop
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20000c74 	.word	0x20000c74
 8008370:	20000c78 	.word	0x20000c78

08008374 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800837a:	f000 f98b 	bl	8008694 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800837e:	4b15      	ldr	r3, [pc, #84]	; (80083d4 <prvCheckForValidListAndQueue+0x60>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d120      	bne.n	80083c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008386:	4814      	ldr	r0, [pc, #80]	; (80083d8 <prvCheckForValidListAndQueue+0x64>)
 8008388:	f7fd fa6c 	bl	8005864 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800838c:	4813      	ldr	r0, [pc, #76]	; (80083dc <prvCheckForValidListAndQueue+0x68>)
 800838e:	f7fd fa69 	bl	8005864 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008392:	4b13      	ldr	r3, [pc, #76]	; (80083e0 <prvCheckForValidListAndQueue+0x6c>)
 8008394:	4a10      	ldr	r2, [pc, #64]	; (80083d8 <prvCheckForValidListAndQueue+0x64>)
 8008396:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008398:	4b12      	ldr	r3, [pc, #72]	; (80083e4 <prvCheckForValidListAndQueue+0x70>)
 800839a:	4a10      	ldr	r2, [pc, #64]	; (80083dc <prvCheckForValidListAndQueue+0x68>)
 800839c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800839e:	2300      	movs	r3, #0
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	4b11      	ldr	r3, [pc, #68]	; (80083e8 <prvCheckForValidListAndQueue+0x74>)
 80083a4:	4a11      	ldr	r2, [pc, #68]	; (80083ec <prvCheckForValidListAndQueue+0x78>)
 80083a6:	2110      	movs	r1, #16
 80083a8:	200a      	movs	r0, #10
 80083aa:	f7fd fb77 	bl	8005a9c <xQueueGenericCreateStatic>
 80083ae:	4603      	mov	r3, r0
 80083b0:	4a08      	ldr	r2, [pc, #32]	; (80083d4 <prvCheckForValidListAndQueue+0x60>)
 80083b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083b4:	4b07      	ldr	r3, [pc, #28]	; (80083d4 <prvCheckForValidListAndQueue+0x60>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d005      	beq.n	80083c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083bc:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <prvCheckForValidListAndQueue+0x60>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	490b      	ldr	r1, [pc, #44]	; (80083f0 <prvCheckForValidListAndQueue+0x7c>)
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fa88 	bl	80068d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083c8:	f000 f994 	bl	80086f4 <vPortExitCritical>
}
 80083cc:	bf00      	nop
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20000c7c 	.word	0x20000c7c
 80083d8:	20000c4c 	.word	0x20000c4c
 80083dc:	20000c60 	.word	0x20000c60
 80083e0:	20000c74 	.word	0x20000c74
 80083e4:	20000c78 	.word	0x20000c78
 80083e8:	20000d28 	.word	0x20000d28
 80083ec:	20000c88 	.word	0x20000c88
 80083f0:	080090dc 	.word	0x080090dc

080083f4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08a      	sub	sp, #40	; 0x28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008402:	f06f 0301 	mvn.w	r3, #1
 8008406:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008414:	4b06      	ldr	r3, [pc, #24]	; (8008430 <xTimerPendFunctionCallFromISR+0x3c>)
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	f107 0114 	add.w	r1, r7, #20
 800841c:	2300      	movs	r3, #0
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	f7fd fd7a 	bl	8005f18 <xQueueGenericSendFromISR>
 8008424:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008428:	4618      	mov	r0, r3
 800842a:	3728      	adds	r7, #40	; 0x28
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	20000c7c 	.word	0x20000c7c

08008434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3b04      	subs	r3, #4
 8008444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800844c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3b04      	subs	r3, #4
 8008452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	f023 0201 	bic.w	r2, r3, #1
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3b04      	subs	r3, #4
 8008462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008464:	4a0c      	ldr	r2, [pc, #48]	; (8008498 <pxPortInitialiseStack+0x64>)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3b14      	subs	r3, #20
 800846e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3b04      	subs	r3, #4
 800847a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f06f 0202 	mvn.w	r2, #2
 8008482:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3b20      	subs	r3, #32
 8008488:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800848a:	68fb      	ldr	r3, [r7, #12]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	0800849d 	.word	0x0800849d

0800849c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084a2:	2300      	movs	r3, #0
 80084a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084a6:	4b12      	ldr	r3, [pc, #72]	; (80084f0 <prvTaskExitError+0x54>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084ae:	d00a      	beq.n	80084c6 <prvTaskExitError+0x2a>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	60fb      	str	r3, [r7, #12]
}
 80084c2:	bf00      	nop
 80084c4:	e7fe      	b.n	80084c4 <prvTaskExitError+0x28>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	60bb      	str	r3, [r7, #8]
}
 80084d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084da:	bf00      	nop
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d0fc      	beq.n	80084dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084e2:	bf00      	nop
 80084e4:	bf00      	nop
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	2000000c 	.word	0x2000000c
	...

08008500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008500:	4b07      	ldr	r3, [pc, #28]	; (8008520 <pxCurrentTCBConst2>)
 8008502:	6819      	ldr	r1, [r3, #0]
 8008504:	6808      	ldr	r0, [r1, #0]
 8008506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850a:	f380 8809 	msr	PSP, r0
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f04f 0000 	mov.w	r0, #0
 8008516:	f380 8811 	msr	BASEPRI, r0
 800851a:	4770      	bx	lr
 800851c:	f3af 8000 	nop.w

08008520 <pxCurrentTCBConst2>:
 8008520:	2000074c 	.word	0x2000074c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop

08008528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008528:	4808      	ldr	r0, [pc, #32]	; (800854c <prvPortStartFirstTask+0x24>)
 800852a:	6800      	ldr	r0, [r0, #0]
 800852c:	6800      	ldr	r0, [r0, #0]
 800852e:	f380 8808 	msr	MSP, r0
 8008532:	f04f 0000 	mov.w	r0, #0
 8008536:	f380 8814 	msr	CONTROL, r0
 800853a:	b662      	cpsie	i
 800853c:	b661      	cpsie	f
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	df00      	svc	0
 8008548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800854a:	bf00      	nop
 800854c:	e000ed08 	.word	0xe000ed08

08008550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008556:	4b46      	ldr	r3, [pc, #280]	; (8008670 <xPortStartScheduler+0x120>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a46      	ldr	r2, [pc, #280]	; (8008674 <xPortStartScheduler+0x124>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d10a      	bne.n	8008576 <xPortStartScheduler+0x26>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	613b      	str	r3, [r7, #16]
}
 8008572:	bf00      	nop
 8008574:	e7fe      	b.n	8008574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008576:	4b3e      	ldr	r3, [pc, #248]	; (8008670 <xPortStartScheduler+0x120>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a3f      	ldr	r2, [pc, #252]	; (8008678 <xPortStartScheduler+0x128>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d10a      	bne.n	8008596 <xPortStartScheduler+0x46>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	60fb      	str	r3, [r7, #12]
}
 8008592:	bf00      	nop
 8008594:	e7fe      	b.n	8008594 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008596:	4b39      	ldr	r3, [pc, #228]	; (800867c <xPortStartScheduler+0x12c>)
 8008598:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	22ff      	movs	r2, #255	; 0xff
 80085a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	4b31      	ldr	r3, [pc, #196]	; (8008680 <xPortStartScheduler+0x130>)
 80085bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085be:	4b31      	ldr	r3, [pc, #196]	; (8008684 <xPortStartScheduler+0x134>)
 80085c0:	2207      	movs	r2, #7
 80085c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085c4:	e009      	b.n	80085da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80085c6:	4b2f      	ldr	r3, [pc, #188]	; (8008684 <xPortStartScheduler+0x134>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	4a2d      	ldr	r2, [pc, #180]	; (8008684 <xPortStartScheduler+0x134>)
 80085ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	005b      	lsls	r3, r3, #1
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085da:	78fb      	ldrb	r3, [r7, #3]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e2:	2b80      	cmp	r3, #128	; 0x80
 80085e4:	d0ef      	beq.n	80085c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085e6:	4b27      	ldr	r3, [pc, #156]	; (8008684 <xPortStartScheduler+0x134>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f1c3 0307 	rsb	r3, r3, #7
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	d00a      	beq.n	8008608 <xPortStartScheduler+0xb8>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	60bb      	str	r3, [r7, #8]
}
 8008604:	bf00      	nop
 8008606:	e7fe      	b.n	8008606 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008608:	4b1e      	ldr	r3, [pc, #120]	; (8008684 <xPortStartScheduler+0x134>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	021b      	lsls	r3, r3, #8
 800860e:	4a1d      	ldr	r2, [pc, #116]	; (8008684 <xPortStartScheduler+0x134>)
 8008610:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008612:	4b1c      	ldr	r3, [pc, #112]	; (8008684 <xPortStartScheduler+0x134>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800861a:	4a1a      	ldr	r2, [pc, #104]	; (8008684 <xPortStartScheduler+0x134>)
 800861c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	b2da      	uxtb	r2, r3
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008626:	4b18      	ldr	r3, [pc, #96]	; (8008688 <xPortStartScheduler+0x138>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a17      	ldr	r2, [pc, #92]	; (8008688 <xPortStartScheduler+0x138>)
 800862c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008632:	4b15      	ldr	r3, [pc, #84]	; (8008688 <xPortStartScheduler+0x138>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a14      	ldr	r2, [pc, #80]	; (8008688 <xPortStartScheduler+0x138>)
 8008638:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800863c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800863e:	f000 f8dd 	bl	80087fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008642:	4b12      	ldr	r3, [pc, #72]	; (800868c <xPortStartScheduler+0x13c>)
 8008644:	2200      	movs	r2, #0
 8008646:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008648:	f000 f8fc 	bl	8008844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800864c:	4b10      	ldr	r3, [pc, #64]	; (8008690 <xPortStartScheduler+0x140>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a0f      	ldr	r2, [pc, #60]	; (8008690 <xPortStartScheduler+0x140>)
 8008652:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008656:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008658:	f7ff ff66 	bl	8008528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800865c:	f7fe fe7c 	bl	8007358 <vTaskSwitchContext>
	prvTaskExitError();
 8008660:	f7ff ff1c 	bl	800849c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	e000ed00 	.word	0xe000ed00
 8008674:	410fc271 	.word	0x410fc271
 8008678:	410fc270 	.word	0x410fc270
 800867c:	e000e400 	.word	0xe000e400
 8008680:	20000d78 	.word	0x20000d78
 8008684:	20000d7c 	.word	0x20000d7c
 8008688:	e000ed20 	.word	0xe000ed20
 800868c:	2000000c 	.word	0x2000000c
 8008690:	e000ef34 	.word	0xe000ef34

08008694 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	607b      	str	r3, [r7, #4]
}
 80086ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086ae:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <vPortEnterCritical+0x58>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3301      	adds	r3, #1
 80086b4:	4a0d      	ldr	r2, [pc, #52]	; (80086ec <vPortEnterCritical+0x58>)
 80086b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086b8:	4b0c      	ldr	r3, [pc, #48]	; (80086ec <vPortEnterCritical+0x58>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d10f      	bne.n	80086e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086c0:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <vPortEnterCritical+0x5c>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	603b      	str	r3, [r7, #0]
}
 80086dc:	bf00      	nop
 80086de:	e7fe      	b.n	80086de <vPortEnterCritical+0x4a>
	}
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	2000000c 	.word	0x2000000c
 80086f0:	e000ed04 	.word	0xe000ed04

080086f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <vPortExitCritical+0x50>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10a      	bne.n	8008718 <vPortExitCritical+0x24>
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	607b      	str	r3, [r7, #4]
}
 8008714:	bf00      	nop
 8008716:	e7fe      	b.n	8008716 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008718:	4b0a      	ldr	r3, [pc, #40]	; (8008744 <vPortExitCritical+0x50>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3b01      	subs	r3, #1
 800871e:	4a09      	ldr	r2, [pc, #36]	; (8008744 <vPortExitCritical+0x50>)
 8008720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008722:	4b08      	ldr	r3, [pc, #32]	; (8008744 <vPortExitCritical+0x50>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d105      	bne.n	8008736 <vPortExitCritical+0x42>
 800872a:	2300      	movs	r3, #0
 800872c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	f383 8811 	msr	BASEPRI, r3
}
 8008734:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	2000000c 	.word	0x2000000c
	...

08008750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008750:	f3ef 8009 	mrs	r0, PSP
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	4b15      	ldr	r3, [pc, #84]	; (80087b0 <pxCurrentTCBConst>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	f01e 0f10 	tst.w	lr, #16
 8008760:	bf08      	it	eq
 8008762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876a:	6010      	str	r0, [r2, #0]
 800876c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008774:	f380 8811 	msr	BASEPRI, r0
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f7fe fdea 	bl	8007358 <vTaskSwitchContext>
 8008784:	f04f 0000 	mov.w	r0, #0
 8008788:	f380 8811 	msr	BASEPRI, r0
 800878c:	bc09      	pop	{r0, r3}
 800878e:	6819      	ldr	r1, [r3, #0]
 8008790:	6808      	ldr	r0, [r1, #0]
 8008792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008796:	f01e 0f10 	tst.w	lr, #16
 800879a:	bf08      	it	eq
 800879c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087a0:	f380 8809 	msr	PSP, r0
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	f3af 8000 	nop.w

080087b0 <pxCurrentTCBConst>:
 80087b0:	2000074c 	.word	0x2000074c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop

080087b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	607b      	str	r3, [r7, #4]
}
 80087d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087d2:	f7fe fd07 	bl	80071e4 <xTaskIncrementTick>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087dc:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <xPortSysTickHandler+0x40>)
 80087de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	2300      	movs	r3, #0
 80087e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	f383 8811 	msr	BASEPRI, r3
}
 80087ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	e000ed04 	.word	0xe000ed04

080087fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008800:	4b0b      	ldr	r3, [pc, #44]	; (8008830 <vPortSetupTimerInterrupt+0x34>)
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008806:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <vPortSetupTimerInterrupt+0x38>)
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800880c:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <vPortSetupTimerInterrupt+0x3c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a0a      	ldr	r2, [pc, #40]	; (800883c <vPortSetupTimerInterrupt+0x40>)
 8008812:	fba2 2303 	umull	r2, r3, r2, r3
 8008816:	099b      	lsrs	r3, r3, #6
 8008818:	4a09      	ldr	r2, [pc, #36]	; (8008840 <vPortSetupTimerInterrupt+0x44>)
 800881a:	3b01      	subs	r3, #1
 800881c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800881e:	4b04      	ldr	r3, [pc, #16]	; (8008830 <vPortSetupTimerInterrupt+0x34>)
 8008820:	2207      	movs	r2, #7
 8008822:	601a      	str	r2, [r3, #0]
}
 8008824:	bf00      	nop
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	e000e010 	.word	0xe000e010
 8008834:	e000e018 	.word	0xe000e018
 8008838:	20000000 	.word	0x20000000
 800883c:	10624dd3 	.word	0x10624dd3
 8008840:	e000e014 	.word	0xe000e014

08008844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008854 <vPortEnableVFP+0x10>
 8008848:	6801      	ldr	r1, [r0, #0]
 800884a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800884e:	6001      	str	r1, [r0, #0]
 8008850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008852:	bf00      	nop
 8008854:	e000ed88 	.word	0xe000ed88

08008858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800885e:	f3ef 8305 	mrs	r3, IPSR
 8008862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b0f      	cmp	r3, #15
 8008868:	d914      	bls.n	8008894 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800886a:	4a17      	ldr	r2, [pc, #92]	; (80088c8 <vPortValidateInterruptPriority+0x70>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008874:	4b15      	ldr	r3, [pc, #84]	; (80088cc <vPortValidateInterruptPriority+0x74>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	7afa      	ldrb	r2, [r7, #11]
 800887a:	429a      	cmp	r2, r3
 800887c:	d20a      	bcs.n	8008894 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	607b      	str	r3, [r7, #4]
}
 8008890:	bf00      	nop
 8008892:	e7fe      	b.n	8008892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008894:	4b0e      	ldr	r3, [pc, #56]	; (80088d0 <vPortValidateInterruptPriority+0x78>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800889c:	4b0d      	ldr	r3, [pc, #52]	; (80088d4 <vPortValidateInterruptPriority+0x7c>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d90a      	bls.n	80088ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	603b      	str	r3, [r7, #0]
}
 80088b6:	bf00      	nop
 80088b8:	e7fe      	b.n	80088b8 <vPortValidateInterruptPriority+0x60>
	}
 80088ba:	bf00      	nop
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	e000e3f0 	.word	0xe000e3f0
 80088cc:	20000d78 	.word	0x20000d78
 80088d0:	e000ed0c 	.word	0xe000ed0c
 80088d4:	20000d7c 	.word	0x20000d7c

080088d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b08a      	sub	sp, #40	; 0x28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088e0:	2300      	movs	r3, #0
 80088e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088e4:	f7fe fbc2 	bl	800706c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088e8:	4b5b      	ldr	r3, [pc, #364]	; (8008a58 <pvPortMalloc+0x180>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088f0:	f000 f920 	bl	8008b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088f4:	4b59      	ldr	r3, [pc, #356]	; (8008a5c <pvPortMalloc+0x184>)
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4013      	ands	r3, r2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f040 8093 	bne.w	8008a28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01d      	beq.n	8008944 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008908:	2208      	movs	r2, #8
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4413      	add	r3, r2
 800890e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f003 0307 	and.w	r3, r3, #7
 8008916:	2b00      	cmp	r3, #0
 8008918:	d014      	beq.n	8008944 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f023 0307 	bic.w	r3, r3, #7
 8008920:	3308      	adds	r3, #8
 8008922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00a      	beq.n	8008944 <pvPortMalloc+0x6c>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	617b      	str	r3, [r7, #20]
}
 8008940:	bf00      	nop
 8008942:	e7fe      	b.n	8008942 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d06e      	beq.n	8008a28 <pvPortMalloc+0x150>
 800894a:	4b45      	ldr	r3, [pc, #276]	; (8008a60 <pvPortMalloc+0x188>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	429a      	cmp	r2, r3
 8008952:	d869      	bhi.n	8008a28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008954:	4b43      	ldr	r3, [pc, #268]	; (8008a64 <pvPortMalloc+0x18c>)
 8008956:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008958:	4b42      	ldr	r3, [pc, #264]	; (8008a64 <pvPortMalloc+0x18c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800895e:	e004      	b.n	800896a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	429a      	cmp	r2, r3
 8008972:	d903      	bls.n	800897c <pvPortMalloc+0xa4>
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1f1      	bne.n	8008960 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800897c:	4b36      	ldr	r3, [pc, #216]	; (8008a58 <pvPortMalloc+0x180>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008982:	429a      	cmp	r2, r3
 8008984:	d050      	beq.n	8008a28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2208      	movs	r2, #8
 800898c:	4413      	add	r3, r2
 800898e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	1ad2      	subs	r2, r2, r3
 80089a0:	2308      	movs	r3, #8
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d91f      	bls.n	80089e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4413      	add	r3, r2
 80089ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	f003 0307 	and.w	r3, r3, #7
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00a      	beq.n	80089d0 <pvPortMalloc+0xf8>
	__asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	613b      	str	r3, [r7, #16]
}
 80089cc:	bf00      	nop
 80089ce:	e7fe      	b.n	80089ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	1ad2      	subs	r2, r2, r3
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089e2:	69b8      	ldr	r0, [r7, #24]
 80089e4:	f000 f908 	bl	8008bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089e8:	4b1d      	ldr	r3, [pc, #116]	; (8008a60 <pvPortMalloc+0x188>)
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	4a1b      	ldr	r2, [pc, #108]	; (8008a60 <pvPortMalloc+0x188>)
 80089f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089f6:	4b1a      	ldr	r3, [pc, #104]	; (8008a60 <pvPortMalloc+0x188>)
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	4b1b      	ldr	r3, [pc, #108]	; (8008a68 <pvPortMalloc+0x190>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d203      	bcs.n	8008a0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a02:	4b17      	ldr	r3, [pc, #92]	; (8008a60 <pvPortMalloc+0x188>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a18      	ldr	r2, [pc, #96]	; (8008a68 <pvPortMalloc+0x190>)
 8008a08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <pvPortMalloc+0x184>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	431a      	orrs	r2, r3
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a1e:	4b13      	ldr	r3, [pc, #76]	; (8008a6c <pvPortMalloc+0x194>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3301      	adds	r3, #1
 8008a24:	4a11      	ldr	r2, [pc, #68]	; (8008a6c <pvPortMalloc+0x194>)
 8008a26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a28:	f7fe fb2e 	bl	8007088 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	f003 0307 	and.w	r3, r3, #7
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <pvPortMalloc+0x174>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	60fb      	str	r3, [r7, #12]
}
 8008a48:	bf00      	nop
 8008a4a:	e7fe      	b.n	8008a4a <pvPortMalloc+0x172>
	return pvReturn;
 8008a4c:	69fb      	ldr	r3, [r7, #28]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3728      	adds	r7, #40	; 0x28
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20001940 	.word	0x20001940
 8008a5c:	20001954 	.word	0x20001954
 8008a60:	20001944 	.word	0x20001944
 8008a64:	20001938 	.word	0x20001938
 8008a68:	20001948 	.word	0x20001948
 8008a6c:	2000194c 	.word	0x2000194c

08008a70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d04d      	beq.n	8008b1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a82:	2308      	movs	r3, #8
 8008a84:	425b      	negs	r3, r3
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	4413      	add	r3, r2
 8008a8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	4b24      	ldr	r3, [pc, #144]	; (8008b28 <vPortFree+0xb8>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10a      	bne.n	8008ab4 <vPortFree+0x44>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	60fb      	str	r3, [r7, #12]
}
 8008ab0:	bf00      	nop
 8008ab2:	e7fe      	b.n	8008ab2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00a      	beq.n	8008ad2 <vPortFree+0x62>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	60bb      	str	r3, [r7, #8]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	4b14      	ldr	r3, [pc, #80]	; (8008b28 <vPortFree+0xb8>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4013      	ands	r3, r2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01e      	beq.n	8008b1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d11a      	bne.n	8008b1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	4b0e      	ldr	r3, [pc, #56]	; (8008b28 <vPortFree+0xb8>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	43db      	mvns	r3, r3
 8008af2:	401a      	ands	r2, r3
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008af8:	f7fe fab8 	bl	800706c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <vPortFree+0xbc>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4413      	add	r3, r2
 8008b06:	4a09      	ldr	r2, [pc, #36]	; (8008b2c <vPortFree+0xbc>)
 8008b08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b0a:	6938      	ldr	r0, [r7, #16]
 8008b0c:	f000 f874 	bl	8008bf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b10:	4b07      	ldr	r3, [pc, #28]	; (8008b30 <vPortFree+0xc0>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3301      	adds	r3, #1
 8008b16:	4a06      	ldr	r2, [pc, #24]	; (8008b30 <vPortFree+0xc0>)
 8008b18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b1a:	f7fe fab5 	bl	8007088 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b1e:	bf00      	nop
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20001954 	.word	0x20001954
 8008b2c:	20001944 	.word	0x20001944
 8008b30:	20001950 	.word	0x20001950

08008b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b3a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b40:	4b27      	ldr	r3, [pc, #156]	; (8008be0 <prvHeapInit+0xac>)
 8008b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00c      	beq.n	8008b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3307      	adds	r3, #7
 8008b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f023 0307 	bic.w	r3, r3, #7
 8008b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	4a1f      	ldr	r2, [pc, #124]	; (8008be0 <prvHeapInit+0xac>)
 8008b64:	4413      	add	r3, r2
 8008b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b6c:	4a1d      	ldr	r2, [pc, #116]	; (8008be4 <prvHeapInit+0xb0>)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b72:	4b1c      	ldr	r3, [pc, #112]	; (8008be4 <prvHeapInit+0xb0>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b80:	2208      	movs	r2, #8
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	1a9b      	subs	r3, r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0307 	bic.w	r3, r3, #7
 8008b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4a15      	ldr	r2, [pc, #84]	; (8008be8 <prvHeapInit+0xb4>)
 8008b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b96:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <prvHeapInit+0xb4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b9e:	4b12      	ldr	r3, [pc, #72]	; (8008be8 <prvHeapInit+0xb4>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	1ad2      	subs	r2, r2, r3
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bb4:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <prvHeapInit+0xb4>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	4a0a      	ldr	r2, [pc, #40]	; (8008bec <prvHeapInit+0xb8>)
 8008bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	4a09      	ldr	r2, [pc, #36]	; (8008bf0 <prvHeapInit+0xbc>)
 8008bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bcc:	4b09      	ldr	r3, [pc, #36]	; (8008bf4 <prvHeapInit+0xc0>)
 8008bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bd2:	601a      	str	r2, [r3, #0]
}
 8008bd4:	bf00      	nop
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	20000d80 	.word	0x20000d80
 8008be4:	20001938 	.word	0x20001938
 8008be8:	20001940 	.word	0x20001940
 8008bec:	20001948 	.word	0x20001948
 8008bf0:	20001944 	.word	0x20001944
 8008bf4:	20001954 	.word	0x20001954

08008bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c00:	4b28      	ldr	r3, [pc, #160]	; (8008ca4 <prvInsertBlockIntoFreeList+0xac>)
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	e002      	b.n	8008c0c <prvInsertBlockIntoFreeList+0x14>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d8f7      	bhi.n	8008c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	4413      	add	r3, r2
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d108      	bne.n	8008c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	441a      	add	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	441a      	add	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d118      	bne.n	8008c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4b15      	ldr	r3, [pc, #84]	; (8008ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d00d      	beq.n	8008c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	441a      	add	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	e008      	b.n	8008c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c76:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	e003      	b.n	8008c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d002      	beq.n	8008c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c96:	bf00      	nop
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	20001938 	.word	0x20001938
 8008ca8:	20001940 	.word	0x20001940

08008cac <atoi>:
 8008cac:	220a      	movs	r2, #10
 8008cae:	2100      	movs	r1, #0
 8008cb0:	f000 b8ea 	b.w	8008e88 <strtol>

08008cb4 <__errno>:
 8008cb4:	4b01      	ldr	r3, [pc, #4]	; (8008cbc <__errno+0x8>)
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	20000010 	.word	0x20000010

08008cc0 <__libc_init_array>:
 8008cc0:	b570      	push	{r4, r5, r6, lr}
 8008cc2:	4d0d      	ldr	r5, [pc, #52]	; (8008cf8 <__libc_init_array+0x38>)
 8008cc4:	4c0d      	ldr	r4, [pc, #52]	; (8008cfc <__libc_init_array+0x3c>)
 8008cc6:	1b64      	subs	r4, r4, r5
 8008cc8:	10a4      	asrs	r4, r4, #2
 8008cca:	2600      	movs	r6, #0
 8008ccc:	42a6      	cmp	r6, r4
 8008cce:	d109      	bne.n	8008ce4 <__libc_init_array+0x24>
 8008cd0:	4d0b      	ldr	r5, [pc, #44]	; (8008d00 <__libc_init_array+0x40>)
 8008cd2:	4c0c      	ldr	r4, [pc, #48]	; (8008d04 <__libc_init_array+0x44>)
 8008cd4:	f000 f8e2 	bl	8008e9c <_init>
 8008cd8:	1b64      	subs	r4, r4, r5
 8008cda:	10a4      	asrs	r4, r4, #2
 8008cdc:	2600      	movs	r6, #0
 8008cde:	42a6      	cmp	r6, r4
 8008ce0:	d105      	bne.n	8008cee <__libc_init_array+0x2e>
 8008ce2:	bd70      	pop	{r4, r5, r6, pc}
 8008ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce8:	4798      	blx	r3
 8008cea:	3601      	adds	r6, #1
 8008cec:	e7ee      	b.n	8008ccc <__libc_init_array+0xc>
 8008cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cf2:	4798      	blx	r3
 8008cf4:	3601      	adds	r6, #1
 8008cf6:	e7f2      	b.n	8008cde <__libc_init_array+0x1e>
 8008cf8:	08009330 	.word	0x08009330
 8008cfc:	08009330 	.word	0x08009330
 8008d00:	08009330 	.word	0x08009330
 8008d04:	08009334 	.word	0x08009334

08008d08 <memcpy>:
 8008d08:	440a      	add	r2, r1
 8008d0a:	4291      	cmp	r1, r2
 8008d0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008d10:	d100      	bne.n	8008d14 <memcpy+0xc>
 8008d12:	4770      	bx	lr
 8008d14:	b510      	push	{r4, lr}
 8008d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d1e:	4291      	cmp	r1, r2
 8008d20:	d1f9      	bne.n	8008d16 <memcpy+0xe>
 8008d22:	bd10      	pop	{r4, pc}

08008d24 <memset>:
 8008d24:	4402      	add	r2, r0
 8008d26:	4603      	mov	r3, r0
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d100      	bne.n	8008d2e <memset+0xa>
 8008d2c:	4770      	bx	lr
 8008d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d32:	e7f9      	b.n	8008d28 <memset+0x4>

08008d34 <strncat>:
 8008d34:	b530      	push	{r4, r5, lr}
 8008d36:	4604      	mov	r4, r0
 8008d38:	7825      	ldrb	r5, [r4, #0]
 8008d3a:	4623      	mov	r3, r4
 8008d3c:	3401      	adds	r4, #1
 8008d3e:	2d00      	cmp	r5, #0
 8008d40:	d1fa      	bne.n	8008d38 <strncat+0x4>
 8008d42:	3a01      	subs	r2, #1
 8008d44:	d304      	bcc.n	8008d50 <strncat+0x1c>
 8008d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d4a:	f803 4b01 	strb.w	r4, [r3], #1
 8008d4e:	b904      	cbnz	r4, 8008d52 <strncat+0x1e>
 8008d50:	bd30      	pop	{r4, r5, pc}
 8008d52:	2a00      	cmp	r2, #0
 8008d54:	d1f5      	bne.n	8008d42 <strncat+0xe>
 8008d56:	701a      	strb	r2, [r3, #0]
 8008d58:	e7f3      	b.n	8008d42 <strncat+0xe>

08008d5a <strncmp>:
 8008d5a:	b510      	push	{r4, lr}
 8008d5c:	b16a      	cbz	r2, 8008d7a <strncmp+0x20>
 8008d5e:	3901      	subs	r1, #1
 8008d60:	1884      	adds	r4, r0, r2
 8008d62:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008d66:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d103      	bne.n	8008d76 <strncmp+0x1c>
 8008d6e:	42a0      	cmp	r0, r4
 8008d70:	d001      	beq.n	8008d76 <strncmp+0x1c>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1f5      	bne.n	8008d62 <strncmp+0x8>
 8008d76:	1a98      	subs	r0, r3, r2
 8008d78:	bd10      	pop	{r4, pc}
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	e7fc      	b.n	8008d78 <strncmp+0x1e>
	...

08008d80 <_strtol_l.isra.0>:
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d86:	d001      	beq.n	8008d8c <_strtol_l.isra.0+0xc>
 8008d88:	2b24      	cmp	r3, #36	; 0x24
 8008d8a:	d906      	bls.n	8008d9a <_strtol_l.isra.0+0x1a>
 8008d8c:	f7ff ff92 	bl	8008cb4 <__errno>
 8008d90:	2316      	movs	r3, #22
 8008d92:	6003      	str	r3, [r0, #0]
 8008d94:	2000      	movs	r0, #0
 8008d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9a:	4f3a      	ldr	r7, [pc, #232]	; (8008e84 <_strtol_l.isra.0+0x104>)
 8008d9c:	468e      	mov	lr, r1
 8008d9e:	4676      	mov	r6, lr
 8008da0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008da4:	5de5      	ldrb	r5, [r4, r7]
 8008da6:	f015 0508 	ands.w	r5, r5, #8
 8008daa:	d1f8      	bne.n	8008d9e <_strtol_l.isra.0+0x1e>
 8008dac:	2c2d      	cmp	r4, #45	; 0x2d
 8008dae:	d134      	bne.n	8008e1a <_strtol_l.isra.0+0x9a>
 8008db0:	f89e 4000 	ldrb.w	r4, [lr]
 8008db4:	f04f 0801 	mov.w	r8, #1
 8008db8:	f106 0e02 	add.w	lr, r6, #2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d05c      	beq.n	8008e7a <_strtol_l.isra.0+0xfa>
 8008dc0:	2b10      	cmp	r3, #16
 8008dc2:	d10c      	bne.n	8008dde <_strtol_l.isra.0+0x5e>
 8008dc4:	2c30      	cmp	r4, #48	; 0x30
 8008dc6:	d10a      	bne.n	8008dde <_strtol_l.isra.0+0x5e>
 8008dc8:	f89e 4000 	ldrb.w	r4, [lr]
 8008dcc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008dd0:	2c58      	cmp	r4, #88	; 0x58
 8008dd2:	d14d      	bne.n	8008e70 <_strtol_l.isra.0+0xf0>
 8008dd4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008dd8:	2310      	movs	r3, #16
 8008dda:	f10e 0e02 	add.w	lr, lr, #2
 8008dde:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008de2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008de6:	2600      	movs	r6, #0
 8008de8:	fbbc f9f3 	udiv	r9, ip, r3
 8008dec:	4635      	mov	r5, r6
 8008dee:	fb03 ca19 	mls	sl, r3, r9, ip
 8008df2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008df6:	2f09      	cmp	r7, #9
 8008df8:	d818      	bhi.n	8008e2c <_strtol_l.isra.0+0xac>
 8008dfa:	463c      	mov	r4, r7
 8008dfc:	42a3      	cmp	r3, r4
 8008dfe:	dd24      	ble.n	8008e4a <_strtol_l.isra.0+0xca>
 8008e00:	2e00      	cmp	r6, #0
 8008e02:	db1f      	blt.n	8008e44 <_strtol_l.isra.0+0xc4>
 8008e04:	45a9      	cmp	r9, r5
 8008e06:	d31d      	bcc.n	8008e44 <_strtol_l.isra.0+0xc4>
 8008e08:	d101      	bne.n	8008e0e <_strtol_l.isra.0+0x8e>
 8008e0a:	45a2      	cmp	sl, r4
 8008e0c:	db1a      	blt.n	8008e44 <_strtol_l.isra.0+0xc4>
 8008e0e:	fb05 4503 	mla	r5, r5, r3, r4
 8008e12:	2601      	movs	r6, #1
 8008e14:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008e18:	e7eb      	b.n	8008df2 <_strtol_l.isra.0+0x72>
 8008e1a:	2c2b      	cmp	r4, #43	; 0x2b
 8008e1c:	bf08      	it	eq
 8008e1e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008e22:	46a8      	mov	r8, r5
 8008e24:	bf08      	it	eq
 8008e26:	f106 0e02 	addeq.w	lr, r6, #2
 8008e2a:	e7c7      	b.n	8008dbc <_strtol_l.isra.0+0x3c>
 8008e2c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008e30:	2f19      	cmp	r7, #25
 8008e32:	d801      	bhi.n	8008e38 <_strtol_l.isra.0+0xb8>
 8008e34:	3c37      	subs	r4, #55	; 0x37
 8008e36:	e7e1      	b.n	8008dfc <_strtol_l.isra.0+0x7c>
 8008e38:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008e3c:	2f19      	cmp	r7, #25
 8008e3e:	d804      	bhi.n	8008e4a <_strtol_l.isra.0+0xca>
 8008e40:	3c57      	subs	r4, #87	; 0x57
 8008e42:	e7db      	b.n	8008dfc <_strtol_l.isra.0+0x7c>
 8008e44:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008e48:	e7e4      	b.n	8008e14 <_strtol_l.isra.0+0x94>
 8008e4a:	2e00      	cmp	r6, #0
 8008e4c:	da05      	bge.n	8008e5a <_strtol_l.isra.0+0xda>
 8008e4e:	2322      	movs	r3, #34	; 0x22
 8008e50:	6003      	str	r3, [r0, #0]
 8008e52:	4665      	mov	r5, ip
 8008e54:	b942      	cbnz	r2, 8008e68 <_strtol_l.isra.0+0xe8>
 8008e56:	4628      	mov	r0, r5
 8008e58:	e79d      	b.n	8008d96 <_strtol_l.isra.0+0x16>
 8008e5a:	f1b8 0f00 	cmp.w	r8, #0
 8008e5e:	d000      	beq.n	8008e62 <_strtol_l.isra.0+0xe2>
 8008e60:	426d      	negs	r5, r5
 8008e62:	2a00      	cmp	r2, #0
 8008e64:	d0f7      	beq.n	8008e56 <_strtol_l.isra.0+0xd6>
 8008e66:	b10e      	cbz	r6, 8008e6c <_strtol_l.isra.0+0xec>
 8008e68:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008e6c:	6011      	str	r1, [r2, #0]
 8008e6e:	e7f2      	b.n	8008e56 <_strtol_l.isra.0+0xd6>
 8008e70:	2430      	movs	r4, #48	; 0x30
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1b3      	bne.n	8008dde <_strtol_l.isra.0+0x5e>
 8008e76:	2308      	movs	r3, #8
 8008e78:	e7b1      	b.n	8008dde <_strtol_l.isra.0+0x5e>
 8008e7a:	2c30      	cmp	r4, #48	; 0x30
 8008e7c:	d0a4      	beq.n	8008dc8 <_strtol_l.isra.0+0x48>
 8008e7e:	230a      	movs	r3, #10
 8008e80:	e7ad      	b.n	8008dde <_strtol_l.isra.0+0x5e>
 8008e82:	bf00      	nop
 8008e84:	08009225 	.word	0x08009225

08008e88 <strtol>:
 8008e88:	4613      	mov	r3, r2
 8008e8a:	460a      	mov	r2, r1
 8008e8c:	4601      	mov	r1, r0
 8008e8e:	4802      	ldr	r0, [pc, #8]	; (8008e98 <strtol+0x10>)
 8008e90:	6800      	ldr	r0, [r0, #0]
 8008e92:	f7ff bf75 	b.w	8008d80 <_strtol_l.isra.0>
 8008e96:	bf00      	nop
 8008e98:	20000010 	.word	0x20000010

08008e9c <_init>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	bf00      	nop
 8008ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea2:	bc08      	pop	{r3}
 8008ea4:	469e      	mov	lr, r3
 8008ea6:	4770      	bx	lr

08008ea8 <_fini>:
 8008ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eaa:	bf00      	nop
 8008eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eae:	bc08      	pop	{r3}
 8008eb0:	469e      	mov	lr, r3
 8008eb2:	4770      	bx	lr
