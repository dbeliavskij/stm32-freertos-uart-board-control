
teltonika-iot-academy-task-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ed4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08008064  08008064  00018064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c8  080082c8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d0  080082d0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082d4  080082d4  000182d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080082d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a18  20000010  080082e8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a28  080082e8  00021a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e613  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003862  00000000  00000000  0003e653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00041eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  00043610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ef1  00000000  00000000  00044c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186c6  00000000  00000000  00048b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdb51  00000000  00000000  000611d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015ed28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b4  00000000  00000000  0015ed7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800804c 	.word	0x0800804c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800804c 	.word	0x0800804c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fd5e 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f870 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8fc 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f8ca 	bl	8000680 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004ec:	f000 f8bb 	bl	8000666 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	4920      	ldr	r1, [pc, #128]	; (8000574 <main+0x9c>)
 80004f4:	4820      	ldr	r0, [pc, #128]	; (8000578 <main+0xa0>)
 80004f6:	f002 ff6f 	bl	80033d8 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fa:	f004 f83f 	bl	800457c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UARTTxSemaphore */
  UARTTxSemaphoreHandle = osSemaphoreNew(1, 1, &UARTTxSemaphore_attributes);
 80004fe:	4a1f      	ldr	r2, [pc, #124]	; (800057c <main+0xa4>)
 8000500:	2101      	movs	r1, #1
 8000502:	2001      	movs	r0, #1
 8000504:	f004 f973 	bl	80047ee <osSemaphoreNew>
 8000508:	4603      	mov	r3, r0
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <main+0xa8>)
 800050c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RxQueue */
  RxQueueHandle = osMessageQueueNew (12, sizeof(uint8_t), &RxQueue_attributes);
 800050e:	4a1d      	ldr	r2, [pc, #116]	; (8000584 <main+0xac>)
 8000510:	2101      	movs	r1, #1
 8000512:	200c      	movs	r0, #12
 8000514:	f004 fa8a 	bl	8004a2c <osMessageQueueNew>
 8000518:	4603      	mov	r3, r0
 800051a:	4a1b      	ldr	r2, [pc, #108]	; (8000588 <main+0xb0>)
 800051c:	6013      	str	r3, [r2, #0]

  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (1, 13, &CommandQueue_attributes);
 800051e:	4a1b      	ldr	r2, [pc, #108]	; (800058c <main+0xb4>)
 8000520:	210d      	movs	r1, #13
 8000522:	2001      	movs	r0, #1
 8000524:	f004 fa82 	bl	8004a2c <osMessageQueueNew>
 8000528:	4603      	mov	r3, r0
 800052a:	4a19      	ldr	r2, [pc, #100]	; (8000590 <main+0xb8>)
 800052c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UARTRx */
  UARTRxHandle = osThreadNew(StartUARTRx, NULL, &UARTRx_attributes);
 800052e:	4a19      	ldr	r2, [pc, #100]	; (8000594 <main+0xbc>)
 8000530:	2100      	movs	r1, #0
 8000532:	4819      	ldr	r0, [pc, #100]	; (8000598 <main+0xc0>)
 8000534:	f004 f86c 	bl	8004610 <osThreadNew>
 8000538:	4603      	mov	r3, r0
 800053a:	4a18      	ldr	r2, [pc, #96]	; (800059c <main+0xc4>)
 800053c:	6013      	str	r3, [r2, #0]

  /* creation of TaskHandler */
  TaskHandlerHandle = osThreadNew(StartTTaskHandler, NULL, &TaskHandler_attributes);
 800053e:	4a18      	ldr	r2, [pc, #96]	; (80005a0 <main+0xc8>)
 8000540:	2100      	movs	r1, #0
 8000542:	4818      	ldr	r0, [pc, #96]	; (80005a4 <main+0xcc>)
 8000544:	f004 f864 	bl	8004610 <osThreadNew>
 8000548:	4603      	mov	r3, r0
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <main+0xd0>)
 800054c:	6013      	str	r3, [r2, #0]

  /* creation of ButTask */
  ButTaskHandle = osThreadNew(StartButTask, NULL, &ButTask_attributes);
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <main+0xd4>)
 8000550:	2100      	movs	r1, #0
 8000552:	4817      	ldr	r0, [pc, #92]	; (80005b0 <main+0xd8>)
 8000554:	f004 f85c 	bl	8004610 <osThreadNew>
 8000558:	4603      	mov	r3, r0
 800055a:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <main+0xdc>)
 800055c:	6013      	str	r3, [r2, #0]

  /* creation of LedBlinkTask */
  LedBlinkTaskHandle = osThreadNew(StartLedBlinkTask, NULL, &LedBlinkTask_attributes);
 800055e:	4a16      	ldr	r2, [pc, #88]	; (80005b8 <main+0xe0>)
 8000560:	2100      	movs	r1, #0
 8000562:	4816      	ldr	r0, [pc, #88]	; (80005bc <main+0xe4>)
 8000564:	f004 f854 	bl	8004610 <osThreadNew>
 8000568:	4603      	mov	r3, r0
 800056a:	4a15      	ldr	r2, [pc, #84]	; (80005c0 <main+0xe8>)
 800056c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800056e:	f004 f829 	bl	80045c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000572:	e7fe      	b.n	8000572 <main+0x9a>
 8000574:	20001994 	.word	0x20001994
 8000578:	20001908 	.word	0x20001908
 800057c:	08008270 	.word	0x08008270
 8000580:	20001900 	.word	0x20001900
 8000584:	08008240 	.word	0x08008240
 8000588:	200018f4 	.word	0x200018f4
 800058c:	08008258 	.word	0x08008258
 8000590:	2000198c 	.word	0x2000198c
 8000594:	080081b0 	.word	0x080081b0
 8000598:	08000821 	.word	0x08000821
 800059c:	20001990 	.word	0x20001990
 80005a0:	080081d4 	.word	0x080081d4
 80005a4:	08000a71 	.word	0x08000a71
 80005a8:	200018fc 	.word	0x200018fc
 80005ac:	080081f8 	.word	0x080081f8
 80005b0:	08000c8d 	.word	0x08000c8d
 80005b4:	20001904 	.word	0x20001904
 80005b8:	0800821c 	.word	0x0800821c
 80005bc:	08000c9d 	.word	0x08000c9d
 80005c0:	200018f8 	.word	0x200018f8

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	; 0x58
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2244      	movs	r2, #68	; 0x44
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f007 fd0c 	bl	8007ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ea:	f001 f849 	bl	8001680 <HAL_PWREx_ControlVoltageScaling>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f4:	f000 fb6c 	bl	8000cd0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000600:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000602:	2310      	movs	r3, #16
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060a:	2302      	movs	r3, #2
 800060c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800060e:	2301      	movs	r3, #1
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000612:	230a      	movs	r3, #10
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000616:	2307      	movs	r3, #7
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4618      	mov	r0, r3
 8000628:	f001 f880 	bl	800172c <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000632:	f000 fb4d 	bl	8000cd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2303      	movs	r3, #3
 800063c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064a:	463b      	mov	r3, r7
 800064c:	2104      	movs	r1, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fc52 	bl	8001ef8 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800065a:	f000 fb39 	bl	8000cd0 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3758      	adds	r7, #88	; 0x58
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2105      	movs	r1, #5
 800066e:	2026      	movs	r0, #38	; 0x26
 8000670:	f000 fd8c 	bl	800118c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000674:	2026      	movs	r0, #38	; 0x26
 8000676:	f000 fda5 	bl	80011c4 <HAL_NVIC_EnableIRQ>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <MX_USART2_UART_Init+0x5c>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 800068c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006c4:	f002 fdde 	bl	8003284 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 faff 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20001908 	.word	0x20001908
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a2a      	ldr	r2, [pc, #168]	; (80007a4 <MX_GPIO_Init+0xc4>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2120      	movs	r1, #32
 800075a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075e:	f000 ff69 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_GPIO_Init+0xc8>)
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	480d      	ldr	r0, [pc, #52]	; (80007ac <MX_GPIO_Init+0xcc>)
 8000778:	f000 fdb2 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077c:	2320      	movs	r3, #32
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f000 fda3 	bl	80012e0 <HAL_GPIO_Init>

}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	; 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000
 80007a8:	10210000 	.word	0x10210000
 80007ac:	48000800 	.word	0x48000800

080007b0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <HAL_UART_RxCpltCallback+0x34>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d10b      	bne.n	80007da <HAL_UART_RxCpltCallback+0x2a>
  {
    osMessageQueuePut(RxQueueHandle, &rx_char, 1, 0);
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_UART_RxCpltCallback+0x38>)
 80007c4:	6818      	ldr	r0, [r3, #0]
 80007c6:	2300      	movs	r3, #0
 80007c8:	2201      	movs	r2, #1
 80007ca:	4908      	ldr	r1, [pc, #32]	; (80007ec <HAL_UART_RxCpltCallback+0x3c>)
 80007cc:	f004 f9a2 	bl	8004b14 <osMessageQueuePut>
	HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 80007d0:	2201      	movs	r2, #1
 80007d2:	4906      	ldr	r1, [pc, #24]	; (80007ec <HAL_UART_RxCpltCallback+0x3c>)
 80007d4:	4806      	ldr	r0, [pc, #24]	; (80007f0 <HAL_UART_RxCpltCallback+0x40>)
 80007d6:	f002 fdff 	bl	80033d8 <HAL_UART_Receive_IT>

  }
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40004400 	.word	0x40004400
 80007e8:	200018f4 	.word	0x200018f4
 80007ec:	20001994 	.word	0x20001994
 80007f0:	20001908 	.word	0x20001908

080007f4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a05      	ldr	r2, [pc, #20]	; (8000818 <HAL_UART_TxCpltCallback+0x24>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d104      	bne.n	8000810 <HAL_UART_TxCpltCallback+0x1c>
	{
		osSemaphoreRelease(UARTTxSemaphoreHandle);
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_UART_TxCpltCallback+0x28>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f004 f8ca 	bl	80049a4 <osSemaphoreRelease>

	}
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40004400 	.word	0x40004400
 800081c:	20001900 	.word	0x20001900

08000820 <StartUARTRx>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTRx */
void StartUARTRx(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t temp_rx[2] = { '\0' };
 8000828:	2300      	movs	r3, #0
 800082a:	833b      	strh	r3, [r7, #24]
  char rx_msg[13] = { '\0' };
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	721a      	strb	r2, [r3, #8]
  size_t str_sp = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  osStatus_t status;
  bool send = false;
 8000840:	2300      	movs	r3, #0
 8000842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Infinite loop */
  for(;;)
  {
    status = osMessageQueueGet(RxQueueHandle, temp_rx, NULL, 500);
 8000846:	4b83      	ldr	r3, [pc, #524]	; (8000a54 <StartUARTRx+0x234>)
 8000848:	6818      	ldr	r0, [r3, #0]
 800084a:	f107 0118 	add.w	r1, r7, #24
 800084e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000852:	2200      	movs	r2, #0
 8000854:	f004 f9be 	bl	8004bd4 <osMessageQueueGet>
 8000858:	61f8      	str	r0, [r7, #28]

    if (status == osOK)
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d110      	bne.n	8000882 <StartUARTRx+0x62>
    {
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fcb3 	bl	80001d0 <strlen>
 800086a:	4603      	mov	r3, r0
 800086c:	f1c3 030c 	rsb	r3, r3, #12
 8000870:	623b      	str	r3, [r7, #32]
    	strncat(rx_msg, (char *)temp_rx, str_sp);
 8000872:	f107 0118 	add.w	r1, r7, #24
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	6a3a      	ldr	r2, [r7, #32]
 800087c:	4618      	mov	r0, r3
 800087e:	f007 fbbf 	bl	8008000 <strncat>

    }

    str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fca2 	bl	80001d0 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	f1c3 030c 	rsb	r3, r3, #12
 8000892:	623b      	str	r3, [r7, #32]

    if (str_sp == 0)
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d11d      	bne.n	80008d6 <StartUARTRx+0xb6>
    {
    	rx_msg[strlen(rx_msg)-1] = '\r';
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fc96 	bl	80001d0 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	3b01      	subs	r3, #1
 80008a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008ac:	4413      	add	r3, r2
 80008ae:	220d      	movs	r2, #13
 80008b0:	f803 2c20 	strb.w	r2, [r3, #-32]
    	rx_msg[strlen(rx_msg)-2] = '\n';
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fc89 	bl	80001d0 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	3b02      	subs	r3, #2
 80008c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008c6:	4413      	add	r3, r2
 80008c8:	220a      	movs	r2, #10
 80008ca:	f803 2c20 	strb.w	r2, [r3, #-32]
    	send = true;
 80008ce:	2301      	movs	r3, #1
 80008d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008d4:	e088      	b.n	80009e8 <StartUARTRx+0x1c8>

    }

    else if (status == osErrorTimeout && strlen(rx_msg) > 0 && str_sp >= 2)
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	f113 0f02 	cmn.w	r3, #2
 80008dc:	d11b      	bne.n	8000916 <StartUARTRx+0xf6>
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d016      	beq.n	8000916 <StartUARTRx+0xf6>
 80008e8:	6a3b      	ldr	r3, [r7, #32]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d913      	bls.n	8000916 <StartUARTRx+0xf6>
    {
    	strncat(rx_msg, "\n\r", str_sp);
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	6a3a      	ldr	r2, [r7, #32]
 80008f4:	4958      	ldr	r1, [pc, #352]	; (8000a58 <StartUARTRx+0x238>)
 80008f6:	4618      	mov	r0, r3
 80008f8:	f007 fb82 	bl	8008000 <strncat>
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fc65 	bl	80001d0 <strlen>
 8000906:	4603      	mov	r3, r0
 8000908:	f1c3 030c 	rsb	r3, r3, #12
 800090c:	623b      	str	r3, [r7, #32]
    	send = true;
 800090e:	2301      	movs	r3, #1
 8000910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000914:	e068      	b.n	80009e8 <StartUARTRx+0x1c8>

    }

    else if (status == osErrorTimeout && strlen(rx_msg) > 0 && str_sp == 1)
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	f113 0f02 	cmn.w	r3, #2
 800091c:	d128      	bne.n	8000970 <StartUARTRx+0x150>
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d023      	beq.n	8000970 <StartUARTRx+0x150>
 8000928:	6a3b      	ldr	r3, [r7, #32]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d120      	bne.n	8000970 <StartUARTRx+0x150>
    {
    	strncat(rx_msg, "\r", str_sp);
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	6a3a      	ldr	r2, [r7, #32]
 8000934:	4949      	ldr	r1, [pc, #292]	; (8000a5c <StartUARTRx+0x23c>)
 8000936:	4618      	mov	r0, r3
 8000938:	f007 fb62 	bl	8008000 <strncat>
    	rx_msg[strlen(rx_msg)-2] = '\n';
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fc45 	bl	80001d0 <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	3b02      	subs	r3, #2
 800094a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800094e:	4413      	add	r3, r2
 8000950:	220a      	movs	r2, #10
 8000952:	f803 2c20 	strb.w	r2, [r3, #-32]
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fc38 	bl	80001d0 <strlen>
 8000960:	4603      	mov	r3, r0
 8000962:	f1c3 030c 	rsb	r3, r3, #12
 8000966:	623b      	str	r3, [r7, #32]
    	send = true;
 8000968:	2301      	movs	r3, #1
 800096a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800096e:	e03b      	b.n	80009e8 <StartUARTRx+0x1c8>

    }

    else if (rx_msg[strlen(rx_msg)-1] == '\n' || rx_msg[strlen(rx_msg)-1] == '\r')
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fc2b 	bl	80001d0 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	3b01      	subs	r3, #1
 800097e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000982:	4413      	add	r3, r2
 8000984:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000988:	2b0a      	cmp	r3, #10
 800098a:	d00d      	beq.n	80009a8 <StartUARTRx+0x188>
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fc1d 	bl	80001d0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	3b01      	subs	r3, #1
 800099a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800099e:	4413      	add	r3, r2
 80009a0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80009a4:	2b0d      	cmp	r3, #13
 80009a6:	d11f      	bne.n	80009e8 <StartUARTRx+0x1c8>
    {
    	rx_msg[strlen(rx_msg)-1] = '\n';
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fc0f 	bl	80001d0 <strlen>
 80009b2:	4603      	mov	r3, r0
 80009b4:	3b01      	subs	r3, #1
 80009b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009ba:	4413      	add	r3, r2
 80009bc:	220a      	movs	r2, #10
 80009be:	f803 2c20 	strb.w	r2, [r3, #-32]
    	strncat(rx_msg, "\r", str_sp);
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	6a3a      	ldr	r2, [r7, #32]
 80009c8:	4924      	ldr	r1, [pc, #144]	; (8000a5c <StartUARTRx+0x23c>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f007 fb18 	bl	8008000 <strncat>
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fbfb 	bl	80001d0 <strlen>
 80009da:	4603      	mov	r3, r0
 80009dc:	f1c3 030c 	rsb	r3, r3, #12
 80009e0:	623b      	str	r3, [r7, #32]
    	send = true;
 80009e2:	2301      	movs	r3, #1
 80009e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    }

    if (send)
 80009e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f43f af2a 	beq.w	8000846 <StartUARTRx+0x26>
    {
    	osMessageQueuePut(CommandQueueHandle, rx_msg, 1, osWaitForever);
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <StartUARTRx+0x240>)
 80009f4:	6818      	ldr	r0, [r3, #0]
 80009f6:	f107 0108 	add.w	r1, r7, #8
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009fe:	2201      	movs	r2, #1
 8000a00:	f004 f888 	bl	8004b14 <osMessageQueuePut>
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <StartUARTRx+0x244>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f003 ff77 	bl	8004900 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Received command:\n\r", 19);
 8000a12:	2213      	movs	r2, #19
 8000a14:	4914      	ldr	r1, [pc, #80]	; (8000a68 <StartUARTRx+0x248>)
 8000a16:	4815      	ldr	r0, [pc, #84]	; (8000a6c <StartUARTRx+0x24c>)
 8000a18:	f002 fc82 	bl	8003320 <HAL_UART_Transmit_IT>

    	str_sp = strlen(rx_msg);
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fbd5 	bl	80001d0 <strlen>
 8000a26:	6238      	str	r0, [r7, #32]
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <StartUARTRx+0x244>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a30:	4618      	mov	r0, r3
 8000a32:	f003 ff65 	bl	8004900 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)rx_msg, str_sp);
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480a      	ldr	r0, [pc, #40]	; (8000a6c <StartUARTRx+0x24c>)
 8000a42:	f002 fc6d 	bl	8003320 <HAL_UART_Transmit_IT>
    	rx_msg[0] = '\0';
 8000a46:	2300      	movs	r3, #0
 8000a48:	723b      	strb	r3, [r7, #8]
    	send = false;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = osMessageQueueGet(RxQueueHandle, temp_rx, NULL, 500);
 8000a50:	e6f9      	b.n	8000846 <StartUARTRx+0x26>
 8000a52:	bf00      	nop
 8000a54:	200018f4 	.word	0x200018f4
 8000a58:	080080b8 	.word	0x080080b8
 8000a5c:	080080bc 	.word	0x080080bc
 8000a60:	2000198c 	.word	0x2000198c
 8000a64:	20001900 	.word	0x20001900
 8000a68:	080080c0 	.word	0x080080c0
 8000a6c:	20001908 	.word	0x20001908

08000a70 <StartTTaskHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTTaskHandler */
void StartTTaskHandler(void *argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTTaskHandler */
  osThreadSuspend(ButTaskHandle);
 8000a78:	4b74      	ldr	r3, [pc, #464]	; (8000c4c <StartTTaskHandler+0x1dc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 fe59 	bl	8004734 <osThreadSuspend>
  osThreadSuspend(LedBlinkTaskHandle);
 8000a82:	4b73      	ldr	r3, [pc, #460]	; (8000c50 <StartTTaskHandler+0x1e0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 fe54 	bl	8004734 <osThreadSuspend>

  char command[13] = { '\0' };
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	721a      	strb	r2, [r3, #8]
  bool led_b_sus = true;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	75fb      	strb	r3, [r7, #23]
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(CommandQueueHandle, command, NULL, osWaitForever);
 8000aa0:	4b6c      	ldr	r3, [pc, #432]	; (8000c54 <StartTTaskHandler+0x1e4>)
 8000aa2:	6818      	ldr	r0, [r3, #0]
 8000aa4:	f107 0108 	add.w	r1, r7, #8
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aac:	2200      	movs	r2, #0
 8000aae:	f004 f891 	bl	8004bd4 <osMessageQueueGet>

    if (!strncmp(command, "LED", 3) || !strncmp(command, "led", 3))
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	4967      	ldr	r1, [pc, #412]	; (8000c58 <StartTTaskHandler+0x1e8>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f007 fab3 	bl	8008026 <strncmp>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d00a      	beq.n	8000adc <StartTTaskHandler+0x6c>
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	2203      	movs	r2, #3
 8000acc:	4963      	ldr	r1, [pc, #396]	; (8000c5c <StartTTaskHandler+0x1ec>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f007 faa9 	bl	8008026 <strncmp>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8089 	bne.w	8000bee <StartTTaskHandler+0x17e>
    {
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000adc:	4b60      	ldr	r3, [pc, #384]	; (8000c60 <StartTTaskHandler+0x1f0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 ff0b 	bl	8004900 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED command\n\r", 13);
 8000aea:	220d      	movs	r2, #13
 8000aec:	495d      	ldr	r1, [pc, #372]	; (8000c64 <StartTTaskHandler+0x1f4>)
 8000aee:	485e      	ldr	r0, [pc, #376]	; (8000c68 <StartTTaskHandler+0x1f8>)
 8000af0:	f002 fc16 	bl	8003320 <HAL_UART_Transmit_IT>

    	if (command[4] == 'b' && command[6] != '0')
 8000af4:	7b3b      	ldrb	r3, [r7, #12]
 8000af6:	2b62      	cmp	r3, #98	; 0x62
 8000af8:	d132      	bne.n	8000b60 <StartTTaskHandler+0xf0>
 8000afa:	7bbb      	ldrb	r3, [r7, #14]
 8000afc:	2b30      	cmp	r3, #48	; 0x30
 8000afe:	d02f      	beq.n	8000b60 <StartTTaskHandler+0xf0>
    	{
    		if (led_b_sus)
 8000b00:	7dfb      	ldrb	r3, [r7, #23]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d01f      	beq.n	8000b46 <StartTTaskHandler+0xd6>
    		{

    			osThreadResume(LedBlinkTaskHandle);
 8000b06:	4b52      	ldr	r3, [pc, #328]	; (8000c50 <StartTTaskHandler+0x1e0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 fe33 	bl	8004776 <osThreadResume>
    			led_b_sus = !led_b_sus;
 8000b10:	7dfb      	ldrb	r3, [r7, #23]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bf14      	ite	ne
 8000b16:	2301      	movne	r3, #1
 8000b18:	2300      	moveq	r3, #0
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	f083 0301 	eor.w	r3, r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	75fb      	strb	r3, [r7, #23]
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	75fb      	strb	r3, [r7, #23]
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000b2c:	4b4c      	ldr	r3, [pc, #304]	; (8000c60 <StartTTaskHandler+0x1f0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b34:	4618      	mov	r0, r3
 8000b36:	f003 fee3 	bl	8004900 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task started\n\r", 27);
 8000b3a:	221b      	movs	r2, #27
 8000b3c:	494b      	ldr	r1, [pc, #300]	; (8000c6c <StartTTaskHandler+0x1fc>)
 8000b3e:	484a      	ldr	r0, [pc, #296]	; (8000c68 <StartTTaskHandler+0x1f8>)
 8000b40:	f002 fbee 	bl	8003320 <HAL_UART_Transmit_IT>
    		if (led_b_sus)
 8000b44:	e052      	b.n	8000bec <StartTTaskHandler+0x17c>

    		}

    		else
    		{
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000b46:	4b46      	ldr	r3, [pc, #280]	; (8000c60 <StartTTaskHandler+0x1f0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 fed6 	bl	8004900 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task already running\n\r", 35);
 8000b54:	2223      	movs	r2, #35	; 0x23
 8000b56:	4946      	ldr	r1, [pc, #280]	; (8000c70 <StartTTaskHandler+0x200>)
 8000b58:	4843      	ldr	r0, [pc, #268]	; (8000c68 <StartTTaskHandler+0x1f8>)
 8000b5a:	f002 fbe1 	bl	8003320 <HAL_UART_Transmit_IT>
    		if (led_b_sus)
 8000b5e:	e045      	b.n	8000bec <StartTTaskHandler+0x17c>

    		}
    	}

    	else if (command[4] == 'b' && command[6] == '0')
 8000b60:	7b3b      	ldrb	r3, [r7, #12]
 8000b62:	2b62      	cmp	r3, #98	; 0x62
 8000b64:	d135      	bne.n	8000bd2 <StartTTaskHandler+0x162>
 8000b66:	7bbb      	ldrb	r3, [r7, #14]
 8000b68:	2b30      	cmp	r3, #48	; 0x30
 8000b6a:	d132      	bne.n	8000bd2 <StartTTaskHandler+0x162>
    	{
    		if (!led_b_sus)
 8000b6c:	7dfb      	ldrb	r3, [r7, #23]
 8000b6e:	f083 0301 	eor.w	r3, r3, #1
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d01f      	beq.n	8000bb8 <StartTTaskHandler+0x148>
			{

				osThreadSuspend(LedBlinkTaskHandle);
 8000b78:	4b35      	ldr	r3, [pc, #212]	; (8000c50 <StartTTaskHandler+0x1e0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f003 fdd9 	bl	8004734 <osThreadSuspend>
				led_b_sus = !led_b_sus;
 8000b82:	7dfb      	ldrb	r3, [r7, #23]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	bf14      	ite	ne
 8000b88:	2301      	movne	r3, #1
 8000b8a:	2300      	moveq	r3, #0
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	f083 0301 	eor.w	r3, r3, #1
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	75fb      	strb	r3, [r7, #23]
 8000b96:	7dfb      	ldrb	r3, [r7, #23]
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	75fb      	strb	r3, [r7, #23]
				osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000b9e:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <StartTTaskHandler+0x1f0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f003 feaa 	bl	8004900 <osSemaphoreAcquire>
				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task stopped\n\r", 27);
 8000bac:	221b      	movs	r2, #27
 8000bae:	4931      	ldr	r1, [pc, #196]	; (8000c74 <StartTTaskHandler+0x204>)
 8000bb0:	482d      	ldr	r0, [pc, #180]	; (8000c68 <StartTTaskHandler+0x1f8>)
 8000bb2:	f002 fbb5 	bl	8003320 <HAL_UART_Transmit_IT>
    		if (!led_b_sus)
 8000bb6:	e019      	b.n	8000bec <StartTTaskHandler+0x17c>

			}

			else
			{
				osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000bb8:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <StartTTaskHandler+0x1f0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 fe9d 	bl	8004900 <osSemaphoreAcquire>
				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task already stopped\n\r", 35);
 8000bc6:	2223      	movs	r2, #35	; 0x23
 8000bc8:	492b      	ldr	r1, [pc, #172]	; (8000c78 <StartTTaskHandler+0x208>)
 8000bca:	4827      	ldr	r0, [pc, #156]	; (8000c68 <StartTTaskHandler+0x1f8>)
 8000bcc:	f002 fba8 	bl	8003320 <HAL_UART_Transmit_IT>
    		if (!led_b_sus)
 8000bd0:	e00c      	b.n	8000bec <StartTTaskHandler+0x17c>

    	}

    	else
    	{
    		osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <StartTTaskHandler+0x1f0>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 fe90 	bl	8004900 <osSemaphoreAcquire>
    		HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Invalid command\n\r", 17);
 8000be0:	2211      	movs	r2, #17
 8000be2:	4926      	ldr	r1, [pc, #152]	; (8000c7c <StartTTaskHandler+0x20c>)
 8000be4:	4820      	ldr	r0, [pc, #128]	; (8000c68 <StartTTaskHandler+0x1f8>)
 8000be6:	f002 fb9b 	bl	8003320 <HAL_UART_Transmit_IT>
    	if (command[4] == 'b' && command[6] != '0')
 8000bea:	e02d      	b.n	8000c48 <StartTTaskHandler+0x1d8>
 8000bec:	e02c      	b.n	8000c48 <StartTTaskHandler+0x1d8>
    	}


    }

    else if (!strncmp(command, "BUT", 3) || !strncmp(command, "but", 3))
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	4922      	ldr	r1, [pc, #136]	; (8000c80 <StartTTaskHandler+0x210>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f007 fa15 	bl	8008026 <strncmp>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d009      	beq.n	8000c16 <StartTTaskHandler+0x1a6>
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	2203      	movs	r2, #3
 8000c08:	491e      	ldr	r1, [pc, #120]	; (8000c84 <StartTTaskHandler+0x214>)
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f007 fa0b 	bl	8008026 <strncmp>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10c      	bne.n	8000c30 <StartTTaskHandler+0x1c0>
    {
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <StartTTaskHandler+0x1f0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fe6e 	bl	8004900 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"BUT command\n\r", 15);
 8000c24:	220f      	movs	r2, #15
 8000c26:	4918      	ldr	r1, [pc, #96]	; (8000c88 <StartTTaskHandler+0x218>)
 8000c28:	480f      	ldr	r0, [pc, #60]	; (8000c68 <StartTTaskHandler+0x1f8>)
 8000c2a:	f002 fb79 	bl	8003320 <HAL_UART_Transmit_IT>
 8000c2e:	e00b      	b.n	8000c48 <StartTTaskHandler+0x1d8>

    }

    else
    {
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <StartTTaskHandler+0x1f0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f003 fe61 	bl	8004900 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Invalid command\n\r", 17);
 8000c3e:	2211      	movs	r2, #17
 8000c40:	490e      	ldr	r1, [pc, #56]	; (8000c7c <StartTTaskHandler+0x20c>)
 8000c42:	4809      	ldr	r0, [pc, #36]	; (8000c68 <StartTTaskHandler+0x1f8>)
 8000c44:	f002 fb6c 	bl	8003320 <HAL_UART_Transmit_IT>
    osMessageQueueGet(CommandQueueHandle, command, NULL, osWaitForever);
 8000c48:	e72a      	b.n	8000aa0 <StartTTaskHandler+0x30>
 8000c4a:	bf00      	nop
 8000c4c:	20001904 	.word	0x20001904
 8000c50:	200018f8 	.word	0x200018f8
 8000c54:	2000198c 	.word	0x2000198c
 8000c58:	080080d4 	.word	0x080080d4
 8000c5c:	080080d8 	.word	0x080080d8
 8000c60:	20001900 	.word	0x20001900
 8000c64:	080080dc 	.word	0x080080dc
 8000c68:	20001908 	.word	0x20001908
 8000c6c:	080080ec 	.word	0x080080ec
 8000c70:	08008108 	.word	0x08008108
 8000c74:	0800812c 	.word	0x0800812c
 8000c78:	08008148 	.word	0x08008148
 8000c7c:	0800816c 	.word	0x0800816c
 8000c80:	08008180 	.word	0x08008180
 8000c84:	08008184 	.word	0x08008184
 8000c88:	08008188 	.word	0x08008188

08000c8c <StartButTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButTask */
void StartButTask(void *argument)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f003 fd8f 	bl	80047b8 <osDelay>
 8000c9a:	e7fb      	b.n	8000c94 <StartButTask+0x8>

08000c9c <StartLedBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedBlinkTask */
void StartLedBlinkTask(void *argument)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedBlinkTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f003 fd87 	bl	80047b8 <osDelay>
 8000caa:	e7fb      	b.n	8000ca4 <StartLedBlinkTask+0x8>

08000cac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d101      	bne.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cbe:	f000 f98d 	bl	8000fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40001000 	.word	0x40001000

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <Error_Handler+0x8>
	...

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_MspInit+0x4c>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_MspInit+0x4c>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6613      	str	r3, [r2, #96]	; 0x60
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_MspInit+0x4c>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_MspInit+0x4c>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	6593      	str	r3, [r2, #88]	; 0x58
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	210f      	movs	r1, #15
 8000d16:	f06f 0001 	mvn.w	r0, #1
 8000d1a:	f000 fa37 	bl	800118c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0ac      	sub	sp, #176	; 0xb0
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2288      	movs	r2, #136	; 0x88
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f007 f94f 	bl	8007ff0 <memset>
  if(huart->Instance==USART2)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <HAL_UART_MspInit+0xb0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d13b      	bne.n	8000dd4 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fafd 	bl	8002368 <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d74:	f7ff ffac 	bl	8000cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_UART_MspInit+0xb4>)
 8000d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7c:	4a18      	ldr	r2, [pc, #96]	; (8000de0 <HAL_UART_MspInit+0xb4>)
 8000d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d82:	6593      	str	r3, [r2, #88]	; 0x58
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_UART_MspInit+0xb4>)
 8000d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <HAL_UART_MspInit+0xb4>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d94:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <HAL_UART_MspInit+0xb4>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_UART_MspInit+0xb4>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000da8:	230c      	movs	r3, #12
 8000daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd0:	f000 fa86 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	37b0      	adds	r7, #176	; 0xb0
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40004400 	.word	0x40004400
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	; 0x30
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	2036      	movs	r0, #54	; 0x36
 8000dfa:	f000 f9c7 	bl	800118c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dfe:	2036      	movs	r0, #54	; 0x36
 8000e00:	f000 f9e0 	bl	80011c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_InitTick+0x9c>)
 8000e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <HAL_InitTick+0x9c>)
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_InitTick+0x9c>)
 8000e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e1c:	f107 0210 	add.w	r2, r7, #16
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fa0c 	bl	8002244 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e2c:	f001 f9de 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8000e30:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e34:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_InitTick+0xa0>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	0c9b      	lsrs	r3, r3, #18
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_InitTick+0xa4>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <HAL_InitTick+0xa8>)
 8000e44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_InitTick+0xa4>)
 8000e48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_InitTick+0xa4>)
 8000e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_InitTick+0xa4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_InitTick+0xa4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e60:	4809      	ldr	r0, [pc, #36]	; (8000e88 <HAL_InitTick+0xa4>)
 8000e62:	f001 ff3d 	bl	8002ce0 <HAL_TIM_Base_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d104      	bne.n	8000e76 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <HAL_InitTick+0xa4>)
 8000e6e:	f001 ff99 	bl	8002da4 <HAL_TIM_Base_Start_IT>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3730      	adds	r7, #48	; 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40021000 	.word	0x40021000
 8000e84:	431bde83 	.word	0x431bde83
 8000e88:	20001998 	.word	0x20001998
 8000e8c:	40001000 	.word	0x40001000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <USART2_IRQHandler+0x10>)
 8000ec2:	f002 facd 	bl	8003460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20001908 	.word	0x20001908

08000ed0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <TIM6_DAC_IRQHandler+0x10>)
 8000ed6:	f001 ffd5 	bl	8002e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20001998 	.word	0x20001998

08000ee4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <SystemInit+0x5c>)
 8000eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <SystemInit+0x5c>)
 8000ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <SystemInit+0x60>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <SystemInit+0x60>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <SystemInit+0x60>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <SystemInit+0x60>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <SystemInit+0x60>)
 8000f10:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f14:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <SystemInit+0x60>)
 8000f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f20:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <SystemInit+0x60>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <SystemInit+0x60>)
 8000f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SystemInit+0x60>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00
 8000f44:	40021000 	.word	0x40021000

08000f48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f4c:	f7ff ffca 	bl	8000ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f52:	e003      	b.n	8000f5c <LoopCopyDataInit>

08000f54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f5a:	3104      	adds	r1, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f5c:	480a      	ldr	r0, [pc, #40]	; (8000f88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f64:	d3f6      	bcc.n	8000f54 <CopyDataInit>
	ldr	r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f68:	e002      	b.n	8000f70 <LoopFillZerobss>

08000f6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f6c:	f842 3b04 	str.w	r3, [r2], #4

08000f70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <LoopForever+0x16>)
	cmp	r2, r3
 8000f72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f74:	d3f9      	bcc.n	8000f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f007 f809 	bl	8007f8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7a:	f7ff faad 	bl	80004d8 <main>

08000f7e <LoopForever>:

LoopForever:
    b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f80:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f84:	080082d8 	.word	0x080082d8
	ldr	r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f8c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000f90:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000f94:	20001a28 	.word	0x20001a28

08000f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_2_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_Init+0x3c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_Init+0x3c>)
 8000fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb2:	2003      	movs	r0, #3
 8000fb4:	f000 f8df 	bl	8001176 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb8:	200f      	movs	r0, #15
 8000fba:	f7ff ff13 	bl	8000de4 <HAL_InitTick>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	e001      	b.n	8000fce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fca:	f7ff fe87 	bl	8000cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008
 8001000:	200019e4 	.word	0x200019e4

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200019e4 	.word	0x200019e4

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <__NVIC_EnableIRQ+0x38>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff4c 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119e:	f7ff ff61 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	6978      	ldr	r0, [r7, #20]
 80011aa:	f7ff ffb1 	bl	8001110 <NVIC_EncodePriority>
 80011ae:	4602      	mov	r2, r0
 80011b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff80 	bl	80010bc <__NVIC_SetPriority>
}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff54 	bl	8001080 <__NVIC_EnableIRQ>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d008      	beq.n	800120a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2204      	movs	r2, #4
 80011fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e022      	b.n	8001250 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 020e 	bic.w	r2, r2, #14
 8001218:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0201 	bic.w	r2, r2, #1
 8001228:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f003 021c 	and.w	r2, r3, #28
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d005      	beq.n	8001280 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2204      	movs	r2, #4
 8001278:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	e029      	b.n	80012d4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 020e 	bic.w	r2, r2, #14
 800128e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0201 	bic.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	f003 021c 	and.w	r2, r3, #28
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	2101      	movs	r1, #1
 80012ae:	fa01 f202 	lsl.w	r2, r1, r2
 80012b2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	4798      	blx	r3
    }
  }
  return status;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ee:	e17f      	b.n	80015f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	4013      	ands	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8171 	beq.w	80015ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d00b      	beq.n	8001328 <HAL_GPIO_Init+0x48>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d007      	beq.n	8001328 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131c:	2b11      	cmp	r3, #17
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b12      	cmp	r3, #18
 8001326:	d130      	bne.n	800138a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135e:	2201      	movs	r2, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 0201 	and.w	r2, r3, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b03      	cmp	r3, #3
 8001394:	d118      	bne.n	80013c8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800139c:	2201      	movs	r2, #1
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	08db      	lsrs	r3, r3, #3
 80013b2:	f003 0201 	and.w	r2, r3, #1
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x128>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b12      	cmp	r3, #18
 8001406:	d123      	bne.n	8001450 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	6939      	ldr	r1, [r7, #16]
 800144c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0203 	and.w	r2, r3, #3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80ac 	beq.w	80015ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	4b5f      	ldr	r3, [pc, #380]	; (8001610 <HAL_GPIO_Init+0x330>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001496:	4a5e      	ldr	r2, [pc, #376]	; (8001610 <HAL_GPIO_Init+0x330>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6613      	str	r3, [r2, #96]	; 0x60
 800149e:	4b5c      	ldr	r3, [pc, #368]	; (8001610 <HAL_GPIO_Init+0x330>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014aa:	4a5a      	ldr	r2, [pc, #360]	; (8001614 <HAL_GPIO_Init+0x334>)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014d4:	d025      	beq.n	8001522 <HAL_GPIO_Init+0x242>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4f      	ldr	r2, [pc, #316]	; (8001618 <HAL_GPIO_Init+0x338>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01f      	beq.n	800151e <HAL_GPIO_Init+0x23e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4e      	ldr	r2, [pc, #312]	; (800161c <HAL_GPIO_Init+0x33c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d019      	beq.n	800151a <HAL_GPIO_Init+0x23a>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4d      	ldr	r2, [pc, #308]	; (8001620 <HAL_GPIO_Init+0x340>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_Init+0x236>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <HAL_GPIO_Init+0x344>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00d      	beq.n	8001512 <HAL_GPIO_Init+0x232>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4b      	ldr	r2, [pc, #300]	; (8001628 <HAL_GPIO_Init+0x348>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d007      	beq.n	800150e <HAL_GPIO_Init+0x22e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4a      	ldr	r2, [pc, #296]	; (800162c <HAL_GPIO_Init+0x34c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_GPIO_Init+0x22a>
 8001506:	2306      	movs	r3, #6
 8001508:	e00c      	b.n	8001524 <HAL_GPIO_Init+0x244>
 800150a:	2307      	movs	r3, #7
 800150c:	e00a      	b.n	8001524 <HAL_GPIO_Init+0x244>
 800150e:	2305      	movs	r3, #5
 8001510:	e008      	b.n	8001524 <HAL_GPIO_Init+0x244>
 8001512:	2304      	movs	r3, #4
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x244>
 8001516:	2303      	movs	r3, #3
 8001518:	e004      	b.n	8001524 <HAL_GPIO_Init+0x244>
 800151a:	2302      	movs	r3, #2
 800151c:	e002      	b.n	8001524 <HAL_GPIO_Init+0x244>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x244>
 8001522:	2300      	movs	r3, #0
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	f002 0203 	and.w	r2, r2, #3
 800152a:	0092      	lsls	r2, r2, #2
 800152c:	4093      	lsls	r3, r2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001534:	4937      	ldr	r1, [pc, #220]	; (8001614 <HAL_GPIO_Init+0x334>)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001542:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <HAL_GPIO_Init+0x350>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001566:	4a32      	ldr	r2, [pc, #200]	; (8001630 <HAL_GPIO_Init+0x350>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800156c:	4b30      	ldr	r3, [pc, #192]	; (8001630 <HAL_GPIO_Init+0x350>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001590:	4a27      	ldr	r2, [pc, #156]	; (8001630 <HAL_GPIO_Init+0x350>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <HAL_GPIO_Init+0x350>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ba:	4a1d      	ldr	r2, [pc, #116]	; (8001630 <HAL_GPIO_Init+0x350>)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_GPIO_Init+0x350>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e4:	4a12      	ldr	r2, [pc, #72]	; (8001630 <HAL_GPIO_Init+0x350>)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa22 f303 	lsr.w	r3, r2, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f47f ae78 	bne.w	80012f0 <HAL_GPIO_Init+0x10>
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000
 8001614:	40010000 	.word	0x40010000
 8001618:	48000400 	.word	0x48000400
 800161c:	48000800 	.word	0x48000800
 8001620:	48000c00 	.word	0x48000c00
 8001624:	48001000 	.word	0x48001000
 8001628:	48001400 	.word	0x48001400
 800162c:	48001800 	.word	0x48001800
 8001630:	40010400 	.word	0x40010400

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001650:	e002      	b.n	8001658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <HAL_PWREx_GetVoltageRange+0x18>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40007000 	.word	0x40007000

08001680 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800168e:	d130      	bne.n	80016f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800169c:	d038      	beq.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a6:	4a1e      	ldr	r2, [pc, #120]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2232      	movs	r2, #50	; 0x32
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	0c9b      	lsrs	r3, r3, #18
 80016c0:	3301      	adds	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c4:	e002      	b.n	80016cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d8:	d102      	bne.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f2      	bne.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ec:	d110      	bne.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e00f      	b.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fe:	d007      	beq.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001708:	4a05      	ldr	r2, [pc, #20]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40007000 	.word	0x40007000
 8001724:	20000000 	.word	0x20000000
 8001728:	431bde83 	.word	0x431bde83

0800172c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e3d4      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800173e:	4ba1      	ldr	r3, [pc, #644]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001748:	4b9e      	ldr	r3, [pc, #632]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 80e4 	beq.w	8001928 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <HAL_RCC_OscConfig+0x4a>
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b0c      	cmp	r3, #12
 800176a:	f040 808b 	bne.w	8001884 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b01      	cmp	r3, #1
 8001772:	f040 8087 	bne.w	8001884 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001776:	4b93      	ldr	r3, [pc, #588]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_RCC_OscConfig+0x62>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e3ac      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1a      	ldr	r2, [r3, #32]
 8001792:	4b8c      	ldr	r3, [pc, #560]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d004      	beq.n	80017a8 <HAL_RCC_OscConfig+0x7c>
 800179e:	4b89      	ldr	r3, [pc, #548]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017a6:	e005      	b.n	80017b4 <HAL_RCC_OscConfig+0x88>
 80017a8:	4b86      	ldr	r3, [pc, #536]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d223      	bcs.n	8001800 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fd73 	bl	80022a8 <RCC_SetFlashLatencyFromMSIRange>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e38d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017cc:	4b7d      	ldr	r3, [pc, #500]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a7c      	ldr	r2, [pc, #496]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b7a      	ldr	r3, [pc, #488]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4977      	ldr	r1, [pc, #476]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ea:	4b76      	ldr	r3, [pc, #472]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	4972      	ldr	r1, [pc, #456]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
 80017fe:	e025      	b.n	800184c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001800:	4b70      	ldr	r3, [pc, #448]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a6f      	ldr	r2, [pc, #444]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001806:	f043 0308 	orr.w	r3, r3, #8
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b6d      	ldr	r3, [pc, #436]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	496a      	ldr	r1, [pc, #424]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800181e:	4b69      	ldr	r3, [pc, #420]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	4965      	ldr	r1, [pc, #404]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fd33 	bl	80022a8 <RCC_SetFlashLatencyFromMSIRange>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e34d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800184c:	f000 fc36 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8001850:	4602      	mov	r2, r0
 8001852:	4b5c      	ldr	r3, [pc, #368]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	091b      	lsrs	r3, r3, #4
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	495a      	ldr	r1, [pc, #360]	; (80019c8 <HAL_RCC_OscConfig+0x29c>)
 800185e:	5ccb      	ldrb	r3, [r1, r3]
 8001860:	f003 031f 	and.w	r3, r3, #31
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
 8001868:	4a58      	ldr	r2, [pc, #352]	; (80019cc <HAL_RCC_OscConfig+0x2a0>)
 800186a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800186c:	4b58      	ldr	r3, [pc, #352]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fab7 	bl	8000de4 <HAL_InitTick>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d052      	beq.n	8001926 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	e331      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d032      	beq.n	80018f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800188c:	4b4d      	ldr	r3, [pc, #308]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a4c      	ldr	r2, [pc, #304]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001898:	f7ff fbb4 	bl	8001004 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a0:	f7ff fbb0 	bl	8001004 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e31a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b2:	4b44      	ldr	r3, [pc, #272]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a40      	ldr	r2, [pc, #256]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018c4:	f043 0308 	orr.w	r3, r3, #8
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b3e      	ldr	r3, [pc, #248]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	493b      	ldr	r1, [pc, #236]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018dc:	4b39      	ldr	r3, [pc, #228]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	4936      	ldr	r1, [pc, #216]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
 80018f0:	e01a      	b.n	8001928 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018f2:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a33      	ldr	r2, [pc, #204]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018fe:	f7ff fb81 	bl	8001004 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001906:	f7ff fb7d 	bl	8001004 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e2e7      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001918:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f0      	bne.n	8001906 <HAL_RCC_OscConfig+0x1da>
 8001924:	e000      	b.n	8001928 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001926:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d074      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b08      	cmp	r3, #8
 8001938:	d005      	beq.n	8001946 <HAL_RCC_OscConfig+0x21a>
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d10e      	bne.n	800195e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2b03      	cmp	r3, #3
 8001944:	d10b      	bne.n	800195e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001946:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d064      	beq.n	8001a1c <HAL_RCC_OscConfig+0x2f0>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d160      	bne.n	8001a1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e2c4      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x24a>
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800196e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	e01d      	b.n	80019b2 <HAL_RCC_OscConfig+0x286>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800197e:	d10c      	bne.n	800199a <HAL_RCC_OscConfig+0x26e>
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001986:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 8001992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	e00b      	b.n	80019b2 <HAL_RCC_OscConfig+0x286>
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80019a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <HAL_RCC_OscConfig+0x298>)
 80019ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01c      	beq.n	80019f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7ff fb23 	bl	8001004 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c0:	e011      	b.n	80019e6 <HAL_RCC_OscConfig+0x2ba>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	08008280 	.word	0x08008280
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d4:	f7ff fb16 	bl	8001004 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	; 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e280      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e6:	4baf      	ldr	r3, [pc, #700]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x2a8>
 80019f2:	e014      	b.n	8001a1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff fb06 	bl	8001004 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fb02 	bl	8001004 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e26c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a0e:	4ba5      	ldr	r3, [pc, #660]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x2d0>
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d060      	beq.n	8001aec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_OscConfig+0x310>
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d119      	bne.n	8001a6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d116      	bne.n	8001a6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a3c:	4b99      	ldr	r3, [pc, #612]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_OscConfig+0x328>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e249      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b93      	ldr	r3, [pc, #588]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	061b      	lsls	r3, r3, #24
 8001a62:	4990      	ldr	r1, [pc, #576]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a68:	e040      	b.n	8001aec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d023      	beq.n	8001aba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a72:	4b8c      	ldr	r3, [pc, #560]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a8b      	ldr	r2, [pc, #556]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7ff fac1 	bl	8001004 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff fabd 	bl	8001004 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e227      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a98:	4b82      	ldr	r3, [pc, #520]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	4b7f      	ldr	r3, [pc, #508]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	061b      	lsls	r3, r3, #24
 8001ab2:	497c      	ldr	r1, [pc, #496]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
 8001ab8:	e018      	b.n	8001aec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aba:	4b7a      	ldr	r3, [pc, #488]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a79      	ldr	r2, [pc, #484]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fa9d 	bl	8001004 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ace:	f7ff fa99 	bl	8001004 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e203      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae0:	4b70      	ldr	r3, [pc, #448]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d03c      	beq.n	8001b72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01c      	beq.n	8001b3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b00:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b06:	4a67      	ldr	r2, [pc, #412]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff fa78 	bl	8001004 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b18:	f7ff fa74 	bl	8001004 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e1de      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b2a:	4b5e      	ldr	r3, [pc, #376]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0ef      	beq.n	8001b18 <HAL_RCC_OscConfig+0x3ec>
 8001b38:	e01b      	b.n	8001b72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fa5b 	bl	8001004 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff fa57 	bl	8001004 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e1c1      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b64:	4b4f      	ldr	r3, [pc, #316]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ef      	bne.n	8001b52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80a6 	beq.w	8001ccc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b84:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10d      	bne.n	8001bac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b90:	4b44      	ldr	r3, [pc, #272]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b94:	4a43      	ldr	r2, [pc, #268]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9c:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bac:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <HAL_RCC_OscConfig+0x57c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d118      	bne.n	8001bea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bb8:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <HAL_RCC_OscConfig+0x57c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a3a      	ldr	r2, [pc, #232]	; (8001ca8 <HAL_RCC_OscConfig+0x57c>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fa1e 	bl	8001004 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bcc:	f7ff fa1a 	bl	8001004 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e184      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bde:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <HAL_RCC_OscConfig+0x57c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d108      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4d8>
 8001bf2:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf8:	4a2a      	ldr	r2, [pc, #168]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c02:	e024      	b.n	8001c4e <HAL_RCC_OscConfig+0x522>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d110      	bne.n	8001c2e <HAL_RCC_OscConfig+0x502>
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c12:	4a24      	ldr	r2, [pc, #144]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1c:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c22:	4a20      	ldr	r2, [pc, #128]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c2c:	e00f      	b.n	8001c4e <HAL_RCC_OscConfig+0x522>
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c34:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c46:	f023 0304 	bic.w	r3, r3, #4
 8001c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d016      	beq.n	8001c84 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7ff f9d5 	bl	8001004 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff f9d1 	bl	8001004 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e139      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCC_OscConfig+0x578>)
 8001c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0ed      	beq.n	8001c5e <HAL_RCC_OscConfig+0x532>
 8001c82:	e01a      	b.n	8001cba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff f9be 	bl	8001004 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c8a:	e00f      	b.n	8001cac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff f9ba 	bl	8001004 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d906      	bls.n	8001cac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e122      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cac:	4b90      	ldr	r3, [pc, #576]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1e8      	bne.n	8001c8c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cba:	7ffb      	ldrb	r3, [r7, #31]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d105      	bne.n	8001ccc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc0:	4b8b      	ldr	r3, [pc, #556]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	4a8a      	ldr	r2, [pc, #552]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8108 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	f040 80d0 	bne.w	8001e80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ce0:	4b83      	ldr	r3, [pc, #524]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d130      	bne.n	8001d56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d127      	bne.n	8001d56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d11f      	bne.n	8001d56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d20:	2a07      	cmp	r2, #7
 8001d22:	bf14      	ite	ne
 8001d24:	2201      	movne	r2, #1
 8001d26:	2200      	moveq	r2, #0
 8001d28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d113      	bne.n	8001d56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d38:	085b      	lsrs	r3, r3, #1
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	085b      	lsrs	r3, r3, #1
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d06e      	beq.n	8001e34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	2b0c      	cmp	r3, #12
 8001d5a:	d069      	beq.n	8001e30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d5c:	4b64      	ldr	r3, [pc, #400]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d68:	4b61      	ldr	r3, [pc, #388]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0b7      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d78:	4b5d      	ldr	r3, [pc, #372]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a5c      	ldr	r2, [pc, #368]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d84:	f7ff f93e 	bl	8001004 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff f93a 	bl	8001004 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0a4      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d9e:	4b54      	ldr	r3, [pc, #336]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001daa:	4b51      	ldr	r3, [pc, #324]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <HAL_RCC_OscConfig+0x7c8>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dba:	3a01      	subs	r2, #1
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	4311      	orrs	r1, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dc4:	0212      	lsls	r2, r2, #8
 8001dc6:	4311      	orrs	r1, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dcc:	0852      	lsrs	r2, r2, #1
 8001dce:	3a01      	subs	r2, #1
 8001dd0:	0552      	lsls	r2, r2, #21
 8001dd2:	4311      	orrs	r1, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dd8:	0852      	lsrs	r2, r2, #1
 8001dda:	3a01      	subs	r2, #1
 8001ddc:	0652      	lsls	r2, r2, #25
 8001dde:	4311      	orrs	r1, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001de4:	0912      	lsrs	r2, r2, #4
 8001de6:	0452      	lsls	r2, r2, #17
 8001de8:	430a      	orrs	r2, r1
 8001dea:	4941      	ldr	r1, [pc, #260]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001df0:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a3e      	ldr	r2, [pc, #248]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dfc:	4b3c      	ldr	r3, [pc, #240]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4a3b      	ldr	r2, [pc, #236]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e08:	f7ff f8fc 	bl	8001004 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff f8f8 	bl	8001004 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e062      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e22:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e2e:	e05a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e059      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e34:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d152      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e40:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2a      	ldr	r2, [pc, #168]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4a27      	ldr	r2, [pc, #156]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e58:	f7ff f8d4 	bl	8001004 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7ff f8d0 	bl	8001004 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e03a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x734>
 8001e7e:	e032      	b.n	8001ee6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2b0c      	cmp	r3, #12
 8001e84:	d02d      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e90:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d105      	bne.n	8001eaa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	4a13      	ldr	r2, [pc, #76]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001ea4:	f023 0303 	bic.w	r3, r3, #3
 8001ea8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	4a10      	ldr	r2, [pc, #64]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001eb0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7ff f8a3 	bl	8001004 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff f89f 	bl	8001004 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e009      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f0      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x796>
 8001ee0:	e001      	b.n	8001ee6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3720      	adds	r7, #32
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	f99d808c 	.word	0xf99d808c

08001ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0c8      	b.n	800209e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b66      	ldr	r3, [pc, #408]	; (80020a8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d910      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	4961      	ldr	r1, [pc, #388]	; (80020a8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b5f      	ldr	r3, [pc, #380]	; (80020a8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b0      	b.n	800209e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d04c      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f50:	4b56      	ldr	r3, [pc, #344]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d121      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e09e      	b.n	800209e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f68:	4b50      	ldr	r3, [pc, #320]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d115      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e092      	b.n	800209e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f80:	4b4a      	ldr	r3, [pc, #296]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e086      	b.n	800209e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f90:	4b46      	ldr	r3, [pc, #280]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e07e      	b.n	800209e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fa0:	4b42      	ldr	r3, [pc, #264]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 0203 	bic.w	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	493f      	ldr	r1, [pc, #252]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb2:	f7ff f827 	bl	8001004 <HAL_GetTick>
 8001fb6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fba:	f7ff f823 	bl	8001004 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e066      	b.n	800209e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd0:	4b36      	ldr	r3, [pc, #216]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 020c 	and.w	r2, r3, #12
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d1eb      	bne.n	8001fba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fee:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	492c      	ldr	r1, [pc, #176]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002000:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d210      	bcs.n	8002030 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 0207 	bic.w	r2, r3, #7
 8002016:	4924      	ldr	r1, [pc, #144]	; (80020a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e036      	b.n	800209e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4918      	ldr	r1, [pc, #96]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4910      	ldr	r1, [pc, #64]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800206e:	f000 f825 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8002072:	4602      	mov	r2, r0
 8002074:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	490c      	ldr	r1, [pc, #48]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002080:	5ccb      	ldrb	r3, [r1, r3]
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	fa22 f303 	lsr.w	r3, r2, r3
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fea6 	bl	8000de4 <HAL_InitTick>
 8002098:	4603      	mov	r3, r0
 800209a:	72fb      	strb	r3, [r7, #11]

  return status;
 800209c:	7afb      	ldrb	r3, [r7, #11]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40022000 	.word	0x40022000
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08008280 	.word	0x08008280
 80020b4:	20000000 	.word	0x20000000
 80020b8:	20000004 	.word	0x20000004

080020bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ca:	4b3e      	ldr	r3, [pc, #248]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d4:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x34>
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d121      	bne.n	800212e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d11e      	bne.n	800212e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020f0:	4b34      	ldr	r3, [pc, #208]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020fc:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002102:	0a1b      	lsrs	r3, r3, #8
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e005      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800210c:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002118:	4a2b      	ldr	r2, [pc, #172]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002120:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10d      	bne.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d102      	bne.n	800213a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	e004      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b08      	cmp	r3, #8
 800213e:	d101      	bne.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002140:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002142:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d134      	bne.n	80021b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800214a:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d003      	beq.n	8002162 <HAL_RCC_GetSysClockFreq+0xa6>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d003      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0xac>
 8002160:	e005      	b.n	800216e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002164:	617b      	str	r3, [r7, #20]
      break;
 8002166:	e005      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800216a:	617b      	str	r3, [r7, #20]
      break;
 800216c:	e002      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	617b      	str	r3, [r7, #20]
      break;
 8002172:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	3301      	adds	r3, #1
 8002180:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	fb02 f203 	mul.w	r2, r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	fbb2 f3f3 	udiv	r3, r2, r3
 8002198:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	0e5b      	lsrs	r3, r3, #25
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	3301      	adds	r3, #1
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021b4:	69bb      	ldr	r3, [r7, #24]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08008298 	.word	0x08008298
 80021cc:	00f42400 	.word	0x00f42400
 80021d0:	007a1200 	.word	0x007a1200

080021d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000000 	.word	0x20000000

080021ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021f0:	f7ff fff0 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4904      	ldr	r1, [pc, #16]	; (8002214 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	08008290 	.word	0x08008290

08002218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800221c:	f7ff ffda 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	0adb      	lsrs	r3, r3, #11
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4904      	ldr	r1, [pc, #16]	; (8002240 <HAL_RCC_GetPCLK2Freq+0x28>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	08008290 	.word	0x08008290

08002244 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	220f      	movs	r2, #15
 8002252:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0203 	and.w	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <HAL_RCC_GetClockConfig+0x5c>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_GetClockConfig+0x5c>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	08db      	lsrs	r3, r3, #3
 800227e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <HAL_RCC_GetClockConfig+0x60>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0207 	and.w	r2, r3, #7
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	601a      	str	r2, [r3, #0]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40022000 	.word	0x40022000

080022a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022b4:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022c0:	f7ff f9d0 	bl	8001664 <HAL_PWREx_GetVoltageRange>
 80022c4:	6178      	str	r0, [r7, #20]
 80022c6:	e014      	b.n	80022f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	4a24      	ldr	r2, [pc, #144]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d2:	6593      	str	r3, [r2, #88]	; 0x58
 80022d4:	4b22      	ldr	r3, [pc, #136]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022e0:	f7ff f9c0 	bl	8001664 <HAL_PWREx_GetVoltageRange>
 80022e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022e6:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f8:	d10b      	bne.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b80      	cmp	r3, #128	; 0x80
 80022fe:	d919      	bls.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2ba0      	cmp	r3, #160	; 0xa0
 8002304:	d902      	bls.n	800230c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002306:	2302      	movs	r3, #2
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	e013      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800230c:	2301      	movs	r3, #1
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	e010      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b80      	cmp	r3, #128	; 0x80
 8002316:	d902      	bls.n	800231e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002318:	2303      	movs	r3, #3
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	e00a      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b80      	cmp	r3, #128	; 0x80
 8002322:	d102      	bne.n	800232a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002324:	2302      	movs	r3, #2
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	e004      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b70      	cmp	r3, #112	; 0x70
 800232e:	d101      	bne.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002330:	2301      	movs	r3, #1
 8002332:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f023 0207 	bic.w	r2, r3, #7
 800233c:	4909      	ldr	r1, [pc, #36]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	429a      	cmp	r2, r3
 8002350:	d001      	beq.n	8002356 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000
 8002364:	40022000 	.word	0x40022000

08002368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002370:	2300      	movs	r3, #0
 8002372:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002374:	2300      	movs	r3, #0
 8002376:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002380:	2b00      	cmp	r3, #0
 8002382:	d041      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002388:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800238c:	d02a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800238e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002392:	d824      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002394:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002398:	d008      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800239a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800239e:	d81e      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a8:	d010      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023aa:	e018      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023ac:	4b86      	ldr	r3, [pc, #536]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a85      	ldr	r2, [pc, #532]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b8:	e015      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fabb 	bl	800293c <RCCEx_PLLSAI1_Config>
 80023c6:	4603      	mov	r3, r0
 80023c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ca:	e00c      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3320      	adds	r3, #32
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fba6 	bl	8002b24 <RCCEx_PLLSAI2_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023dc:	e003      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	74fb      	strb	r3, [r7, #19]
      break;
 80023e2:	e000      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023ec:	4b76      	ldr	r3, [pc, #472]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023fa:	4973      	ldr	r1, [pc, #460]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002402:	e001      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002404:	7cfb      	ldrb	r3, [r7, #19]
 8002406:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d041      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002418:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800241c:	d02a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800241e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002422:	d824      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002428:	d008      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800242a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800242e:	d81e      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002438:	d010      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800243a:	e018      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800243c:	4b62      	ldr	r3, [pc, #392]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a61      	ldr	r2, [pc, #388]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002446:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002448:	e015      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fa73 	bl	800293c <RCCEx_PLLSAI1_Config>
 8002456:	4603      	mov	r3, r0
 8002458:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800245a:	e00c      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3320      	adds	r3, #32
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fb5e 	bl	8002b24 <RCCEx_PLLSAI2_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800246c:	e003      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	74fb      	strb	r3, [r7, #19]
      break;
 8002472:	e000      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800247c:	4b52      	ldr	r3, [pc, #328]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800248a:	494f      	ldr	r1, [pc, #316]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002492:	e001      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a0 	beq.w	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	4a40      	ldr	r2, [pc, #256]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ca:	6593      	str	r3, [r2, #88]	; 0x58
 80024cc:	4b3e      	ldr	r3, [pc, #248]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024dc:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a3a      	ldr	r2, [pc, #232]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024e8:	f7fe fd8c 	bl	8001004 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024ee:	e009      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d902      	bls.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	74fb      	strb	r3, [r7, #19]
        break;
 8002502:	e005      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002504:	4b31      	ldr	r3, [pc, #196]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ef      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d15c      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002516:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002520:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01f      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	429a      	cmp	r2, r3
 8002532:	d019      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002534:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002540:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002560:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7fe fd47 	bl	8001004 <HAL_GetTick>
 8002576:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002578:	e00b      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7fe fd43 	bl	8001004 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	; 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d902      	bls.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	74fb      	strb	r3, [r7, #19]
            break;
 8002590:	e006      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ec      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b6:	4904      	ldr	r1, [pc, #16]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025be:	e009      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	74bb      	strb	r3, [r7, #18]
 80025c4:	e006      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d4:	7c7b      	ldrb	r3, [r7, #17]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d105      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025da:	4b9e      	ldr	r3, [pc, #632]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	4a9d      	ldr	r2, [pc, #628]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025f2:	4b98      	ldr	r3, [pc, #608]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f8:	f023 0203 	bic.w	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	4994      	ldr	r1, [pc, #592]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002614:	4b8f      	ldr	r3, [pc, #572]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f023 020c 	bic.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	498c      	ldr	r1, [pc, #560]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002636:	4b87      	ldr	r3, [pc, #540]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	4983      	ldr	r1, [pc, #524]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002658:	4b7e      	ldr	r3, [pc, #504]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	497b      	ldr	r1, [pc, #492]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800267a:	4b76      	ldr	r3, [pc, #472]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002688:	4972      	ldr	r1, [pc, #456]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800269c:	4b6d      	ldr	r3, [pc, #436]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	496a      	ldr	r1, [pc, #424]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026be:	4b65      	ldr	r3, [pc, #404]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	4961      	ldr	r1, [pc, #388]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026e0:	4b5c      	ldr	r3, [pc, #368]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ee:	4959      	ldr	r1, [pc, #356]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002702:	4b54      	ldr	r3, [pc, #336]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	4950      	ldr	r1, [pc, #320]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002724:	4b4b      	ldr	r3, [pc, #300]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	4948      	ldr	r1, [pc, #288]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002746:	4b43      	ldr	r3, [pc, #268]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	493f      	ldr	r1, [pc, #252]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d028      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002776:	4937      	ldr	r1, [pc, #220]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002786:	d106      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002788:	4b32      	ldr	r3, [pc, #200]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a31      	ldr	r2, [pc, #196]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002792:	60d3      	str	r3, [r2, #12]
 8002794:	e011      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800279a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800279e:	d10c      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3304      	adds	r3, #4
 80027a4:	2101      	movs	r1, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f8c8 	bl	800293c <RCCEx_PLLSAI1_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d028      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	491f      	ldr	r1, [pc, #124]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027e4:	d106      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e6:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	4a1a      	ldr	r2, [pc, #104]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027f0:	60d3      	str	r3, [r2, #12]
 80027f2:	e011      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027fc:	d10c      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3304      	adds	r3, #4
 8002802:	2101      	movs	r1, #1
 8002804:	4618      	mov	r0, r3
 8002806:	f000 f899 	bl	800293c <RCCEx_PLLSAI1_Config>
 800280a:	4603      	mov	r3, r0
 800280c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800280e:	7cfb      	ldrb	r3, [r7, #19]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d02b      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002832:	4908      	ldr	r1, [pc, #32]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002842:	d109      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a02      	ldr	r2, [pc, #8]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800284e:	60d3      	str	r3, [r2, #12]
 8002850:	e014      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002860:	d10c      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	2101      	movs	r1, #1
 8002868:	4618      	mov	r0, r3
 800286a:	f000 f867 	bl	800293c <RCCEx_PLLSAI1_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d02f      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002888:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002896:	4928      	ldr	r1, [pc, #160]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028a6:	d10d      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	2102      	movs	r1, #2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f844 	bl	800293c <RCCEx_PLLSAI1_Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d014      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028be:	7cfb      	ldrb	r3, [r7, #19]
 80028c0:	74bb      	strb	r3, [r7, #18]
 80028c2:	e011      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3320      	adds	r3, #32
 80028d2:	2102      	movs	r1, #2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 f925 	bl	8002b24 <RCCEx_PLLSAI2_Config>
 80028da:	4603      	mov	r3, r0
 80028dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002902:	490d      	ldr	r1, [pc, #52]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00b      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002926:	4904      	ldr	r1, [pc, #16]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800292e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000

0800293c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800294a:	4b75      	ldr	r3, [pc, #468]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d018      	beq.n	8002988 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002956:	4b72      	ldr	r3, [pc, #456]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 0203 	and.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d10d      	bne.n	8002982 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
       ||
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800296e:	4b6c      	ldr	r3, [pc, #432]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
       ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d047      	beq.n	8002a12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	e044      	b.n	8002a12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d018      	beq.n	80029c2 <RCCEx_PLLSAI1_Config+0x86>
 8002990:	2b03      	cmp	r3, #3
 8002992:	d825      	bhi.n	80029e0 <RCCEx_PLLSAI1_Config+0xa4>
 8002994:	2b01      	cmp	r3, #1
 8002996:	d002      	beq.n	800299e <RCCEx_PLLSAI1_Config+0x62>
 8002998:	2b02      	cmp	r3, #2
 800299a:	d009      	beq.n	80029b0 <RCCEx_PLLSAI1_Config+0x74>
 800299c:	e020      	b.n	80029e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800299e:	4b60      	ldr	r3, [pc, #384]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d11d      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ae:	e01a      	b.n	80029e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029b0:	4b5b      	ldr	r3, [pc, #364]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d116      	bne.n	80029ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c0:	e013      	b.n	80029ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029c2:	4b57      	ldr	r3, [pc, #348]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029de:	e006      	b.n	80029ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
      break;
 80029e4:	e004      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029e6:	bf00      	nop
 80029e8:	e002      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ea:	bf00      	nop
 80029ec:	e000      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10d      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6819      	ldr	r1, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	4944      	ldr	r1, [pc, #272]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d17d      	bne.n	8002b14 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a18:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a40      	ldr	r2, [pc, #256]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a24:	f7fe faee 	bl	8001004 <HAL_GetTick>
 8002a28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a2a:	e009      	b.n	8002a40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a2c:	f7fe faea 	bl	8001004 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d902      	bls.n	8002a40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a3e:	e005      	b.n	8002a4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a40:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1ef      	bne.n	8002a2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d160      	bne.n	8002b14 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d111      	bne.n	8002a7c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a58:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6892      	ldr	r2, [r2, #8]
 8002a68:	0211      	lsls	r1, r2, #8
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68d2      	ldr	r2, [r2, #12]
 8002a6e:	0912      	lsrs	r2, r2, #4
 8002a70:	0452      	lsls	r2, r2, #17
 8002a72:	430a      	orrs	r2, r1
 8002a74:	492a      	ldr	r1, [pc, #168]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	610b      	str	r3, [r1, #16]
 8002a7a:	e027      	b.n	8002acc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d112      	bne.n	8002aa8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a82:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6892      	ldr	r2, [r2, #8]
 8002a92:	0211      	lsls	r1, r2, #8
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6912      	ldr	r2, [r2, #16]
 8002a98:	0852      	lsrs	r2, r2, #1
 8002a9a:	3a01      	subs	r2, #1
 8002a9c:	0552      	lsls	r2, r2, #21
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	491f      	ldr	r1, [pc, #124]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	610b      	str	r3, [r1, #16]
 8002aa6:	e011      	b.n	8002acc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ab0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6892      	ldr	r2, [r2, #8]
 8002ab8:	0211      	lsls	r1, r2, #8
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6952      	ldr	r2, [r2, #20]
 8002abe:	0852      	lsrs	r2, r2, #1
 8002ac0:	3a01      	subs	r2, #1
 8002ac2:	0652      	lsls	r2, r2, #25
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	4916      	ldr	r1, [pc, #88]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7fe fa94 	bl	8001004 <HAL_GetTick>
 8002adc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ade:	e009      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ae0:	f7fe fa90 	bl	8001004 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d902      	bls.n	8002af4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	73fb      	strb	r3, [r7, #15]
          break;
 8002af2:	e005      	b.n	8002b00 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ef      	beq.n	8002ae0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	4904      	ldr	r1, [pc, #16]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000

08002b24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b32:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d018      	beq.n	8002b70 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b3e:	4b67      	ldr	r3, [pc, #412]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0203 	and.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d10d      	bne.n	8002b6a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
       ||
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b56:	4b61      	ldr	r3, [pc, #388]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
       ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d047      	beq.n	8002bfa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	e044      	b.n	8002bfa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d018      	beq.n	8002baa <RCCEx_PLLSAI2_Config+0x86>
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d825      	bhi.n	8002bc8 <RCCEx_PLLSAI2_Config+0xa4>
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d002      	beq.n	8002b86 <RCCEx_PLLSAI2_Config+0x62>
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d009      	beq.n	8002b98 <RCCEx_PLLSAI2_Config+0x74>
 8002b84:	e020      	b.n	8002bc8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b86:	4b55      	ldr	r3, [pc, #340]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d11d      	bne.n	8002bce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b96:	e01a      	b.n	8002bce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b98:	4b50      	ldr	r3, [pc, #320]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d116      	bne.n	8002bd2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba8:	e013      	b.n	8002bd2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002baa:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10f      	bne.n	8002bd6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bb6:	4b49      	ldr	r3, [pc, #292]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bc6:	e006      	b.n	8002bd6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
      break;
 8002bcc:	e004      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e002      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e000      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10d      	bne.n	8002bfa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bde:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6819      	ldr	r1, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	4939      	ldr	r1, [pc, #228]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d167      	bne.n	8002cd0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a35      	ldr	r2, [pc, #212]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0c:	f7fe f9fa 	bl	8001004 <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c12:	e009      	b.n	8002c28 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c14:	f7fe f9f6 	bl	8001004 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d902      	bls.n	8002c28 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	73fb      	strb	r3, [r7, #15]
        break;
 8002c26:	e005      	b.n	8002c34 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c28:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ef      	bne.n	8002c14 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d14a      	bne.n	8002cd0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d111      	bne.n	8002c64 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c40:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6892      	ldr	r2, [r2, #8]
 8002c50:	0211      	lsls	r1, r2, #8
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68d2      	ldr	r2, [r2, #12]
 8002c56:	0912      	lsrs	r2, r2, #4
 8002c58:	0452      	lsls	r2, r2, #17
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	491f      	ldr	r1, [pc, #124]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	614b      	str	r3, [r1, #20]
 8002c62:	e011      	b.n	8002c88 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c64:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6892      	ldr	r2, [r2, #8]
 8002c74:	0211      	lsls	r1, r2, #8
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6912      	ldr	r2, [r2, #16]
 8002c7a:	0852      	lsrs	r2, r2, #1
 8002c7c:	3a01      	subs	r2, #1
 8002c7e:	0652      	lsls	r2, r2, #25
 8002c80:	430a      	orrs	r2, r1
 8002c82:	4916      	ldr	r1, [pc, #88]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c88:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7fe f9b6 	bl	8001004 <HAL_GetTick>
 8002c98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c9a:	e009      	b.n	8002cb0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c9c:	f7fe f9b2 	bl	8001004 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d902      	bls.n	8002cb0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	73fb      	strb	r3, [r7, #15]
          break;
 8002cae:	e005      	b.n	8002cbc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ef      	beq.n	8002c9c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4904      	ldr	r1, [pc, #16]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e049      	b.n	8002d86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f841 	bl	8002d8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4610      	mov	r0, r2
 8002d20:	f000 f9f8 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d001      	beq.n	8002dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e04f      	b.n	8002e5c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a23      	ldr	r2, [pc, #140]	; (8002e68 <HAL_TIM_Base_Start_IT+0xc4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d01d      	beq.n	8002e1a <HAL_TIM_Base_Start_IT+0x76>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d018      	beq.n	8002e1a <HAL_TIM_Base_Start_IT+0x76>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <HAL_TIM_Base_Start_IT+0xc8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_TIM_Base_Start_IT+0x76>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_TIM_Base_Start_IT+0xcc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00e      	beq.n	8002e1a <HAL_TIM_Base_Start_IT+0x76>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1c      	ldr	r2, [pc, #112]	; (8002e74 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d009      	beq.n	8002e1a <HAL_TIM_Base_Start_IT+0x76>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_TIM_Base_Start_IT+0x76>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <HAL_TIM_Base_Start_IT+0xd8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d115      	bne.n	8002e46 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b06      	cmp	r3, #6
 8002e2a:	d015      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0xb4>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e32:	d011      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e44:	e008      	b.n	8002e58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0201 	orr.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	e000      	b.n	8002e5a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40012c00 	.word	0x40012c00
 8002e6c:	40000400 	.word	0x40000400
 8002e70:	40000800 	.word	0x40000800
 8002e74:	40000c00 	.word	0x40000c00
 8002e78:	40013400 	.word	0x40013400
 8002e7c:	40014000 	.word	0x40014000
 8002e80:	00010007 	.word	0x00010007

08002e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d122      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d11b      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0202 	mvn.w	r2, #2
 8002eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f905 	bl	80030d6 <HAL_TIM_IC_CaptureCallback>
 8002ecc:	e005      	b.n	8002eda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f8f7 	bl	80030c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f908 	bl	80030ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d122      	bne.n	8002f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d11b      	bne.n	8002f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0204 	mvn.w	r2, #4
 8002f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f8db 	bl	80030d6 <HAL_TIM_IC_CaptureCallback>
 8002f20:	e005      	b.n	8002f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f8cd 	bl	80030c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f8de 	bl	80030ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d122      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d11b      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0208 	mvn.w	r2, #8
 8002f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f8b1 	bl	80030d6 <HAL_TIM_IC_CaptureCallback>
 8002f74:	e005      	b.n	8002f82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f8a3 	bl	80030c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8b4 	bl	80030ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d122      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b10      	cmp	r3, #16
 8002fa2:	d11b      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0210 	mvn.w	r2, #16
 8002fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f887 	bl	80030d6 <HAL_TIM_IC_CaptureCallback>
 8002fc8:	e005      	b.n	8002fd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f879 	bl	80030c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f88a 	bl	80030ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d10e      	bne.n	8003008 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d107      	bne.n	8003008 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0201 	mvn.w	r2, #1
 8003000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fd fe52 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	2b80      	cmp	r3, #128	; 0x80
 8003014:	d10e      	bne.n	8003034 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003020:	2b80      	cmp	r3, #128	; 0x80
 8003022:	d107      	bne.n	8003034 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800302c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f914 	bl	800325c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003042:	d10e      	bne.n	8003062 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d107      	bne.n	8003062 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800305a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f907 	bl	8003270 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306c:	2b40      	cmp	r3, #64	; 0x40
 800306e:	d10e      	bne.n	800308e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d107      	bne.n	800308e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f838 	bl	80030fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b20      	cmp	r3, #32
 800309a:	d10e      	bne.n	80030ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d107      	bne.n	80030ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f06f 0220 	mvn.w	r2, #32
 80030b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f8c7 	bl	8003248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a40      	ldr	r2, [pc, #256]	; (8003228 <TIM_Base_SetConfig+0x114>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d013      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003132:	d00f      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a3d      	ldr	r2, [pc, #244]	; (800322c <TIM_Base_SetConfig+0x118>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00b      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a3c      	ldr	r2, [pc, #240]	; (8003230 <TIM_Base_SetConfig+0x11c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d007      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a3b      	ldr	r2, [pc, #236]	; (8003234 <TIM_Base_SetConfig+0x120>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a3a      	ldr	r2, [pc, #232]	; (8003238 <TIM_Base_SetConfig+0x124>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d108      	bne.n	8003166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a2f      	ldr	r2, [pc, #188]	; (8003228 <TIM_Base_SetConfig+0x114>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01f      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003174:	d01b      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a2c      	ldr	r2, [pc, #176]	; (800322c <TIM_Base_SetConfig+0x118>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d017      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a2b      	ldr	r2, [pc, #172]	; (8003230 <TIM_Base_SetConfig+0x11c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2a      	ldr	r2, [pc, #168]	; (8003234 <TIM_Base_SetConfig+0x120>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00f      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a29      	ldr	r2, [pc, #164]	; (8003238 <TIM_Base_SetConfig+0x124>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00b      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a28      	ldr	r2, [pc, #160]	; (800323c <TIM_Base_SetConfig+0x128>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d007      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a27      	ldr	r2, [pc, #156]	; (8003240 <TIM_Base_SetConfig+0x12c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d003      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a26      	ldr	r2, [pc, #152]	; (8003244 <TIM_Base_SetConfig+0x130>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d108      	bne.n	80031c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a10      	ldr	r2, [pc, #64]	; (8003228 <TIM_Base_SetConfig+0x114>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00f      	beq.n	800320c <TIM_Base_SetConfig+0xf8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <TIM_Base_SetConfig+0x124>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00b      	beq.n	800320c <TIM_Base_SetConfig+0xf8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a11      	ldr	r2, [pc, #68]	; (800323c <TIM_Base_SetConfig+0x128>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d007      	beq.n	800320c <TIM_Base_SetConfig+0xf8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a10      	ldr	r2, [pc, #64]	; (8003240 <TIM_Base_SetConfig+0x12c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d003      	beq.n	800320c <TIM_Base_SetConfig+0xf8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <TIM_Base_SetConfig+0x130>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d103      	bne.n	8003214 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	615a      	str	r2, [r3, #20]
}
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40000400 	.word	0x40000400
 8003230:	40000800 	.word	0x40000800
 8003234:	40000c00 	.word	0x40000c00
 8003238:	40013400 	.word	0x40013400
 800323c:	40014000 	.word	0x40014000
 8003240:	40014400 	.word	0x40014400
 8003244:	40014800 	.word	0x40014800

08003248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e040      	b.n	8003318 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd fd40 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2224      	movs	r2, #36	; 0x24
 80032b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fae4 	bl	8003890 <UART_SetConfig>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e022      	b.n	8003318 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fd62 	bl	8003da4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fde9 	bl	8003ee8 <UART_CheckIdleState>
 8003316:	4603      	mov	r3, r0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	4613      	mov	r3, r2
 800332c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003332:	2b20      	cmp	r3, #32
 8003334:	d145      	bne.n	80033c2 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <HAL_UART_Transmit_IT+0x22>
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e03e      	b.n	80033c4 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_UART_Transmit_IT+0x34>
 8003350:	2302      	movs	r3, #2
 8003352:	e037      	b.n	80033c4 <HAL_UART_Transmit_IT+0xa4>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	88fa      	ldrh	r2, [r7, #6]
 8003366:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	88fa      	ldrh	r2, [r7, #6]
 800336e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2221      	movs	r2, #33	; 0x21
 8003384:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338e:	d107      	bne.n	80033a0 <HAL_UART_Transmit_IT+0x80>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d103      	bne.n	80033a0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4a0d      	ldr	r2, [pc, #52]	; (80033d0 <HAL_UART_Transmit_IT+0xb0>)
 800339c:	669a      	str	r2, [r3, #104]	; 0x68
 800339e:	e002      	b.n	80033a6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <HAL_UART_Transmit_IT+0xb4>)
 80033a4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e000      	b.n	80033c4 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
  }
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	08004283 	.word	0x08004283
 80033d4:	0800420f 	.word	0x0800420f

080033d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	4613      	mov	r3, r2
 80033e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d131      	bne.n	8003452 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_UART_Receive_IT+0x22>
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e02a      	b.n	8003454 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_UART_Receive_IT+0x34>
 8003408:	2302      	movs	r3, #2
 800340a:	e023      	b.n	8003454 <HAL_UART_Receive_IT+0x7c>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a0f      	ldr	r2, [pc, #60]	; (800345c <HAL_UART_Receive_IT+0x84>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00e      	beq.n	8003442 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003440:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	461a      	mov	r2, r3
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 fe13 	bl	8004074 <UART_Start_Receive_IT>
 800344e:	4603      	mov	r3, r0
 8003450:	e000      	b.n	8003454 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003452:	2302      	movs	r3, #2
  }
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40008000 	.word	0x40008000

08003460 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	f640 030f 	movw	r3, #2063	; 0x80f
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d113      	bne.n	80034b8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00e      	beq.n	80034b8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 81ce 	beq.w	800384a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	4798      	blx	r3
      }
      return;
 80034b6:	e1c8      	b.n	800384a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80e3 	beq.w	8003686 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d105      	bne.n	80034d6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4ba6      	ldr	r3, [pc, #664]	; (8003768 <HAL_UART_IRQHandler+0x308>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80d8 	beq.w	8003686 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d010      	beq.n	8003502 <HAL_UART_IRQHandler+0xa2>
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2201      	movs	r2, #1
 80034f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f8:	f043 0201 	orr.w	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <HAL_UART_IRQHandler+0xce>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2202      	movs	r2, #2
 800351c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003524:	f043 0204 	orr.w	r2, r3, #4
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d010      	beq.n	800355a <HAL_UART_IRQHandler+0xfa>
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2204      	movs	r2, #4
 8003548:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003550:	f043 0202 	orr.w	r2, r3, #2
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d015      	beq.n	8003590 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00b      	beq.n	8003590 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2208      	movs	r2, #8
 800357e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003586:	f043 0208 	orr.w	r2, r3, #8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003596:	2b00      	cmp	r3, #0
 8003598:	d011      	beq.n	80035be <HAL_UART_IRQHandler+0x15e>
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00c      	beq.n	80035be <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8142 	beq.w	800384e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00c      	beq.n	80035ee <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035f4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d004      	beq.n	800360e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800360a:	2b00      	cmp	r3, #0
 800360c:	d031      	beq.n	8003672 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fdb8 	bl	8004184 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d123      	bne.n	800366a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003630:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	2b00      	cmp	r3, #0
 8003638:	d013      	beq.n	8003662 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	4a4b      	ldr	r2, [pc, #300]	; (800376c <HAL_UART_IRQHandler+0x30c>)
 8003640:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4618      	mov	r0, r3
 8003648:	f7fd fe08 	bl	800125c <HAL_DMA_Abort_IT>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d017      	beq.n	8003682 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800365c:	4610      	mov	r0, r2
 800365e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003660:	e00f      	b.n	8003682 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8fe 	bl	8003864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003668:	e00b      	b.n	8003682 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f8fa 	bl	8003864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003670:	e007      	b.n	8003682 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f8f6 	bl	8003864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003680:	e0e5      	b.n	800384e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003682:	bf00      	nop
    return;
 8003684:	e0e3      	b.n	800384e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368a:	2b01      	cmp	r3, #1
 800368c:	f040 80a9 	bne.w	80037e2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 80a3 	beq.w	80037e2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 809d 	beq.w	80037e2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2210      	movs	r2, #16
 80036ae:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d158      	bne.n	8003770 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80036c8:	893b      	ldrh	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80c1 	beq.w	8003852 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036d6:	893a      	ldrh	r2, [r7, #8]
 80036d8:	429a      	cmp	r2, r3
 80036da:	f080 80ba 	bcs.w	8003852 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	893a      	ldrh	r2, [r7, #8]
 80036e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d12a      	bne.n	800374c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003704:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003724:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0210 	bic.w	r2, r2, #16
 8003740:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fd4a 	bl	80011e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003758:	b29b      	uxth	r3, r3
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	b29b      	uxth	r3, r3
 800375e:	4619      	mov	r1, r3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f889 	bl	8003878 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003766:	e074      	b.n	8003852 <HAL_UART_IRQHandler+0x3f2>
 8003768:	04000120 	.word	0x04000120
 800376c:	080041e3 	.word	0x080041e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800377c:	b29b      	uxth	r3, r3
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d063      	beq.n	8003856 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800378e:	897b      	ldrh	r3, [r7, #10]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d060      	beq.n	8003856 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037a2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0210 	bic.w	r2, r2, #16
 80037d4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037d6:	897b      	ldrh	r3, [r7, #10]
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f84c 	bl	8003878 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037e0:	e039      	b.n	8003856 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00d      	beq.n	8003808 <HAL_UART_IRQHandler+0x3a8>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fe6d 	bl	80044e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003806:	e029      	b.n	800385c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01a      	beq.n	800385a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
    }
    return;
 800382c:	e015      	b.n	800385a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003834:	2b00      	cmp	r3, #0
 8003836:	d011      	beq.n	800385c <HAL_UART_IRQHandler+0x3fc>
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00c      	beq.n	800385c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fd5b 	bl	80042fe <UART_EndTransmit_IT>
    return;
 8003848:	e008      	b.n	800385c <HAL_UART_IRQHandler+0x3fc>
      return;
 800384a:	bf00      	nop
 800384c:	e006      	b.n	800385c <HAL_UART_IRQHandler+0x3fc>
    return;
 800384e:	bf00      	nop
 8003850:	e004      	b.n	800385c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003852:	bf00      	nop
 8003854:	e002      	b.n	800385c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_UART_IRQHandler+0x3fc>
    return;
 800385a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop

08003864 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003890:	b5b0      	push	{r4, r5, r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4bad      	ldr	r3, [pc, #692]	; (8003b70 <UART_SetConfig+0x2e0>)
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	69f9      	ldr	r1, [r7, #28]
 80038c4:	430b      	orrs	r3, r1
 80038c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4aa2      	ldr	r2, [pc, #648]	; (8003b74 <UART_SetConfig+0x2e4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	430a      	orrs	r2, r1
 800390a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a99      	ldr	r2, [pc, #612]	; (8003b78 <UART_SetConfig+0x2e8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d121      	bne.n	800395a <UART_SetConfig+0xca>
 8003916:	4b99      	ldr	r3, [pc, #612]	; (8003b7c <UART_SetConfig+0x2ec>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2b03      	cmp	r3, #3
 8003922:	d817      	bhi.n	8003954 <UART_SetConfig+0xc4>
 8003924:	a201      	add	r2, pc, #4	; (adr r2, 800392c <UART_SetConfig+0x9c>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	0800393d 	.word	0x0800393d
 8003930:	08003949 	.word	0x08003949
 8003934:	08003943 	.word	0x08003943
 8003938:	0800394f 	.word	0x0800394f
 800393c:	2301      	movs	r3, #1
 800393e:	76fb      	strb	r3, [r7, #27]
 8003940:	e0e7      	b.n	8003b12 <UART_SetConfig+0x282>
 8003942:	2302      	movs	r3, #2
 8003944:	76fb      	strb	r3, [r7, #27]
 8003946:	e0e4      	b.n	8003b12 <UART_SetConfig+0x282>
 8003948:	2304      	movs	r3, #4
 800394a:	76fb      	strb	r3, [r7, #27]
 800394c:	e0e1      	b.n	8003b12 <UART_SetConfig+0x282>
 800394e:	2308      	movs	r3, #8
 8003950:	76fb      	strb	r3, [r7, #27]
 8003952:	e0de      	b.n	8003b12 <UART_SetConfig+0x282>
 8003954:	2310      	movs	r3, #16
 8003956:	76fb      	strb	r3, [r7, #27]
 8003958:	e0db      	b.n	8003b12 <UART_SetConfig+0x282>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a88      	ldr	r2, [pc, #544]	; (8003b80 <UART_SetConfig+0x2f0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d132      	bne.n	80039ca <UART_SetConfig+0x13a>
 8003964:	4b85      	ldr	r3, [pc, #532]	; (8003b7c <UART_SetConfig+0x2ec>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b0c      	cmp	r3, #12
 8003970:	d828      	bhi.n	80039c4 <UART_SetConfig+0x134>
 8003972:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <UART_SetConfig+0xe8>)
 8003974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003978:	080039ad 	.word	0x080039ad
 800397c:	080039c5 	.word	0x080039c5
 8003980:	080039c5 	.word	0x080039c5
 8003984:	080039c5 	.word	0x080039c5
 8003988:	080039b9 	.word	0x080039b9
 800398c:	080039c5 	.word	0x080039c5
 8003990:	080039c5 	.word	0x080039c5
 8003994:	080039c5 	.word	0x080039c5
 8003998:	080039b3 	.word	0x080039b3
 800399c:	080039c5 	.word	0x080039c5
 80039a0:	080039c5 	.word	0x080039c5
 80039a4:	080039c5 	.word	0x080039c5
 80039a8:	080039bf 	.word	0x080039bf
 80039ac:	2300      	movs	r3, #0
 80039ae:	76fb      	strb	r3, [r7, #27]
 80039b0:	e0af      	b.n	8003b12 <UART_SetConfig+0x282>
 80039b2:	2302      	movs	r3, #2
 80039b4:	76fb      	strb	r3, [r7, #27]
 80039b6:	e0ac      	b.n	8003b12 <UART_SetConfig+0x282>
 80039b8:	2304      	movs	r3, #4
 80039ba:	76fb      	strb	r3, [r7, #27]
 80039bc:	e0a9      	b.n	8003b12 <UART_SetConfig+0x282>
 80039be:	2308      	movs	r3, #8
 80039c0:	76fb      	strb	r3, [r7, #27]
 80039c2:	e0a6      	b.n	8003b12 <UART_SetConfig+0x282>
 80039c4:	2310      	movs	r3, #16
 80039c6:	76fb      	strb	r3, [r7, #27]
 80039c8:	e0a3      	b.n	8003b12 <UART_SetConfig+0x282>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a6d      	ldr	r2, [pc, #436]	; (8003b84 <UART_SetConfig+0x2f4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d120      	bne.n	8003a16 <UART_SetConfig+0x186>
 80039d4:	4b69      	ldr	r3, [pc, #420]	; (8003b7c <UART_SetConfig+0x2ec>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039de:	2b30      	cmp	r3, #48	; 0x30
 80039e0:	d013      	beq.n	8003a0a <UART_SetConfig+0x17a>
 80039e2:	2b30      	cmp	r3, #48	; 0x30
 80039e4:	d814      	bhi.n	8003a10 <UART_SetConfig+0x180>
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d009      	beq.n	80039fe <UART_SetConfig+0x16e>
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d810      	bhi.n	8003a10 <UART_SetConfig+0x180>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <UART_SetConfig+0x168>
 80039f2:	2b10      	cmp	r3, #16
 80039f4:	d006      	beq.n	8003a04 <UART_SetConfig+0x174>
 80039f6:	e00b      	b.n	8003a10 <UART_SetConfig+0x180>
 80039f8:	2300      	movs	r3, #0
 80039fa:	76fb      	strb	r3, [r7, #27]
 80039fc:	e089      	b.n	8003b12 <UART_SetConfig+0x282>
 80039fe:	2302      	movs	r3, #2
 8003a00:	76fb      	strb	r3, [r7, #27]
 8003a02:	e086      	b.n	8003b12 <UART_SetConfig+0x282>
 8003a04:	2304      	movs	r3, #4
 8003a06:	76fb      	strb	r3, [r7, #27]
 8003a08:	e083      	b.n	8003b12 <UART_SetConfig+0x282>
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	76fb      	strb	r3, [r7, #27]
 8003a0e:	e080      	b.n	8003b12 <UART_SetConfig+0x282>
 8003a10:	2310      	movs	r3, #16
 8003a12:	76fb      	strb	r3, [r7, #27]
 8003a14:	e07d      	b.n	8003b12 <UART_SetConfig+0x282>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5b      	ldr	r2, [pc, #364]	; (8003b88 <UART_SetConfig+0x2f8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d120      	bne.n	8003a62 <UART_SetConfig+0x1d2>
 8003a20:	4b56      	ldr	r3, [pc, #344]	; (8003b7c <UART_SetConfig+0x2ec>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a2a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a2c:	d013      	beq.n	8003a56 <UART_SetConfig+0x1c6>
 8003a2e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a30:	d814      	bhi.n	8003a5c <UART_SetConfig+0x1cc>
 8003a32:	2b80      	cmp	r3, #128	; 0x80
 8003a34:	d009      	beq.n	8003a4a <UART_SetConfig+0x1ba>
 8003a36:	2b80      	cmp	r3, #128	; 0x80
 8003a38:	d810      	bhi.n	8003a5c <UART_SetConfig+0x1cc>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <UART_SetConfig+0x1b4>
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d006      	beq.n	8003a50 <UART_SetConfig+0x1c0>
 8003a42:	e00b      	b.n	8003a5c <UART_SetConfig+0x1cc>
 8003a44:	2300      	movs	r3, #0
 8003a46:	76fb      	strb	r3, [r7, #27]
 8003a48:	e063      	b.n	8003b12 <UART_SetConfig+0x282>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	76fb      	strb	r3, [r7, #27]
 8003a4e:	e060      	b.n	8003b12 <UART_SetConfig+0x282>
 8003a50:	2304      	movs	r3, #4
 8003a52:	76fb      	strb	r3, [r7, #27]
 8003a54:	e05d      	b.n	8003b12 <UART_SetConfig+0x282>
 8003a56:	2308      	movs	r3, #8
 8003a58:	76fb      	strb	r3, [r7, #27]
 8003a5a:	e05a      	b.n	8003b12 <UART_SetConfig+0x282>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	76fb      	strb	r3, [r7, #27]
 8003a60:	e057      	b.n	8003b12 <UART_SetConfig+0x282>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a49      	ldr	r2, [pc, #292]	; (8003b8c <UART_SetConfig+0x2fc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d125      	bne.n	8003ab8 <UART_SetConfig+0x228>
 8003a6c:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <UART_SetConfig+0x2ec>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a7a:	d017      	beq.n	8003aac <UART_SetConfig+0x21c>
 8003a7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a80:	d817      	bhi.n	8003ab2 <UART_SetConfig+0x222>
 8003a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a86:	d00b      	beq.n	8003aa0 <UART_SetConfig+0x210>
 8003a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a8c:	d811      	bhi.n	8003ab2 <UART_SetConfig+0x222>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <UART_SetConfig+0x20a>
 8003a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a96:	d006      	beq.n	8003aa6 <UART_SetConfig+0x216>
 8003a98:	e00b      	b.n	8003ab2 <UART_SetConfig+0x222>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	76fb      	strb	r3, [r7, #27]
 8003a9e:	e038      	b.n	8003b12 <UART_SetConfig+0x282>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	76fb      	strb	r3, [r7, #27]
 8003aa4:	e035      	b.n	8003b12 <UART_SetConfig+0x282>
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	76fb      	strb	r3, [r7, #27]
 8003aaa:	e032      	b.n	8003b12 <UART_SetConfig+0x282>
 8003aac:	2308      	movs	r3, #8
 8003aae:	76fb      	strb	r3, [r7, #27]
 8003ab0:	e02f      	b.n	8003b12 <UART_SetConfig+0x282>
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	76fb      	strb	r3, [r7, #27]
 8003ab6:	e02c      	b.n	8003b12 <UART_SetConfig+0x282>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <UART_SetConfig+0x2e4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d125      	bne.n	8003b0e <UART_SetConfig+0x27e>
 8003ac2:	4b2e      	ldr	r3, [pc, #184]	; (8003b7c <UART_SetConfig+0x2ec>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003acc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ad0:	d017      	beq.n	8003b02 <UART_SetConfig+0x272>
 8003ad2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ad6:	d817      	bhi.n	8003b08 <UART_SetConfig+0x278>
 8003ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003adc:	d00b      	beq.n	8003af6 <UART_SetConfig+0x266>
 8003ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae2:	d811      	bhi.n	8003b08 <UART_SetConfig+0x278>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <UART_SetConfig+0x260>
 8003ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aec:	d006      	beq.n	8003afc <UART_SetConfig+0x26c>
 8003aee:	e00b      	b.n	8003b08 <UART_SetConfig+0x278>
 8003af0:	2300      	movs	r3, #0
 8003af2:	76fb      	strb	r3, [r7, #27]
 8003af4:	e00d      	b.n	8003b12 <UART_SetConfig+0x282>
 8003af6:	2302      	movs	r3, #2
 8003af8:	76fb      	strb	r3, [r7, #27]
 8003afa:	e00a      	b.n	8003b12 <UART_SetConfig+0x282>
 8003afc:	2304      	movs	r3, #4
 8003afe:	76fb      	strb	r3, [r7, #27]
 8003b00:	e007      	b.n	8003b12 <UART_SetConfig+0x282>
 8003b02:	2308      	movs	r3, #8
 8003b04:	76fb      	strb	r3, [r7, #27]
 8003b06:	e004      	b.n	8003b12 <UART_SetConfig+0x282>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	76fb      	strb	r3, [r7, #27]
 8003b0c:	e001      	b.n	8003b12 <UART_SetConfig+0x282>
 8003b0e:	2310      	movs	r3, #16
 8003b10:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a17      	ldr	r2, [pc, #92]	; (8003b74 <UART_SetConfig+0x2e4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	f040 8087 	bne.w	8003c2c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b1e:	7efb      	ldrb	r3, [r7, #27]
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d837      	bhi.n	8003b94 <UART_SetConfig+0x304>
 8003b24:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <UART_SetConfig+0x29c>)
 8003b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2a:	bf00      	nop
 8003b2c:	08003b51 	.word	0x08003b51
 8003b30:	08003b95 	.word	0x08003b95
 8003b34:	08003b59 	.word	0x08003b59
 8003b38:	08003b95 	.word	0x08003b95
 8003b3c:	08003b5f 	.word	0x08003b5f
 8003b40:	08003b95 	.word	0x08003b95
 8003b44:	08003b95 	.word	0x08003b95
 8003b48:	08003b95 	.word	0x08003b95
 8003b4c:	08003b67 	.word	0x08003b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b50:	f7fe fb4c 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8003b54:	6178      	str	r0, [r7, #20]
        break;
 8003b56:	e022      	b.n	8003b9e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b58:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <UART_SetConfig+0x300>)
 8003b5a:	617b      	str	r3, [r7, #20]
        break;
 8003b5c:	e01f      	b.n	8003b9e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b5e:	f7fe faad 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8003b62:	6178      	str	r0, [r7, #20]
        break;
 8003b64:	e01b      	b.n	8003b9e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b6a:	617b      	str	r3, [r7, #20]
        break;
 8003b6c:	e017      	b.n	8003b9e <UART_SetConfig+0x30e>
 8003b6e:	bf00      	nop
 8003b70:	efff69f3 	.word	0xefff69f3
 8003b74:	40008000 	.word	0x40008000
 8003b78:	40013800 	.word	0x40013800
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40004400 	.word	0x40004400
 8003b84:	40004800 	.word	0x40004800
 8003b88:	40004c00 	.word	0x40004c00
 8003b8c:	40005000 	.word	0x40005000
 8003b90:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	76bb      	strb	r3, [r7, #26]
        break;
 8003b9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80f1 	beq.w	8003d88 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d305      	bcc.n	8003bc2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d902      	bls.n	8003bc8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	76bb      	strb	r3, [r7, #26]
 8003bc6:	e0df      	b.n	8003d88 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f04f 0100 	mov.w	r1, #0
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	020b      	lsls	r3, r1, #8
 8003bda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003bde:	0202      	lsls	r2, r0, #8
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	6849      	ldr	r1, [r1, #4]
 8003be4:	0849      	lsrs	r1, r1, #1
 8003be6:	4608      	mov	r0, r1
 8003be8:	f04f 0100 	mov.w	r1, #0
 8003bec:	1814      	adds	r4, r2, r0
 8003bee:	eb43 0501 	adc.w	r5, r3, r1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	4629      	mov	r1, r5
 8003c00:	f7fc faee 	bl	80001e0 <__aeabi_uldivmod>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4613      	mov	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c12:	d308      	bcc.n	8003c26 <UART_SetConfig+0x396>
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c1a:	d204      	bcs.n	8003c26 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	60da      	str	r2, [r3, #12]
 8003c24:	e0b0      	b.n	8003d88 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	76bb      	strb	r3, [r7, #26]
 8003c2a:	e0ad      	b.n	8003d88 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c34:	d15c      	bne.n	8003cf0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003c36:	7efb      	ldrb	r3, [r7, #27]
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d828      	bhi.n	8003c8e <UART_SetConfig+0x3fe>
 8003c3c:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <UART_SetConfig+0x3b4>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08003c69 	.word	0x08003c69
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	08003c79 	.word	0x08003c79
 8003c50:	08003c8f 	.word	0x08003c8f
 8003c54:	08003c7f 	.word	0x08003c7f
 8003c58:	08003c8f 	.word	0x08003c8f
 8003c5c:	08003c8f 	.word	0x08003c8f
 8003c60:	08003c8f 	.word	0x08003c8f
 8003c64:	08003c87 	.word	0x08003c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c68:	f7fe fac0 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8003c6c:	6178      	str	r0, [r7, #20]
        break;
 8003c6e:	e013      	b.n	8003c98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c70:	f7fe fad2 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
 8003c74:	6178      	str	r0, [r7, #20]
        break;
 8003c76:	e00f      	b.n	8003c98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c78:	4b49      	ldr	r3, [pc, #292]	; (8003da0 <UART_SetConfig+0x510>)
 8003c7a:	617b      	str	r3, [r7, #20]
        break;
 8003c7c:	e00c      	b.n	8003c98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c7e:	f7fe fa1d 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8003c82:	6178      	str	r0, [r7, #20]
        break;
 8003c84:	e008      	b.n	8003c98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c8a:	617b      	str	r3, [r7, #20]
        break;
 8003c8c:	e004      	b.n	8003c98 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	76bb      	strb	r3, [r7, #26]
        break;
 8003c96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d074      	beq.n	8003d88 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	005a      	lsls	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	441a      	add	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b0f      	cmp	r3, #15
 8003cba:	d916      	bls.n	8003cea <UART_SetConfig+0x45a>
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d212      	bcs.n	8003cea <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	f023 030f 	bic.w	r3, r3, #15
 8003ccc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	085b      	lsrs	r3, r3, #1
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	89fb      	ldrh	r3, [r7, #14]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	89fa      	ldrh	r2, [r7, #14]
 8003ce6:	60da      	str	r2, [r3, #12]
 8003ce8:	e04e      	b.n	8003d88 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	76bb      	strb	r3, [r7, #26]
 8003cee:	e04b      	b.n	8003d88 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cf0:	7efb      	ldrb	r3, [r7, #27]
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d827      	bhi.n	8003d46 <UART_SetConfig+0x4b6>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <UART_SetConfig+0x46c>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d21 	.word	0x08003d21
 8003d00:	08003d29 	.word	0x08003d29
 8003d04:	08003d31 	.word	0x08003d31
 8003d08:	08003d47 	.word	0x08003d47
 8003d0c:	08003d37 	.word	0x08003d37
 8003d10:	08003d47 	.word	0x08003d47
 8003d14:	08003d47 	.word	0x08003d47
 8003d18:	08003d47 	.word	0x08003d47
 8003d1c:	08003d3f 	.word	0x08003d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d20:	f7fe fa64 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8003d24:	6178      	str	r0, [r7, #20]
        break;
 8003d26:	e013      	b.n	8003d50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d28:	f7fe fa76 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
 8003d2c:	6178      	str	r0, [r7, #20]
        break;
 8003d2e:	e00f      	b.n	8003d50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <UART_SetConfig+0x510>)
 8003d32:	617b      	str	r3, [r7, #20]
        break;
 8003d34:	e00c      	b.n	8003d50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d36:	f7fe f9c1 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8003d3a:	6178      	str	r0, [r7, #20]
        break;
 8003d3c:	e008      	b.n	8003d50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d42:	617b      	str	r3, [r7, #20]
        break;
 8003d44:	e004      	b.n	8003d50 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	76bb      	strb	r3, [r7, #26]
        break;
 8003d4e:	bf00      	nop
    }

    if (pclk != 0U)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d018      	beq.n	8003d88 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	085a      	lsrs	r2, r3, #1
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	441a      	add	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b0f      	cmp	r3, #15
 8003d70:	d908      	bls.n	8003d84 <UART_SetConfig+0x4f4>
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d78:	d204      	bcs.n	8003d84 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	e001      	b.n	8003d88 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d94:	7ebb      	ldrb	r3, [r7, #26]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	00f42400 	.word	0x00f42400

08003da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01a      	beq.n	8003eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea2:	d10a      	bne.n	8003eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	605a      	str	r2, [r3, #4]
  }
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ef8:	f7fd f884 	bl	8001004 <HAL_GetTick>
 8003efc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d10e      	bne.n	8003f2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f82d 	bl	8003f7a <UART_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e023      	b.n	8003f72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d10e      	bne.n	8003f56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f817 	bl	8003f7a <UART_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e00d      	b.n	8003f72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	603b      	str	r3, [r7, #0]
 8003f86:	4613      	mov	r3, r2
 8003f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8a:	e05e      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f92:	d05a      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f94:	f7fd f836 	bl	8001004 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d302      	bcc.n	8003faa <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d11b      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fb8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e043      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d02c      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffe:	d124      	bne.n	800404a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004008:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004018:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2220      	movs	r2, #32
 800403a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e00f      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4013      	ands	r3, r2
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	bf0c      	ite	eq
 800405a:	2301      	moveq	r3, #1
 800405c:	2300      	movne	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	429a      	cmp	r2, r3
 8004066:	d091      	beq.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	88fa      	ldrh	r2, [r7, #6]
 8004094:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	d10e      	bne.n	80040c6 <UART_Start_Receive_IT+0x52>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d105      	bne.n	80040bc <UART_Start_Receive_IT+0x48>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ba:	e02d      	b.n	8004118 <UART_Start_Receive_IT+0xa4>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	22ff      	movs	r2, #255	; 0xff
 80040c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040c4:	e028      	b.n	8004118 <UART_Start_Receive_IT+0xa4>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10d      	bne.n	80040ea <UART_Start_Receive_IT+0x76>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d104      	bne.n	80040e0 <UART_Start_Receive_IT+0x6c>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	22ff      	movs	r2, #255	; 0xff
 80040da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040de:	e01b      	b.n	8004118 <UART_Start_Receive_IT+0xa4>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	227f      	movs	r2, #127	; 0x7f
 80040e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040e8:	e016      	b.n	8004118 <UART_Start_Receive_IT+0xa4>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040f2:	d10d      	bne.n	8004110 <UART_Start_Receive_IT+0x9c>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d104      	bne.n	8004106 <UART_Start_Receive_IT+0x92>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	227f      	movs	r2, #127	; 0x7f
 8004100:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004104:	e008      	b.n	8004118 <UART_Start_Receive_IT+0xa4>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	223f      	movs	r2, #63	; 0x3f
 800410a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800410e:	e003      	b.n	8004118 <UART_Start_Receive_IT+0xa4>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2222      	movs	r2, #34	; 0x22
 8004124:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0201 	orr.w	r2, r2, #1
 8004134:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413e:	d107      	bne.n	8004150 <UART_Start_Receive_IT+0xdc>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d103      	bne.n	8004150 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4a0c      	ldr	r2, [pc, #48]	; (800417c <UART_Start_Receive_IT+0x108>)
 800414c:	665a      	str	r2, [r3, #100]	; 0x64
 800414e:	e002      	b.n	8004156 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a0b      	ldr	r2, [pc, #44]	; (8004180 <UART_Start_Receive_IT+0x10c>)
 8004154:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800416c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	08004409 	.word	0x08004409
 8004180:	08004331 	.word	0x08004331

08004184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800419a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0210 	bic.w	r2, r2, #16
 80041c2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff fb2f 	bl	8003864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800421a:	2b21      	cmp	r3, #33	; 0x21
 800421c:	d12b      	bne.n	8004276 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d110      	bne.n	800424c <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004238:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004248:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800424a:	e014      	b.n	8004276 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	b292      	uxth	r2, r2
 8004258:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800428e:	2b21      	cmp	r3, #33	; 0x21
 8004290:	d12f      	bne.n	80042f2 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d110      	bne.n	80042c0 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042ac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042bc:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80042be:	e018      	b.n	80042f2 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	881a      	ldrh	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d2:	b292      	uxth	r2, r2
 80042d4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042da:	1c9a      	adds	r2, r3, #2
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004314:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fc fa66 	bl	80007f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004328:	bf00      	nop
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800433e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004344:	2b22      	cmp	r3, #34	; 0x22
 8004346:	d151      	bne.n	80043ec <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800434e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004350:	89bb      	ldrh	r3, [r7, #12]
 8004352:	b2d9      	uxtb	r1, r3
 8004354:	89fb      	ldrh	r3, [r7, #14]
 8004356:	b2da      	uxtb	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435c:	400a      	ands	r2, r1
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d13a      	bne.n	8004400 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004398:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0201 	bic.w	r2, r2, #1
 80043a8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d10f      	bne.n	80043de <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0210 	bic.w	r2, r2, #16
 80043cc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fa4e 	bl	8003878 <HAL_UARTEx_RxEventCallback>
 80043dc:	e002      	b.n	80043e4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fc f9e6 	bl	80007b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043ea:	e009      	b.n	8004400 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	8b1b      	ldrh	r3, [r3, #24]
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0208 	orr.w	r2, r2, #8
 80043fc:	b292      	uxth	r2, r2
 80043fe:	831a      	strh	r2, [r3, #24]
}
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004416:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800441c:	2b22      	cmp	r3, #34	; 0x22
 800441e:	d151      	bne.n	80044c4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004426:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800442e:	89ba      	ldrh	r2, [r7, #12]
 8004430:	89fb      	ldrh	r3, [r7, #14]
 8004432:	4013      	ands	r3, r2
 8004434:	b29a      	uxth	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	1c9a      	adds	r2, r3, #2
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d13a      	bne.n	80044d8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004470:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0201 	bic.w	r2, r2, #1
 8004480:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004492:	2b01      	cmp	r3, #1
 8004494:	d10f      	bne.n	80044b6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0210 	bic.w	r2, r2, #16
 80044a4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044ac:	4619      	mov	r1, r3
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff f9e2 	bl	8003878 <HAL_UARTEx_RxEventCallback>
 80044b4:	e002      	b.n	80044bc <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fc f97a 	bl	80007b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044c2:	e009      	b.n	80044d8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	8b1b      	ldrh	r3, [r3, #24]
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0208 	orr.w	r2, r2, #8
 80044d4:	b292      	uxth	r2, r2
 80044d6:	831a      	strh	r2, [r3, #24]
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <__NVIC_SetPriority>:
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	6039      	str	r1, [r7, #0]
 80044fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004504:	2b00      	cmp	r3, #0
 8004506:	db0a      	blt.n	800451e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	b2da      	uxtb	r2, r3
 800450c:	490c      	ldr	r1, [pc, #48]	; (8004540 <__NVIC_SetPriority+0x4c>)
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	0112      	lsls	r2, r2, #4
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	440b      	add	r3, r1
 8004518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800451c:	e00a      	b.n	8004534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	b2da      	uxtb	r2, r3
 8004522:	4908      	ldr	r1, [pc, #32]	; (8004544 <__NVIC_SetPriority+0x50>)
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	3b04      	subs	r3, #4
 800452c:	0112      	lsls	r2, r2, #4
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	440b      	add	r3, r1
 8004532:	761a      	strb	r2, [r3, #24]
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	e000e100 	.word	0xe000e100
 8004544:	e000ed00 	.word	0xe000ed00

08004548 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <SysTick_Handler+0x1c>)
 800454e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004550:	f002 fbb8 	bl	8006cc4 <xTaskGetSchedulerState>
 8004554:	4603      	mov	r3, r0
 8004556:	2b01      	cmp	r3, #1
 8004558:	d001      	beq.n	800455e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800455a:	f003 fa9d 	bl	8007a98 <xPortSysTickHandler>
  }
}
 800455e:	bf00      	nop
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	e000e010 	.word	0xe000e010

08004568 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800456c:	2100      	movs	r1, #0
 800456e:	f06f 0004 	mvn.w	r0, #4
 8004572:	f7ff ffbf 	bl	80044f4 <__NVIC_SetPriority>
#endif
}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004582:	f3ef 8305 	mrs	r3, IPSR
 8004586:	603b      	str	r3, [r7, #0]
  return(result);
 8004588:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800458e:	f06f 0305 	mvn.w	r3, #5
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	e00c      	b.n	80045b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <osKernelInitialize+0x44>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d105      	bne.n	80045aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <osKernelInitialize+0x44>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	607b      	str	r3, [r7, #4]
 80045a8:	e002      	b.n	80045b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045b0:	687b      	ldr	r3, [r7, #4]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	2000002c 	.word	0x2000002c

080045c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045ca:	f3ef 8305 	mrs	r3, IPSR
 80045ce:	603b      	str	r3, [r7, #0]
  return(result);
 80045d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <osKernelStart+0x1a>
    stat = osErrorISR;
 80045d6:	f06f 0305 	mvn.w	r3, #5
 80045da:	607b      	str	r3, [r7, #4]
 80045dc:	e010      	b.n	8004600 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045de:	4b0b      	ldr	r3, [pc, #44]	; (800460c <osKernelStart+0x48>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d109      	bne.n	80045fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045e6:	f7ff ffbf 	bl	8004568 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045ea:	4b08      	ldr	r3, [pc, #32]	; (800460c <osKernelStart+0x48>)
 80045ec:	2202      	movs	r2, #2
 80045ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045f0:	f001 ff20 	bl	8006434 <vTaskStartScheduler>
      stat = osOK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	607b      	str	r3, [r7, #4]
 80045f8:	e002      	b.n	8004600 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004600:	687b      	ldr	r3, [r7, #4]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	2000002c 	.word	0x2000002c

08004610 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b08e      	sub	sp, #56	; 0x38
 8004614:	af04      	add	r7, sp, #16
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800461c:	2300      	movs	r3, #0
 800461e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004620:	f3ef 8305 	mrs	r3, IPSR
 8004624:	617b      	str	r3, [r7, #20]
  return(result);
 8004626:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004628:	2b00      	cmp	r3, #0
 800462a:	d17e      	bne.n	800472a <osThreadNew+0x11a>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d07b      	beq.n	800472a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004636:	2318      	movs	r3, #24
 8004638:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800463e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004642:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d045      	beq.n	80046d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <osThreadNew+0x48>
        name = attr->name;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <osThreadNew+0x6e>
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	2b38      	cmp	r3, #56	; 0x38
 8004670:	d805      	bhi.n	800467e <osThreadNew+0x6e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <osThreadNew+0x72>
        return (NULL);
 800467e:	2300      	movs	r3, #0
 8004680:	e054      	b.n	800472c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00e      	beq.n	80046b8 <osThreadNew+0xa8>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2b5b      	cmp	r3, #91	; 0x5b
 80046a0:	d90a      	bls.n	80046b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d006      	beq.n	80046b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <osThreadNew+0xa8>
        mem = 1;
 80046b2:	2301      	movs	r3, #1
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	e010      	b.n	80046da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10c      	bne.n	80046da <osThreadNew+0xca>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d108      	bne.n	80046da <osThreadNew+0xca>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d104      	bne.n	80046da <osThreadNew+0xca>
          mem = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61bb      	str	r3, [r7, #24]
 80046d4:	e001      	b.n	80046da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d110      	bne.n	8004702 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046e8:	9202      	str	r2, [sp, #8]
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	6a3a      	ldr	r2, [r7, #32]
 80046f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f001 fbc0 	bl	8005e7c <xTaskCreateStatic>
 80046fc:	4603      	mov	r3, r0
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	e013      	b.n	800472a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d110      	bne.n	800472a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	b29a      	uxth	r2, r3
 800470c:	f107 0310 	add.w	r3, r7, #16
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f001 fc0b 	bl	8005f36 <xTaskCreate>
 8004720:	4603      	mov	r3, r0
 8004722:	2b01      	cmp	r3, #1
 8004724:	d001      	beq.n	800472a <osThreadNew+0x11a>
            hTask = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800472a:	693b      	ldr	r3, [r7, #16]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3728      	adds	r7, #40	; 0x28
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004740:	f3ef 8305 	mrs	r3, IPSR
 8004744:	60fb      	str	r3, [r7, #12]
  return(result);
 8004746:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800474c:	f06f 0305 	mvn.w	r3, #5
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	e00b      	b.n	800476c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d103      	bne.n	8004762 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800475a:	f06f 0303 	mvn.w	r3, #3
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e004      	b.n	800476c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8004766:	6938      	ldr	r0, [r7, #16]
 8004768:	f001 fd5e 	bl	8006228 <vTaskSuspend>
  }

  return (stat);
 800476c:	697b      	ldr	r3, [r7, #20]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8004776:	b580      	push	{r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004782:	f3ef 8305 	mrs	r3, IPSR
 8004786:	60fb      	str	r3, [r7, #12]
  return(result);
 8004788:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <osThreadResume+0x20>
    stat = osErrorISR;
 800478e:	f06f 0305 	mvn.w	r3, #5
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	e00b      	b.n	80047ae <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d103      	bne.n	80047a4 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800479c:	f06f 0303 	mvn.w	r3, #3
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	e004      	b.n	80047ae <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80047a8:	6938      	ldr	r0, [r7, #16]
 80047aa:	f001 fde5 	bl	8006378 <vTaskResume>
  }

  return (stat);
 80047ae:	697b      	ldr	r3, [r7, #20]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047c0:	f3ef 8305 	mrs	r3, IPSR
 80047c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80047c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <osDelay+0x1c>
    stat = osErrorISR;
 80047cc:	f06f 0305 	mvn.w	r3, #5
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	e007      	b.n	80047e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f001 fcee 	bl	80061c0 <vTaskDelay>
    }
  }

  return (stat);
 80047e4:	68fb      	ldr	r3, [r7, #12]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b08a      	sub	sp, #40	; 0x28
 80047f2:	af02      	add	r7, sp, #8
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047fe:	f3ef 8305 	mrs	r3, IPSR
 8004802:	613b      	str	r3, [r7, #16]
  return(result);
 8004804:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004806:	2b00      	cmp	r3, #0
 8004808:	d175      	bne.n	80048f6 <osSemaphoreNew+0x108>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d072      	beq.n	80048f6 <osSemaphoreNew+0x108>
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	429a      	cmp	r2, r3
 8004816:	d86e      	bhi.n	80048f6 <osSemaphoreNew+0x108>
    mem = -1;
 8004818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800481c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d015      	beq.n	8004850 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d006      	beq.n	800483a <osSemaphoreNew+0x4c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b4f      	cmp	r3, #79	; 0x4f
 8004832:	d902      	bls.n	800483a <osSemaphoreNew+0x4c>
        mem = 1;
 8004834:	2301      	movs	r3, #1
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	e00c      	b.n	8004854 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d108      	bne.n	8004854 <osSemaphoreNew+0x66>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d104      	bne.n	8004854 <osSemaphoreNew+0x66>
          mem = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e001      	b.n	8004854 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800485a:	d04c      	beq.n	80048f6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d128      	bne.n	80048b4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d10a      	bne.n	800487e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2203      	movs	r2, #3
 800486e:	9200      	str	r2, [sp, #0]
 8004870:	2200      	movs	r2, #0
 8004872:	2100      	movs	r1, #0
 8004874:	2001      	movs	r0, #1
 8004876:	f000 fb5b 	bl	8004f30 <xQueueGenericCreateStatic>
 800487a:	61f8      	str	r0, [r7, #28]
 800487c:	e005      	b.n	800488a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800487e:	2203      	movs	r2, #3
 8004880:	2100      	movs	r1, #0
 8004882:	2001      	movs	r0, #1
 8004884:	f000 fbcc 	bl	8005020 <xQueueGenericCreate>
 8004888:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d022      	beq.n	80048d6 <osSemaphoreNew+0xe8>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01f      	beq.n	80048d6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004896:	2300      	movs	r3, #0
 8004898:	2200      	movs	r2, #0
 800489a:	2100      	movs	r1, #0
 800489c:	69f8      	ldr	r0, [r7, #28]
 800489e:	f000 fc87 	bl	80051b0 <xQueueGenericSend>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d016      	beq.n	80048d6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80048a8:	69f8      	ldr	r0, [r7, #28]
 80048aa:	f001 f913 	bl	8005ad4 <vQueueDelete>
            hSemaphore = NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	e010      	b.n	80048d6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d108      	bne.n	80048cc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	461a      	mov	r2, r3
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fc09 	bl	80050da <xQueueCreateCountingSemaphoreStatic>
 80048c8:	61f8      	str	r0, [r7, #28]
 80048ca:	e004      	b.n	80048d6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 fc3a 	bl	8005148 <xQueueCreateCountingSemaphore>
 80048d4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00c      	beq.n	80048f6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <osSemaphoreNew+0xfc>
          name = attr->name;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e001      	b.n	80048ee <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80048ee:	6979      	ldr	r1, [r7, #20]
 80048f0:	69f8      	ldr	r0, [r7, #28]
 80048f2:	f001 fa3b 	bl	8005d6c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80048f6:	69fb      	ldr	r3, [r7, #28]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3720      	adds	r7, #32
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d103      	bne.n	8004920 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004918:	f06f 0303 	mvn.w	r3, #3
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	e039      	b.n	8004994 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004920:	f3ef 8305 	mrs	r3, IPSR
 8004924:	60fb      	str	r3, [r7, #12]
  return(result);
 8004926:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004928:	2b00      	cmp	r3, #0
 800492a:	d022      	beq.n	8004972 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004932:	f06f 0303 	mvn.w	r3, #3
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	e02c      	b.n	8004994 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800493a:	2300      	movs	r3, #0
 800493c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800493e:	f107 0308 	add.w	r3, r7, #8
 8004942:	461a      	mov	r2, r3
 8004944:	2100      	movs	r1, #0
 8004946:	6938      	ldr	r0, [r7, #16]
 8004948:	f001 f844 	bl	80059d4 <xQueueReceiveFromISR>
 800494c:	4603      	mov	r3, r0
 800494e:	2b01      	cmp	r3, #1
 8004950:	d003      	beq.n	800495a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004952:	f06f 0302 	mvn.w	r3, #2
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e01c      	b.n	8004994 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d019      	beq.n	8004994 <osSemaphoreAcquire+0x94>
 8004960:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <osSemaphoreAcquire+0xa0>)
 8004962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	e010      	b.n	8004994 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004972:	6839      	ldr	r1, [r7, #0]
 8004974:	6938      	ldr	r0, [r7, #16]
 8004976:	f000 ff21 	bl	80057bc <xQueueSemaphoreTake>
 800497a:	4603      	mov	r3, r0
 800497c:	2b01      	cmp	r3, #1
 800497e:	d009      	beq.n	8004994 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004986:	f06f 0301 	mvn.w	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	e002      	b.n	8004994 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800498e:	f06f 0302 	mvn.w	r3, #2
 8004992:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004994:	697b      	ldr	r3, [r7, #20]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	e000ed04 	.word	0xe000ed04

080049a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80049ba:	f06f 0303 	mvn.w	r3, #3
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	e02c      	b.n	8004a1c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c2:	f3ef 8305 	mrs	r3, IPSR
 80049c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80049c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01a      	beq.n	8004a04 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80049d2:	f107 0308 	add.w	r3, r7, #8
 80049d6:	4619      	mov	r1, r3
 80049d8:	6938      	ldr	r0, [r7, #16]
 80049da:	f000 fd82 	bl	80054e2 <xQueueGiveFromISR>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d003      	beq.n	80049ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80049e4:	f06f 0302 	mvn.w	r3, #2
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	e017      	b.n	8004a1c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d014      	beq.n	8004a1c <osSemaphoreRelease+0x78>
 80049f2:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <osSemaphoreRelease+0x84>)
 80049f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	e00b      	b.n	8004a1c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004a04:	2300      	movs	r3, #0
 8004a06:	2200      	movs	r2, #0
 8004a08:	2100      	movs	r1, #0
 8004a0a:	6938      	ldr	r0, [r7, #16]
 8004a0c:	f000 fbd0 	bl	80051b0 <xQueueGenericSend>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d002      	beq.n	8004a1c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004a16:	f06f 0302 	mvn.w	r3, #2
 8004a1a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004a1c:	697b      	ldr	r3, [r7, #20]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	e000ed04 	.word	0xe000ed04

08004a2c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	; 0x28
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a3c:	f3ef 8305 	mrs	r3, IPSR
 8004a40:	613b      	str	r3, [r7, #16]
  return(result);
 8004a42:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d15f      	bne.n	8004b08 <osMessageQueueNew+0xdc>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d05c      	beq.n	8004b08 <osMessageQueueNew+0xdc>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d059      	beq.n	8004b08 <osMessageQueueNew+0xdc>
    mem = -1;
 8004a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a58:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d029      	beq.n	8004ab4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d012      	beq.n	8004a8e <osMessageQueueNew+0x62>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	2b4f      	cmp	r3, #79	; 0x4f
 8004a6e:	d90e      	bls.n	8004a8e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d302      	bcc.n	8004a8e <osMessageQueueNew+0x62>
        mem = 1;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	61bb      	str	r3, [r7, #24]
 8004a8c:	e014      	b.n	8004ab8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d110      	bne.n	8004ab8 <osMessageQueueNew+0x8c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10c      	bne.n	8004ab8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d108      	bne.n	8004ab8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d104      	bne.n	8004ab8 <osMessageQueueNew+0x8c>
          mem = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	e001      	b.n	8004ab8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d10b      	bne.n	8004ad6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	9100      	str	r1, [sp, #0]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 fa2f 	bl	8004f30 <xQueueGenericCreateStatic>
 8004ad2:	61f8      	str	r0, [r7, #28]
 8004ad4:	e008      	b.n	8004ae8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004adc:	2200      	movs	r2, #0
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 fa9d 	bl	8005020 <xQueueGenericCreate>
 8004ae6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00c      	beq.n	8004b08 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <osMessageQueueNew+0xd0>
        name = attr->name;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e001      	b.n	8004b00 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004b00:	6979      	ldr	r1, [r7, #20]
 8004b02:	69f8      	ldr	r0, [r7, #28]
 8004b04:	f001 f932 	bl	8005d6c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004b08:	69fb      	ldr	r3, [r7, #28]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b2c:	f3ef 8305 	mrs	r3, IPSR
 8004b30:	617b      	str	r3, [r7, #20]
  return(result);
 8004b32:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d028      	beq.n	8004b8a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <osMessageQueuePut+0x36>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <osMessageQueuePut+0x36>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004b4a:	f06f 0303 	mvn.w	r3, #3
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	e038      	b.n	8004bc4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004b56:	f107 0210 	add.w	r2, r7, #16
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	69b8      	ldr	r0, [r7, #24]
 8004b60:	f000 fc24 	bl	80053ac <xQueueGenericSendFromISR>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d003      	beq.n	8004b72 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004b6a:	f06f 0302 	mvn.w	r3, #2
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	e028      	b.n	8004bc4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d025      	beq.n	8004bc4 <osMessageQueuePut+0xb0>
 8004b78:	4b15      	ldr	r3, [pc, #84]	; (8004bd0 <osMessageQueuePut+0xbc>)
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	e01c      	b.n	8004bc4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <osMessageQueuePut+0x82>
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d103      	bne.n	8004b9e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004b96:	f06f 0303 	mvn.w	r3, #3
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	e012      	b.n	8004bc4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	69b8      	ldr	r0, [r7, #24]
 8004ba6:	f000 fb03 	bl	80051b0 <xQueueGenericSend>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d009      	beq.n	8004bc4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004bb6:	f06f 0301 	mvn.w	r3, #1
 8004bba:	61fb      	str	r3, [r7, #28]
 8004bbc:	e002      	b.n	8004bc4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004bbe:	f06f 0302 	mvn.w	r3, #2
 8004bc2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004bc4:	69fb      	ldr	r3, [r7, #28]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3720      	adds	r7, #32
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bea:	f3ef 8305 	mrs	r3, IPSR
 8004bee:	617b      	str	r3, [r7, #20]
  return(result);
 8004bf0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d028      	beq.n	8004c48 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <osMessageQueueGet+0x34>
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <osMessageQueueGet+0x34>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004c08:	f06f 0303 	mvn.w	r3, #3
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	e037      	b.n	8004c80 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004c14:	f107 0310 	add.w	r3, r7, #16
 8004c18:	461a      	mov	r2, r3
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	69b8      	ldr	r0, [r7, #24]
 8004c1e:	f000 fed9 	bl	80059d4 <xQueueReceiveFromISR>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d003      	beq.n	8004c30 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004c28:	f06f 0302 	mvn.w	r3, #2
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	e027      	b.n	8004c80 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d024      	beq.n	8004c80 <osMessageQueueGet+0xac>
 8004c36:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <osMessageQueueGet+0xb8>)
 8004c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	e01b      	b.n	8004c80 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <osMessageQueueGet+0x80>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d103      	bne.n	8004c5c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004c54:	f06f 0303 	mvn.w	r3, #3
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	e011      	b.n	8004c80 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	69b8      	ldr	r0, [r7, #24]
 8004c62:	f000 fccb 	bl	80055fc <xQueueReceive>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d009      	beq.n	8004c80 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004c72:	f06f 0301 	mvn.w	r3, #1
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	e002      	b.n	8004c80 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004c7a:	f06f 0302 	mvn.w	r3, #2
 8004c7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004c80:	69fb      	ldr	r3, [r7, #28]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	e000ed04 	.word	0xe000ed04

08004c90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4a07      	ldr	r2, [pc, #28]	; (8004cbc <vApplicationGetIdleTaskMemory+0x2c>)
 8004ca0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4a06      	ldr	r2, [pc, #24]	; (8004cc0 <vApplicationGetIdleTaskMemory+0x30>)
 8004ca6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2280      	movs	r2, #128	; 0x80
 8004cac:	601a      	str	r2, [r3, #0]
}
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000030 	.word	0x20000030
 8004cc0:	2000008c 	.word	0x2000008c

08004cc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4a07      	ldr	r2, [pc, #28]	; (8004cf0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004cd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4a06      	ldr	r2, [pc, #24]	; (8004cf4 <vApplicationGetTimerTaskMemory+0x30>)
 8004cda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ce2:	601a      	str	r2, [r3, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	2000028c 	.word	0x2000028c
 8004cf4:	200002e8 	.word	0x200002e8

08004cf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f103 0208 	add.w	r2, r3, #8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f103 0208 	add.w	r2, r3, #8
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f103 0208 	add.w	r2, r3, #8
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d52:	b480      	push	{r7}
 8004d54:	b085      	sub	sp, #20
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004db0:	d103      	bne.n	8004dba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	e00c      	b.n	8004dd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e002      	b.n	8004dc8 <vListInsert+0x2e>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d2f6      	bcs.n	8004dc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	601a      	str	r2, [r3, #0]
}
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6892      	ldr	r2, [r2, #8]
 8004e22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6852      	ldr	r2, [r2, #4]
 8004e2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d103      	bne.n	8004e40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	1e5a      	subs	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e8a:	f002 fd73 	bl	8007974 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e96:	68f9      	ldr	r1, [r7, #12]
 8004e98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e9a:	fb01 f303 	mul.w	r3, r1, r3
 8004e9e:	441a      	add	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	68f9      	ldr	r1, [r7, #12]
 8004ebe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	441a      	add	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	22ff      	movs	r2, #255	; 0xff
 8004ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	22ff      	movs	r2, #255	; 0xff
 8004ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d114      	bne.n	8004f0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01a      	beq.n	8004f1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3310      	adds	r3, #16
 8004eec:	4618      	mov	r0, r3
 8004eee:	f001 fd2b 	bl	8006948 <xTaskRemoveFromEventList>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d012      	beq.n	8004f1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <xQueueGenericReset+0xcc>)
 8004efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	e009      	b.n	8004f1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3310      	adds	r3, #16
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff fef2 	bl	8004cf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3324      	adds	r3, #36	; 0x24
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff feed 	bl	8004cf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f1e:	f002 fd59 	bl	80079d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f22:	2301      	movs	r3, #1
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	e000ed04 	.word	0xe000ed04

08004f30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08e      	sub	sp, #56	; 0x38
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10a      	bne.n	8004f5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <xQueueGenericCreateStatic+0x52>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <xQueueGenericCreateStatic+0x56>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <xQueueGenericCreateStatic+0x58>
 8004f86:	2300      	movs	r3, #0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	623b      	str	r3, [r7, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <xQueueGenericCreateStatic+0x7e>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <xQueueGenericCreateStatic+0x82>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <xQueueGenericCreateStatic+0x84>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	61fb      	str	r3, [r7, #28]
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fce:	2350      	movs	r3, #80	; 0x50
 8004fd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b50      	cmp	r3, #80	; 0x50
 8004fd6:	d00a      	beq.n	8004fee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	61bb      	str	r3, [r7, #24]
}
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004fee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00d      	beq.n	8005016 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005002:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	4613      	mov	r3, r2
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f83f 	bl	8005094 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005018:	4618      	mov	r0, r3
 800501a:	3730      	adds	r7, #48	; 0x30
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08a      	sub	sp, #40	; 0x28
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	4613      	mov	r3, r2
 800502c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	613b      	str	r3, [r7, #16]
}
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	fb02 f303 	mul.w	r3, r2, r3
 8005052:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	3350      	adds	r3, #80	; 0x50
 8005058:	4618      	mov	r0, r3
 800505a:	f002 fdad 	bl	8007bb8 <pvPortMalloc>
 800505e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d011      	beq.n	800508a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	3350      	adds	r3, #80	; 0x50
 800506e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005078:	79fa      	ldrb	r2, [r7, #7]
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	4613      	mov	r3, r2
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 f805 	bl	8005094 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800508a:	69bb      	ldr	r3, [r7, #24]
	}
 800508c:	4618      	mov	r0, r3
 800508e:	3720      	adds	r7, #32
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d103      	bne.n	80050b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	e002      	b.n	80050b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050c2:	2101      	movs	r1, #1
 80050c4:	69b8      	ldr	r0, [r7, #24]
 80050c6:	f7ff fecb 	bl	8004e60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	78fa      	ldrb	r2, [r7, #3]
 80050ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050d2:	bf00      	nop
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b08a      	sub	sp, #40	; 0x28
 80050de:	af02      	add	r7, sp, #8
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	61bb      	str	r3, [r7, #24]
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	429a      	cmp	r2, r3
 8005108:	d90a      	bls.n	8005120 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	617b      	str	r3, [r7, #20]
}
 800511c:	bf00      	nop
 800511e:	e7fe      	b.n	800511e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005120:	2302      	movs	r3, #2
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	2100      	movs	r1, #0
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff ff00 	bl	8004f30 <xQueueGenericCreateStatic>
 8005130:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800513e:	69fb      	ldr	r3, [r7, #28]
	}
 8005140:	4618      	mov	r0, r3
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	613b      	str	r3, [r7, #16]
}
 800516a:	bf00      	nop
 800516c:	e7fe      	b.n	800516c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	429a      	cmp	r2, r3
 8005174:	d90a      	bls.n	800518c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	60fb      	str	r3, [r7, #12]
}
 8005188:	bf00      	nop
 800518a:	e7fe      	b.n	800518a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800518c:	2202      	movs	r2, #2
 800518e:	2100      	movs	r1, #0
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff ff45 	bl	8005020 <xQueueGenericCreate>
 8005196:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80051a4:	697b      	ldr	r3, [r7, #20]
	}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08e      	sub	sp, #56	; 0x38
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051be:	2300      	movs	r3, #0
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <xQueueGenericSend+0x32>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d103      	bne.n	80051f0 <xQueueGenericSend+0x40>
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <xQueueGenericSend+0x44>
 80051f0:	2301      	movs	r3, #1
 80051f2:	e000      	b.n	80051f6 <xQueueGenericSend+0x46>
 80051f4:	2300      	movs	r3, #0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10a      	bne.n	8005210 <xQueueGenericSend+0x60>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d103      	bne.n	800521e <xQueueGenericSend+0x6e>
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <xQueueGenericSend+0x72>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <xQueueGenericSend+0x74>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <xQueueGenericSend+0x8e>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	623b      	str	r3, [r7, #32]
}
 800523a:	bf00      	nop
 800523c:	e7fe      	b.n	800523c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800523e:	f001 fd41 	bl	8006cc4 <xTaskGetSchedulerState>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d102      	bne.n	800524e <xQueueGenericSend+0x9e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <xQueueGenericSend+0xa2>
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <xQueueGenericSend+0xa4>
 8005252:	2300      	movs	r3, #0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <xQueueGenericSend+0xbe>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	61fb      	str	r3, [r7, #28]
}
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800526e:	f002 fb81 	bl	8007974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527a:	429a      	cmp	r2, r3
 800527c:	d302      	bcc.n	8005284 <xQueueGenericSend+0xd4>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d129      	bne.n	80052d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800528a:	f000 fc5e 	bl	8005b4a <prvCopyDataToQueue>
 800528e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	2b00      	cmp	r3, #0
 8005296:	d010      	beq.n	80052ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	3324      	adds	r3, #36	; 0x24
 800529c:	4618      	mov	r0, r3
 800529e:	f001 fb53 	bl	8006948 <xTaskRemoveFromEventList>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d013      	beq.n	80052d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052a8:	4b3f      	ldr	r3, [pc, #252]	; (80053a8 <xQueueGenericSend+0x1f8>)
 80052aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	e00a      	b.n	80052d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052c0:	4b39      	ldr	r3, [pc, #228]	; (80053a8 <xQueueGenericSend+0x1f8>)
 80052c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052d0:	f002 fb80 	bl	80079d4 <vPortExitCritical>
				return pdPASS;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e063      	b.n	80053a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d103      	bne.n	80052e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052de:	f002 fb79 	bl	80079d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e05c      	b.n	80053a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d106      	bne.n	80052fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052ec:	f107 0314 	add.w	r3, r7, #20
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 fb8d 	bl	8006a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052f6:	2301      	movs	r3, #1
 80052f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052fa:	f002 fb6b 	bl	80079d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052fe:	f001 f8ff 	bl	8006500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005302:	f002 fb37 	bl	8007974 <vPortEnterCritical>
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800530c:	b25b      	sxtb	r3, r3
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005312:	d103      	bne.n	800531c <xQueueGenericSend+0x16c>
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005322:	b25b      	sxtb	r3, r3
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005328:	d103      	bne.n	8005332 <xQueueGenericSend+0x182>
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005332:	f002 fb4f 	bl	80079d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005336:	1d3a      	adds	r2, r7, #4
 8005338:	f107 0314 	add.w	r3, r7, #20
 800533c:	4611      	mov	r1, r2
 800533e:	4618      	mov	r0, r3
 8005340:	f001 fb7c 	bl	8006a3c <xTaskCheckForTimeOut>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d124      	bne.n	8005394 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800534a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800534c:	f000 fcf5 	bl	8005d3a <prvIsQueueFull>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d018      	beq.n	8005388 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	3310      	adds	r3, #16
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4611      	mov	r1, r2
 800535e:	4618      	mov	r0, r3
 8005360:	f001 faa2 	bl	80068a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005366:	f000 fc80 	bl	8005c6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800536a:	f001 f8d7 	bl	800651c <xTaskResumeAll>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	f47f af7c 	bne.w	800526e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005376:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <xQueueGenericSend+0x1f8>)
 8005378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	e772      	b.n	800526e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800538a:	f000 fc6e 	bl	8005c6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800538e:	f001 f8c5 	bl	800651c <xTaskResumeAll>
 8005392:	e76c      	b.n	800526e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005396:	f000 fc68 	bl	8005c6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800539a:	f001 f8bf 	bl	800651c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800539e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3738      	adds	r7, #56	; 0x38
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	e000ed04 	.word	0xe000ed04

080053ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b090      	sub	sp, #64	; 0x40
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d103      	bne.n	80053e8 <xQueueGenericSendFromISR+0x3c>
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <xQueueGenericSendFromISR+0x40>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <xQueueGenericSendFromISR+0x42>
 80053ec:	2300      	movs	r3, #0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d103      	bne.n	8005416 <xQueueGenericSendFromISR+0x6a>
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <xQueueGenericSendFromISR+0x6e>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <xQueueGenericSendFromISR+0x70>
 800541a:	2300      	movs	r3, #0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	623b      	str	r3, [r7, #32]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005436:	f002 fb7f 	bl	8007b38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800543a:	f3ef 8211 	mrs	r2, BASEPRI
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	61fa      	str	r2, [r7, #28]
 8005450:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005452:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	429a      	cmp	r2, r3
 8005460:	d302      	bcc.n	8005468 <xQueueGenericSendFromISR+0xbc>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d12f      	bne.n	80054c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800546e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800547e:	f000 fb64 	bl	8005b4a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005482:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800548a:	d112      	bne.n	80054b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800548c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2b00      	cmp	r3, #0
 8005492:	d016      	beq.n	80054c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	3324      	adds	r3, #36	; 0x24
 8005498:	4618      	mov	r0, r3
 800549a:	f001 fa55 	bl	8006948 <xTaskRemoveFromEventList>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00e      	beq.n	80054c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00b      	beq.n	80054c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e007      	b.n	80054c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054b6:	3301      	adds	r3, #1
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	b25a      	sxtb	r2, r3
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054c2:	2301      	movs	r3, #1
 80054c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80054c6:	e001      	b.n	80054cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3740      	adds	r7, #64	; 0x40
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b08e      	sub	sp, #56	; 0x38
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <xQueueGiveFromISR+0x2a>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	623b      	str	r3, [r7, #32]
}
 8005508:	bf00      	nop
 800550a:	e7fe      	b.n	800550a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <xQueueGiveFromISR+0x48>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	61fb      	str	r3, [r7, #28]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <xQueueGiveFromISR+0x58>
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <xQueueGiveFromISR+0x5c>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <xQueueGiveFromISR+0x5e>
 800553e:	2300      	movs	r3, #0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <xQueueGiveFromISR+0x78>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	61bb      	str	r3, [r7, #24]
}
 8005556:	bf00      	nop
 8005558:	e7fe      	b.n	8005558 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800555a:	f002 faed 	bl	8007b38 <vPortValidateInterruptPriority>
	__asm volatile
 800555e:	f3ef 8211 	mrs	r2, BASEPRI
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	617a      	str	r2, [r7, #20]
 8005574:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005576:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005586:	429a      	cmp	r2, r3
 8005588:	d22b      	bcs.n	80055e2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800559c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055a4:	d112      	bne.n	80055cc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	3324      	adds	r3, #36	; 0x24
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 f9c8 	bl	8006948 <xTaskRemoveFromEventList>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00e      	beq.n	80055dc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00b      	beq.n	80055dc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2201      	movs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e007      	b.n	80055dc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055d0:	3301      	adds	r3, #1
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	b25a      	sxtb	r2, r3
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055dc:	2301      	movs	r3, #1
 80055de:	637b      	str	r3, [r7, #52]	; 0x34
 80055e0:	e001      	b.n	80055e6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	637b      	str	r3, [r7, #52]	; 0x34
 80055e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f383 8811 	msr	BASEPRI, r3
}
 80055f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3738      	adds	r7, #56	; 0x38
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08c      	sub	sp, #48	; 0x30
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005608:	2300      	movs	r3, #0
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <xQueueReceive+0x30>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	623b      	str	r3, [r7, #32]
}
 8005628:	bf00      	nop
 800562a:	e7fe      	b.n	800562a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d103      	bne.n	800563a <xQueueReceive+0x3e>
 8005632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <xQueueReceive+0x42>
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <xQueueReceive+0x44>
 800563e:	2300      	movs	r3, #0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <xQueueReceive+0x5e>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	61fb      	str	r3, [r7, #28]
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800565a:	f001 fb33 	bl	8006cc4 <xTaskGetSchedulerState>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d102      	bne.n	800566a <xQueueReceive+0x6e>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <xQueueReceive+0x72>
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <xQueueReceive+0x74>
 800566e:	2300      	movs	r3, #0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10a      	bne.n	800568a <xQueueReceive+0x8e>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	61bb      	str	r3, [r7, #24]
}
 8005686:	bf00      	nop
 8005688:	e7fe      	b.n	8005688 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800568a:	f002 f973 	bl	8007974 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d01f      	beq.n	80056da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800569a:	68b9      	ldr	r1, [r7, #8]
 800569c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800569e:	f000 fabe 	bl	8005c1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	1e5a      	subs	r2, r3, #1
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00f      	beq.n	80056d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	3310      	adds	r3, #16
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 f946 	bl	8006948 <xTaskRemoveFromEventList>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056c2:	4b3d      	ldr	r3, [pc, #244]	; (80057b8 <xQueueReceive+0x1bc>)
 80056c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056d2:	f002 f97f 	bl	80079d4 <vPortExitCritical>
				return pdPASS;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e069      	b.n	80057ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d103      	bne.n	80056e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056e0:	f002 f978 	bl	80079d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e062      	b.n	80057ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056ee:	f107 0310 	add.w	r3, r7, #16
 80056f2:	4618      	mov	r0, r3
 80056f4:	f001 f98c 	bl	8006a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056f8:	2301      	movs	r3, #1
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056fc:	f002 f96a 	bl	80079d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005700:	f000 fefe 	bl	8006500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005704:	f002 f936 	bl	8007974 <vPortEnterCritical>
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800570e:	b25b      	sxtb	r3, r3
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005714:	d103      	bne.n	800571e <xQueueReceive+0x122>
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005724:	b25b      	sxtb	r3, r3
 8005726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800572a:	d103      	bne.n	8005734 <xQueueReceive+0x138>
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005734:	f002 f94e 	bl	80079d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005738:	1d3a      	adds	r2, r7, #4
 800573a:	f107 0310 	add.w	r3, r7, #16
 800573e:	4611      	mov	r1, r2
 8005740:	4618      	mov	r0, r3
 8005742:	f001 f97b 	bl	8006a3c <xTaskCheckForTimeOut>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d123      	bne.n	8005794 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800574c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800574e:	f000 fade 	bl	8005d0e <prvIsQueueEmpty>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d017      	beq.n	8005788 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	3324      	adds	r3, #36	; 0x24
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	4611      	mov	r1, r2
 8005760:	4618      	mov	r0, r3
 8005762:	f001 f8a1 	bl	80068a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005768:	f000 fa7f 	bl	8005c6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800576c:	f000 fed6 	bl	800651c <xTaskResumeAll>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d189      	bne.n	800568a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005776:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <xQueueReceive+0x1bc>)
 8005778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	e780      	b.n	800568a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800578a:	f000 fa6e 	bl	8005c6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800578e:	f000 fec5 	bl	800651c <xTaskResumeAll>
 8005792:	e77a      	b.n	800568a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005796:	f000 fa68 	bl	8005c6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800579a:	f000 febf 	bl	800651c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800579e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057a0:	f000 fab5 	bl	8005d0e <prvIsQueueEmpty>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f43f af6f 	beq.w	800568a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3730      	adds	r7, #48	; 0x30
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	e000ed04 	.word	0xe000ed04

080057bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08e      	sub	sp, #56	; 0x38
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80057ce:	2300      	movs	r3, #0
 80057d0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <xQueueSemaphoreTake+0x32>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	623b      	str	r3, [r7, #32]
}
 80057ea:	bf00      	nop
 80057ec:	e7fe      	b.n	80057ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80057ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <xQueueSemaphoreTake+0x50>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	61fb      	str	r3, [r7, #28]
}
 8005808:	bf00      	nop
 800580a:	e7fe      	b.n	800580a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800580c:	f001 fa5a 	bl	8006cc4 <xTaskGetSchedulerState>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d102      	bne.n	800581c <xQueueSemaphoreTake+0x60>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <xQueueSemaphoreTake+0x64>
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <xQueueSemaphoreTake+0x66>
 8005820:	2300      	movs	r3, #0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10a      	bne.n	800583c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	61bb      	str	r3, [r7, #24]
}
 8005838:	bf00      	nop
 800583a:	e7fe      	b.n	800583a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800583c:	f002 f89a 	bl	8007974 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	2b00      	cmp	r3, #0
 800584a:	d024      	beq.n	8005896 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	1e5a      	subs	r2, r3, #1
 8005850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005852:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d104      	bne.n	8005866 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800585c:	f001 fba8 	bl	8006fb0 <pvTaskIncrementMutexHeldCount>
 8005860:	4602      	mov	r2, r0
 8005862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005864:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00f      	beq.n	800588e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	3310      	adds	r3, #16
 8005872:	4618      	mov	r0, r3
 8005874:	f001 f868 	bl	8006948 <xTaskRemoveFromEventList>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800587e:	4b54      	ldr	r3, [pc, #336]	; (80059d0 <xQueueSemaphoreTake+0x214>)
 8005880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800588e:	f002 f8a1 	bl	80079d4 <vPortExitCritical>
				return pdPASS;
 8005892:	2301      	movs	r3, #1
 8005894:	e097      	b.n	80059c6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d111      	bne.n	80058c0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	617b      	str	r3, [r7, #20]
}
 80058b4:	bf00      	nop
 80058b6:	e7fe      	b.n	80058b6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80058b8:	f002 f88c 	bl	80079d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058bc:	2300      	movs	r3, #0
 80058be:	e082      	b.n	80059c6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058c6:	f107 030c 	add.w	r3, r7, #12
 80058ca:	4618      	mov	r0, r3
 80058cc:	f001 f8a0 	bl	8006a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058d0:	2301      	movs	r3, #1
 80058d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058d4:	f002 f87e 	bl	80079d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058d8:	f000 fe12 	bl	8006500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058dc:	f002 f84a 	bl	8007974 <vPortEnterCritical>
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058e6:	b25b      	sxtb	r3, r3
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058ec:	d103      	bne.n	80058f6 <xQueueSemaphoreTake+0x13a>
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058fc:	b25b      	sxtb	r3, r3
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005902:	d103      	bne.n	800590c <xQueueSemaphoreTake+0x150>
 8005904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800590c:	f002 f862 	bl	80079d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005910:	463a      	mov	r2, r7
 8005912:	f107 030c 	add.w	r3, r7, #12
 8005916:	4611      	mov	r1, r2
 8005918:	4618      	mov	r0, r3
 800591a:	f001 f88f 	bl	8006a3c <xTaskCheckForTimeOut>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d132      	bne.n	800598a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005926:	f000 f9f2 	bl	8005d0e <prvIsQueueEmpty>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d026      	beq.n	800597e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005938:	f002 f81c 	bl	8007974 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	4618      	mov	r0, r3
 8005942:	f001 f9dd 	bl	8006d00 <xTaskPriorityInherit>
 8005946:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005948:	f002 f844 	bl	80079d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	3324      	adds	r3, #36	; 0x24
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f000 ffa7 	bl	80068a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800595a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800595c:	f000 f985 	bl	8005c6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005960:	f000 fddc 	bl	800651c <xTaskResumeAll>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	f47f af68 	bne.w	800583c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800596c:	4b18      	ldr	r3, [pc, #96]	; (80059d0 <xQueueSemaphoreTake+0x214>)
 800596e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	e75e      	b.n	800583c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800597e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005980:	f000 f973 	bl	8005c6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005984:	f000 fdca 	bl	800651c <xTaskResumeAll>
 8005988:	e758      	b.n	800583c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800598a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800598c:	f000 f96d 	bl	8005c6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005990:	f000 fdc4 	bl	800651c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005996:	f000 f9ba 	bl	8005d0e <prvIsQueueEmpty>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	f43f af4d 	beq.w	800583c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00d      	beq.n	80059c4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80059a8:	f001 ffe4 	bl	8007974 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80059ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059ae:	f000 f8b4 	bl	8005b1a <prvGetDisinheritPriorityAfterTimeout>
 80059b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80059b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 fa76 	bl	8006eac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80059c0:	f002 f808 	bl	80079d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3738      	adds	r7, #56	; 0x38
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	e000ed04 	.word	0xe000ed04

080059d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08e      	sub	sp, #56	; 0x38
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10a      	bne.n	8005a00 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	623b      	str	r3, [r7, #32]
}
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <xQueueReceiveFromISR+0x3a>
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <xQueueReceiveFromISR+0x3e>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <xQueueReceiveFromISR+0x40>
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	61fb      	str	r3, [r7, #28]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a2e:	f002 f883 	bl	8007b38 <vPortValidateInterruptPriority>
	__asm volatile
 8005a32:	f3ef 8211 	mrs	r2, BASEPRI
 8005a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	61ba      	str	r2, [r7, #24]
 8005a48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d02f      	beq.n	8005aba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a68:	f000 f8d9 	bl	8005c1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	1e5a      	subs	r2, r3, #1
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005a74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a7c:	d112      	bne.n	8005aa4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d016      	beq.n	8005ab4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	3310      	adds	r3, #16
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 ff5c 	bl	8006948 <xTaskRemoveFromEventList>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00e      	beq.n	8005ab4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00b      	beq.n	8005ab4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	e007      	b.n	8005ab4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	b25a      	sxtb	r2, r3
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab8:	e001      	b.n	8005abe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005aba:	2300      	movs	r3, #0
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
 8005abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f383 8811 	msr	BASEPRI, r3
}
 8005ac8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3738      	adds	r7, #56	; 0x38
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <vQueueDelete+0x28>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	60bb      	str	r3, [r7, #8]
}
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 f95f 	bl	8005dc0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d102      	bne.n	8005b12 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f002 f91f 	bl	8007d50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005b12:	bf00      	nop
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d006      	beq.n	8005b38 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	e001      	b.n	8005b3c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
	}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b086      	sub	sp, #24
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10d      	bne.n	8005b84 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d14d      	bne.n	8005c0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f001 f92b 	bl	8006dd0 <xTaskPriorityDisinherit>
 8005b7a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	609a      	str	r2, [r3, #8]
 8005b82:	e043      	b.n	8005c0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d119      	bne.n	8005bbe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6858      	ldr	r0, [r3, #4]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	461a      	mov	r2, r3
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	f002 fa1d 	bl	8007fd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	441a      	add	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d32b      	bcc.n	8005c0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	605a      	str	r2, [r3, #4]
 8005bbc:	e026      	b.n	8005c0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	68d8      	ldr	r0, [r3, #12]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	f002 fa03 	bl	8007fd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	425b      	negs	r3, r3
 8005bd8:	441a      	add	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d207      	bcs.n	8005bfa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	425b      	negs	r3, r3
 8005bf4:	441a      	add	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d105      	bne.n	8005c0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c14:	697b      	ldr	r3, [r7, #20]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d018      	beq.n	8005c62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	441a      	add	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d303      	bcc.n	8005c52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68d9      	ldr	r1, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	6838      	ldr	r0, [r7, #0]
 8005c5e:	f002 f9b9 	bl	8007fd4 <memcpy>
	}
}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c72:	f001 fe7f 	bl	8007974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c7e:	e011      	b.n	8005ca4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d012      	beq.n	8005cae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3324      	adds	r3, #36	; 0x24
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fe5b 	bl	8006948 <xTaskRemoveFromEventList>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c98:	f000 ff32 	bl	8006b00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	dce9      	bgt.n	8005c80 <prvUnlockQueue+0x16>
 8005cac:	e000      	b.n	8005cb0 <prvUnlockQueue+0x46>
					break;
 8005cae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	22ff      	movs	r2, #255	; 0xff
 8005cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005cb8:	f001 fe8c 	bl	80079d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005cbc:	f001 fe5a 	bl	8007974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cc6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cc8:	e011      	b.n	8005cee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d012      	beq.n	8005cf8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3310      	adds	r3, #16
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fe36 	bl	8006948 <xTaskRemoveFromEventList>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ce2:	f000 ff0d 	bl	8006b00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ce6:	7bbb      	ldrb	r3, [r7, #14]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	dce9      	bgt.n	8005cca <prvUnlockQueue+0x60>
 8005cf6:	e000      	b.n	8005cfa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cf8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	22ff      	movs	r2, #255	; 0xff
 8005cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d02:	f001 fe67 	bl	80079d4 <vPortExitCritical>
}
 8005d06:	bf00      	nop
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d16:	f001 fe2d 	bl	8007974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d102      	bne.n	8005d28 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d22:	2301      	movs	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e001      	b.n	8005d2c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d2c:	f001 fe52 	bl	80079d4 <vPortExitCritical>

	return xReturn;
 8005d30:	68fb      	ldr	r3, [r7, #12]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d42:	f001 fe17 	bl	8007974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d102      	bne.n	8005d58 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d52:	2301      	movs	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	e001      	b.n	8005d5c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d5c:	f001 fe3a 	bl	80079d4 <vPortExitCritical>

	return xReturn;
 8005d60:	68fb      	ldr	r3, [r7, #12]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	e014      	b.n	8005da6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d7c:	4a0f      	ldr	r2, [pc, #60]	; (8005dbc <vQueueAddToRegistry+0x50>)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10b      	bne.n	8005da0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d88:	490c      	ldr	r1, [pc, #48]	; (8005dbc <vQueueAddToRegistry+0x50>)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d92:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <vQueueAddToRegistry+0x50>)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	4413      	add	r3, r2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d9e:	e006      	b.n	8005dae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b07      	cmp	r3, #7
 8005daa:	d9e7      	bls.n	8005d7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dac:	bf00      	nop
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	200019e8 	.word	0x200019e8

08005dc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	e016      	b.n	8005dfc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005dce:	4a10      	ldr	r2, [pc, #64]	; (8005e10 <vQueueUnregisterQueue+0x50>)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4413      	add	r3, r2
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d10b      	bne.n	8005df6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005dde:	4a0c      	ldr	r2, [pc, #48]	; (8005e10 <vQueueUnregisterQueue+0x50>)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2100      	movs	r1, #0
 8005de4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005de8:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <vQueueUnregisterQueue+0x50>)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	4413      	add	r3, r2
 8005df0:	2200      	movs	r2, #0
 8005df2:	605a      	str	r2, [r3, #4]
				break;
 8005df4:	e006      	b.n	8005e04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b07      	cmp	r3, #7
 8005e00:	d9e5      	bls.n	8005dce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	200019e8 	.word	0x200019e8

08005e14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e24:	f001 fda6 	bl	8007974 <vPortEnterCritical>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e2e:	b25b      	sxtb	r3, r3
 8005e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e34:	d103      	bne.n	8005e3e <vQueueWaitForMessageRestricted+0x2a>
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e44:	b25b      	sxtb	r3, r3
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e4a:	d103      	bne.n	8005e54 <vQueueWaitForMessageRestricted+0x40>
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e54:	f001 fdbe 	bl	80079d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d106      	bne.n	8005e6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	3324      	adds	r3, #36	; 0x24
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	68b9      	ldr	r1, [r7, #8]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fd41 	bl	80068f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e6e:	6978      	ldr	r0, [r7, #20]
 8005e70:	f7ff fefb 	bl	8005c6a <prvUnlockQueue>
	}
 8005e74:	bf00      	nop
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08e      	sub	sp, #56	; 0x38
 8005e80:	af04      	add	r7, sp, #16
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	623b      	str	r3, [r7, #32]
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	61fb      	str	r3, [r7, #28]
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ec2:	235c      	movs	r3, #92	; 0x5c
 8005ec4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b5c      	cmp	r3, #92	; 0x5c
 8005eca:	d00a      	beq.n	8005ee2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	61bb      	str	r3, [r7, #24]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ee2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d01e      	beq.n	8005f28 <xTaskCreateStatic+0xac>
 8005eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01b      	beq.n	8005f28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	2202      	movs	r2, #2
 8005efe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f02:	2300      	movs	r3, #0
 8005f04:	9303      	str	r3, [sp, #12]
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	9302      	str	r3, [sp, #8]
 8005f0a:	f107 0314 	add.w	r3, r7, #20
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f850 	bl	8005fc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f22:	f000 f8dd 	bl	80060e0 <prvAddNewTaskToReadyList>
 8005f26:	e001      	b.n	8005f2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f2c:	697b      	ldr	r3, [r7, #20]
	}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3728      	adds	r7, #40	; 0x28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b08c      	sub	sp, #48	; 0x30
 8005f3a:	af04      	add	r7, sp, #16
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	603b      	str	r3, [r7, #0]
 8005f42:	4613      	mov	r3, r2
 8005f44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f001 fe34 	bl	8007bb8 <pvPortMalloc>
 8005f50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00e      	beq.n	8005f76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f58:	205c      	movs	r0, #92	; 0x5c
 8005f5a:	f001 fe2d 	bl	8007bb8 <pvPortMalloc>
 8005f5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f6c:	e005      	b.n	8005f7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f6e:	6978      	ldr	r0, [r7, #20]
 8005f70:	f001 feee 	bl	8007d50 <vPortFree>
 8005f74:	e001      	b.n	8005f7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d017      	beq.n	8005fb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f88:	88fa      	ldrh	r2, [r7, #6]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	9303      	str	r3, [sp, #12]
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	9302      	str	r3, [sp, #8]
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f80e 	bl	8005fc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fa4:	69f8      	ldr	r0, [r7, #28]
 8005fa6:	f000 f89b 	bl	80060e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005faa:	2301      	movs	r3, #1
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	e002      	b.n	8005fb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fb6:	69bb      	ldr	r3, [r7, #24]
	}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	21a5      	movs	r1, #165	; 0xa5
 8005fda:	f002 f809 	bl	8007ff0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f023 0307 	bic.w	r3, r3, #7
 8005ff6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	617b      	str	r3, [r7, #20]
}
 8006014:	bf00      	nop
 8006016:	e7fe      	b.n	8006016 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d01f      	beq.n	800605e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800601e:	2300      	movs	r3, #0
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	e012      	b.n	800604a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	7819      	ldrb	r1, [r3, #0]
 800602c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	4413      	add	r3, r2
 8006032:	3334      	adds	r3, #52	; 0x34
 8006034:	460a      	mov	r2, r1
 8006036:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d006      	beq.n	8006052 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	3301      	adds	r3, #1
 8006048:	61fb      	str	r3, [r7, #28]
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	2b0f      	cmp	r3, #15
 800604e:	d9e9      	bls.n	8006024 <prvInitialiseNewTask+0x64>
 8006050:	e000      	b.n	8006054 <prvInitialiseNewTask+0x94>
			{
				break;
 8006052:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800605c:	e003      	b.n	8006066 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	2b37      	cmp	r3, #55	; 0x37
 800606a:	d901      	bls.n	8006070 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800606c:	2337      	movs	r3, #55	; 0x37
 800606e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006074:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800607a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	2200      	movs	r2, #0
 8006080:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	3304      	adds	r3, #4
 8006086:	4618      	mov	r0, r3
 8006088:	f7fe fe56 	bl	8004d38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	3318      	adds	r3, #24
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe fe51 	bl	8004d38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800609a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ae:	2200      	movs	r2, #0
 80060b0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	68f9      	ldr	r1, [r7, #12]
 80060be:	69b8      	ldr	r0, [r7, #24]
 80060c0:	f001 fb2c 	bl	800771c <pxPortInitialiseStack>
 80060c4:	4602      	mov	r2, r0
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060d6:	bf00      	nop
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060e8:	f001 fc44 	bl	8007974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060ec:	4b2d      	ldr	r3, [pc, #180]	; (80061a4 <prvAddNewTaskToReadyList+0xc4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	4a2c      	ldr	r2, [pc, #176]	; (80061a4 <prvAddNewTaskToReadyList+0xc4>)
 80060f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060f6:	4b2c      	ldr	r3, [pc, #176]	; (80061a8 <prvAddNewTaskToReadyList+0xc8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060fe:	4a2a      	ldr	r2, [pc, #168]	; (80061a8 <prvAddNewTaskToReadyList+0xc8>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006104:	4b27      	ldr	r3, [pc, #156]	; (80061a4 <prvAddNewTaskToReadyList+0xc4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d110      	bne.n	800612e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800610c:	f000 fd1c 	bl	8006b48 <prvInitialiseTaskLists>
 8006110:	e00d      	b.n	800612e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006112:	4b26      	ldr	r3, [pc, #152]	; (80061ac <prvAddNewTaskToReadyList+0xcc>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d109      	bne.n	800612e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800611a:	4b23      	ldr	r3, [pc, #140]	; (80061a8 <prvAddNewTaskToReadyList+0xc8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	429a      	cmp	r2, r3
 8006126:	d802      	bhi.n	800612e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006128:	4a1f      	ldr	r2, [pc, #124]	; (80061a8 <prvAddNewTaskToReadyList+0xc8>)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800612e:	4b20      	ldr	r3, [pc, #128]	; (80061b0 <prvAddNewTaskToReadyList+0xd0>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3301      	adds	r3, #1
 8006134:	4a1e      	ldr	r2, [pc, #120]	; (80061b0 <prvAddNewTaskToReadyList+0xd0>)
 8006136:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006138:	4b1d      	ldr	r3, [pc, #116]	; (80061b0 <prvAddNewTaskToReadyList+0xd0>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006144:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <prvAddNewTaskToReadyList+0xd4>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d903      	bls.n	8006154 <prvAddNewTaskToReadyList+0x74>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	4a18      	ldr	r2, [pc, #96]	; (80061b4 <prvAddNewTaskToReadyList+0xd4>)
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4a15      	ldr	r2, [pc, #84]	; (80061b8 <prvAddNewTaskToReadyList+0xd8>)
 8006162:	441a      	add	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f7fe fdf1 	bl	8004d52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006170:	f001 fc30 	bl	80079d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006174:	4b0d      	ldr	r3, [pc, #52]	; (80061ac <prvAddNewTaskToReadyList+0xcc>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00e      	beq.n	800619a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800617c:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <prvAddNewTaskToReadyList+0xc8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006186:	429a      	cmp	r2, r3
 8006188:	d207      	bcs.n	800619a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800618a:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <prvAddNewTaskToReadyList+0xdc>)
 800618c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20000bbc 	.word	0x20000bbc
 80061a8:	200006e8 	.word	0x200006e8
 80061ac:	20000bc8 	.word	0x20000bc8
 80061b0:	20000bd8 	.word	0x20000bd8
 80061b4:	20000bc4 	.word	0x20000bc4
 80061b8:	200006ec 	.word	0x200006ec
 80061bc:	e000ed04 	.word	0xe000ed04

080061c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d017      	beq.n	8006202 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061d2:	4b13      	ldr	r3, [pc, #76]	; (8006220 <vTaskDelay+0x60>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <vTaskDelay+0x30>
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	60bb      	str	r3, [r7, #8]
}
 80061ec:	bf00      	nop
 80061ee:	e7fe      	b.n	80061ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061f0:	f000 f986 	bl	8006500 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061f4:	2100      	movs	r1, #0
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 feee 	bl	8006fd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061fc:	f000 f98e 	bl	800651c <xTaskResumeAll>
 8006200:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d107      	bne.n	8006218 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006208:	4b06      	ldr	r3, [pc, #24]	; (8006224 <vTaskDelay+0x64>)
 800620a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006218:	bf00      	nop
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20000be4 	.word	0x20000be4
 8006224:	e000ed04 	.word	0xe000ed04

08006228 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006230:	f001 fba0 	bl	8007974 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d102      	bne.n	8006240 <vTaskSuspend+0x18>
 800623a:	4b30      	ldr	r3, [pc, #192]	; (80062fc <vTaskSuspend+0xd4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	e000      	b.n	8006242 <vTaskSuspend+0x1a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3304      	adds	r3, #4
 8006248:	4618      	mov	r0, r3
 800624a:	f7fe fddf 	bl	8004e0c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	2b00      	cmp	r3, #0
 8006254:	d004      	beq.n	8006260 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3318      	adds	r3, #24
 800625a:	4618      	mov	r0, r3
 800625c:	f7fe fdd6 	bl	8004e0c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3304      	adds	r3, #4
 8006264:	4619      	mov	r1, r3
 8006266:	4826      	ldr	r0, [pc, #152]	; (8006300 <vTaskSuspend+0xd8>)
 8006268:	f7fe fd73 	bl	8004d52 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	d103      	bne.n	8006280 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006280:	f001 fba8 	bl	80079d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006284:	4b1f      	ldr	r3, [pc, #124]	; (8006304 <vTaskSuspend+0xdc>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800628c:	f001 fb72 	bl	8007974 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006290:	f000 fcf8 	bl	8006c84 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006294:	f001 fb9e 	bl	80079d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006298:	4b18      	ldr	r3, [pc, #96]	; (80062fc <vTaskSuspend+0xd4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d127      	bne.n	80062f2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80062a2:	4b18      	ldr	r3, [pc, #96]	; (8006304 <vTaskSuspend+0xdc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d017      	beq.n	80062da <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80062aa:	4b17      	ldr	r3, [pc, #92]	; (8006308 <vTaskSuspend+0xe0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <vTaskSuspend+0xa0>
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	60bb      	str	r3, [r7, #8]
}
 80062c4:	bf00      	nop
 80062c6:	e7fe      	b.n	80062c6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80062c8:	4b10      	ldr	r3, [pc, #64]	; (800630c <vTaskSuspend+0xe4>)
 80062ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062d8:	e00b      	b.n	80062f2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80062da:	4b09      	ldr	r3, [pc, #36]	; (8006300 <vTaskSuspend+0xd8>)
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	4b0c      	ldr	r3, [pc, #48]	; (8006310 <vTaskSuspend+0xe8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d103      	bne.n	80062ee <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80062e6:	4b05      	ldr	r3, [pc, #20]	; (80062fc <vTaskSuspend+0xd4>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]
	}
 80062ec:	e001      	b.n	80062f2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80062ee:	f000 fa7d 	bl	80067ec <vTaskSwitchContext>
	}
 80062f2:	bf00      	nop
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	200006e8 	.word	0x200006e8
 8006300:	20000ba8 	.word	0x20000ba8
 8006304:	20000bc8 	.word	0x20000bc8
 8006308:	20000be4 	.word	0x20000be4
 800630c:	e000ed04 	.word	0xe000ed04
 8006310:	20000bbc 	.word	0x20000bbc

08006314 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800631c:	2300      	movs	r3, #0
 800631e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10a      	bne.n	8006340 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	60fb      	str	r3, [r7, #12]
}
 800633c:	bf00      	nop
 800633e:	e7fe      	b.n	800633e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	4a0a      	ldr	r2, [pc, #40]	; (8006370 <prvTaskIsTaskSuspended+0x5c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d10a      	bne.n	8006360 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634e:	4a09      	ldr	r2, [pc, #36]	; (8006374 <prvTaskIsTaskSuspended+0x60>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d005      	beq.n	8006360 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800635c:	2301      	movs	r3, #1
 800635e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006360:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006362:	4618      	mov	r0, r3
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	20000ba8 	.word	0x20000ba8
 8006374:	20000b7c 	.word	0x20000b7c

08006378 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10a      	bne.n	80063a0 <vTaskResume+0x28>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	60bb      	str	r3, [r7, #8]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80063a0:	4b20      	ldr	r3, [pc, #128]	; (8006424 <vTaskResume+0xac>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d038      	beq.n	800641c <vTaskResume+0xa4>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d035      	beq.n	800641c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80063b0:	f001 fae0 	bl	8007974 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7ff ffad 	bl	8006314 <prvTaskIsTaskSuspended>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d02b      	beq.n	8006418 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fe fd21 	bl	8004e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ce:	4b16      	ldr	r3, [pc, #88]	; (8006428 <vTaskResume+0xb0>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d903      	bls.n	80063de <vTaskResume+0x66>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063da:	4a13      	ldr	r2, [pc, #76]	; (8006428 <vTaskResume+0xb0>)
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4a10      	ldr	r2, [pc, #64]	; (800642c <vTaskResume+0xb4>)
 80063ec:	441a      	add	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f7fe fcac 	bl	8004d52 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fe:	4b09      	ldr	r3, [pc, #36]	; (8006424 <vTaskResume+0xac>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	429a      	cmp	r2, r3
 8006406:	d307      	bcc.n	8006418 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006408:	4b09      	ldr	r3, [pc, #36]	; (8006430 <vTaskResume+0xb8>)
 800640a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006418:	f001 fadc 	bl	80079d4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	200006e8 	.word	0x200006e8
 8006428:	20000bc4 	.word	0x20000bc4
 800642c:	200006ec 	.word	0x200006ec
 8006430:	e000ed04 	.word	0xe000ed04

08006434 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006442:	463a      	mov	r2, r7
 8006444:	1d39      	adds	r1, r7, #4
 8006446:	f107 0308 	add.w	r3, r7, #8
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe fc20 	bl	8004c90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	9202      	str	r2, [sp, #8]
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	2300      	movs	r3, #0
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	2300      	movs	r3, #0
 8006460:	460a      	mov	r2, r1
 8006462:	4921      	ldr	r1, [pc, #132]	; (80064e8 <vTaskStartScheduler+0xb4>)
 8006464:	4821      	ldr	r0, [pc, #132]	; (80064ec <vTaskStartScheduler+0xb8>)
 8006466:	f7ff fd09 	bl	8005e7c <xTaskCreateStatic>
 800646a:	4603      	mov	r3, r0
 800646c:	4a20      	ldr	r2, [pc, #128]	; (80064f0 <vTaskStartScheduler+0xbc>)
 800646e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006470:	4b1f      	ldr	r3, [pc, #124]	; (80064f0 <vTaskStartScheduler+0xbc>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006478:	2301      	movs	r3, #1
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e001      	b.n	8006482 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d102      	bne.n	800648e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006488:	f000 fdfa 	bl	8007080 <xTimerCreateTimerTask>
 800648c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d116      	bne.n	80064c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	613b      	str	r3, [r7, #16]
}
 80064a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064a8:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <vTaskStartScheduler+0xc0>)
 80064aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064b0:	4b11      	ldr	r3, [pc, #68]	; (80064f8 <vTaskStartScheduler+0xc4>)
 80064b2:	2201      	movs	r2, #1
 80064b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064b6:	4b11      	ldr	r3, [pc, #68]	; (80064fc <vTaskStartScheduler+0xc8>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064bc:	f001 f9b8 	bl	8007830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064c0:	e00e      	b.n	80064e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c8:	d10a      	bne.n	80064e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	60fb      	str	r3, [r7, #12]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <vTaskStartScheduler+0xaa>
}
 80064e0:	bf00      	nop
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	08008198 	.word	0x08008198
 80064ec:	08006b19 	.word	0x08006b19
 80064f0:	20000be0 	.word	0x20000be0
 80064f4:	20000bdc 	.word	0x20000bdc
 80064f8:	20000bc8 	.word	0x20000bc8
 80064fc:	20000bc0 	.word	0x20000bc0

08006500 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006504:	4b04      	ldr	r3, [pc, #16]	; (8006518 <vTaskSuspendAll+0x18>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3301      	adds	r3, #1
 800650a:	4a03      	ldr	r2, [pc, #12]	; (8006518 <vTaskSuspendAll+0x18>)
 800650c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800650e:	bf00      	nop
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	20000be4 	.word	0x20000be4

0800651c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006526:	2300      	movs	r3, #0
 8006528:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800652a:	4b42      	ldr	r3, [pc, #264]	; (8006634 <xTaskResumeAll+0x118>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <xTaskResumeAll+0x2c>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	603b      	str	r3, [r7, #0]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006548:	f001 fa14 	bl	8007974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800654c:	4b39      	ldr	r3, [pc, #228]	; (8006634 <xTaskResumeAll+0x118>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3b01      	subs	r3, #1
 8006552:	4a38      	ldr	r2, [pc, #224]	; (8006634 <xTaskResumeAll+0x118>)
 8006554:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006556:	4b37      	ldr	r3, [pc, #220]	; (8006634 <xTaskResumeAll+0x118>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d162      	bne.n	8006624 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800655e:	4b36      	ldr	r3, [pc, #216]	; (8006638 <xTaskResumeAll+0x11c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d05e      	beq.n	8006624 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006566:	e02f      	b.n	80065c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006568:	4b34      	ldr	r3, [pc, #208]	; (800663c <xTaskResumeAll+0x120>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3318      	adds	r3, #24
 8006574:	4618      	mov	r0, r3
 8006576:	f7fe fc49 	bl	8004e0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3304      	adds	r3, #4
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe fc44 	bl	8004e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006588:	4b2d      	ldr	r3, [pc, #180]	; (8006640 <xTaskResumeAll+0x124>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d903      	bls.n	8006598 <xTaskResumeAll+0x7c>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	4a2a      	ldr	r2, [pc, #168]	; (8006640 <xTaskResumeAll+0x124>)
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4a27      	ldr	r2, [pc, #156]	; (8006644 <xTaskResumeAll+0x128>)
 80065a6:	441a      	add	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4619      	mov	r1, r3
 80065ae:	4610      	mov	r0, r2
 80065b0:	f7fe fbcf 	bl	8004d52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b8:	4b23      	ldr	r3, [pc, #140]	; (8006648 <xTaskResumeAll+0x12c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	429a      	cmp	r2, r3
 80065c0:	d302      	bcc.n	80065c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80065c2:	4b22      	ldr	r3, [pc, #136]	; (800664c <xTaskResumeAll+0x130>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065c8:	4b1c      	ldr	r3, [pc, #112]	; (800663c <xTaskResumeAll+0x120>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1cb      	bne.n	8006568 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065d6:	f000 fb55 	bl	8006c84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065da:	4b1d      	ldr	r3, [pc, #116]	; (8006650 <xTaskResumeAll+0x134>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d010      	beq.n	8006608 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065e6:	f000 f847 	bl	8006678 <xTaskIncrementTick>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80065f0:	4b16      	ldr	r3, [pc, #88]	; (800664c <xTaskResumeAll+0x130>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f1      	bne.n	80065e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006602:	4b13      	ldr	r3, [pc, #76]	; (8006650 <xTaskResumeAll+0x134>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006608:	4b10      	ldr	r3, [pc, #64]	; (800664c <xTaskResumeAll+0x130>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006610:	2301      	movs	r3, #1
 8006612:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006614:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <xTaskResumeAll+0x138>)
 8006616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006624:	f001 f9d6 	bl	80079d4 <vPortExitCritical>

	return xAlreadyYielded;
 8006628:	68bb      	ldr	r3, [r7, #8]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000be4 	.word	0x20000be4
 8006638:	20000bbc 	.word	0x20000bbc
 800663c:	20000b7c 	.word	0x20000b7c
 8006640:	20000bc4 	.word	0x20000bc4
 8006644:	200006ec 	.word	0x200006ec
 8006648:	200006e8 	.word	0x200006e8
 800664c:	20000bd0 	.word	0x20000bd0
 8006650:	20000bcc 	.word	0x20000bcc
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <xTaskGetTickCount+0x1c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006664:	687b      	ldr	r3, [r7, #4]
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20000bc0 	.word	0x20000bc0

08006678 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800667e:	2300      	movs	r3, #0
 8006680:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006682:	4b4f      	ldr	r3, [pc, #316]	; (80067c0 <xTaskIncrementTick+0x148>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	f040 808f 	bne.w	80067aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800668c:	4b4d      	ldr	r3, [pc, #308]	; (80067c4 <xTaskIncrementTick+0x14c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3301      	adds	r3, #1
 8006692:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006694:	4a4b      	ldr	r2, [pc, #300]	; (80067c4 <xTaskIncrementTick+0x14c>)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d120      	bne.n	80066e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80066a0:	4b49      	ldr	r3, [pc, #292]	; (80067c8 <xTaskIncrementTick+0x150>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	603b      	str	r3, [r7, #0]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <xTaskIncrementTick+0x46>
 80066c0:	4b41      	ldr	r3, [pc, #260]	; (80067c8 <xTaskIncrementTick+0x150>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	4b41      	ldr	r3, [pc, #260]	; (80067cc <xTaskIncrementTick+0x154>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a3f      	ldr	r2, [pc, #252]	; (80067c8 <xTaskIncrementTick+0x150>)
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	4a3f      	ldr	r2, [pc, #252]	; (80067cc <xTaskIncrementTick+0x154>)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	4b3e      	ldr	r3, [pc, #248]	; (80067d0 <xTaskIncrementTick+0x158>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3301      	adds	r3, #1
 80066da:	4a3d      	ldr	r2, [pc, #244]	; (80067d0 <xTaskIncrementTick+0x158>)
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	f000 fad1 	bl	8006c84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066e2:	4b3c      	ldr	r3, [pc, #240]	; (80067d4 <xTaskIncrementTick+0x15c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d349      	bcc.n	8006780 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ec:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <xTaskIncrementTick+0x150>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d104      	bne.n	8006700 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f6:	4b37      	ldr	r3, [pc, #220]	; (80067d4 <xTaskIncrementTick+0x15c>)
 80066f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066fc:	601a      	str	r2, [r3, #0]
					break;
 80066fe:	e03f      	b.n	8006780 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006700:	4b31      	ldr	r3, [pc, #196]	; (80067c8 <xTaskIncrementTick+0x150>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	429a      	cmp	r2, r3
 8006716:	d203      	bcs.n	8006720 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006718:	4a2e      	ldr	r2, [pc, #184]	; (80067d4 <xTaskIncrementTick+0x15c>)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800671e:	e02f      	b.n	8006780 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	3304      	adds	r3, #4
 8006724:	4618      	mov	r0, r3
 8006726:	f7fe fb71 	bl	8004e0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	3318      	adds	r3, #24
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe fb68 	bl	8004e0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006740:	4b25      	ldr	r3, [pc, #148]	; (80067d8 <xTaskIncrementTick+0x160>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	429a      	cmp	r2, r3
 8006746:	d903      	bls.n	8006750 <xTaskIncrementTick+0xd8>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	4a22      	ldr	r2, [pc, #136]	; (80067d8 <xTaskIncrementTick+0x160>)
 800674e:	6013      	str	r3, [r2, #0]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4a1f      	ldr	r2, [pc, #124]	; (80067dc <xTaskIncrementTick+0x164>)
 800675e:	441a      	add	r2, r3
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	3304      	adds	r3, #4
 8006764:	4619      	mov	r1, r3
 8006766:	4610      	mov	r0, r2
 8006768:	f7fe faf3 	bl	8004d52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006770:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <xTaskIncrementTick+0x168>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	429a      	cmp	r2, r3
 8006778:	d3b8      	bcc.n	80066ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800677a:	2301      	movs	r3, #1
 800677c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800677e:	e7b5      	b.n	80066ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006780:	4b17      	ldr	r3, [pc, #92]	; (80067e0 <xTaskIncrementTick+0x168>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006786:	4915      	ldr	r1, [pc, #84]	; (80067dc <xTaskIncrementTick+0x164>)
 8006788:	4613      	mov	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	440b      	add	r3, r1
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d901      	bls.n	800679c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006798:	2301      	movs	r3, #1
 800679a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800679c:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <xTaskIncrementTick+0x16c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d007      	beq.n	80067b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	e004      	b.n	80067b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067aa:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <xTaskIncrementTick+0x170>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3301      	adds	r3, #1
 80067b0:	4a0d      	ldr	r2, [pc, #52]	; (80067e8 <xTaskIncrementTick+0x170>)
 80067b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80067b4:	697b      	ldr	r3, [r7, #20]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000be4 	.word	0x20000be4
 80067c4:	20000bc0 	.word	0x20000bc0
 80067c8:	20000b74 	.word	0x20000b74
 80067cc:	20000b78 	.word	0x20000b78
 80067d0:	20000bd4 	.word	0x20000bd4
 80067d4:	20000bdc 	.word	0x20000bdc
 80067d8:	20000bc4 	.word	0x20000bc4
 80067dc:	200006ec 	.word	0x200006ec
 80067e0:	200006e8 	.word	0x200006e8
 80067e4:	20000bd0 	.word	0x20000bd0
 80067e8:	20000bcc 	.word	0x20000bcc

080067ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067f2:	4b28      	ldr	r3, [pc, #160]	; (8006894 <vTaskSwitchContext+0xa8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067fa:	4b27      	ldr	r3, [pc, #156]	; (8006898 <vTaskSwitchContext+0xac>)
 80067fc:	2201      	movs	r2, #1
 80067fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006800:	e041      	b.n	8006886 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006802:	4b25      	ldr	r3, [pc, #148]	; (8006898 <vTaskSwitchContext+0xac>)
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006808:	4b24      	ldr	r3, [pc, #144]	; (800689c <vTaskSwitchContext+0xb0>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e010      	b.n	8006832 <vTaskSwitchContext+0x46>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10a      	bne.n	800682c <vTaskSwitchContext+0x40>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	607b      	str	r3, [r7, #4]
}
 8006828:	bf00      	nop
 800682a:	e7fe      	b.n	800682a <vTaskSwitchContext+0x3e>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3b01      	subs	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	491b      	ldr	r1, [pc, #108]	; (80068a0 <vTaskSwitchContext+0xb4>)
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4613      	mov	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	440b      	add	r3, r1
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0e4      	beq.n	8006810 <vTaskSwitchContext+0x24>
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4a13      	ldr	r2, [pc, #76]	; (80068a0 <vTaskSwitchContext+0xb4>)
 8006852:	4413      	add	r3, r2
 8006854:	60bb      	str	r3, [r7, #8]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	605a      	str	r2, [r3, #4]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	3308      	adds	r3, #8
 8006868:	429a      	cmp	r2, r3
 800686a:	d104      	bne.n	8006876 <vTaskSwitchContext+0x8a>
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	605a      	str	r2, [r3, #4]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	4a09      	ldr	r2, [pc, #36]	; (80068a4 <vTaskSwitchContext+0xb8>)
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	4a06      	ldr	r2, [pc, #24]	; (800689c <vTaskSwitchContext+0xb0>)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6013      	str	r3, [r2, #0]
}
 8006886:	bf00      	nop
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20000be4 	.word	0x20000be4
 8006898:	20000bd0 	.word	0x20000bd0
 800689c:	20000bc4 	.word	0x20000bc4
 80068a0:	200006ec 	.word	0x200006ec
 80068a4:	200006e8 	.word	0x200006e8

080068a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10a      	bne.n	80068ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	60fb      	str	r3, [r7, #12]
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068ce:	4b07      	ldr	r3, [pc, #28]	; (80068ec <vTaskPlaceOnEventList+0x44>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3318      	adds	r3, #24
 80068d4:	4619      	mov	r1, r3
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7fe fa5f 	bl	8004d9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068dc:	2101      	movs	r1, #1
 80068de:	6838      	ldr	r0, [r7, #0]
 80068e0:	f000 fb7a 	bl	8006fd8 <prvAddCurrentTaskToDelayedList>
}
 80068e4:	bf00      	nop
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	200006e8 	.word	0x200006e8

080068f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10a      	bne.n	8006918 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	617b      	str	r3, [r7, #20]
}
 8006914:	bf00      	nop
 8006916:	e7fe      	b.n	8006916 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006918:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <vTaskPlaceOnEventListRestricted+0x54>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3318      	adds	r3, #24
 800691e:	4619      	mov	r1, r3
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7fe fa16 	bl	8004d52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800692c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006930:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	68b8      	ldr	r0, [r7, #8]
 8006936:	f000 fb4f 	bl	8006fd8 <prvAddCurrentTaskToDelayedList>
	}
 800693a:	bf00      	nop
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	200006e8 	.word	0x200006e8

08006948 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10a      	bne.n	8006974 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	60fb      	str	r3, [r7, #12]
}
 8006970:	bf00      	nop
 8006972:	e7fe      	b.n	8006972 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	3318      	adds	r3, #24
 8006978:	4618      	mov	r0, r3
 800697a:	f7fe fa47 	bl	8004e0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800697e:	4b1e      	ldr	r3, [pc, #120]	; (80069f8 <xTaskRemoveFromEventList+0xb0>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d11d      	bne.n	80069c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	3304      	adds	r3, #4
 800698a:	4618      	mov	r0, r3
 800698c:	f7fe fa3e 	bl	8004e0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	4b19      	ldr	r3, [pc, #100]	; (80069fc <xTaskRemoveFromEventList+0xb4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d903      	bls.n	80069a4 <xTaskRemoveFromEventList+0x5c>
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	4a16      	ldr	r2, [pc, #88]	; (80069fc <xTaskRemoveFromEventList+0xb4>)
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4a13      	ldr	r2, [pc, #76]	; (8006a00 <xTaskRemoveFromEventList+0xb8>)
 80069b2:	441a      	add	r2, r3
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	3304      	adds	r3, #4
 80069b8:	4619      	mov	r1, r3
 80069ba:	4610      	mov	r0, r2
 80069bc:	f7fe f9c9 	bl	8004d52 <vListInsertEnd>
 80069c0:	e005      	b.n	80069ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	3318      	adds	r3, #24
 80069c6:	4619      	mov	r1, r3
 80069c8:	480e      	ldr	r0, [pc, #56]	; (8006a04 <xTaskRemoveFromEventList+0xbc>)
 80069ca:	f7fe f9c2 	bl	8004d52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d2:	4b0d      	ldr	r3, [pc, #52]	; (8006a08 <xTaskRemoveFromEventList+0xc0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	429a      	cmp	r2, r3
 80069da:	d905      	bls.n	80069e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069dc:	2301      	movs	r3, #1
 80069de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <xTaskRemoveFromEventList+0xc4>)
 80069e2:	2201      	movs	r2, #1
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	e001      	b.n	80069ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80069ec:	697b      	ldr	r3, [r7, #20]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000be4 	.word	0x20000be4
 80069fc:	20000bc4 	.word	0x20000bc4
 8006a00:	200006ec 	.word	0x200006ec
 8006a04:	20000b7c 	.word	0x20000b7c
 8006a08:	200006e8 	.word	0x200006e8
 8006a0c:	20000bd0 	.word	0x20000bd0

08006a10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <vTaskInternalSetTimeOutState+0x24>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a20:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <vTaskInternalSetTimeOutState+0x28>)
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	605a      	str	r2, [r3, #4]
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	20000bd4 	.word	0x20000bd4
 8006a38:	20000bc0 	.word	0x20000bc0

08006a3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10a      	bne.n	8006a62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	613b      	str	r3, [r7, #16]
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	60fb      	str	r3, [r7, #12]
}
 8006a7a:	bf00      	nop
 8006a7c:	e7fe      	b.n	8006a7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006a7e:	f000 ff79 	bl	8007974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a82:	4b1d      	ldr	r3, [pc, #116]	; (8006af8 <xTaskCheckForTimeOut+0xbc>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a9a:	d102      	bne.n	8006aa2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61fb      	str	r3, [r7, #28]
 8006aa0:	e023      	b.n	8006aea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b15      	ldr	r3, [pc, #84]	; (8006afc <xTaskCheckForTimeOut+0xc0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d007      	beq.n	8006abe <xTaskCheckForTimeOut+0x82>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d302      	bcc.n	8006abe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	61fb      	str	r3, [r7, #28]
 8006abc:	e015      	b.n	8006aea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d20b      	bcs.n	8006ae0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff ff9b 	bl	8006a10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ada:	2300      	movs	r3, #0
 8006adc:	61fb      	str	r3, [r7, #28]
 8006ade:	e004      	b.n	8006aea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006aea:	f000 ff73 	bl	80079d4 <vPortExitCritical>

	return xReturn;
 8006aee:	69fb      	ldr	r3, [r7, #28]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3720      	adds	r7, #32
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20000bc0 	.word	0x20000bc0
 8006afc:	20000bd4 	.word	0x20000bd4

08006b00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b04:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <vTaskMissedYield+0x14>)
 8006b06:	2201      	movs	r2, #1
 8006b08:	601a      	str	r2, [r3, #0]
}
 8006b0a:	bf00      	nop
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	20000bd0 	.word	0x20000bd0

08006b18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b20:	f000 f852 	bl	8006bc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b24:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <prvIdleTask+0x28>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d9f9      	bls.n	8006b20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b2c:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <prvIdleTask+0x2c>)
 8006b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b3c:	e7f0      	b.n	8006b20 <prvIdleTask+0x8>
 8006b3e:	bf00      	nop
 8006b40:	200006ec 	.word	0x200006ec
 8006b44:	e000ed04 	.word	0xe000ed04

08006b48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b4e:	2300      	movs	r3, #0
 8006b50:	607b      	str	r3, [r7, #4]
 8006b52:	e00c      	b.n	8006b6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4a12      	ldr	r2, [pc, #72]	; (8006ba8 <prvInitialiseTaskLists+0x60>)
 8006b60:	4413      	add	r3, r2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe f8c8 	bl	8004cf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	607b      	str	r3, [r7, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b37      	cmp	r3, #55	; 0x37
 8006b72:	d9ef      	bls.n	8006b54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b74:	480d      	ldr	r0, [pc, #52]	; (8006bac <prvInitialiseTaskLists+0x64>)
 8006b76:	f7fe f8bf 	bl	8004cf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b7a:	480d      	ldr	r0, [pc, #52]	; (8006bb0 <prvInitialiseTaskLists+0x68>)
 8006b7c:	f7fe f8bc 	bl	8004cf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b80:	480c      	ldr	r0, [pc, #48]	; (8006bb4 <prvInitialiseTaskLists+0x6c>)
 8006b82:	f7fe f8b9 	bl	8004cf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b86:	480c      	ldr	r0, [pc, #48]	; (8006bb8 <prvInitialiseTaskLists+0x70>)
 8006b88:	f7fe f8b6 	bl	8004cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b8c:	480b      	ldr	r0, [pc, #44]	; (8006bbc <prvInitialiseTaskLists+0x74>)
 8006b8e:	f7fe f8b3 	bl	8004cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b92:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <prvInitialiseTaskLists+0x78>)
 8006b94:	4a05      	ldr	r2, [pc, #20]	; (8006bac <prvInitialiseTaskLists+0x64>)
 8006b96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <prvInitialiseTaskLists+0x7c>)
 8006b9a:	4a05      	ldr	r2, [pc, #20]	; (8006bb0 <prvInitialiseTaskLists+0x68>)
 8006b9c:	601a      	str	r2, [r3, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	200006ec 	.word	0x200006ec
 8006bac:	20000b4c 	.word	0x20000b4c
 8006bb0:	20000b60 	.word	0x20000b60
 8006bb4:	20000b7c 	.word	0x20000b7c
 8006bb8:	20000b90 	.word	0x20000b90
 8006bbc:	20000ba8 	.word	0x20000ba8
 8006bc0:	20000b74 	.word	0x20000b74
 8006bc4:	20000b78 	.word	0x20000b78

08006bc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bce:	e019      	b.n	8006c04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bd0:	f000 fed0 	bl	8007974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bd4:	4b10      	ldr	r3, [pc, #64]	; (8006c18 <prvCheckTasksWaitingTermination+0x50>)
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3304      	adds	r3, #4
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fe f913 	bl	8004e0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006be6:	4b0d      	ldr	r3, [pc, #52]	; (8006c1c <prvCheckTasksWaitingTermination+0x54>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	4a0b      	ldr	r2, [pc, #44]	; (8006c1c <prvCheckTasksWaitingTermination+0x54>)
 8006bee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <prvCheckTasksWaitingTermination+0x58>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	4a0a      	ldr	r2, [pc, #40]	; (8006c20 <prvCheckTasksWaitingTermination+0x58>)
 8006bf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006bfa:	f000 feeb 	bl	80079d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f810 	bl	8006c24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c04:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <prvCheckTasksWaitingTermination+0x58>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e1      	bne.n	8006bd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20000b90 	.word	0x20000b90
 8006c1c:	20000bbc 	.word	0x20000bbc
 8006c20:	20000ba4 	.word	0x20000ba4

08006c24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d108      	bne.n	8006c48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f001 f888 	bl	8007d50 <vPortFree>
				vPortFree( pxTCB );
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 f885 	bl	8007d50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c46:	e018      	b.n	8006c7a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d103      	bne.n	8006c5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 f87c 	bl	8007d50 <vPortFree>
	}
 8006c58:	e00f      	b.n	8006c7a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d00a      	beq.n	8006c7a <prvDeleteTCB+0x56>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	60fb      	str	r3, [r7, #12]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <prvDeleteTCB+0x54>
	}
 8006c7a:	bf00      	nop
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c8a:	4b0c      	ldr	r3, [pc, #48]	; (8006cbc <prvResetNextTaskUnblockTime+0x38>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c94:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <prvResetNextTaskUnblockTime+0x3c>)
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c9c:	e008      	b.n	8006cb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c9e:	4b07      	ldr	r3, [pc, #28]	; (8006cbc <prvResetNextTaskUnblockTime+0x38>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	4a04      	ldr	r2, [pc, #16]	; (8006cc0 <prvResetNextTaskUnblockTime+0x3c>)
 8006cae:	6013      	str	r3, [r2, #0]
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	20000b74 	.word	0x20000b74
 8006cc0:	20000bdc 	.word	0x20000bdc

08006cc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cca:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <xTaskGetSchedulerState+0x34>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d102      	bne.n	8006cd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	607b      	str	r3, [r7, #4]
 8006cd6:	e008      	b.n	8006cea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cd8:	4b08      	ldr	r3, [pc, #32]	; (8006cfc <xTaskGetSchedulerState+0x38>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d102      	bne.n	8006ce6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	607b      	str	r3, [r7, #4]
 8006ce4:	e001      	b.n	8006cea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006cea:	687b      	ldr	r3, [r7, #4]
	}
 8006cec:	4618      	mov	r0, r3
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	20000bc8 	.word	0x20000bc8
 8006cfc:	20000be4 	.word	0x20000be4

08006d00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d051      	beq.n	8006dba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1a:	4b2a      	ldr	r3, [pc, #168]	; (8006dc4 <xTaskPriorityInherit+0xc4>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d241      	bcs.n	8006da8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	db06      	blt.n	8006d3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d2c:	4b25      	ldr	r3, [pc, #148]	; (8006dc4 <xTaskPriorityInherit+0xc4>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	6959      	ldr	r1, [r3, #20]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4a1f      	ldr	r2, [pc, #124]	; (8006dc8 <xTaskPriorityInherit+0xc8>)
 8006d4c:	4413      	add	r3, r2
 8006d4e:	4299      	cmp	r1, r3
 8006d50:	d122      	bne.n	8006d98 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	3304      	adds	r3, #4
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe f858 	bl	8004e0c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d5c:	4b19      	ldr	r3, [pc, #100]	; (8006dc4 <xTaskPriorityInherit+0xc4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6a:	4b18      	ldr	r3, [pc, #96]	; (8006dcc <xTaskPriorityInherit+0xcc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d903      	bls.n	8006d7a <xTaskPriorityInherit+0x7a>
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d76:	4a15      	ldr	r2, [pc, #84]	; (8006dcc <xTaskPriorityInherit+0xcc>)
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4a10      	ldr	r2, [pc, #64]	; (8006dc8 <xTaskPriorityInherit+0xc8>)
 8006d88:	441a      	add	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4610      	mov	r0, r2
 8006d92:	f7fd ffde 	bl	8004d52 <vListInsertEnd>
 8006d96:	e004      	b.n	8006da2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d98:	4b0a      	ldr	r3, [pc, #40]	; (8006dc4 <xTaskPriorityInherit+0xc4>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006da2:	2301      	movs	r3, #1
 8006da4:	60fb      	str	r3, [r7, #12]
 8006da6:	e008      	b.n	8006dba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dac:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <xTaskPriorityInherit+0xc4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d201      	bcs.n	8006dba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006db6:	2301      	movs	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006dba:	68fb      	ldr	r3, [r7, #12]
	}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	200006e8 	.word	0x200006e8
 8006dc8:	200006ec 	.word	0x200006ec
 8006dcc:	20000bc4 	.word	0x20000bc4

08006dd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d056      	beq.n	8006e94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006de6:	4b2e      	ldr	r3, [pc, #184]	; (8006ea0 <xTaskPriorityDisinherit+0xd0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d00a      	beq.n	8006e06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	60fb      	str	r3, [r7, #12]
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10a      	bne.n	8006e24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	60bb      	str	r3, [r7, #8]
}
 8006e20:	bf00      	nop
 8006e22:	e7fe      	b.n	8006e22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e28:	1e5a      	subs	r2, r3, #1
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d02c      	beq.n	8006e94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d128      	bne.n	8006e94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	3304      	adds	r3, #4
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fd ffe0 	bl	8004e0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e64:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <xTaskPriorityDisinherit+0xd4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d903      	bls.n	8006e74 <xTaskPriorityDisinherit+0xa4>
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	4a0c      	ldr	r2, [pc, #48]	; (8006ea4 <xTaskPriorityDisinherit+0xd4>)
 8006e72:	6013      	str	r3, [r2, #0]
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4a09      	ldr	r2, [pc, #36]	; (8006ea8 <xTaskPriorityDisinherit+0xd8>)
 8006e82:	441a      	add	r2, r3
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	f7fd ff61 	bl	8004d52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e90:	2301      	movs	r3, #1
 8006e92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e94:	697b      	ldr	r3, [r7, #20]
	}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	200006e8 	.word	0x200006e8
 8006ea4:	20000bc4 	.word	0x20000bc4
 8006ea8:	200006ec 	.word	0x200006ec

08006eac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d06a      	beq.n	8006f9a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	60fb      	str	r3, [r7, #12]
}
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d902      	bls.n	8006ef2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	61fb      	str	r3, [r7, #28]
 8006ef0:	e002      	b.n	8006ef8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	69fa      	ldr	r2, [r7, #28]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d04b      	beq.n	8006f9a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d146      	bne.n	8006f9a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f0c:	4b25      	ldr	r3, [pc, #148]	; (8006fa4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d10a      	bne.n	8006f2c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	60bb      	str	r3, [r7, #8]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	69fa      	ldr	r2, [r7, #28]
 8006f36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	db04      	blt.n	8006f4a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	6959      	ldr	r1, [r3, #20]
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4a13      	ldr	r2, [pc, #76]	; (8006fa8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006f5a:	4413      	add	r3, r2
 8006f5c:	4299      	cmp	r1, r3
 8006f5e:	d11c      	bne.n	8006f9a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	3304      	adds	r3, #4
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fd ff51 	bl	8004e0c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6e:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d903      	bls.n	8006f7e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	4a0c      	ldr	r2, [pc, #48]	; (8006fac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4a07      	ldr	r2, [pc, #28]	; (8006fa8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006f8c:	441a      	add	r2, r3
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	3304      	adds	r3, #4
 8006f92:	4619      	mov	r1, r3
 8006f94:	4610      	mov	r0, r2
 8006f96:	f7fd fedc 	bl	8004d52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f9a:	bf00      	nop
 8006f9c:	3720      	adds	r7, #32
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	200006e8 	.word	0x200006e8
 8006fa8:	200006ec 	.word	0x200006ec
 8006fac:	20000bc4 	.word	0x20000bc4

08006fb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006fb4:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d004      	beq.n	8006fc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006fbc:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fc2:	3201      	adds	r2, #1
 8006fc4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006fc6:	4b03      	ldr	r3, [pc, #12]	; (8006fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
	}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	200006e8 	.word	0x200006e8

08006fd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fe2:	4b21      	ldr	r3, [pc, #132]	; (8007068 <prvAddCurrentTaskToDelayedList+0x90>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fe8:	4b20      	ldr	r3, [pc, #128]	; (800706c <prvAddCurrentTaskToDelayedList+0x94>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3304      	adds	r3, #4
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fd ff0c 	bl	8004e0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ffa:	d10a      	bne.n	8007012 <prvAddCurrentTaskToDelayedList+0x3a>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d007      	beq.n	8007012 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007002:	4b1a      	ldr	r3, [pc, #104]	; (800706c <prvAddCurrentTaskToDelayedList+0x94>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3304      	adds	r3, #4
 8007008:	4619      	mov	r1, r3
 800700a:	4819      	ldr	r0, [pc, #100]	; (8007070 <prvAddCurrentTaskToDelayedList+0x98>)
 800700c:	f7fd fea1 	bl	8004d52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007010:	e026      	b.n	8007060 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4413      	add	r3, r2
 8007018:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800701a:	4b14      	ldr	r3, [pc, #80]	; (800706c <prvAddCurrentTaskToDelayedList+0x94>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	429a      	cmp	r2, r3
 8007028:	d209      	bcs.n	800703e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800702a:	4b12      	ldr	r3, [pc, #72]	; (8007074 <prvAddCurrentTaskToDelayedList+0x9c>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	4b0f      	ldr	r3, [pc, #60]	; (800706c <prvAddCurrentTaskToDelayedList+0x94>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3304      	adds	r3, #4
 8007034:	4619      	mov	r1, r3
 8007036:	4610      	mov	r0, r2
 8007038:	f7fd feaf 	bl	8004d9a <vListInsert>
}
 800703c:	e010      	b.n	8007060 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800703e:	4b0e      	ldr	r3, [pc, #56]	; (8007078 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	4b0a      	ldr	r3, [pc, #40]	; (800706c <prvAddCurrentTaskToDelayedList+0x94>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4610      	mov	r0, r2
 800704c:	f7fd fea5 	bl	8004d9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007050:	4b0a      	ldr	r3, [pc, #40]	; (800707c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	429a      	cmp	r2, r3
 8007058:	d202      	bcs.n	8007060 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800705a:	4a08      	ldr	r2, [pc, #32]	; (800707c <prvAddCurrentTaskToDelayedList+0xa4>)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	6013      	str	r3, [r2, #0]
}
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000bc0 	.word	0x20000bc0
 800706c:	200006e8 	.word	0x200006e8
 8007070:	20000ba8 	.word	0x20000ba8
 8007074:	20000b78 	.word	0x20000b78
 8007078:	20000b74 	.word	0x20000b74
 800707c:	20000bdc 	.word	0x20000bdc

08007080 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08a      	sub	sp, #40	; 0x28
 8007084:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007086:	2300      	movs	r3, #0
 8007088:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800708a:	f000 fb07 	bl	800769c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800708e:	4b1c      	ldr	r3, [pc, #112]	; (8007100 <xTimerCreateTimerTask+0x80>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d021      	beq.n	80070da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800709e:	1d3a      	adds	r2, r7, #4
 80070a0:	f107 0108 	add.w	r1, r7, #8
 80070a4:	f107 030c 	add.w	r3, r7, #12
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fd fe0b 	bl	8004cc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	9202      	str	r2, [sp, #8]
 80070b6:	9301      	str	r3, [sp, #4]
 80070b8:	2302      	movs	r3, #2
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	2300      	movs	r3, #0
 80070be:	460a      	mov	r2, r1
 80070c0:	4910      	ldr	r1, [pc, #64]	; (8007104 <xTimerCreateTimerTask+0x84>)
 80070c2:	4811      	ldr	r0, [pc, #68]	; (8007108 <xTimerCreateTimerTask+0x88>)
 80070c4:	f7fe feda 	bl	8005e7c <xTaskCreateStatic>
 80070c8:	4603      	mov	r3, r0
 80070ca:	4a10      	ldr	r2, [pc, #64]	; (800710c <xTimerCreateTimerTask+0x8c>)
 80070cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070ce:	4b0f      	ldr	r3, [pc, #60]	; (800710c <xTimerCreateTimerTask+0x8c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070d6:	2301      	movs	r3, #1
 80070d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	613b      	str	r3, [r7, #16]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80070f6:	697b      	ldr	r3, [r7, #20]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	20000c18 	.word	0x20000c18
 8007104:	080081a0 	.word	0x080081a0
 8007108:	08007245 	.word	0x08007245
 800710c:	20000c1c 	.word	0x20000c1c

08007110 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08a      	sub	sp, #40	; 0x28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800711e:	2300      	movs	r3, #0
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	623b      	str	r3, [r7, #32]
}
 800713a:	bf00      	nop
 800713c:	e7fe      	b.n	800713c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800713e:	4b1a      	ldr	r3, [pc, #104]	; (80071a8 <xTimerGenericCommand+0x98>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d02a      	beq.n	800719c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b05      	cmp	r3, #5
 8007156:	dc18      	bgt.n	800718a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007158:	f7ff fdb4 	bl	8006cc4 <xTaskGetSchedulerState>
 800715c:	4603      	mov	r3, r0
 800715e:	2b02      	cmp	r3, #2
 8007160:	d109      	bne.n	8007176 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007162:	4b11      	ldr	r3, [pc, #68]	; (80071a8 <xTimerGenericCommand+0x98>)
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	f107 0110 	add.w	r1, r7, #16
 800716a:	2300      	movs	r3, #0
 800716c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800716e:	f7fe f81f 	bl	80051b0 <xQueueGenericSend>
 8007172:	6278      	str	r0, [r7, #36]	; 0x24
 8007174:	e012      	b.n	800719c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007176:	4b0c      	ldr	r3, [pc, #48]	; (80071a8 <xTimerGenericCommand+0x98>)
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	f107 0110 	add.w	r1, r7, #16
 800717e:	2300      	movs	r3, #0
 8007180:	2200      	movs	r2, #0
 8007182:	f7fe f815 	bl	80051b0 <xQueueGenericSend>
 8007186:	6278      	str	r0, [r7, #36]	; 0x24
 8007188:	e008      	b.n	800719c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800718a:	4b07      	ldr	r3, [pc, #28]	; (80071a8 <xTimerGenericCommand+0x98>)
 800718c:	6818      	ldr	r0, [r3, #0]
 800718e:	f107 0110 	add.w	r1, r7, #16
 8007192:	2300      	movs	r3, #0
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	f7fe f909 	bl	80053ac <xQueueGenericSendFromISR>
 800719a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3728      	adds	r7, #40	; 0x28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000c18 	.word	0x20000c18

080071ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b6:	4b22      	ldr	r3, [pc, #136]	; (8007240 <prvProcessExpiredTimer+0x94>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fd fe21 	bl	8004e0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d022      	beq.n	800721e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	699a      	ldr	r2, [r3, #24]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	18d1      	adds	r1, r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	6978      	ldr	r0, [r7, #20]
 80071e6:	f000 f8d1 	bl	800738c <prvInsertTimerInActiveList>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01f      	beq.n	8007230 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071f0:	2300      	movs	r3, #0
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	2300      	movs	r3, #0
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	2100      	movs	r1, #0
 80071fa:	6978      	ldr	r0, [r7, #20]
 80071fc:	f7ff ff88 	bl	8007110 <xTimerGenericCommand>
 8007200:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d113      	bne.n	8007230 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	60fb      	str	r3, [r7, #12]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007224:	f023 0301 	bic.w	r3, r3, #1
 8007228:	b2da      	uxtb	r2, r3
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	6978      	ldr	r0, [r7, #20]
 8007236:	4798      	blx	r3
}
 8007238:	bf00      	nop
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20000c10 	.word	0x20000c10

08007244 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800724c:	f107 0308 	add.w	r3, r7, #8
 8007250:	4618      	mov	r0, r3
 8007252:	f000 f857 	bl	8007304 <prvGetNextExpireTime>
 8007256:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4619      	mov	r1, r3
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 f803 	bl	8007268 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007262:	f000 f8d5 	bl	8007410 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007266:	e7f1      	b.n	800724c <prvTimerTask+0x8>

08007268 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007272:	f7ff f945 	bl	8006500 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007276:	f107 0308 	add.w	r3, r7, #8
 800727a:	4618      	mov	r0, r3
 800727c:	f000 f866 	bl	800734c <prvSampleTimeNow>
 8007280:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d130      	bne.n	80072ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <prvProcessTimerOrBlockTask+0x3c>
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	429a      	cmp	r2, r3
 8007294:	d806      	bhi.n	80072a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007296:	f7ff f941 	bl	800651c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800729a:	68f9      	ldr	r1, [r7, #12]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff ff85 	bl	80071ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072a2:	e024      	b.n	80072ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d008      	beq.n	80072bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072aa:	4b13      	ldr	r3, [pc, #76]	; (80072f8 <prvProcessTimerOrBlockTask+0x90>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <prvProcessTimerOrBlockTask+0x50>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <prvProcessTimerOrBlockTask+0x52>
 80072b8:	2300      	movs	r3, #0
 80072ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072bc:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <prvProcessTimerOrBlockTask+0x94>)
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	4619      	mov	r1, r3
 80072ca:	f7fe fda3 	bl	8005e14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072ce:	f7ff f925 	bl	800651c <xTaskResumeAll>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072d8:	4b09      	ldr	r3, [pc, #36]	; (8007300 <prvProcessTimerOrBlockTask+0x98>)
 80072da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	f3bf 8f6f 	isb	sy
}
 80072e8:	e001      	b.n	80072ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072ea:	f7ff f917 	bl	800651c <xTaskResumeAll>
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000c14 	.word	0x20000c14
 80072fc:	20000c18 	.word	0x20000c18
 8007300:	e000ed04 	.word	0xe000ed04

08007304 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800730c:	4b0e      	ldr	r3, [pc, #56]	; (8007348 <prvGetNextExpireTime+0x44>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <prvGetNextExpireTime+0x16>
 8007316:	2201      	movs	r2, #1
 8007318:	e000      	b.n	800731c <prvGetNextExpireTime+0x18>
 800731a:	2200      	movs	r2, #0
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d105      	bne.n	8007334 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007328:	4b07      	ldr	r3, [pc, #28]	; (8007348 <prvGetNextExpireTime+0x44>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	e001      	b.n	8007338 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007338:	68fb      	ldr	r3, [r7, #12]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	20000c10 	.word	0x20000c10

0800734c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007354:	f7ff f980 	bl	8006658 <xTaskGetTickCount>
 8007358:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800735a:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <prvSampleTimeNow+0x3c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	429a      	cmp	r2, r3
 8007362:	d205      	bcs.n	8007370 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007364:	f000 f936 	bl	80075d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	e002      	b.n	8007376 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007376:	4a04      	ldr	r2, [pc, #16]	; (8007388 <prvSampleTimeNow+0x3c>)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800737c:	68fb      	ldr	r3, [r7, #12]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000c20 	.word	0x20000c20

0800738c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d812      	bhi.n	80073d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	1ad2      	subs	r2, r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d302      	bcc.n	80073c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073c0:	2301      	movs	r3, #1
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	e01b      	b.n	80073fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073c6:	4b10      	ldr	r3, [pc, #64]	; (8007408 <prvInsertTimerInActiveList+0x7c>)
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3304      	adds	r3, #4
 80073ce:	4619      	mov	r1, r3
 80073d0:	4610      	mov	r0, r2
 80073d2:	f7fd fce2 	bl	8004d9a <vListInsert>
 80073d6:	e012      	b.n	80073fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d206      	bcs.n	80073ee <prvInsertTimerInActiveList+0x62>
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d302      	bcc.n	80073ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073e8:	2301      	movs	r3, #1
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	e007      	b.n	80073fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073ee:	4b07      	ldr	r3, [pc, #28]	; (800740c <prvInsertTimerInActiveList+0x80>)
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f7fd fcce 	bl	8004d9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073fe:	697b      	ldr	r3, [r7, #20]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20000c14 	.word	0x20000c14
 800740c:	20000c10 	.word	0x20000c10

08007410 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08e      	sub	sp, #56	; 0x38
 8007414:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007416:	e0ca      	b.n	80075ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	da18      	bge.n	8007450 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800741e:	1d3b      	adds	r3, r7, #4
 8007420:	3304      	adds	r3, #4
 8007422:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	61fb      	str	r3, [r7, #28]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007446:	6850      	ldr	r0, [r2, #4]
 8007448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800744a:	6892      	ldr	r2, [r2, #8]
 800744c:	4611      	mov	r1, r2
 800744e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f2c0 80aa 	blt.w	80075ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d004      	beq.n	800746e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	3304      	adds	r3, #4
 8007468:	4618      	mov	r0, r3
 800746a:	f7fd fccf 	bl	8004e0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800746e:	463b      	mov	r3, r7
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff ff6b 	bl	800734c <prvSampleTimeNow>
 8007476:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b09      	cmp	r3, #9
 800747c:	f200 8097 	bhi.w	80075ae <prvProcessReceivedCommands+0x19e>
 8007480:	a201      	add	r2, pc, #4	; (adr r2, 8007488 <prvProcessReceivedCommands+0x78>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	080074b1 	.word	0x080074b1
 800748c:	080074b1 	.word	0x080074b1
 8007490:	080074b1 	.word	0x080074b1
 8007494:	08007525 	.word	0x08007525
 8007498:	08007539 	.word	0x08007539
 800749c:	08007583 	.word	0x08007583
 80074a0:	080074b1 	.word	0x080074b1
 80074a4:	080074b1 	.word	0x080074b1
 80074a8:	08007525 	.word	0x08007525
 80074ac:	08007539 	.word	0x08007539
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074b6:	f043 0301 	orr.w	r3, r3, #1
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	18d1      	adds	r1, r2, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d0:	f7ff ff5c 	bl	800738c <prvInsertTimerInActiveList>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d069      	beq.n	80075ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074e8:	f003 0304 	and.w	r3, r3, #4
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d05e      	beq.n	80075ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	441a      	add	r2, r3
 80074f8:	2300      	movs	r3, #0
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	2300      	movs	r3, #0
 80074fe:	2100      	movs	r1, #0
 8007500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007502:	f7ff fe05 	bl	8007110 <xTimerGenericCommand>
 8007506:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d14f      	bne.n	80075ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	61bb      	str	r3, [r7, #24]
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800752a:	f023 0301 	bic.w	r3, r3, #1
 800752e:	b2da      	uxtb	r2, r3
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007536:	e03a      	b.n	80075ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	b2da      	uxtb	r2, r3
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10a      	bne.n	800756e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	617b      	str	r3, [r7, #20]
}
 800756a:	bf00      	nop
 800756c:	e7fe      	b.n	800756c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	18d1      	adds	r1, r2, r3
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800757c:	f7ff ff06 	bl	800738c <prvInsertTimerInActiveList>
					break;
 8007580:	e015      	b.n	80075ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d103      	bne.n	8007598 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007592:	f000 fbdd 	bl	8007d50 <vPortFree>
 8007596:	e00a      	b.n	80075ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800759e:	f023 0301 	bic.w	r3, r3, #1
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075aa:	e000      	b.n	80075ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80075ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075ae:	4b08      	ldr	r3, [pc, #32]	; (80075d0 <prvProcessReceivedCommands+0x1c0>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	1d39      	adds	r1, r7, #4
 80075b4:	2200      	movs	r2, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe f820 	bl	80055fc <xQueueReceive>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f47f af2a 	bne.w	8007418 <prvProcessReceivedCommands+0x8>
	}
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	3730      	adds	r7, #48	; 0x30
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20000c18 	.word	0x20000c18

080075d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075da:	e048      	b.n	800766e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075dc:	4b2d      	ldr	r3, [pc, #180]	; (8007694 <prvSwitchTimerLists+0xc0>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075e6:	4b2b      	ldr	r3, [pc, #172]	; (8007694 <prvSwitchTimerLists+0xc0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fd fc09 	bl	8004e0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b00      	cmp	r3, #0
 800760e:	d02e      	beq.n	800766e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4413      	add	r3, r2
 8007618:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	429a      	cmp	r2, r3
 8007620:	d90e      	bls.n	8007640 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800762e:	4b19      	ldr	r3, [pc, #100]	; (8007694 <prvSwitchTimerLists+0xc0>)
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3304      	adds	r3, #4
 8007636:	4619      	mov	r1, r3
 8007638:	4610      	mov	r0, r2
 800763a:	f7fd fbae 	bl	8004d9a <vListInsert>
 800763e:	e016      	b.n	800766e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007640:	2300      	movs	r3, #0
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	2300      	movs	r3, #0
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	2100      	movs	r1, #0
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f7ff fd60 	bl	8007110 <xTimerGenericCommand>
 8007650:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	603b      	str	r3, [r7, #0]
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <prvSwitchTimerLists+0xc0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1b1      	bne.n	80075dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007678:	4b06      	ldr	r3, [pc, #24]	; (8007694 <prvSwitchTimerLists+0xc0>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800767e:	4b06      	ldr	r3, [pc, #24]	; (8007698 <prvSwitchTimerLists+0xc4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a04      	ldr	r2, [pc, #16]	; (8007694 <prvSwitchTimerLists+0xc0>)
 8007684:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007686:	4a04      	ldr	r2, [pc, #16]	; (8007698 <prvSwitchTimerLists+0xc4>)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	6013      	str	r3, [r2, #0]
}
 800768c:	bf00      	nop
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	20000c10 	.word	0x20000c10
 8007698:	20000c14 	.word	0x20000c14

0800769c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076a2:	f000 f967 	bl	8007974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076a6:	4b15      	ldr	r3, [pc, #84]	; (80076fc <prvCheckForValidListAndQueue+0x60>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d120      	bne.n	80076f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076ae:	4814      	ldr	r0, [pc, #80]	; (8007700 <prvCheckForValidListAndQueue+0x64>)
 80076b0:	f7fd fb22 	bl	8004cf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076b4:	4813      	ldr	r0, [pc, #76]	; (8007704 <prvCheckForValidListAndQueue+0x68>)
 80076b6:	f7fd fb1f 	bl	8004cf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076ba:	4b13      	ldr	r3, [pc, #76]	; (8007708 <prvCheckForValidListAndQueue+0x6c>)
 80076bc:	4a10      	ldr	r2, [pc, #64]	; (8007700 <prvCheckForValidListAndQueue+0x64>)
 80076be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076c0:	4b12      	ldr	r3, [pc, #72]	; (800770c <prvCheckForValidListAndQueue+0x70>)
 80076c2:	4a10      	ldr	r2, [pc, #64]	; (8007704 <prvCheckForValidListAndQueue+0x68>)
 80076c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076c6:	2300      	movs	r3, #0
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	4b11      	ldr	r3, [pc, #68]	; (8007710 <prvCheckForValidListAndQueue+0x74>)
 80076cc:	4a11      	ldr	r2, [pc, #68]	; (8007714 <prvCheckForValidListAndQueue+0x78>)
 80076ce:	2110      	movs	r1, #16
 80076d0:	200a      	movs	r0, #10
 80076d2:	f7fd fc2d 	bl	8004f30 <xQueueGenericCreateStatic>
 80076d6:	4603      	mov	r3, r0
 80076d8:	4a08      	ldr	r2, [pc, #32]	; (80076fc <prvCheckForValidListAndQueue+0x60>)
 80076da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076dc:	4b07      	ldr	r3, [pc, #28]	; (80076fc <prvCheckForValidListAndQueue+0x60>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <prvCheckForValidListAndQueue+0x60>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	490b      	ldr	r1, [pc, #44]	; (8007718 <prvCheckForValidListAndQueue+0x7c>)
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fb3e 	bl	8005d6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076f0:	f000 f970 	bl	80079d4 <vPortExitCritical>
}
 80076f4:	bf00      	nop
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20000c18 	.word	0x20000c18
 8007700:	20000be8 	.word	0x20000be8
 8007704:	20000bfc 	.word	0x20000bfc
 8007708:	20000c10 	.word	0x20000c10
 800770c:	20000c14 	.word	0x20000c14
 8007710:	20000cc4 	.word	0x20000cc4
 8007714:	20000c24 	.word	0x20000c24
 8007718:	080081a8 	.word	0x080081a8

0800771c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3b04      	subs	r3, #4
 800772c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3b04      	subs	r3, #4
 800773a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f023 0201 	bic.w	r2, r3, #1
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3b04      	subs	r3, #4
 800774a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800774c:	4a0c      	ldr	r2, [pc, #48]	; (8007780 <pxPortInitialiseStack+0x64>)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3b14      	subs	r3, #20
 8007756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3b04      	subs	r3, #4
 8007762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f06f 0202 	mvn.w	r2, #2
 800776a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3b20      	subs	r3, #32
 8007770:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007772:	68fb      	ldr	r3, [r7, #12]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	08007785 	.word	0x08007785

08007784 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <prvTaskExitError+0x54>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007796:	d00a      	beq.n	80077ae <prvTaskExitError+0x2a>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	60fb      	str	r3, [r7, #12]
}
 80077aa:	bf00      	nop
 80077ac:	e7fe      	b.n	80077ac <prvTaskExitError+0x28>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	60bb      	str	r3, [r7, #8]
}
 80077c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077c2:	bf00      	nop
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0fc      	beq.n	80077c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077ca:	bf00      	nop
 80077cc:	bf00      	nop
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	2000000c 	.word	0x2000000c
 80077dc:	00000000 	.word	0x00000000

080077e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077e0:	4b07      	ldr	r3, [pc, #28]	; (8007800 <pxCurrentTCBConst2>)
 80077e2:	6819      	ldr	r1, [r3, #0]
 80077e4:	6808      	ldr	r0, [r1, #0]
 80077e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ea:	f380 8809 	msr	PSP, r0
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f04f 0000 	mov.w	r0, #0
 80077f6:	f380 8811 	msr	BASEPRI, r0
 80077fa:	4770      	bx	lr
 80077fc:	f3af 8000 	nop.w

08007800 <pxCurrentTCBConst2>:
 8007800:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop

08007808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007808:	4808      	ldr	r0, [pc, #32]	; (800782c <prvPortStartFirstTask+0x24>)
 800780a:	6800      	ldr	r0, [r0, #0]
 800780c:	6800      	ldr	r0, [r0, #0]
 800780e:	f380 8808 	msr	MSP, r0
 8007812:	f04f 0000 	mov.w	r0, #0
 8007816:	f380 8814 	msr	CONTROL, r0
 800781a:	b662      	cpsie	i
 800781c:	b661      	cpsie	f
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	df00      	svc	0
 8007828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800782a:	bf00      	nop
 800782c:	e000ed08 	.word	0xe000ed08

08007830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007836:	4b46      	ldr	r3, [pc, #280]	; (8007950 <xPortStartScheduler+0x120>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a46      	ldr	r2, [pc, #280]	; (8007954 <xPortStartScheduler+0x124>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d10a      	bne.n	8007856 <xPortStartScheduler+0x26>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	613b      	str	r3, [r7, #16]
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007856:	4b3e      	ldr	r3, [pc, #248]	; (8007950 <xPortStartScheduler+0x120>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a3f      	ldr	r2, [pc, #252]	; (8007958 <xPortStartScheduler+0x128>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d10a      	bne.n	8007876 <xPortStartScheduler+0x46>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	60fb      	str	r3, [r7, #12]
}
 8007872:	bf00      	nop
 8007874:	e7fe      	b.n	8007874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007876:	4b39      	ldr	r3, [pc, #228]	; (800795c <xPortStartScheduler+0x12c>)
 8007878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	22ff      	movs	r2, #255	; 0xff
 8007886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007898:	b2da      	uxtb	r2, r3
 800789a:	4b31      	ldr	r3, [pc, #196]	; (8007960 <xPortStartScheduler+0x130>)
 800789c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800789e:	4b31      	ldr	r3, [pc, #196]	; (8007964 <xPortStartScheduler+0x134>)
 80078a0:	2207      	movs	r2, #7
 80078a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078a4:	e009      	b.n	80078ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80078a6:	4b2f      	ldr	r3, [pc, #188]	; (8007964 <xPortStartScheduler+0x134>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	4a2d      	ldr	r2, [pc, #180]	; (8007964 <xPortStartScheduler+0x134>)
 80078ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078ba:	78fb      	ldrb	r3, [r7, #3]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c2:	2b80      	cmp	r3, #128	; 0x80
 80078c4:	d0ef      	beq.n	80078a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078c6:	4b27      	ldr	r3, [pc, #156]	; (8007964 <xPortStartScheduler+0x134>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f1c3 0307 	rsb	r3, r3, #7
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	d00a      	beq.n	80078e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	60bb      	str	r3, [r7, #8]
}
 80078e4:	bf00      	nop
 80078e6:	e7fe      	b.n	80078e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078e8:	4b1e      	ldr	r3, [pc, #120]	; (8007964 <xPortStartScheduler+0x134>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	021b      	lsls	r3, r3, #8
 80078ee:	4a1d      	ldr	r2, [pc, #116]	; (8007964 <xPortStartScheduler+0x134>)
 80078f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078f2:	4b1c      	ldr	r3, [pc, #112]	; (8007964 <xPortStartScheduler+0x134>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078fa:	4a1a      	ldr	r2, [pc, #104]	; (8007964 <xPortStartScheduler+0x134>)
 80078fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	b2da      	uxtb	r2, r3
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007906:	4b18      	ldr	r3, [pc, #96]	; (8007968 <xPortStartScheduler+0x138>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a17      	ldr	r2, [pc, #92]	; (8007968 <xPortStartScheduler+0x138>)
 800790c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007912:	4b15      	ldr	r3, [pc, #84]	; (8007968 <xPortStartScheduler+0x138>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a14      	ldr	r2, [pc, #80]	; (8007968 <xPortStartScheduler+0x138>)
 8007918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800791c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800791e:	f000 f8dd 	bl	8007adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007922:	4b12      	ldr	r3, [pc, #72]	; (800796c <xPortStartScheduler+0x13c>)
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007928:	f000 f8fc 	bl	8007b24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800792c:	4b10      	ldr	r3, [pc, #64]	; (8007970 <xPortStartScheduler+0x140>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a0f      	ldr	r2, [pc, #60]	; (8007970 <xPortStartScheduler+0x140>)
 8007932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007938:	f7ff ff66 	bl	8007808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800793c:	f7fe ff56 	bl	80067ec <vTaskSwitchContext>
	prvTaskExitError();
 8007940:	f7ff ff20 	bl	8007784 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	e000ed00 	.word	0xe000ed00
 8007954:	410fc271 	.word	0x410fc271
 8007958:	410fc270 	.word	0x410fc270
 800795c:	e000e400 	.word	0xe000e400
 8007960:	20000d14 	.word	0x20000d14
 8007964:	20000d18 	.word	0x20000d18
 8007968:	e000ed20 	.word	0xe000ed20
 800796c:	2000000c 	.word	0x2000000c
 8007970:	e000ef34 	.word	0xe000ef34

08007974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	607b      	str	r3, [r7, #4]
}
 800798c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800798e:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <vPortEnterCritical+0x58>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3301      	adds	r3, #1
 8007994:	4a0d      	ldr	r2, [pc, #52]	; (80079cc <vPortEnterCritical+0x58>)
 8007996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007998:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <vPortEnterCritical+0x58>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d10f      	bne.n	80079c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079a0:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <vPortEnterCritical+0x5c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	603b      	str	r3, [r7, #0]
}
 80079bc:	bf00      	nop
 80079be:	e7fe      	b.n	80079be <vPortEnterCritical+0x4a>
	}
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	2000000c 	.word	0x2000000c
 80079d0:	e000ed04 	.word	0xe000ed04

080079d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079da:	4b12      	ldr	r3, [pc, #72]	; (8007a24 <vPortExitCritical+0x50>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <vPortExitCritical+0x24>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	607b      	str	r3, [r7, #4]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079f8:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <vPortExitCritical+0x50>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	4a09      	ldr	r2, [pc, #36]	; (8007a24 <vPortExitCritical+0x50>)
 8007a00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a02:	4b08      	ldr	r3, [pc, #32]	; (8007a24 <vPortExitCritical+0x50>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d105      	bne.n	8007a16 <vPortExitCritical+0x42>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	f383 8811 	msr	BASEPRI, r3
}
 8007a14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	2000000c 	.word	0x2000000c
	...

08007a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a30:	f3ef 8009 	mrs	r0, PSP
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <pxCurrentTCBConst>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	f01e 0f10 	tst.w	lr, #16
 8007a40:	bf08      	it	eq
 8007a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4a:	6010      	str	r0, [r2, #0]
 8007a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a54:	f380 8811 	msr	BASEPRI, r0
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f7fe fec4 	bl	80067ec <vTaskSwitchContext>
 8007a64:	f04f 0000 	mov.w	r0, #0
 8007a68:	f380 8811 	msr	BASEPRI, r0
 8007a6c:	bc09      	pop	{r0, r3}
 8007a6e:	6819      	ldr	r1, [r3, #0]
 8007a70:	6808      	ldr	r0, [r1, #0]
 8007a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a76:	f01e 0f10 	tst.w	lr, #16
 8007a7a:	bf08      	it	eq
 8007a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a80:	f380 8809 	msr	PSP, r0
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	f3af 8000 	nop.w

08007a90 <pxCurrentTCBConst>:
 8007a90:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop

08007a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	607b      	str	r3, [r7, #4]
}
 8007ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ab2:	f7fe fde1 	bl	8006678 <xTaskIncrementTick>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007abc:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <xPortSysTickHandler+0x40>)
 8007abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	f383 8811 	msr	BASEPRI, r3
}
 8007ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ae0:	4b0b      	ldr	r3, [pc, #44]	; (8007b10 <vPortSetupTimerInterrupt+0x34>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <vPortSetupTimerInterrupt+0x38>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007aec:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <vPortSetupTimerInterrupt+0x3c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <vPortSetupTimerInterrupt+0x40>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	099b      	lsrs	r3, r3, #6
 8007af8:	4a09      	ldr	r2, [pc, #36]	; (8007b20 <vPortSetupTimerInterrupt+0x44>)
 8007afa:	3b01      	subs	r3, #1
 8007afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007afe:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <vPortSetupTimerInterrupt+0x34>)
 8007b00:	2207      	movs	r2, #7
 8007b02:	601a      	str	r2, [r3, #0]
}
 8007b04:	bf00      	nop
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	e000e010 	.word	0xe000e010
 8007b14:	e000e018 	.word	0xe000e018
 8007b18:	20000000 	.word	0x20000000
 8007b1c:	10624dd3 	.word	0x10624dd3
 8007b20:	e000e014 	.word	0xe000e014

08007b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b34 <vPortEnableVFP+0x10>
 8007b28:	6801      	ldr	r1, [r0, #0]
 8007b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b2e:	6001      	str	r1, [r0, #0]
 8007b30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b32:	bf00      	nop
 8007b34:	e000ed88 	.word	0xe000ed88

08007b38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b3e:	f3ef 8305 	mrs	r3, IPSR
 8007b42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b0f      	cmp	r3, #15
 8007b48:	d914      	bls.n	8007b74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b4a:	4a17      	ldr	r2, [pc, #92]	; (8007ba8 <vPortValidateInterruptPriority+0x70>)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4413      	add	r3, r2
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b54:	4b15      	ldr	r3, [pc, #84]	; (8007bac <vPortValidateInterruptPriority+0x74>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	7afa      	ldrb	r2, [r7, #11]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d20a      	bcs.n	8007b74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	607b      	str	r3, [r7, #4]
}
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b74:	4b0e      	ldr	r3, [pc, #56]	; (8007bb0 <vPortValidateInterruptPriority+0x78>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b7c:	4b0d      	ldr	r3, [pc, #52]	; (8007bb4 <vPortValidateInterruptPriority+0x7c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d90a      	bls.n	8007b9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	603b      	str	r3, [r7, #0]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <vPortValidateInterruptPriority+0x60>
	}
 8007b9a:	bf00      	nop
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	e000e3f0 	.word	0xe000e3f0
 8007bac:	20000d14 	.word	0x20000d14
 8007bb0:	e000ed0c 	.word	0xe000ed0c
 8007bb4:	20000d18 	.word	0x20000d18

08007bb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08a      	sub	sp, #40	; 0x28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007bc4:	f7fe fc9c 	bl	8006500 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007bc8:	4b5b      	ldr	r3, [pc, #364]	; (8007d38 <pvPortMalloc+0x180>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007bd0:	f000 f920 	bl	8007e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bd4:	4b59      	ldr	r3, [pc, #356]	; (8007d3c <pvPortMalloc+0x184>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f040 8093 	bne.w	8007d08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01d      	beq.n	8007c24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007be8:	2208      	movs	r2, #8
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4413      	add	r3, r2
 8007bee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d014      	beq.n	8007c24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f023 0307 	bic.w	r3, r3, #7
 8007c00:	3308      	adds	r3, #8
 8007c02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <pvPortMalloc+0x6c>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	617b      	str	r3, [r7, #20]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d06e      	beq.n	8007d08 <pvPortMalloc+0x150>
 8007c2a:	4b45      	ldr	r3, [pc, #276]	; (8007d40 <pvPortMalloc+0x188>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d869      	bhi.n	8007d08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c34:	4b43      	ldr	r3, [pc, #268]	; (8007d44 <pvPortMalloc+0x18c>)
 8007c36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c38:	4b42      	ldr	r3, [pc, #264]	; (8007d44 <pvPortMalloc+0x18c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c3e:	e004      	b.n	8007c4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d903      	bls.n	8007c5c <pvPortMalloc+0xa4>
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1f1      	bne.n	8007c40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c5c:	4b36      	ldr	r3, [pc, #216]	; (8007d38 <pvPortMalloc+0x180>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d050      	beq.n	8007d08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2208      	movs	r2, #8
 8007c6c:	4413      	add	r3, r2
 8007c6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	1ad2      	subs	r2, r2, r3
 8007c80:	2308      	movs	r3, #8
 8007c82:	005b      	lsls	r3, r3, #1
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d91f      	bls.n	8007cc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <pvPortMalloc+0xf8>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	613b      	str	r3, [r7, #16]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	1ad2      	subs	r2, r2, r3
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cc2:	69b8      	ldr	r0, [r7, #24]
 8007cc4:	f000 f908 	bl	8007ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cc8:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <pvPortMalloc+0x188>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	4a1b      	ldr	r2, [pc, #108]	; (8007d40 <pvPortMalloc+0x188>)
 8007cd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007cd6:	4b1a      	ldr	r3, [pc, #104]	; (8007d40 <pvPortMalloc+0x188>)
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	4b1b      	ldr	r3, [pc, #108]	; (8007d48 <pvPortMalloc+0x190>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d203      	bcs.n	8007cea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ce2:	4b17      	ldr	r3, [pc, #92]	; (8007d40 <pvPortMalloc+0x188>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a18      	ldr	r2, [pc, #96]	; (8007d48 <pvPortMalloc+0x190>)
 8007ce8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <pvPortMalloc+0x184>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <pvPortMalloc+0x194>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3301      	adds	r3, #1
 8007d04:	4a11      	ldr	r2, [pc, #68]	; (8007d4c <pvPortMalloc+0x194>)
 8007d06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d08:	f7fe fc08 	bl	800651c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	f003 0307 	and.w	r3, r3, #7
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <pvPortMalloc+0x174>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	60fb      	str	r3, [r7, #12]
}
 8007d28:	bf00      	nop
 8007d2a:	e7fe      	b.n	8007d2a <pvPortMalloc+0x172>
	return pvReturn;
 8007d2c:	69fb      	ldr	r3, [r7, #28]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3728      	adds	r7, #40	; 0x28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	200018dc 	.word	0x200018dc
 8007d3c:	200018f0 	.word	0x200018f0
 8007d40:	200018e0 	.word	0x200018e0
 8007d44:	200018d4 	.word	0x200018d4
 8007d48:	200018e4 	.word	0x200018e4
 8007d4c:	200018e8 	.word	0x200018e8

08007d50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d04d      	beq.n	8007dfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d62:	2308      	movs	r3, #8
 8007d64:	425b      	negs	r3, r3
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4413      	add	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	4b24      	ldr	r3, [pc, #144]	; (8007e08 <vPortFree+0xb8>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10a      	bne.n	8007d94 <vPortFree+0x44>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	60fb      	str	r3, [r7, #12]
}
 8007d90:	bf00      	nop
 8007d92:	e7fe      	b.n	8007d92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00a      	beq.n	8007db2 <vPortFree+0x62>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	60bb      	str	r3, [r7, #8]
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	4b14      	ldr	r3, [pc, #80]	; (8007e08 <vPortFree+0xb8>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4013      	ands	r3, r2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01e      	beq.n	8007dfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d11a      	bne.n	8007dfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	4b0e      	ldr	r3, [pc, #56]	; (8007e08 <vPortFree+0xb8>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	43db      	mvns	r3, r3
 8007dd2:	401a      	ands	r2, r3
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007dd8:	f7fe fb92 	bl	8006500 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <vPortFree+0xbc>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4413      	add	r3, r2
 8007de6:	4a09      	ldr	r2, [pc, #36]	; (8007e0c <vPortFree+0xbc>)
 8007de8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dea:	6938      	ldr	r0, [r7, #16]
 8007dec:	f000 f874 	bl	8007ed8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007df0:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <vPortFree+0xc0>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3301      	adds	r3, #1
 8007df6:	4a06      	ldr	r2, [pc, #24]	; (8007e10 <vPortFree+0xc0>)
 8007df8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dfa:	f7fe fb8f 	bl	800651c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dfe:	bf00      	nop
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	200018f0 	.word	0x200018f0
 8007e0c:	200018e0 	.word	0x200018e0
 8007e10:	200018ec 	.word	0x200018ec

08007e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e20:	4b27      	ldr	r3, [pc, #156]	; (8007ec0 <prvHeapInit+0xac>)
 8007e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f003 0307 	and.w	r3, r3, #7
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00c      	beq.n	8007e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3307      	adds	r3, #7
 8007e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0307 	bic.w	r3, r3, #7
 8007e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	4a1f      	ldr	r2, [pc, #124]	; (8007ec0 <prvHeapInit+0xac>)
 8007e44:	4413      	add	r3, r2
 8007e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e4c:	4a1d      	ldr	r2, [pc, #116]	; (8007ec4 <prvHeapInit+0xb0>)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e52:	4b1c      	ldr	r3, [pc, #112]	; (8007ec4 <prvHeapInit+0xb0>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e60:	2208      	movs	r2, #8
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f023 0307 	bic.w	r3, r3, #7
 8007e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4a15      	ldr	r2, [pc, #84]	; (8007ec8 <prvHeapInit+0xb4>)
 8007e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e76:	4b14      	ldr	r3, [pc, #80]	; (8007ec8 <prvHeapInit+0xb4>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e7e:	4b12      	ldr	r3, [pc, #72]	; (8007ec8 <prvHeapInit+0xb4>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2200      	movs	r2, #0
 8007e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	1ad2      	subs	r2, r2, r3
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e94:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <prvHeapInit+0xb4>)
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	4a0a      	ldr	r2, [pc, #40]	; (8007ecc <prvHeapInit+0xb8>)
 8007ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	4a09      	ldr	r2, [pc, #36]	; (8007ed0 <prvHeapInit+0xbc>)
 8007eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007eac:	4b09      	ldr	r3, [pc, #36]	; (8007ed4 <prvHeapInit+0xc0>)
 8007eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007eb2:	601a      	str	r2, [r3, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	20000d1c 	.word	0x20000d1c
 8007ec4:	200018d4 	.word	0x200018d4
 8007ec8:	200018dc 	.word	0x200018dc
 8007ecc:	200018e4 	.word	0x200018e4
 8007ed0:	200018e0 	.word	0x200018e0
 8007ed4:	200018f0 	.word	0x200018f0

08007ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ee0:	4b28      	ldr	r3, [pc, #160]	; (8007f84 <prvInsertBlockIntoFreeList+0xac>)
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	e002      	b.n	8007eec <prvInsertBlockIntoFreeList+0x14>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d8f7      	bhi.n	8007ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	4413      	add	r3, r2
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d108      	bne.n	8007f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	441a      	add	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	441a      	add	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d118      	bne.n	8007f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	4b15      	ldr	r3, [pc, #84]	; (8007f88 <prvInsertBlockIntoFreeList+0xb0>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d00d      	beq.n	8007f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	441a      	add	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	e008      	b.n	8007f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f56:	4b0c      	ldr	r3, [pc, #48]	; (8007f88 <prvInsertBlockIntoFreeList+0xb0>)
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	e003      	b.n	8007f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d002      	beq.n	8007f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f76:	bf00      	nop
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	200018d4 	.word	0x200018d4
 8007f88:	200018dc 	.word	0x200018dc

08007f8c <__libc_init_array>:
 8007f8c:	b570      	push	{r4, r5, r6, lr}
 8007f8e:	4d0d      	ldr	r5, [pc, #52]	; (8007fc4 <__libc_init_array+0x38>)
 8007f90:	4c0d      	ldr	r4, [pc, #52]	; (8007fc8 <__libc_init_array+0x3c>)
 8007f92:	1b64      	subs	r4, r4, r5
 8007f94:	10a4      	asrs	r4, r4, #2
 8007f96:	2600      	movs	r6, #0
 8007f98:	42a6      	cmp	r6, r4
 8007f9a:	d109      	bne.n	8007fb0 <__libc_init_array+0x24>
 8007f9c:	4d0b      	ldr	r5, [pc, #44]	; (8007fcc <__libc_init_array+0x40>)
 8007f9e:	4c0c      	ldr	r4, [pc, #48]	; (8007fd0 <__libc_init_array+0x44>)
 8007fa0:	f000 f854 	bl	800804c <_init>
 8007fa4:	1b64      	subs	r4, r4, r5
 8007fa6:	10a4      	asrs	r4, r4, #2
 8007fa8:	2600      	movs	r6, #0
 8007faa:	42a6      	cmp	r6, r4
 8007fac:	d105      	bne.n	8007fba <__libc_init_array+0x2e>
 8007fae:	bd70      	pop	{r4, r5, r6, pc}
 8007fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fb4:	4798      	blx	r3
 8007fb6:	3601      	adds	r6, #1
 8007fb8:	e7ee      	b.n	8007f98 <__libc_init_array+0xc>
 8007fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fbe:	4798      	blx	r3
 8007fc0:	3601      	adds	r6, #1
 8007fc2:	e7f2      	b.n	8007faa <__libc_init_array+0x1e>
 8007fc4:	080082d0 	.word	0x080082d0
 8007fc8:	080082d0 	.word	0x080082d0
 8007fcc:	080082d0 	.word	0x080082d0
 8007fd0:	080082d4 	.word	0x080082d4

08007fd4 <memcpy>:
 8007fd4:	440a      	add	r2, r1
 8007fd6:	4291      	cmp	r1, r2
 8007fd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007fdc:	d100      	bne.n	8007fe0 <memcpy+0xc>
 8007fde:	4770      	bx	lr
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fea:	4291      	cmp	r1, r2
 8007fec:	d1f9      	bne.n	8007fe2 <memcpy+0xe>
 8007fee:	bd10      	pop	{r4, pc}

08007ff0 <memset>:
 8007ff0:	4402      	add	r2, r0
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d100      	bne.n	8007ffa <memset+0xa>
 8007ff8:	4770      	bx	lr
 8007ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8007ffe:	e7f9      	b.n	8007ff4 <memset+0x4>

08008000 <strncat>:
 8008000:	b530      	push	{r4, r5, lr}
 8008002:	4604      	mov	r4, r0
 8008004:	7825      	ldrb	r5, [r4, #0]
 8008006:	4623      	mov	r3, r4
 8008008:	3401      	adds	r4, #1
 800800a:	2d00      	cmp	r5, #0
 800800c:	d1fa      	bne.n	8008004 <strncat+0x4>
 800800e:	3a01      	subs	r2, #1
 8008010:	d304      	bcc.n	800801c <strncat+0x1c>
 8008012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008016:	f803 4b01 	strb.w	r4, [r3], #1
 800801a:	b904      	cbnz	r4, 800801e <strncat+0x1e>
 800801c:	bd30      	pop	{r4, r5, pc}
 800801e:	2a00      	cmp	r2, #0
 8008020:	d1f5      	bne.n	800800e <strncat+0xe>
 8008022:	701a      	strb	r2, [r3, #0]
 8008024:	e7f3      	b.n	800800e <strncat+0xe>

08008026 <strncmp>:
 8008026:	b510      	push	{r4, lr}
 8008028:	b16a      	cbz	r2, 8008046 <strncmp+0x20>
 800802a:	3901      	subs	r1, #1
 800802c:	1884      	adds	r4, r0, r2
 800802e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008032:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008036:	4293      	cmp	r3, r2
 8008038:	d103      	bne.n	8008042 <strncmp+0x1c>
 800803a:	42a0      	cmp	r0, r4
 800803c:	d001      	beq.n	8008042 <strncmp+0x1c>
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1f5      	bne.n	800802e <strncmp+0x8>
 8008042:	1a98      	subs	r0, r3, r2
 8008044:	bd10      	pop	{r4, pc}
 8008046:	4610      	mov	r0, r2
 8008048:	e7fc      	b.n	8008044 <strncmp+0x1e>
	...

0800804c <_init>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	bf00      	nop
 8008050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008052:	bc08      	pop	{r3}
 8008054:	469e      	mov	lr, r3
 8008056:	4770      	bx	lr

08008058 <_fini>:
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805a:	bf00      	nop
 800805c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800805e:	bc08      	pop	{r3}
 8008060:	469e      	mov	lr, r3
 8008062:	4770      	bx	lr
