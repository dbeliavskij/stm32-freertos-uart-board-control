
teltonika-iot-academy-task-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007038  08007038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e8  080070e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070f0  080070f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f0  080070f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070f4  080070f4  000170f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080070f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a08  20000010  08007108  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a18  08007108  00021a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3da  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003862  00000000  00000000  0003e41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00041c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  000433c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e3d  00000000  00000000  000449b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184c9  00000000  00000000  000487f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd9f3  00000000  00000000  00060cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015e6b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006204  00000000  00000000  0015e704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007020 	.word	0x08007020

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007020 	.word	0x08007020

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fb3e 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f82e 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8ba 	bl	800065c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f888 	bl	80005fc <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004ec:	f000 f879 	bl	80005e2 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	490c      	ldr	r1, [pc, #48]	; (8000524 <main+0x4c>)
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <main+0x50>)
 80004f6:	f002 fd4f 	bl	8002f98 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fa:	f003 fe1f 	bl	800413c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RxQueue */
  RxQueueHandle = osMessageQueueNew (12, sizeof(uint8_t), &RxQueue_attributes);
 80004fe:	4a0b      	ldr	r2, [pc, #44]	; (800052c <main+0x54>)
 8000500:	2101      	movs	r1, #1
 8000502:	200c      	movs	r0, #12
 8000504:	f003 ff11 	bl	800432a <osMessageQueueNew>
 8000508:	4603      	mov	r3, r0
 800050a:	4a09      	ldr	r2, [pc, #36]	; (8000530 <main+0x58>)
 800050c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UARTRx */
  UARTRxHandle = osThreadNew(StartUARTRx, NULL, &UARTRx_attributes);
 800050e:	4a09      	ldr	r2, [pc, #36]	; (8000534 <main+0x5c>)
 8000510:	2100      	movs	r1, #0
 8000512:	4809      	ldr	r0, [pc, #36]	; (8000538 <main+0x60>)
 8000514:	f003 fe5c 	bl	80041d0 <osThreadNew>
 8000518:	4603      	mov	r3, r0
 800051a:	4a08      	ldr	r2, [pc, #32]	; (800053c <main+0x64>)
 800051c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800051e:	f003 fe31 	bl	8004184 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000522:	e7fe      	b.n	8000522 <main+0x4a>
 8000524:	20001984 	.word	0x20001984
 8000528:	200018fc 	.word	0x200018fc
 800052c:	08007088 	.word	0x08007088
 8000530:	200018f8 	.word	0x200018f8
 8000534:	08007064 	.word	0x08007064
 8000538:	0800079d 	.word	0x0800079d
 800053c:	20001980 	.word	0x20001980

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b096      	sub	sp, #88	; 0x58
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2244      	movs	r2, #68	; 0x44
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f006 fd5e 	bl	8007010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000562:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000566:	f000 fe6b 	bl	8001240 <HAL_PWREx_ControlVoltageScaling>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000570:	f000 f98e 	bl	8000890 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058a:	2301      	movs	r3, #1
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800058e:	230a      	movs	r3, #10
 8000590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000592:	2307      	movs	r3, #7
 8000594:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fea2 	bl	80012ec <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ae:	f000 f96f 	bl	8000890 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	2104      	movs	r1, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fa74 	bl	8001ab8 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d6:	f000 f95b 	bl	8000890 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3758      	adds	r7, #88	; 0x58
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2105      	movs	r1, #5
 80005ea:	2026      	movs	r0, #38	; 0x26
 80005ec:	f000 fbae 	bl	8000d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005f0:	2026      	movs	r0, #38	; 0x26
 80005f2:	f000 fbc7 	bl	8000d84 <HAL_NVIC_EnableIRQ>
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000602:	4a15      	ldr	r2, [pc, #84]	; (8000658 <MX_USART2_UART_Init+0x5c>)
 8000604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000608:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800060c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_USART2_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000640:	f002 fc00 	bl	8002e44 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800064a:	f000 f921 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200018fc 	.word	0x200018fc
 8000658:	40004400 	.word	0x40004400

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b28      	ldr	r3, [pc, #160]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a24      	ldr	r2, [pc, #144]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006da:	f000 fd8b 	bl	80011f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_GPIO_Init+0xc8>)
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_GPIO_Init+0xcc>)
 80006f4:	f000 fbd4 	bl	8000ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006f8:	2320      	movs	r3, #32
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f000 fbc5 	bl	8000ea0 <HAL_GPIO_Init>

}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000
 8000724:	10210000 	.word	0x10210000
 8000728:	48000800 	.word	0x48000800

0800072c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a09      	ldr	r2, [pc, #36]	; (8000760 <HAL_UART_RxCpltCallback+0x34>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d10b      	bne.n	8000756 <HAL_UART_RxCpltCallback+0x2a>
  {

    osMessageQueuePut(RxQueueHandle, &rx_char, 1, 0);
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_UART_RxCpltCallback+0x38>)
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	2300      	movs	r3, #0
 8000744:	2201      	movs	r2, #1
 8000746:	4908      	ldr	r1, [pc, #32]	; (8000768 <HAL_UART_RxCpltCallback+0x3c>)
 8000748:	f003 fe62 	bl	8004410 <osMessageQueuePut>
	HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	4906      	ldr	r1, [pc, #24]	; (8000768 <HAL_UART_RxCpltCallback+0x3c>)
 8000750:	4806      	ldr	r0, [pc, #24]	; (800076c <HAL_UART_RxCpltCallback+0x40>)
 8000752:	f002 fc21 	bl	8002f98 <HAL_UART_Receive_IT>

  }
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40004400 	.word	0x40004400
 8000764:	200018f8 	.word	0x200018f8
 8000768:	20001984 	.word	0x20001984
 800076c:	200018fc 	.word	0x200018fc

08000770 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a05      	ldr	r2, [pc, #20]	; (8000794 <HAL_UART_TxCpltCallback+0x24>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d102      	bne.n	8000788 <HAL_UART_TxCpltCallback+0x18>
	{
		tx_ok = 1;
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_UART_TxCpltCallback+0x28>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
	}

}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	40004400 	.word	0x40004400
 8000798:	2000002c 	.word	0x2000002c

0800079c <StartUARTRx>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTRx */
void StartUARTRx(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t temp_rx;
  char rx_msg[13] = { '\0' };
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	721a      	strb	r2, [r3, #8]
  int rx_inc = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(RxQueueHandle, &temp_rx, NULL, osWaitForever);
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <StartUARTRx+0xc0>)
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	f107 011b 	add.w	r1, r7, #27
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007c4:	2200      	movs	r2, #0
 80007c6:	f003 fe83 	bl	80044d0 <osMessageQueueGet>
    if (rx_inc <11)
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	2b0a      	cmp	r3, #10
 80007ce:	dc07      	bgt.n	80007e0 <StartUARTRx+0x44>
    {

    	rx_msg[rx_inc] = (char)temp_rx;
 80007d0:	7ef9      	ldrb	r1, [r7, #27]
 80007d2:	f107 020c 	add.w	r2, r7, #12
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	4413      	add	r3, r2
 80007da:	460a      	mov	r2, r1
 80007dc:	701a      	strb	r2, [r3, #0]
 80007de:	e005      	b.n	80007ec <StartUARTRx+0x50>
    }

    else
    {

    	rx_msg[11] = '\0';
 80007e0:	2300      	movs	r3, #0
 80007e2:	75fb      	strb	r3, [r7, #23]
    	rx_msg[10] = '\r';
 80007e4:	230d      	movs	r3, #13
 80007e6:	75bb      	strb	r3, [r7, #22]
    	rx_inc = 10;
 80007e8:	230a      	movs	r3, #10
 80007ea:	61fb      	str	r3, [r7, #28]

    }


    if ((rx_msg[rx_inc] == '\r') || (rx_msg[rx_inc] == '\n')) {
 80007ec:	f107 020c 	add.w	r2, r7, #12
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	4413      	add	r3, r2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b0d      	cmp	r3, #13
 80007f8:	d006      	beq.n	8000808 <StartUARTRx+0x6c>
 80007fa:	f107 020c 	add.w	r2, r7, #12
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b0a      	cmp	r3, #10
 8000806:	d125      	bne.n	8000854 <StartUARTRx+0xb8>

    	rx_inc = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
    	strcat(rx_msg, "\n");
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fcdd 	bl	80001d0 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	461a      	mov	r2, r3
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4413      	add	r3, r2
 8000820:	490f      	ldr	r1, [pc, #60]	; (8000860 <StartUARTRx+0xc4>)
 8000822:	461a      	mov	r2, r3
 8000824:	460b      	mov	r3, r1
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	8013      	strh	r3, [r2, #0]
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)rx_msg, 13);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	220d      	movs	r2, #13
 8000830:	4619      	mov	r1, r3
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <StartUARTRx+0xc8>)
 8000834:	f002 fb54 	bl	8002ee0 <HAL_UART_Transmit_IT>
    	while (tx_ok != 1) {
 8000838:	e002      	b.n	8000840 <StartUARTRx+0xa4>
    		osDelay(10);
 800083a:	200a      	movs	r0, #10
 800083c:	f003 fd5a 	bl	80042f4 <osDelay>
    	while (tx_ok != 1) {
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <StartUARTRx+0xcc>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d1f8      	bne.n	800083a <StartUARTRx+0x9e>
    	}

    	rx_msg[0] = '\0';
 8000848:	2300      	movs	r3, #0
 800084a:	733b      	strb	r3, [r7, #12]
    	tx_ok = 0;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <StartUARTRx+0xcc>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
 8000852:	e002      	b.n	800085a <StartUARTRx+0xbe>
    }
    else {
    	rx_inc++;
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	3301      	adds	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
    osMessageQueueGet(RxQueueHandle, &temp_rx, NULL, osWaitForever);
 800085a:	e7ad      	b.n	80007b8 <StartUARTRx+0x1c>
 800085c:	200018f8 	.word	0x200018f8
 8000860:	08007048 	.word	0x08007048
 8000864:	200018fc 	.word	0x200018fc
 8000868:	2000002c 	.word	0x2000002c

0800086c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d101      	bne.n	8000882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800087e:	f000 f98d 	bl	8000b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40001000 	.word	0x40001000

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6613      	str	r3, [r2, #96]	; 0x60
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_MspInit+0x4c>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_MspInit+0x4c>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6593      	str	r3, [r2, #88]	; 0x58
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	210f      	movs	r1, #15
 80008d6:	f06f 0001 	mvn.w	r0, #1
 80008da:	f000 fa37 	bl	8000d4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0ac      	sub	sp, #176	; 0xb0
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2288      	movs	r2, #136	; 0x88
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f006 fb7f 	bl	8007010 <memset>
  if(huart->Instance==USART2)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a21      	ldr	r2, [pc, #132]	; (800099c <HAL_UART_MspInit+0xb0>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d13b      	bne.n	8000994 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800091c:	2302      	movs	r3, #2
 800091e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000920:	2300      	movs	r3, #0
 8000922:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fafd 	bl	8001f28 <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000934:	f7ff ffac 	bl	8000890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_UART_MspInit+0xb4>)
 800093a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093c:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <HAL_UART_MspInit+0xb4>)
 800093e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000942:	6593      	str	r3, [r2, #88]	; 0x58
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_UART_MspInit+0xb4>)
 8000946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <HAL_UART_MspInit+0xb4>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000954:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <HAL_UART_MspInit+0xb4>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_UART_MspInit+0xb4>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000968:	230c      	movs	r3, #12
 800096a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000980:	2307      	movs	r3, #7
 8000982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f000 fa86 	bl	8000ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000994:	bf00      	nop
 8000996:	37b0      	adds	r7, #176	; 0xb0
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40004400 	.word	0x40004400
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	; 0x30
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	2036      	movs	r0, #54	; 0x36
 80009ba:	f000 f9c7 	bl	8000d4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009be:	2036      	movs	r0, #54	; 0x36
 80009c0:	f000 f9e0 	bl	8000d84 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <HAL_InitTick+0x9c>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c8:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <HAL_InitTick+0x9c>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	6593      	str	r3, [r2, #88]	; 0x58
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_InitTick+0x9c>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d4:	f003 0310 	and.w	r3, r3, #16
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009dc:	f107 0210 	add.w	r2, r7, #16
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 fa0c 	bl	8001e04 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ec:	f001 f9de 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 80009f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f4:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <HAL_InitTick+0xa0>)
 80009f6:	fba2 2303 	umull	r2, r3, r2, r3
 80009fa:	0c9b      	lsrs	r3, r3, #18
 80009fc:	3b01      	subs	r3, #1
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_InitTick+0xa4>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <HAL_InitTick+0xa8>)
 8000a04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <HAL_InitTick+0xa4>)
 8000a08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <HAL_InitTick+0xa4>)
 8000a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_InitTick+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <HAL_InitTick+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <HAL_InitTick+0xa4>)
 8000a22:	f001 ff3d 	bl	80028a0 <HAL_TIM_Base_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d104      	bne.n	8000a36 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a2c:	4806      	ldr	r0, [pc, #24]	; (8000a48 <HAL_InitTick+0xa4>)
 8000a2e:	f001 ff99 	bl	8002964 <HAL_TIM_Base_Start_IT>
 8000a32:	4603      	mov	r3, r0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3730      	adds	r7, #48	; 0x30
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	431bde83 	.word	0x431bde83
 8000a48:	20001988 	.word	0x20001988
 8000a4c:	40001000 	.word	0x40001000

08000a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <NMI_Handler+0x4>

08000a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <MemManage_Handler+0x4>

08000a62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <USART2_IRQHandler+0x10>)
 8000a82:	f002 facd 	bl	8003020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200018fc 	.word	0x200018fc

08000a90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <TIM6_DAC_IRQHandler+0x10>)
 8000a96:	f001 ffd5 	bl	8002a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20001988 	.word	0x20001988

08000aa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <SystemInit+0x5c>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <SystemInit+0x5c>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <SystemInit+0x60>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <SystemInit+0x60>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <SystemInit+0x60>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <SystemInit+0x60>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <SystemInit+0x60>)
 8000ad0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ad4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ad8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <SystemInit+0x60>)
 8000adc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ae0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <SystemInit+0x60>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <SystemInit+0x60>)
 8000ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <SystemInit+0x60>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00
 8000b04:	40021000 	.word	0x40021000

08000b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b0c:	f7ff ffca 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b12:	e003      	b.n	8000b1c <LoopCopyDataInit>

08000b14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b1a:	3104      	adds	r1, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b1c:	480a      	ldr	r0, [pc, #40]	; (8000b48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b24:	d3f6      	bcc.n	8000b14 <CopyDataInit>
	ldr	r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b28:	e002      	b.n	8000b30 <LoopFillZerobss>

08000b2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b2c:	f842 3b04 	str.w	r3, [r2], #4

08000b30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <LoopForever+0x16>)
	cmp	r2, r3
 8000b32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b34:	d3f9      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b36:	f006 fa39 	bl	8006fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3a:	f7ff fccd 	bl	80004d8 <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b40:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b44:	080070f8 	.word	0x080070f8
	ldr	r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b4c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000b50:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000b54:	20001a18 	.word	0x20001a18

08000b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_2_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_Init+0x3c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <HAL_Init+0x3c>)
 8000b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b72:	2003      	movs	r0, #3
 8000b74:	f000 f8df 	bl	8000d36 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b78:	200f      	movs	r0, #15
 8000b7a:	f7ff ff13 	bl	80009a4 <HAL_InitTick>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	e001      	b.n	8000b8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b8a:	f7ff fe87 	bl	800089c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40022000 	.word	0x40022000

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	200019d4 	.word	0x200019d4

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200019d4 	.word	0x200019d4

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff4c 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5e:	f7ff ff61 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	6978      	ldr	r0, [r7, #20]
 8000d6a:	f7ff ffb1 	bl	8000cd0 <NVIC_EncodePriority>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff80 	bl	8000c7c <__NVIC_SetPriority>
}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff54 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d008      	beq.n	8000dca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2204      	movs	r2, #4
 8000dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e022      	b.n	8000e10 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 020e 	bic.w	r2, r2, #14
 8000dd8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0201 	bic.w	r2, r2, #1
 8000de8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f003 021c 	and.w	r2, r3, #28
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	2101      	movs	r1, #1
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d005      	beq.n	8000e40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2204      	movs	r2, #4
 8000e38:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
 8000e3e:	e029      	b.n	8000e94 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 020e 	bic.w	r2, r2, #14
 8000e4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0201 	bic.w	r2, r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e64:	f003 021c 	and.w	r2, r3, #28
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e72:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	4798      	blx	r3
    }
  }
  return status;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eae:	e17f      	b.n	80011b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 8171 	beq.w	80011aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d00b      	beq.n	8000ee8 <HAL_GPIO_Init+0x48>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d007      	beq.n	8000ee8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000edc:	2b11      	cmp	r3, #17
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b12      	cmp	r3, #18
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	f003 0201 	and.w	r2, r3, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d118      	bne.n	8000f88 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x128>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b12      	cmp	r3, #18
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	6939      	ldr	r1, [r7, #16]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80ac 	beq.w	80011aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b5f      	ldr	r3, [pc, #380]	; (80011d0 <HAL_GPIO_Init+0x330>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	4a5e      	ldr	r2, [pc, #376]	; (80011d0 <HAL_GPIO_Init+0x330>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6613      	str	r3, [r2, #96]	; 0x60
 800105e:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <HAL_GPIO_Init+0x330>)
 8001060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800106a:	4a5a      	ldr	r2, [pc, #360]	; (80011d4 <HAL_GPIO_Init+0x334>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001094:	d025      	beq.n	80010e2 <HAL_GPIO_Init+0x242>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4f      	ldr	r2, [pc, #316]	; (80011d8 <HAL_GPIO_Init+0x338>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d01f      	beq.n	80010de <HAL_GPIO_Init+0x23e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4e      	ldr	r2, [pc, #312]	; (80011dc <HAL_GPIO_Init+0x33c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d019      	beq.n	80010da <HAL_GPIO_Init+0x23a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4d      	ldr	r2, [pc, #308]	; (80011e0 <HAL_GPIO_Init+0x340>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x236>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4c      	ldr	r2, [pc, #304]	; (80011e4 <HAL_GPIO_Init+0x344>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x232>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4b      	ldr	r2, [pc, #300]	; (80011e8 <HAL_GPIO_Init+0x348>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x22e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4a      	ldr	r2, [pc, #296]	; (80011ec <HAL_GPIO_Init+0x34c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x22a>
 80010c6:	2306      	movs	r3, #6
 80010c8:	e00c      	b.n	80010e4 <HAL_GPIO_Init+0x244>
 80010ca:	2307      	movs	r3, #7
 80010cc:	e00a      	b.n	80010e4 <HAL_GPIO_Init+0x244>
 80010ce:	2305      	movs	r3, #5
 80010d0:	e008      	b.n	80010e4 <HAL_GPIO_Init+0x244>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x244>
 80010d6:	2303      	movs	r3, #3
 80010d8:	e004      	b.n	80010e4 <HAL_GPIO_Init+0x244>
 80010da:	2302      	movs	r3, #2
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_Init+0x244>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <HAL_GPIO_Init+0x244>
 80010e2:	2300      	movs	r3, #0
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	f002 0203 	and.w	r2, r2, #3
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	4093      	lsls	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f4:	4937      	ldr	r1, [pc, #220]	; (80011d4 <HAL_GPIO_Init+0x334>)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <HAL_GPIO_Init+0x350>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001126:	4a32      	ldr	r2, [pc, #200]	; (80011f0 <HAL_GPIO_Init+0x350>)
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800112c:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <HAL_GPIO_Init+0x350>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001150:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <HAL_GPIO_Init+0x350>)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <HAL_GPIO_Init+0x350>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800117a:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <HAL_GPIO_Init+0x350>)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <HAL_GPIO_Init+0x350>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <HAL_GPIO_Init+0x350>)
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f47f ae78 	bne.w	8000eb0 <HAL_GPIO_Init+0x10>
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010000 	.word	0x40010000
 80011d8:	48000400 	.word	0x48000400
 80011dc:	48000800 	.word	0x48000800
 80011e0:	48000c00 	.word	0x48000c00
 80011e4:	48001000 	.word	0x48001000
 80011e8:	48001400 	.word	0x48001400
 80011ec:	48001800 	.word	0x48001800
 80011f0:	40010400 	.word	0x40010400

080011f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
 8001200:	4613      	mov	r3, r2
 8001202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001204:	787b      	ldrb	r3, [r7, #1]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001210:	e002      	b.n	8001218 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_PWREx_GetVoltageRange+0x18>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40007000 	.word	0x40007000

08001240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800124e:	d130      	bne.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800125c:	d038      	beq.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001266:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2232      	movs	r2, #50	; 0x32
 8001274:	fb02 f303 	mul.w	r3, r2, r3
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9b      	lsrs	r3, r3, #18
 8001280:	3301      	adds	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001284:	e002      	b.n	800128c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3b01      	subs	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001298:	d102      	bne.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f2      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ac:	d110      	bne.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e00f      	b.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012be:	d007      	beq.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c8:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40007000 	.word	0x40007000
 80012e4:	20000000 	.word	0x20000000
 80012e8:	431bde83 	.word	0x431bde83

080012ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e3d4      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012fe:	4ba1      	ldr	r3, [pc, #644]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001308:	4b9e      	ldr	r3, [pc, #632]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 80e4 	beq.w	80014e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_RCC_OscConfig+0x4a>
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b0c      	cmp	r3, #12
 800132a:	f040 808b 	bne.w	8001444 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b01      	cmp	r3, #1
 8001332:	f040 8087 	bne.w	8001444 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001336:	4b93      	ldr	r3, [pc, #588]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0x62>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e3ac      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1a      	ldr	r2, [r3, #32]
 8001352:	4b8c      	ldr	r3, [pc, #560]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d004      	beq.n	8001368 <HAL_RCC_OscConfig+0x7c>
 800135e:	4b89      	ldr	r3, [pc, #548]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001366:	e005      	b.n	8001374 <HAL_RCC_OscConfig+0x88>
 8001368:	4b86      	ldr	r3, [pc, #536]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800136a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001374:	4293      	cmp	r3, r2
 8001376:	d223      	bcs.n	80013c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fd73 	bl	8001e68 <RCC_SetFlashLatencyFromMSIRange>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e38d      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138c:	4b7d      	ldr	r3, [pc, #500]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a7c      	ldr	r2, [pc, #496]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b7a      	ldr	r3, [pc, #488]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4977      	ldr	r1, [pc, #476]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013aa:	4b76      	ldr	r3, [pc, #472]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	4972      	ldr	r1, [pc, #456]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
 80013be:	e025      	b.n	800140c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c0:	4b70      	ldr	r3, [pc, #448]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a6f      	ldr	r2, [pc, #444]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b6d      	ldr	r3, [pc, #436]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	496a      	ldr	r1, [pc, #424]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013de:	4b69      	ldr	r3, [pc, #420]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	4965      	ldr	r1, [pc, #404]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fd33 	bl	8001e68 <RCC_SetFlashLatencyFromMSIRange>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e34d      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800140c:	f000 fc36 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001410:	4602      	mov	r2, r0
 8001412:	4b5c      	ldr	r3, [pc, #368]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	495a      	ldr	r1, [pc, #360]	; (8001588 <HAL_RCC_OscConfig+0x29c>)
 800141e:	5ccb      	ldrb	r3, [r1, r3]
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	4a58      	ldr	r2, [pc, #352]	; (800158c <HAL_RCC_OscConfig+0x2a0>)
 800142a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800142c:	4b58      	ldr	r3, [pc, #352]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fab7 	bl	80009a4 <HAL_InitTick>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d052      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	e331      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d032      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800144c:	4b4d      	ldr	r3, [pc, #308]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a4c      	ldr	r2, [pc, #304]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001458:	f7ff fbb4 	bl	8000bc4 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001460:	f7ff fbb0 	bl	8000bc4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e31a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001472:	4b44      	ldr	r3, [pc, #272]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147e:	4b41      	ldr	r3, [pc, #260]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a40      	ldr	r2, [pc, #256]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	493b      	ldr	r1, [pc, #236]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149c:	4b39      	ldr	r3, [pc, #228]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	4936      	ldr	r1, [pc, #216]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
 80014b0:	e01a      	b.n	80014e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a33      	ldr	r2, [pc, #204]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014be:	f7ff fb81 	bl	8000bc4 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c6:	f7ff fb7d 	bl	8000bc4 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e2e7      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x1da>
 80014e4:	e000      	b.n	80014e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d074      	beq.n	80015de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x21a>
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	d10e      	bne.n	800151e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d10b      	bne.n	800151e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d064      	beq.n	80015dc <HAL_RCC_OscConfig+0x2f0>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d160      	bne.n	80015dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e2c4      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x24a>
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a15      	ldr	r2, [pc, #84]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800152e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	e01d      	b.n	8001572 <HAL_RCC_OscConfig+0x286>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153e:	d10c      	bne.n	800155a <HAL_RCC_OscConfig+0x26e>
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e00b      	b.n	8001572 <HAL_RCC_OscConfig+0x286>
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a06      	ldr	r2, [pc, #24]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800156c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001570:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d01c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fb23 	bl	8000bc4 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001580:	e011      	b.n	80015a6 <HAL_RCC_OscConfig+0x2ba>
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	080070a0 	.word	0x080070a0
 800158c:	20000000 	.word	0x20000000
 8001590:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fb16 	bl	8000bc4 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e280      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a6:	4baf      	ldr	r3, [pc, #700]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x2a8>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb06 	bl	8000bc4 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fb02 	bl	8000bc4 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e26c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ce:	4ba5      	ldr	r3, [pc, #660]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x2d0>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d060      	beq.n	80016ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_OscConfig+0x310>
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d119      	bne.n	800162a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d116      	bne.n	800162a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015fc:	4b99      	ldr	r3, [pc, #612]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_OscConfig+0x328>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e249      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b93      	ldr	r3, [pc, #588]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	061b      	lsls	r3, r3, #24
 8001622:	4990      	ldr	r1, [pc, #576]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001628:	e040      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d023      	beq.n	800167a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001632:	4b8c      	ldr	r3, [pc, #560]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a8b      	ldr	r2, [pc, #556]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff fac1 	bl	8000bc4 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff fabd 	bl	8000bc4 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e227      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001658:	4b82      	ldr	r3, [pc, #520]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b7f      	ldr	r3, [pc, #508]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	497c      	ldr	r1, [pc, #496]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	e018      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167a:	4b7a      	ldr	r3, [pc, #488]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a79      	ldr	r2, [pc, #484]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001686:	f7ff fa9d 	bl	8000bc4 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168e:	f7ff fa99 	bl	8000bc4 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e203      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a0:	4b70      	ldr	r3, [pc, #448]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d03c      	beq.n	8001732 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01c      	beq.n	80016fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c0:	4b68      	ldr	r3, [pc, #416]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80016c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c6:	4a67      	ldr	r2, [pc, #412]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff fa78 	bl	8000bc4 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d8:	f7ff fa74 	bl	8000bc4 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1de      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ea:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80016ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ef      	beq.n	80016d8 <HAL_RCC_OscConfig+0x3ec>
 80016f8:	e01b      	b.n	8001732 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fa:	4b5a      	ldr	r3, [pc, #360]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80016fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001700:	4a58      	ldr	r2, [pc, #352]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff fa5b 	bl	8000bc4 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001712:	f7ff fa57 	bl	8000bc4 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1c1      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001724:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1ef      	bne.n	8001712 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80a6 	beq.w	800188c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001744:	4b47      	ldr	r3, [pc, #284]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10d      	bne.n	800176c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	4b44      	ldr	r3, [pc, #272]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	4a43      	ldr	r2, [pc, #268]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175a:	6593      	str	r3, [r2, #88]	; 0x58
 800175c:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001768:	2301      	movs	r3, #1
 800176a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176c:	4b3e      	ldr	r3, [pc, #248]	; (8001868 <HAL_RCC_OscConfig+0x57c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d118      	bne.n	80017aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001778:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <HAL_RCC_OscConfig+0x57c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a3a      	ldr	r2, [pc, #232]	; (8001868 <HAL_RCC_OscConfig+0x57c>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001784:	f7ff fa1e 	bl	8000bc4 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178c:	f7ff fa1a 	bl	8000bc4 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e184      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179e:	4b32      	ldr	r3, [pc, #200]	; (8001868 <HAL_RCC_OscConfig+0x57c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d108      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4d8>
 80017b2:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b8:	4a2a      	ldr	r2, [pc, #168]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c2:	e024      	b.n	800180e <HAL_RCC_OscConfig+0x522>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d110      	bne.n	80017ee <HAL_RCC_OscConfig+0x502>
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d2:	4a24      	ldr	r2, [pc, #144]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e2:	4a20      	ldr	r2, [pc, #128]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ec:	e00f      	b.n	800180e <HAL_RCC_OscConfig+0x522>
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f4:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001806:	f023 0304 	bic.w	r3, r3, #4
 800180a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d016      	beq.n	8001844 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001816:	f7ff f9d5 	bl	8000bc4 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800181c:	e00a      	b.n	8001834 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff f9d1 	bl	8000bc4 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	f241 3288 	movw	r2, #5000	; 0x1388
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e139      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0ed      	beq.n	800181e <HAL_RCC_OscConfig+0x532>
 8001842:	e01a      	b.n	800187a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff f9be 	bl	8000bc4 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800184a:	e00f      	b.n	800186c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff f9ba 	bl	8000bc4 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d906      	bls.n	800186c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e122      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800186c:	4b90      	ldr	r3, [pc, #576]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1e8      	bne.n	800184c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800187a:	7ffb      	ldrb	r3, [r7, #31]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001880:	4b8b      	ldr	r3, [pc, #556]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	4a8a      	ldr	r2, [pc, #552]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 8108 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	2b02      	cmp	r3, #2
 800189c:	f040 80d0 	bne.w	8001a40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018a0:	4b83      	ldr	r3, [pc, #524]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d130      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	3b01      	subs	r3, #1
 80018c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d127      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d11f      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018e0:	2a07      	cmp	r2, #7
 80018e2:	bf14      	ite	ne
 80018e4:	2201      	movne	r2, #1
 80018e6:	2200      	moveq	r2, #0
 80018e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d113      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	3b01      	subs	r3, #1
 80018fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d109      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	3b01      	subs	r3, #1
 8001910:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d06e      	beq.n	80019f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b0c      	cmp	r3, #12
 800191a:	d069      	beq.n	80019f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800191c:	4b64      	ldr	r3, [pc, #400]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001928:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0b7      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001938:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a5c      	ldr	r2, [pc, #368]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 800193e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001942:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001944:	f7ff f93e 	bl	8000bc4 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff f93a 	bl	8000bc4 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e0a4      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195e:	4b54      	ldr	r3, [pc, #336]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196a:	4b51      	ldr	r3, [pc, #324]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	4b51      	ldr	r3, [pc, #324]	; (8001ab4 <HAL_RCC_OscConfig+0x7c8>)
 8001970:	4013      	ands	r3, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800197a:	3a01      	subs	r2, #1
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	4311      	orrs	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001984:	0212      	lsls	r2, r2, #8
 8001986:	4311      	orrs	r1, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800198c:	0852      	lsrs	r2, r2, #1
 800198e:	3a01      	subs	r2, #1
 8001990:	0552      	lsls	r2, r2, #21
 8001992:	4311      	orrs	r1, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001998:	0852      	lsrs	r2, r2, #1
 800199a:	3a01      	subs	r2, #1
 800199c:	0652      	lsls	r2, r2, #25
 800199e:	4311      	orrs	r1, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019a4:	0912      	lsrs	r2, r2, #4
 80019a6:	0452      	lsls	r2, r2, #17
 80019a8:	430a      	orrs	r2, r1
 80019aa:	4941      	ldr	r1, [pc, #260]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019b0:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a3e      	ldr	r2, [pc, #248]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019bc:	4b3c      	ldr	r3, [pc, #240]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a3b      	ldr	r2, [pc, #236]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c8:	f7ff f8fc 	bl	8000bc4 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f8f8 	bl	8000bc4 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e062      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ee:	e05a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e059      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d152      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2a      	ldr	r2, [pc, #168]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a0c:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a18:	f7ff f8d4 	bl	8000bc4 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff f8d0 	bl	8000bc4 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e03a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x734>
 8001a3e:	e032      	b.n	8001aa6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d02d      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a50:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d105      	bne.n	8001a6a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a64:	f023 0303 	bic.w	r3, r3, #3
 8001a68:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a78:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff f8a3 	bl	8000bc4 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff f89f 	bl	8000bc4 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e009      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x796>
 8001aa0:	e001      	b.n	8001aa6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	f99d808c 	.word	0xf99d808c

08001ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0c8      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001acc:	4b66      	ldr	r3, [pc, #408]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d910      	bls.n	8001afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 0207 	bic.w	r2, r3, #7
 8001ae2:	4961      	ldr	r1, [pc, #388]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b5f      	ldr	r3, [pc, #380]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0b0      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d04c      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b10:	4b56      	ldr	r3, [pc, #344]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d121      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e09e      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b28:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d115      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e092      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d107      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b40:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e086      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b50:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e07e      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b60:	4b42      	ldr	r3, [pc, #264]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 0203 	bic.w	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	493f      	ldr	r1, [pc, #252]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b72:	f7ff f827 	bl	8000bc4 <HAL_GetTick>
 8001b76:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b78:	e00a      	b.n	8001b90 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7a:	f7ff f823 	bl	8000bc4 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e066      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b90:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 020c 	and.w	r2, r3, #12
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d1eb      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bae:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	492c      	ldr	r1, [pc, #176]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d210      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 0207 	bic.w	r2, r3, #7
 8001bd6:	4924      	ldr	r1, [pc, #144]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e036      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4918      	ldr	r1, [pc, #96]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4910      	ldr	r1, [pc, #64]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c2e:	f000 f825 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	490c      	ldr	r1, [pc, #48]	; (8001c70 <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	5ccb      	ldrb	r3, [r1, r3]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fea6 	bl	80009a4 <HAL_InitTick>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c5c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40022000 	.word	0x40022000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	080070a0 	.word	0x080070a0
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c8a:	4b3e      	ldr	r3, [pc, #248]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c94:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d121      	bne.n	8001cee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d11e      	bne.n	8001cee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cb0:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cbc:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e005      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cd8:	4a2b      	ldr	r2, [pc, #172]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10d      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d102      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	e004      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d134      	bne.n	8001d74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d003      	beq.n	8001d22 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d003      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0xac>
 8001d20:	e005      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d24:	617b      	str	r3, [r7, #20]
      break;
 8001d26:	e005      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d2a:	617b      	str	r3, [r7, #20]
      break;
 8001d2c:	e002      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	617b      	str	r3, [r7, #20]
      break;
 8001d32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	3301      	adds	r3, #1
 8001d40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	fb02 f203 	mul.w	r2, r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	0e5b      	lsrs	r3, r3, #25
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	3301      	adds	r3, #1
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d74:	69bb      	ldr	r3, [r7, #24]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	080070b8 	.word	0x080070b8
 8001d8c:	00f42400 	.word	0x00f42400
 8001d90:	007a1200 	.word	0x007a1200

08001d94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000000 	.word	0x20000000

08001dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001db0:	f7ff fff0 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4904      	ldr	r1, [pc, #16]	; (8001dd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	080070b0 	.word	0x080070b0

08001dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ddc:	f7ff ffda 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	0adb      	lsrs	r3, r3, #11
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	4904      	ldr	r1, [pc, #16]	; (8001e00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	080070b0 	.word	0x080070b0

08001e04 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	220f      	movs	r2, #15
 8001e12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_RCC_GetClockConfig+0x5c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0203 	and.w	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_RCC_GetClockConfig+0x5c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_RCC_GetClockConfig+0x5c>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_GetClockConfig+0x5c>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	08db      	lsrs	r3, r3, #3
 8001e3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <HAL_RCC_GetClockConfig+0x60>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0207 	and.w	r2, r3, #7
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	601a      	str	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40022000 	.word	0x40022000

08001e68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e74:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e80:	f7ff f9d0 	bl	8001224 <HAL_PWREx_GetVoltageRange>
 8001e84:	6178      	str	r0, [r7, #20]
 8001e86:	e014      	b.n	8001eb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e88:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	4a24      	ldr	r2, [pc, #144]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e92:	6593      	str	r3, [r2, #88]	; 0x58
 8001e94:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ea0:	f7ff f9c0 	bl	8001224 <HAL_PWREx_GetVoltageRange>
 8001ea4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb8:	d10b      	bne.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b80      	cmp	r3, #128	; 0x80
 8001ebe:	d919      	bls.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ec4:	d902      	bls.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	e013      	b.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ecc:	2301      	movs	r3, #1
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e010      	b.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b80      	cmp	r3, #128	; 0x80
 8001ed6:	d902      	bls.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ed8:	2303      	movs	r3, #3
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e00a      	b.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b80      	cmp	r3, #128	; 0x80
 8001ee2:	d102      	bne.n	8001eea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	e004      	b.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b70      	cmp	r3, #112	; 0x70
 8001eee:	d101      	bne.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 0207 	bic.w	r2, r3, #7
 8001efc:	4909      	ldr	r1, [pc, #36]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d001      	beq.n	8001f16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40022000 	.word	0x40022000

08001f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f30:	2300      	movs	r3, #0
 8001f32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f34:	2300      	movs	r3, #0
 8001f36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d041      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f4c:	d02a      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f52:	d824      	bhi.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f58:	d008      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f5e:	d81e      	bhi.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00a      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f68:	d010      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f6a:	e018      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f6c:	4b86      	ldr	r3, [pc, #536]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4a85      	ldr	r2, [pc, #532]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f78:	e015      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fabb 	bl	80024fc <RCCEx_PLLSAI1_Config>
 8001f86:	4603      	mov	r3, r0
 8001f88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f8a:	e00c      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3320      	adds	r3, #32
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fba6 	bl	80026e4 <RCCEx_PLLSAI2_Config>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f9c:	e003      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fa6:	7cfb      	ldrb	r3, [r7, #19]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10b      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fac:	4b76      	ldr	r3, [pc, #472]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fba:	4973      	ldr	r1, [pc, #460]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fc2:	e001      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc4:	7cfb      	ldrb	r3, [r7, #19]
 8001fc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d041      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fdc:	d02a      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fe2:	d824      	bhi.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fe4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fe8:	d008      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fee:	d81e      	bhi.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff8:	d010      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ffa:	e018      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ffc:	4b62      	ldr	r3, [pc, #392]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a61      	ldr	r2, [pc, #388]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002008:	e015      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3304      	adds	r3, #4
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fa73 	bl	80024fc <RCCEx_PLLSAI1_Config>
 8002016:	4603      	mov	r3, r0
 8002018:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800201a:	e00c      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3320      	adds	r3, #32
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fb5e 	bl	80026e4 <RCCEx_PLLSAI2_Config>
 8002028:	4603      	mov	r3, r0
 800202a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800202c:	e003      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	74fb      	strb	r3, [r7, #19]
      break;
 8002032:	e000      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002036:	7cfb      	ldrb	r3, [r7, #19]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10b      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800203c:	4b52      	ldr	r3, [pc, #328]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800204a:	494f      	ldr	r1, [pc, #316]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002052:	e001      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80a0 	beq.w	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800207a:	2300      	movs	r3, #0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00d      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002080:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	4a40      	ldr	r2, [pc, #256]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208a:	6593      	str	r3, [r2, #88]	; 0x58
 800208c:	4b3e      	ldr	r3, [pc, #248]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002098:	2301      	movs	r3, #1
 800209a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800209c:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a3a      	ldr	r2, [pc, #232]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020a8:	f7fe fd8c 	bl	8000bc4 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ae:	e009      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b0:	f7fe fd88 	bl	8000bc4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d902      	bls.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	74fb      	strb	r3, [r7, #19]
        break;
 80020c2:	e005      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020c4:	4b31      	ldr	r3, [pc, #196]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ef      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d15c      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020d6:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01f      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d019      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002100:	4b21      	ldr	r3, [pc, #132]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	4a20      	ldr	r2, [pc, #128]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002120:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d016      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7fe fd47 	bl	8000bc4 <HAL_GetTick>
 8002136:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002138:	e00b      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fd43 	bl	8000bc4 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d902      	bls.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	74fb      	strb	r3, [r7, #19]
            break;
 8002150:	e006      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ec      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10c      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002176:	4904      	ldr	r1, [pc, #16]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800217e:	e009      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	74bb      	strb	r3, [r7, #18]
 8002184:	e006      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002194:	7c7b      	ldrb	r3, [r7, #17]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d105      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219a:	4b9e      	ldr	r3, [pc, #632]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	4a9d      	ldr	r2, [pc, #628]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021b2:	4b98      	ldr	r3, [pc, #608]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b8:	f023 0203 	bic.w	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	4994      	ldr	r1, [pc, #592]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021d4:	4b8f      	ldr	r3, [pc, #572]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	f023 020c 	bic.w	r2, r3, #12
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e2:	498c      	ldr	r1, [pc, #560]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021f6:	4b87      	ldr	r3, [pc, #540]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	4983      	ldr	r1, [pc, #524]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002218:	4b7e      	ldr	r3, [pc, #504]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	497b      	ldr	r1, [pc, #492]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800223a:	4b76      	ldr	r3, [pc, #472]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002248:	4972      	ldr	r1, [pc, #456]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800225c:	4b6d      	ldr	r3, [pc, #436]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	496a      	ldr	r1, [pc, #424]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800227e:	4b65      	ldr	r3, [pc, #404]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002284:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	4961      	ldr	r1, [pc, #388]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022a0:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ae:	4959      	ldr	r1, [pc, #356]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022c2:	4b54      	ldr	r3, [pc, #336]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d0:	4950      	ldr	r1, [pc, #320]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022e4:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f2:	4948      	ldr	r1, [pc, #288]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002306:	4b43      	ldr	r3, [pc, #268]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	493f      	ldr	r1, [pc, #252]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d028      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002328:	4b3a      	ldr	r3, [pc, #232]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002336:	4937      	ldr	r1, [pc, #220]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002346:	d106      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002348:	4b32      	ldr	r3, [pc, #200]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a31      	ldr	r2, [pc, #196]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002352:	60d3      	str	r3, [r2, #12]
 8002354:	e011      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800235a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800235e:	d10c      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3304      	adds	r3, #4
 8002364:	2101      	movs	r1, #1
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f8c8 	bl	80024fc <RCCEx_PLLSAI1_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002370:	7cfb      	ldrb	r3, [r7, #19]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d028      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	491f      	ldr	r1, [pc, #124]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a4:	d106      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	4a1a      	ldr	r2, [pc, #104]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b0:	60d3      	str	r3, [r2, #12]
 80023b2:	e011      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2101      	movs	r1, #1
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f899 	bl	80024fc <RCCEx_PLLSAI1_Config>
 80023ca:	4603      	mov	r3, r0
 80023cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ce:	7cfb      	ldrb	r3, [r7, #19]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d02b      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f2:	4908      	ldr	r1, [pc, #32]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002402:	d109      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a02      	ldr	r2, [pc, #8]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800240e:	60d3      	str	r3, [r2, #12]
 8002410:	e014      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002420:	d10c      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3304      	adds	r3, #4
 8002426:	2101      	movs	r1, #1
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f867 	bl	80024fc <RCCEx_PLLSAI1_Config>
 800242e:	4603      	mov	r3, r0
 8002430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d02f      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002448:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002456:	4928      	ldr	r1, [pc, #160]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002466:	d10d      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3304      	adds	r3, #4
 800246c:	2102      	movs	r1, #2
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f844 	bl	80024fc <RCCEx_PLLSAI1_Config>
 8002474:	4603      	mov	r3, r0
 8002476:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d014      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800247e:	7cfb      	ldrb	r3, [r7, #19]
 8002480:	74bb      	strb	r3, [r7, #18]
 8002482:	e011      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3320      	adds	r3, #32
 8002492:	2102      	movs	r1, #2
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f925 	bl	80026e4 <RCCEx_PLLSAI2_Config>
 800249a:	4603      	mov	r3, r0
 800249c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024b4:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024c2:	490d      	ldr	r1, [pc, #52]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024e6:	4904      	ldr	r1, [pc, #16]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000

080024fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800250a:	4b75      	ldr	r3, [pc, #468]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d018      	beq.n	8002548 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002516:	4b72      	ldr	r3, [pc, #456]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0203 	and.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d10d      	bne.n	8002542 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
       ||
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800252e:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
       ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d047      	beq.n	80025d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e044      	b.n	80025d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d018      	beq.n	8002582 <RCCEx_PLLSAI1_Config+0x86>
 8002550:	2b03      	cmp	r3, #3
 8002552:	d825      	bhi.n	80025a0 <RCCEx_PLLSAI1_Config+0xa4>
 8002554:	2b01      	cmp	r3, #1
 8002556:	d002      	beq.n	800255e <RCCEx_PLLSAI1_Config+0x62>
 8002558:	2b02      	cmp	r3, #2
 800255a:	d009      	beq.n	8002570 <RCCEx_PLLSAI1_Config+0x74>
 800255c:	e020      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800255e:	4b60      	ldr	r3, [pc, #384]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d11d      	bne.n	80025a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256e:	e01a      	b.n	80025a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002570:	4b5b      	ldr	r3, [pc, #364]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d116      	bne.n	80025aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002580:	e013      	b.n	80025aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002582:	4b57      	ldr	r3, [pc, #348]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10f      	bne.n	80025ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800258e:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800259e:	e006      	b.n	80025ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      break;
 80025a4:	e004      	b.n	80025b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025a6:	bf00      	nop
 80025a8:	e002      	b.n	80025b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025aa:	bf00      	nop
 80025ac:	e000      	b.n	80025b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025b6:	4b4a      	ldr	r3, [pc, #296]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	430b      	orrs	r3, r1
 80025cc:	4944      	ldr	r1, [pc, #272]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d17d      	bne.n	80026d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025d8:	4b41      	ldr	r3, [pc, #260]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a40      	ldr	r2, [pc, #256]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e4:	f7fe faee 	bl	8000bc4 <HAL_GetTick>
 80025e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ea:	e009      	b.n	8002600 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025ec:	f7fe faea 	bl	8000bc4 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d902      	bls.n	8002600 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	73fb      	strb	r3, [r7, #15]
        break;
 80025fe:	e005      	b.n	800260c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002600:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1ef      	bne.n	80025ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d160      	bne.n	80026d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d111      	bne.n	800263c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002618:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6892      	ldr	r2, [r2, #8]
 8002628:	0211      	lsls	r1, r2, #8
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68d2      	ldr	r2, [r2, #12]
 800262e:	0912      	lsrs	r2, r2, #4
 8002630:	0452      	lsls	r2, r2, #17
 8002632:	430a      	orrs	r2, r1
 8002634:	492a      	ldr	r1, [pc, #168]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	610b      	str	r3, [r1, #16]
 800263a:	e027      	b.n	800268c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d112      	bne.n	8002668 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002642:	4b27      	ldr	r3, [pc, #156]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800264a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6892      	ldr	r2, [r2, #8]
 8002652:	0211      	lsls	r1, r2, #8
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6912      	ldr	r2, [r2, #16]
 8002658:	0852      	lsrs	r2, r2, #1
 800265a:	3a01      	subs	r2, #1
 800265c:	0552      	lsls	r2, r2, #21
 800265e:	430a      	orrs	r2, r1
 8002660:	491f      	ldr	r1, [pc, #124]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	610b      	str	r3, [r1, #16]
 8002666:	e011      	b.n	800268c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002668:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002670:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6892      	ldr	r2, [r2, #8]
 8002678:	0211      	lsls	r1, r2, #8
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6952      	ldr	r2, [r2, #20]
 800267e:	0852      	lsrs	r2, r2, #1
 8002680:	3a01      	subs	r2, #1
 8002682:	0652      	lsls	r2, r2, #25
 8002684:	430a      	orrs	r2, r1
 8002686:	4916      	ldr	r1, [pc, #88]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002688:	4313      	orrs	r3, r2
 800268a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a13      	ldr	r2, [pc, #76]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002692:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002696:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7fe fa94 	bl	8000bc4 <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800269e:	e009      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026a0:	f7fe fa90 	bl	8000bc4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d902      	bls.n	80026b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	73fb      	strb	r3, [r7, #15]
          break;
 80026b2:	e005      	b.n	80026c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0ef      	beq.n	80026a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	4904      	ldr	r1, [pc, #16]	; (80026e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000

080026e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026f2:	4b6a      	ldr	r3, [pc, #424]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d018      	beq.n	8002730 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026fe:	4b67      	ldr	r3, [pc, #412]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0203 	and.w	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d10d      	bne.n	800272a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
       ||
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002716:	4b61      	ldr	r3, [pc, #388]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
       ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d047      	beq.n	80027ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
 800272e:	e044      	b.n	80027ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d018      	beq.n	800276a <RCCEx_PLLSAI2_Config+0x86>
 8002738:	2b03      	cmp	r3, #3
 800273a:	d825      	bhi.n	8002788 <RCCEx_PLLSAI2_Config+0xa4>
 800273c:	2b01      	cmp	r3, #1
 800273e:	d002      	beq.n	8002746 <RCCEx_PLLSAI2_Config+0x62>
 8002740:	2b02      	cmp	r3, #2
 8002742:	d009      	beq.n	8002758 <RCCEx_PLLSAI2_Config+0x74>
 8002744:	e020      	b.n	8002788 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002746:	4b55      	ldr	r3, [pc, #340]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d11d      	bne.n	800278e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002756:	e01a      	b.n	800278e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002758:	4b50      	ldr	r3, [pc, #320]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002760:	2b00      	cmp	r3, #0
 8002762:	d116      	bne.n	8002792 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002768:	e013      	b.n	8002792 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800276a:	4b4c      	ldr	r3, [pc, #304]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10f      	bne.n	8002796 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002776:	4b49      	ldr	r3, [pc, #292]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002786:	e006      	b.n	8002796 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
      break;
 800278c:	e004      	b.n	8002798 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800278e:	bf00      	nop
 8002790:	e002      	b.n	8002798 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002792:	bf00      	nop
 8002794:	e000      	b.n	8002798 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002796:	bf00      	nop
    }

    if(status == HAL_OK)
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10d      	bne.n	80027ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800279e:	4b3f      	ldr	r3, [pc, #252]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	430b      	orrs	r3, r1
 80027b4:	4939      	ldr	r1, [pc, #228]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d167      	bne.n	8002890 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027c0:	4b36      	ldr	r3, [pc, #216]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a35      	ldr	r2, [pc, #212]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027cc:	f7fe f9fa 	bl	8000bc4 <HAL_GetTick>
 80027d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027d2:	e009      	b.n	80027e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027d4:	f7fe f9f6 	bl	8000bc4 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d902      	bls.n	80027e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	73fb      	strb	r3, [r7, #15]
        break;
 80027e6:	e005      	b.n	80027f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027e8:	4b2c      	ldr	r3, [pc, #176]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1ef      	bne.n	80027d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d14a      	bne.n	8002890 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d111      	bne.n	8002824 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002800:	4b26      	ldr	r3, [pc, #152]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6892      	ldr	r2, [r2, #8]
 8002810:	0211      	lsls	r1, r2, #8
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68d2      	ldr	r2, [r2, #12]
 8002816:	0912      	lsrs	r2, r2, #4
 8002818:	0452      	lsls	r2, r2, #17
 800281a:	430a      	orrs	r2, r1
 800281c:	491f      	ldr	r1, [pc, #124]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	614b      	str	r3, [r1, #20]
 8002822:	e011      	b.n	8002848 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002824:	4b1d      	ldr	r3, [pc, #116]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800282c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6892      	ldr	r2, [r2, #8]
 8002834:	0211      	lsls	r1, r2, #8
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6912      	ldr	r2, [r2, #16]
 800283a:	0852      	lsrs	r2, r2, #1
 800283c:	3a01      	subs	r2, #1
 800283e:	0652      	lsls	r2, r2, #25
 8002840:	430a      	orrs	r2, r1
 8002842:	4916      	ldr	r1, [pc, #88]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002844:	4313      	orrs	r3, r2
 8002846:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a13      	ldr	r2, [pc, #76]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 800284e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002852:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe f9b6 	bl	8000bc4 <HAL_GetTick>
 8002858:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800285a:	e009      	b.n	8002870 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800285c:	f7fe f9b2 	bl	8000bc4 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d902      	bls.n	8002870 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	73fb      	strb	r3, [r7, #15]
          break;
 800286e:	e005      	b.n	800287c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ef      	beq.n	800285c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4904      	ldr	r1, [pc, #16]	; (800289c <RCCEx_PLLSAI2_Config+0x1b8>)
 800288c:	4313      	orrs	r3, r2
 800288e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000

080028a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e049      	b.n	8002946 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f841 	bl	800294e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	4619      	mov	r1, r3
 80028de:	4610      	mov	r0, r2
 80028e0:	f000 f9f8 	bl	8002cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d001      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e04f      	b.n	8002a1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a23      	ldr	r2, [pc, #140]	; (8002a28 <HAL_TIM_Base_Start_IT+0xc4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01d      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x76>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a6:	d018      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x76>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_TIM_Base_Start_IT+0xc8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x76>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <HAL_TIM_Base_Start_IT+0xcc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00e      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x76>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_TIM_Base_Start_IT+0xd0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x76>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <HAL_TIM_Base_Start_IT+0xd4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x76>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a19      	ldr	r2, [pc, #100]	; (8002a3c <HAL_TIM_Base_Start_IT+0xd8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d115      	bne.n	8002a06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <HAL_TIM_Base_Start_IT+0xdc>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b06      	cmp	r3, #6
 80029ea:	d015      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0xb4>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f2:	d011      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a04:	e008      	b.n	8002a18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	e000      	b.n	8002a1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	40000800 	.word	0x40000800
 8002a34:	40000c00 	.word	0x40000c00
 8002a38:	40013400 	.word	0x40013400
 8002a3c:	40014000 	.word	0x40014000
 8002a40:	00010007 	.word	0x00010007

08002a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d122      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d11b      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0202 	mvn.w	r2, #2
 8002a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f905 	bl	8002c96 <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f8f7 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f908 	bl	8002caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d122      	bne.n	8002af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d11b      	bne.n	8002af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0204 	mvn.w	r2, #4
 8002ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8db 	bl	8002c96 <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f8cd 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f8de 	bl	8002caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d122      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d11b      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0208 	mvn.w	r2, #8
 8002b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8b1 	bl	8002c96 <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f8a3 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f8b4 	bl	8002caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d122      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b10      	cmp	r3, #16
 8002b62:	d11b      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0210 	mvn.w	r2, #16
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2208      	movs	r2, #8
 8002b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f887 	bl	8002c96 <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f879 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f88a 	bl	8002caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d107      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0201 	mvn.w	r2, #1
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fd fe52 	bl	800086c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd2:	2b80      	cmp	r3, #128	; 0x80
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be0:	2b80      	cmp	r3, #128	; 0x80
 8002be2:	d107      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f914 	bl	8002e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c02:	d10e      	bne.n	8002c22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	2b80      	cmp	r3, #128	; 0x80
 8002c10:	d107      	bne.n	8002c22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f907 	bl	8002e30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2c:	2b40      	cmp	r3, #64	; 0x40
 8002c2e:	d10e      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d107      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f838 	bl	8002cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d10e      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d107      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f06f 0220 	mvn.w	r2, #32
 8002c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f8c7 	bl	8002e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a40      	ldr	r2, [pc, #256]	; (8002de8 <TIM_Base_SetConfig+0x114>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d013      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf2:	d00f      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3d      	ldr	r2, [pc, #244]	; (8002dec <TIM_Base_SetConfig+0x118>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00b      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3c      	ldr	r2, [pc, #240]	; (8002df0 <TIM_Base_SetConfig+0x11c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d007      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3b      	ldr	r2, [pc, #236]	; (8002df4 <TIM_Base_SetConfig+0x120>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d003      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a3a      	ldr	r2, [pc, #232]	; (8002df8 <TIM_Base_SetConfig+0x124>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d108      	bne.n	8002d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2f      	ldr	r2, [pc, #188]	; (8002de8 <TIM_Base_SetConfig+0x114>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01f      	beq.n	8002d6e <TIM_Base_SetConfig+0x9a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d34:	d01b      	beq.n	8002d6e <TIM_Base_SetConfig+0x9a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2c      	ldr	r2, [pc, #176]	; (8002dec <TIM_Base_SetConfig+0x118>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d017      	beq.n	8002d6e <TIM_Base_SetConfig+0x9a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a2b      	ldr	r2, [pc, #172]	; (8002df0 <TIM_Base_SetConfig+0x11c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <TIM_Base_SetConfig+0x9a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a2a      	ldr	r2, [pc, #168]	; (8002df4 <TIM_Base_SetConfig+0x120>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00f      	beq.n	8002d6e <TIM_Base_SetConfig+0x9a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a29      	ldr	r2, [pc, #164]	; (8002df8 <TIM_Base_SetConfig+0x124>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00b      	beq.n	8002d6e <TIM_Base_SetConfig+0x9a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a28      	ldr	r2, [pc, #160]	; (8002dfc <TIM_Base_SetConfig+0x128>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <TIM_Base_SetConfig+0x9a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <TIM_Base_SetConfig+0x12c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d003      	beq.n	8002d6e <TIM_Base_SetConfig+0x9a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a26      	ldr	r2, [pc, #152]	; (8002e04 <TIM_Base_SetConfig+0x130>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d108      	bne.n	8002d80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <TIM_Base_SetConfig+0x114>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00f      	beq.n	8002dcc <TIM_Base_SetConfig+0xf8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <TIM_Base_SetConfig+0x124>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00b      	beq.n	8002dcc <TIM_Base_SetConfig+0xf8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a11      	ldr	r2, [pc, #68]	; (8002dfc <TIM_Base_SetConfig+0x128>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d007      	beq.n	8002dcc <TIM_Base_SetConfig+0xf8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a10      	ldr	r2, [pc, #64]	; (8002e00 <TIM_Base_SetConfig+0x12c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <TIM_Base_SetConfig+0xf8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a0f      	ldr	r2, [pc, #60]	; (8002e04 <TIM_Base_SetConfig+0x130>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d103      	bne.n	8002dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	615a      	str	r2, [r3, #20]
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800
 8002df4:	40000c00 	.word	0x40000c00
 8002df8:	40013400 	.word	0x40013400
 8002dfc:	40014000 	.word	0x40014000
 8002e00:	40014400 	.word	0x40014400
 8002e04:	40014800 	.word	0x40014800

08002e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e040      	b.n	8002ed8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fd fd40 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	; 0x24
 8002e70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fae4 	bl	8003450 <UART_SetConfig>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e022      	b.n	8002ed8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fd62 	bl	8003964 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ebe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fde9 	bl	8003aa8 <UART_CheckIdleState>
 8002ed6:	4603      	mov	r3, r0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d145      	bne.n	8002f82 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_UART_Transmit_IT+0x22>
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e03e      	b.n	8002f84 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_UART_Transmit_IT+0x34>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e037      	b.n	8002f84 <HAL_UART_Transmit_IT+0xa4>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	88fa      	ldrh	r2, [r7, #6]
 8002f26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	88fa      	ldrh	r2, [r7, #6]
 8002f2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2221      	movs	r2, #33	; 0x21
 8002f44:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4e:	d107      	bne.n	8002f60 <HAL_UART_Transmit_IT+0x80>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d103      	bne.n	8002f60 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <HAL_UART_Transmit_IT+0xb0>)
 8002f5c:	669a      	str	r2, [r3, #104]	; 0x68
 8002f5e:	e002      	b.n	8002f66 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a0c      	ldr	r2, [pc, #48]	; (8002f94 <HAL_UART_Transmit_IT+0xb4>)
 8002f64:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f7c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
  }
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	08003e43 	.word	0x08003e43
 8002f94:	08003dcf 	.word	0x08003dcf

08002f98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d131      	bne.n	8003012 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_UART_Receive_IT+0x22>
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e02a      	b.n	8003014 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_UART_Receive_IT+0x34>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e023      	b.n	8003014 <HAL_UART_Receive_IT+0x7c>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a0f      	ldr	r2, [pc, #60]	; (800301c <HAL_UART_Receive_IT+0x84>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00e      	beq.n	8003002 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003000:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	461a      	mov	r2, r3
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fe13 	bl	8003c34 <UART_Start_Receive_IT>
 800300e:	4603      	mov	r3, r0
 8003010:	e000      	b.n	8003014 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
  }
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40008000 	.word	0x40008000

08003020 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	f640 030f 	movw	r3, #2063	; 0x80f
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d113      	bne.n	8003078 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00e      	beq.n	8003078 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b00      	cmp	r3, #0
 8003062:	d009      	beq.n	8003078 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 81ce 	beq.w	800340a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	4798      	blx	r3
      }
      return;
 8003076:	e1c8      	b.n	800340a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80e3 	beq.w	8003246 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d105      	bne.n	8003096 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4ba6      	ldr	r3, [pc, #664]	; (8003328 <HAL_UART_IRQHandler+0x308>)
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80d8 	beq.w	8003246 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d010      	beq.n	80030c2 <HAL_UART_IRQHandler+0xa2>
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2201      	movs	r2, #1
 80030b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b8:	f043 0201 	orr.w	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d010      	beq.n	80030ee <HAL_UART_IRQHandler+0xce>
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2202      	movs	r2, #2
 80030dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030e4:	f043 0204 	orr.w	r2, r3, #4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d010      	beq.n	800311a <HAL_UART_IRQHandler+0xfa>
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2204      	movs	r2, #4
 8003108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003110:	f043 0202 	orr.w	r2, r3, #2
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	d104      	bne.n	8003138 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00b      	beq.n	8003150 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2208      	movs	r2, #8
 800313e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003146:	f043 0208 	orr.w	r2, r3, #8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003156:	2b00      	cmp	r3, #0
 8003158:	d011      	beq.n	800317e <HAL_UART_IRQHandler+0x15e>
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00c      	beq.n	800317e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800316c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8142 	beq.w	800340e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00c      	beq.n	80031ae <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031b4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d004      	beq.n	80031ce <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d031      	beq.n	8003232 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fdb8 	bl	8003d44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b40      	cmp	r3, #64	; 0x40
 80031e0:	d123      	bne.n	800322a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d013      	beq.n	8003222 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	4a4b      	ldr	r2, [pc, #300]	; (800332c <HAL_UART_IRQHandler+0x30c>)
 8003200:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd fe08 	bl	8000e1c <HAL_DMA_Abort_IT>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d017      	beq.n	8003242 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800321c:	4610      	mov	r0, r2
 800321e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	e00f      	b.n	8003242 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f8fe 	bl	8003424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003228:	e00b      	b.n	8003242 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f8fa 	bl	8003424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e007      	b.n	8003242 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f8f6 	bl	8003424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003240:	e0e5      	b.n	800340e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003242:	bf00      	nop
    return;
 8003244:	e0e3      	b.n	800340e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324a:	2b01      	cmp	r3, #1
 800324c:	f040 80a9 	bne.w	80033a2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80a3 	beq.w	80033a2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 809d 	beq.w	80033a2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2210      	movs	r2, #16
 800326e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b40      	cmp	r3, #64	; 0x40
 800327c:	d158      	bne.n	8003330 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003288:	893b      	ldrh	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80c1 	beq.w	8003412 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003296:	893a      	ldrh	r2, [r7, #8]
 8003298:	429a      	cmp	r2, r3
 800329a:	f080 80ba 	bcs.w	8003412 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	893a      	ldrh	r2, [r7, #8]
 80032a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d12a      	bne.n	800330c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032e4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0210 	bic.w	r2, r2, #16
 8003300:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd fd4a 	bl	8000da0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003318:	b29b      	uxth	r3, r3
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	b29b      	uxth	r3, r3
 800331e:	4619      	mov	r1, r3
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f889 	bl	8003438 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003326:	e074      	b.n	8003412 <HAL_UART_IRQHandler+0x3f2>
 8003328:	04000120 	.word	0x04000120
 800332c:	08003da3 	.word	0x08003da3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800333c:	b29b      	uxth	r3, r3
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d063      	beq.n	8003416 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800334e:	897b      	ldrh	r3, [r7, #10]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d060      	beq.n	8003416 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003362:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0210 	bic.w	r2, r2, #16
 8003394:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f84c 	bl	8003438 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033a0:	e039      	b.n	8003416 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <HAL_UART_IRQHandler+0x3a8>
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fe6d 	bl	80040a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033c6:	e029      	b.n	800341c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00d      	beq.n	80033ee <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01a      	beq.n	800341a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4798      	blx	r3
    }
    return;
 80033ec:	e015      	b.n	800341a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d011      	beq.n	800341c <HAL_UART_IRQHandler+0x3fc>
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00c      	beq.n	800341c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fd5b 	bl	8003ebe <UART_EndTransmit_IT>
    return;
 8003408:	e008      	b.n	800341c <HAL_UART_IRQHandler+0x3fc>
      return;
 800340a:	bf00      	nop
 800340c:	e006      	b.n	800341c <HAL_UART_IRQHandler+0x3fc>
    return;
 800340e:	bf00      	nop
 8003410:	e004      	b.n	800341c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003412:	bf00      	nop
 8003414:	e002      	b.n	800341c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003416:	bf00      	nop
 8003418:	e000      	b.n	800341c <HAL_UART_IRQHandler+0x3fc>
    return;
 800341a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop

08003424 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003450:	b5b0      	push	{r4, r5, r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4313      	orrs	r3, r2
 8003472:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4bad      	ldr	r3, [pc, #692]	; (8003730 <UART_SetConfig+0x2e0>)
 800347c:	4013      	ands	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	69f9      	ldr	r1, [r7, #28]
 8003484:	430b      	orrs	r3, r1
 8003486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4aa2      	ldr	r2, [pc, #648]	; (8003734 <UART_SetConfig+0x2e4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a99      	ldr	r2, [pc, #612]	; (8003738 <UART_SetConfig+0x2e8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d121      	bne.n	800351a <UART_SetConfig+0xca>
 80034d6:	4b99      	ldr	r3, [pc, #612]	; (800373c <UART_SetConfig+0x2ec>)
 80034d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d817      	bhi.n	8003514 <UART_SetConfig+0xc4>
 80034e4:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <UART_SetConfig+0x9c>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	080034fd 	.word	0x080034fd
 80034f0:	08003509 	.word	0x08003509
 80034f4:	08003503 	.word	0x08003503
 80034f8:	0800350f 	.word	0x0800350f
 80034fc:	2301      	movs	r3, #1
 80034fe:	76fb      	strb	r3, [r7, #27]
 8003500:	e0e7      	b.n	80036d2 <UART_SetConfig+0x282>
 8003502:	2302      	movs	r3, #2
 8003504:	76fb      	strb	r3, [r7, #27]
 8003506:	e0e4      	b.n	80036d2 <UART_SetConfig+0x282>
 8003508:	2304      	movs	r3, #4
 800350a:	76fb      	strb	r3, [r7, #27]
 800350c:	e0e1      	b.n	80036d2 <UART_SetConfig+0x282>
 800350e:	2308      	movs	r3, #8
 8003510:	76fb      	strb	r3, [r7, #27]
 8003512:	e0de      	b.n	80036d2 <UART_SetConfig+0x282>
 8003514:	2310      	movs	r3, #16
 8003516:	76fb      	strb	r3, [r7, #27]
 8003518:	e0db      	b.n	80036d2 <UART_SetConfig+0x282>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a88      	ldr	r2, [pc, #544]	; (8003740 <UART_SetConfig+0x2f0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d132      	bne.n	800358a <UART_SetConfig+0x13a>
 8003524:	4b85      	ldr	r3, [pc, #532]	; (800373c <UART_SetConfig+0x2ec>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b0c      	cmp	r3, #12
 8003530:	d828      	bhi.n	8003584 <UART_SetConfig+0x134>
 8003532:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <UART_SetConfig+0xe8>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	0800356d 	.word	0x0800356d
 800353c:	08003585 	.word	0x08003585
 8003540:	08003585 	.word	0x08003585
 8003544:	08003585 	.word	0x08003585
 8003548:	08003579 	.word	0x08003579
 800354c:	08003585 	.word	0x08003585
 8003550:	08003585 	.word	0x08003585
 8003554:	08003585 	.word	0x08003585
 8003558:	08003573 	.word	0x08003573
 800355c:	08003585 	.word	0x08003585
 8003560:	08003585 	.word	0x08003585
 8003564:	08003585 	.word	0x08003585
 8003568:	0800357f 	.word	0x0800357f
 800356c:	2300      	movs	r3, #0
 800356e:	76fb      	strb	r3, [r7, #27]
 8003570:	e0af      	b.n	80036d2 <UART_SetConfig+0x282>
 8003572:	2302      	movs	r3, #2
 8003574:	76fb      	strb	r3, [r7, #27]
 8003576:	e0ac      	b.n	80036d2 <UART_SetConfig+0x282>
 8003578:	2304      	movs	r3, #4
 800357a:	76fb      	strb	r3, [r7, #27]
 800357c:	e0a9      	b.n	80036d2 <UART_SetConfig+0x282>
 800357e:	2308      	movs	r3, #8
 8003580:	76fb      	strb	r3, [r7, #27]
 8003582:	e0a6      	b.n	80036d2 <UART_SetConfig+0x282>
 8003584:	2310      	movs	r3, #16
 8003586:	76fb      	strb	r3, [r7, #27]
 8003588:	e0a3      	b.n	80036d2 <UART_SetConfig+0x282>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a6d      	ldr	r2, [pc, #436]	; (8003744 <UART_SetConfig+0x2f4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d120      	bne.n	80035d6 <UART_SetConfig+0x186>
 8003594:	4b69      	ldr	r3, [pc, #420]	; (800373c <UART_SetConfig+0x2ec>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800359e:	2b30      	cmp	r3, #48	; 0x30
 80035a0:	d013      	beq.n	80035ca <UART_SetConfig+0x17a>
 80035a2:	2b30      	cmp	r3, #48	; 0x30
 80035a4:	d814      	bhi.n	80035d0 <UART_SetConfig+0x180>
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d009      	beq.n	80035be <UART_SetConfig+0x16e>
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d810      	bhi.n	80035d0 <UART_SetConfig+0x180>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <UART_SetConfig+0x168>
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d006      	beq.n	80035c4 <UART_SetConfig+0x174>
 80035b6:	e00b      	b.n	80035d0 <UART_SetConfig+0x180>
 80035b8:	2300      	movs	r3, #0
 80035ba:	76fb      	strb	r3, [r7, #27]
 80035bc:	e089      	b.n	80036d2 <UART_SetConfig+0x282>
 80035be:	2302      	movs	r3, #2
 80035c0:	76fb      	strb	r3, [r7, #27]
 80035c2:	e086      	b.n	80036d2 <UART_SetConfig+0x282>
 80035c4:	2304      	movs	r3, #4
 80035c6:	76fb      	strb	r3, [r7, #27]
 80035c8:	e083      	b.n	80036d2 <UART_SetConfig+0x282>
 80035ca:	2308      	movs	r3, #8
 80035cc:	76fb      	strb	r3, [r7, #27]
 80035ce:	e080      	b.n	80036d2 <UART_SetConfig+0x282>
 80035d0:	2310      	movs	r3, #16
 80035d2:	76fb      	strb	r3, [r7, #27]
 80035d4:	e07d      	b.n	80036d2 <UART_SetConfig+0x282>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a5b      	ldr	r2, [pc, #364]	; (8003748 <UART_SetConfig+0x2f8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d120      	bne.n	8003622 <UART_SetConfig+0x1d2>
 80035e0:	4b56      	ldr	r3, [pc, #344]	; (800373c <UART_SetConfig+0x2ec>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035ea:	2bc0      	cmp	r3, #192	; 0xc0
 80035ec:	d013      	beq.n	8003616 <UART_SetConfig+0x1c6>
 80035ee:	2bc0      	cmp	r3, #192	; 0xc0
 80035f0:	d814      	bhi.n	800361c <UART_SetConfig+0x1cc>
 80035f2:	2b80      	cmp	r3, #128	; 0x80
 80035f4:	d009      	beq.n	800360a <UART_SetConfig+0x1ba>
 80035f6:	2b80      	cmp	r3, #128	; 0x80
 80035f8:	d810      	bhi.n	800361c <UART_SetConfig+0x1cc>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <UART_SetConfig+0x1b4>
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	d006      	beq.n	8003610 <UART_SetConfig+0x1c0>
 8003602:	e00b      	b.n	800361c <UART_SetConfig+0x1cc>
 8003604:	2300      	movs	r3, #0
 8003606:	76fb      	strb	r3, [r7, #27]
 8003608:	e063      	b.n	80036d2 <UART_SetConfig+0x282>
 800360a:	2302      	movs	r3, #2
 800360c:	76fb      	strb	r3, [r7, #27]
 800360e:	e060      	b.n	80036d2 <UART_SetConfig+0x282>
 8003610:	2304      	movs	r3, #4
 8003612:	76fb      	strb	r3, [r7, #27]
 8003614:	e05d      	b.n	80036d2 <UART_SetConfig+0x282>
 8003616:	2308      	movs	r3, #8
 8003618:	76fb      	strb	r3, [r7, #27]
 800361a:	e05a      	b.n	80036d2 <UART_SetConfig+0x282>
 800361c:	2310      	movs	r3, #16
 800361e:	76fb      	strb	r3, [r7, #27]
 8003620:	e057      	b.n	80036d2 <UART_SetConfig+0x282>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a49      	ldr	r2, [pc, #292]	; (800374c <UART_SetConfig+0x2fc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d125      	bne.n	8003678 <UART_SetConfig+0x228>
 800362c:	4b43      	ldr	r3, [pc, #268]	; (800373c <UART_SetConfig+0x2ec>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800363a:	d017      	beq.n	800366c <UART_SetConfig+0x21c>
 800363c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003640:	d817      	bhi.n	8003672 <UART_SetConfig+0x222>
 8003642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003646:	d00b      	beq.n	8003660 <UART_SetConfig+0x210>
 8003648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364c:	d811      	bhi.n	8003672 <UART_SetConfig+0x222>
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <UART_SetConfig+0x20a>
 8003652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003656:	d006      	beq.n	8003666 <UART_SetConfig+0x216>
 8003658:	e00b      	b.n	8003672 <UART_SetConfig+0x222>
 800365a:	2300      	movs	r3, #0
 800365c:	76fb      	strb	r3, [r7, #27]
 800365e:	e038      	b.n	80036d2 <UART_SetConfig+0x282>
 8003660:	2302      	movs	r3, #2
 8003662:	76fb      	strb	r3, [r7, #27]
 8003664:	e035      	b.n	80036d2 <UART_SetConfig+0x282>
 8003666:	2304      	movs	r3, #4
 8003668:	76fb      	strb	r3, [r7, #27]
 800366a:	e032      	b.n	80036d2 <UART_SetConfig+0x282>
 800366c:	2308      	movs	r3, #8
 800366e:	76fb      	strb	r3, [r7, #27]
 8003670:	e02f      	b.n	80036d2 <UART_SetConfig+0x282>
 8003672:	2310      	movs	r3, #16
 8003674:	76fb      	strb	r3, [r7, #27]
 8003676:	e02c      	b.n	80036d2 <UART_SetConfig+0x282>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a2d      	ldr	r2, [pc, #180]	; (8003734 <UART_SetConfig+0x2e4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d125      	bne.n	80036ce <UART_SetConfig+0x27e>
 8003682:	4b2e      	ldr	r3, [pc, #184]	; (800373c <UART_SetConfig+0x2ec>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003688:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800368c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003690:	d017      	beq.n	80036c2 <UART_SetConfig+0x272>
 8003692:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003696:	d817      	bhi.n	80036c8 <UART_SetConfig+0x278>
 8003698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800369c:	d00b      	beq.n	80036b6 <UART_SetConfig+0x266>
 800369e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a2:	d811      	bhi.n	80036c8 <UART_SetConfig+0x278>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <UART_SetConfig+0x260>
 80036a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ac:	d006      	beq.n	80036bc <UART_SetConfig+0x26c>
 80036ae:	e00b      	b.n	80036c8 <UART_SetConfig+0x278>
 80036b0:	2300      	movs	r3, #0
 80036b2:	76fb      	strb	r3, [r7, #27]
 80036b4:	e00d      	b.n	80036d2 <UART_SetConfig+0x282>
 80036b6:	2302      	movs	r3, #2
 80036b8:	76fb      	strb	r3, [r7, #27]
 80036ba:	e00a      	b.n	80036d2 <UART_SetConfig+0x282>
 80036bc:	2304      	movs	r3, #4
 80036be:	76fb      	strb	r3, [r7, #27]
 80036c0:	e007      	b.n	80036d2 <UART_SetConfig+0x282>
 80036c2:	2308      	movs	r3, #8
 80036c4:	76fb      	strb	r3, [r7, #27]
 80036c6:	e004      	b.n	80036d2 <UART_SetConfig+0x282>
 80036c8:	2310      	movs	r3, #16
 80036ca:	76fb      	strb	r3, [r7, #27]
 80036cc:	e001      	b.n	80036d2 <UART_SetConfig+0x282>
 80036ce:	2310      	movs	r3, #16
 80036d0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a17      	ldr	r2, [pc, #92]	; (8003734 <UART_SetConfig+0x2e4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	f040 8087 	bne.w	80037ec <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036de:	7efb      	ldrb	r3, [r7, #27]
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d837      	bhi.n	8003754 <UART_SetConfig+0x304>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <UART_SetConfig+0x29c>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	08003711 	.word	0x08003711
 80036f0:	08003755 	.word	0x08003755
 80036f4:	08003719 	.word	0x08003719
 80036f8:	08003755 	.word	0x08003755
 80036fc:	0800371f 	.word	0x0800371f
 8003700:	08003755 	.word	0x08003755
 8003704:	08003755 	.word	0x08003755
 8003708:	08003755 	.word	0x08003755
 800370c:	08003727 	.word	0x08003727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003710:	f7fe fb4c 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 8003714:	6178      	str	r0, [r7, #20]
        break;
 8003716:	e022      	b.n	800375e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <UART_SetConfig+0x300>)
 800371a:	617b      	str	r3, [r7, #20]
        break;
 800371c:	e01f      	b.n	800375e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800371e:	f7fe faad 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8003722:	6178      	str	r0, [r7, #20]
        break;
 8003724:	e01b      	b.n	800375e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800372a:	617b      	str	r3, [r7, #20]
        break;
 800372c:	e017      	b.n	800375e <UART_SetConfig+0x30e>
 800372e:	bf00      	nop
 8003730:	efff69f3 	.word	0xefff69f3
 8003734:	40008000 	.word	0x40008000
 8003738:	40013800 	.word	0x40013800
 800373c:	40021000 	.word	0x40021000
 8003740:	40004400 	.word	0x40004400
 8003744:	40004800 	.word	0x40004800
 8003748:	40004c00 	.word	0x40004c00
 800374c:	40005000 	.word	0x40005000
 8003750:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	76bb      	strb	r3, [r7, #26]
        break;
 800375c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80f1 	beq.w	8003948 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4413      	add	r3, r2
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	429a      	cmp	r2, r3
 8003774:	d305      	bcc.n	8003782 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	429a      	cmp	r2, r3
 8003780:	d902      	bls.n	8003788 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	76bb      	strb	r3, [r7, #26]
 8003786:	e0df      	b.n	8003948 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	4618      	mov	r0, r3
 800378c:	f04f 0100 	mov.w	r1, #0
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	020b      	lsls	r3, r1, #8
 800379a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800379e:	0202      	lsls	r2, r0, #8
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	6849      	ldr	r1, [r1, #4]
 80037a4:	0849      	lsrs	r1, r1, #1
 80037a6:	4608      	mov	r0, r1
 80037a8:	f04f 0100 	mov.w	r1, #0
 80037ac:	1814      	adds	r4, r2, r0
 80037ae:	eb43 0501 	adc.w	r5, r3, r1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	461a      	mov	r2, r3
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	4620      	mov	r0, r4
 80037be:	4629      	mov	r1, r5
 80037c0:	f7fc fd0e 	bl	80001e0 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4613      	mov	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d2:	d308      	bcc.n	80037e6 <UART_SetConfig+0x396>
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037da:	d204      	bcs.n	80037e6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	60da      	str	r2, [r3, #12]
 80037e4:	e0b0      	b.n	8003948 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	76bb      	strb	r3, [r7, #26]
 80037ea:	e0ad      	b.n	8003948 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f4:	d15c      	bne.n	80038b0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80037f6:	7efb      	ldrb	r3, [r7, #27]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d828      	bhi.n	800384e <UART_SetConfig+0x3fe>
 80037fc:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <UART_SetConfig+0x3b4>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003829 	.word	0x08003829
 8003808:	08003831 	.word	0x08003831
 800380c:	08003839 	.word	0x08003839
 8003810:	0800384f 	.word	0x0800384f
 8003814:	0800383f 	.word	0x0800383f
 8003818:	0800384f 	.word	0x0800384f
 800381c:	0800384f 	.word	0x0800384f
 8003820:	0800384f 	.word	0x0800384f
 8003824:	08003847 	.word	0x08003847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003828:	f7fe fac0 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 800382c:	6178      	str	r0, [r7, #20]
        break;
 800382e:	e013      	b.n	8003858 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003830:	f7fe fad2 	bl	8001dd8 <HAL_RCC_GetPCLK2Freq>
 8003834:	6178      	str	r0, [r7, #20]
        break;
 8003836:	e00f      	b.n	8003858 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003838:	4b49      	ldr	r3, [pc, #292]	; (8003960 <UART_SetConfig+0x510>)
 800383a:	617b      	str	r3, [r7, #20]
        break;
 800383c:	e00c      	b.n	8003858 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383e:	f7fe fa1d 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8003842:	6178      	str	r0, [r7, #20]
        break;
 8003844:	e008      	b.n	8003858 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384a:	617b      	str	r3, [r7, #20]
        break;
 800384c:	e004      	b.n	8003858 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	76bb      	strb	r3, [r7, #26]
        break;
 8003856:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d074      	beq.n	8003948 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	005a      	lsls	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	441a      	add	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	b29b      	uxth	r3, r3
 8003874:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b0f      	cmp	r3, #15
 800387a:	d916      	bls.n	80038aa <UART_SetConfig+0x45a>
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003882:	d212      	bcs.n	80038aa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	b29b      	uxth	r3, r3
 8003888:	f023 030f 	bic.w	r3, r3, #15
 800388c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	085b      	lsrs	r3, r3, #1
 8003892:	b29b      	uxth	r3, r3
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	b29a      	uxth	r2, r3
 800389a:	89fb      	ldrh	r3, [r7, #14]
 800389c:	4313      	orrs	r3, r2
 800389e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	89fa      	ldrh	r2, [r7, #14]
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	e04e      	b.n	8003948 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	76bb      	strb	r3, [r7, #26]
 80038ae:	e04b      	b.n	8003948 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038b0:	7efb      	ldrb	r3, [r7, #27]
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d827      	bhi.n	8003906 <UART_SetConfig+0x4b6>
 80038b6:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <UART_SetConfig+0x46c>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	080038e9 	.word	0x080038e9
 80038c4:	080038f1 	.word	0x080038f1
 80038c8:	08003907 	.word	0x08003907
 80038cc:	080038f7 	.word	0x080038f7
 80038d0:	08003907 	.word	0x08003907
 80038d4:	08003907 	.word	0x08003907
 80038d8:	08003907 	.word	0x08003907
 80038dc:	080038ff 	.word	0x080038ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e0:	f7fe fa64 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 80038e4:	6178      	str	r0, [r7, #20]
        break;
 80038e6:	e013      	b.n	8003910 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038e8:	f7fe fa76 	bl	8001dd8 <HAL_RCC_GetPCLK2Freq>
 80038ec:	6178      	str	r0, [r7, #20]
        break;
 80038ee:	e00f      	b.n	8003910 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <UART_SetConfig+0x510>)
 80038f2:	617b      	str	r3, [r7, #20]
        break;
 80038f4:	e00c      	b.n	8003910 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038f6:	f7fe f9c1 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 80038fa:	6178      	str	r0, [r7, #20]
        break;
 80038fc:	e008      	b.n	8003910 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003902:	617b      	str	r3, [r7, #20]
        break;
 8003904:	e004      	b.n	8003910 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	76bb      	strb	r3, [r7, #26]
        break;
 800390e:	bf00      	nop
    }

    if (pclk != 0U)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d018      	beq.n	8003948 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	085a      	lsrs	r2, r3, #1
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	441a      	add	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	fbb2 f3f3 	udiv	r3, r2, r3
 8003928:	b29b      	uxth	r3, r3
 800392a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b0f      	cmp	r3, #15
 8003930:	d908      	bls.n	8003944 <UART_SetConfig+0x4f4>
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003938:	d204      	bcs.n	8003944 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	60da      	str	r2, [r3, #12]
 8003942:	e001      	b.n	8003948 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003954:	7ebb      	ldrb	r3, [r7, #26]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bdb0      	pop	{r4, r5, r7, pc}
 800395e:	bf00      	nop
 8003960:	00f42400 	.word	0x00f42400

08003964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01a      	beq.n	8003a7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a62:	d10a      	bne.n	8003a7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ab8:	f7fd f884 	bl	8000bc4 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d10e      	bne.n	8003aea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f82d 	bl	8003b3a <UART_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e023      	b.n	8003b32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d10e      	bne.n	8003b16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f817 	bl	8003b3a <UART_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e00d      	b.n	8003b32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	4613      	mov	r3, r2
 8003b48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4a:	e05e      	b.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b52:	d05a      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b54:	f7fd f836 	bl	8000bc4 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d302      	bcc.n	8003b6a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d11b      	bne.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b78:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0201 	bic.w	r2, r2, #1
 8003b88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e043      	b.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d02c      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bbe:	d124      	bne.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bc8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bd8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e00f      	b.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4013      	ands	r3, r2
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	bf0c      	ite	eq
 8003c1a:	2301      	moveq	r3, #1
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d091      	beq.n	8003b4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	88fa      	ldrh	r2, [r7, #6]
 8003c4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c66:	d10e      	bne.n	8003c86 <UART_Start_Receive_IT+0x52>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d105      	bne.n	8003c7c <UART_Start_Receive_IT+0x48>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c7a:	e02d      	b.n	8003cd8 <UART_Start_Receive_IT+0xa4>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	22ff      	movs	r2, #255	; 0xff
 8003c80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c84:	e028      	b.n	8003cd8 <UART_Start_Receive_IT+0xa4>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <UART_Start_Receive_IT+0x76>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d104      	bne.n	8003ca0 <UART_Start_Receive_IT+0x6c>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	22ff      	movs	r2, #255	; 0xff
 8003c9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c9e:	e01b      	b.n	8003cd8 <UART_Start_Receive_IT+0xa4>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	227f      	movs	r2, #127	; 0x7f
 8003ca4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ca8:	e016      	b.n	8003cd8 <UART_Start_Receive_IT+0xa4>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cb2:	d10d      	bne.n	8003cd0 <UART_Start_Receive_IT+0x9c>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d104      	bne.n	8003cc6 <UART_Start_Receive_IT+0x92>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	227f      	movs	r2, #127	; 0x7f
 8003cc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cc4:	e008      	b.n	8003cd8 <UART_Start_Receive_IT+0xa4>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	223f      	movs	r2, #63	; 0x3f
 8003cca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cce:	e003      	b.n	8003cd8 <UART_Start_Receive_IT+0xa4>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2222      	movs	r2, #34	; 0x22
 8003ce4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfe:	d107      	bne.n	8003d10 <UART_Start_Receive_IT+0xdc>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d103      	bne.n	8003d10 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4a0c      	ldr	r2, [pc, #48]	; (8003d3c <UART_Start_Receive_IT+0x108>)
 8003d0c:	665a      	str	r2, [r3, #100]	; 0x64
 8003d0e:	e002      	b.n	8003d16 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <UART_Start_Receive_IT+0x10c>)
 8003d14:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003d2c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	08003fc9 	.word	0x08003fc9
 8003d40:	08003ef1 	.word	0x08003ef1

08003d44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d5a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0210 	bic.w	r2, r2, #16
 8003d82:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f7ff fb2f 	bl	8003424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dda:	2b21      	cmp	r3, #33	; 0x21
 8003ddc:	d12b      	bne.n	8003e36 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d110      	bne.n	8003e0c <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003df8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e08:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003e0a:	e014      	b.n	8003e36 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e10:	781a      	ldrb	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b292      	uxth	r2, r2
 8003e18:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e4e:	2b21      	cmp	r3, #33	; 0x21
 8003e50:	d12f      	bne.n	8003eb2 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d110      	bne.n	8003e80 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e6c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e7c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003e7e:	e018      	b.n	8003eb2 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e84:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	881a      	ldrh	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e92:	b292      	uxth	r2, r2
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9a:	1c9a      	adds	r2, r3, #2
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fc fc44 	bl	8000770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003efe:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f04:	2b22      	cmp	r3, #34	; 0x22
 8003f06:	d151      	bne.n	8003fac <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f0e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f10:	89bb      	ldrh	r3, [r7, #12]
 8003f12:	b2d9      	uxtb	r1, r3
 8003f14:	89fb      	ldrh	r3, [r7, #14]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	400a      	ands	r2, r1
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d13a      	bne.n	8003fc0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f58:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0201 	bic.w	r2, r2, #1
 8003f68:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d10f      	bne.n	8003f9e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0210 	bic.w	r2, r2, #16
 8003f8c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f94:	4619      	mov	r1, r3
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff fa4e 	bl	8003438 <HAL_UARTEx_RxEventCallback>
 8003f9c:	e002      	b.n	8003fa4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fc fbc4 	bl	800072c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003faa:	e009      	b.n	8003fc0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	8b1b      	ldrh	r3, [r3, #24]
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0208 	orr.w	r2, r2, #8
 8003fbc:	b292      	uxth	r2, r2
 8003fbe:	831a      	strh	r2, [r3, #24]
}
 8003fc0:	bf00      	nop
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fd6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fdc:	2b22      	cmp	r3, #34	; 0x22
 8003fde:	d151      	bne.n	8004084 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fe6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fec:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003fee:	89ba      	ldrh	r2, [r7, #12]
 8003ff0:	89fb      	ldrh	r3, [r7, #14]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	1c9a      	adds	r2, r3, #2
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d13a      	bne.n	8004098 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004030:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004052:	2b01      	cmp	r3, #1
 8004054:	d10f      	bne.n	8004076 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0210 	bic.w	r2, r2, #16
 8004064:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff f9e2 	bl	8003438 <HAL_UARTEx_RxEventCallback>
 8004074:	e002      	b.n	800407c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fc fb58 	bl	800072c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004082:	e009      	b.n	8004098 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	8b1b      	ldrh	r3, [r3, #24]
 800408a:	b29a      	uxth	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0208 	orr.w	r2, r2, #8
 8004094:	b292      	uxth	r2, r2
 8004096:	831a      	strh	r2, [r3, #24]
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <__NVIC_SetPriority>:
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	6039      	str	r1, [r7, #0]
 80040be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	db0a      	blt.n	80040de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	490c      	ldr	r1, [pc, #48]	; (8004100 <__NVIC_SetPriority+0x4c>)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	0112      	lsls	r2, r2, #4
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	440b      	add	r3, r1
 80040d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040dc:	e00a      	b.n	80040f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	4908      	ldr	r1, [pc, #32]	; (8004104 <__NVIC_SetPriority+0x50>)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	3b04      	subs	r3, #4
 80040ec:	0112      	lsls	r2, r2, #4
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	440b      	add	r3, r1
 80040f2:	761a      	strb	r2, [r3, #24]
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000e100 	.word	0xe000e100
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <SysTick_Handler+0x1c>)
 800410e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004110:	f001 fee8 	bl	8005ee4 <xTaskGetSchedulerState>
 8004114:	4603      	mov	r3, r0
 8004116:	2b01      	cmp	r3, #1
 8004118:	d001      	beq.n	800411e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800411a:	f002 fccd 	bl	8006ab8 <xPortSysTickHandler>
  }
}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	e000e010 	.word	0xe000e010

08004128 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800412c:	2100      	movs	r1, #0
 800412e:	f06f 0004 	mvn.w	r0, #4
 8004132:	f7ff ffbf 	bl	80040b4 <__NVIC_SetPriority>
#endif
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004142:	f3ef 8305 	mrs	r3, IPSR
 8004146:	603b      	str	r3, [r7, #0]
  return(result);
 8004148:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800414e:	f06f 0305 	mvn.w	r3, #5
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	e00c      	b.n	8004170 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <osKernelInitialize+0x44>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d105      	bne.n	800416a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <osKernelInitialize+0x44>)
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004164:	2300      	movs	r3, #0
 8004166:	607b      	str	r3, [r7, #4]
 8004168:	e002      	b.n	8004170 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800416a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800416e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004170:	687b      	ldr	r3, [r7, #4]
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000030 	.word	0x20000030

08004184 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800418a:	f3ef 8305 	mrs	r3, IPSR
 800418e:	603b      	str	r3, [r7, #0]
  return(result);
 8004190:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004196:	f06f 0305 	mvn.w	r3, #5
 800419a:	607b      	str	r3, [r7, #4]
 800419c:	e010      	b.n	80041c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800419e:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <osKernelStart+0x48>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d109      	bne.n	80041ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80041a6:	f7ff ffbf 	bl	8004128 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80041aa:	4b08      	ldr	r3, [pc, #32]	; (80041cc <osKernelStart+0x48>)
 80041ac:	2202      	movs	r2, #2
 80041ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80041b0:	f001 fa50 	bl	8005654 <vTaskStartScheduler>
      stat = osOK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	607b      	str	r3, [r7, #4]
 80041b8:	e002      	b.n	80041c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80041ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80041c0:	687b      	ldr	r3, [r7, #4]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000030 	.word	0x20000030

080041d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08e      	sub	sp, #56	; 0x38
 80041d4:	af04      	add	r7, sp, #16
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041e0:	f3ef 8305 	mrs	r3, IPSR
 80041e4:	617b      	str	r3, [r7, #20]
  return(result);
 80041e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d17e      	bne.n	80042ea <osThreadNew+0x11a>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d07b      	beq.n	80042ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80041f2:	2380      	movs	r3, #128	; 0x80
 80041f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80041f6:	2318      	movs	r3, #24
 80041f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004202:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d045      	beq.n	8004296 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <osThreadNew+0x48>
        name = attr->name;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <osThreadNew+0x6e>
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	2b38      	cmp	r3, #56	; 0x38
 8004230:	d805      	bhi.n	800423e <osThreadNew+0x6e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <osThreadNew+0x72>
        return (NULL);
 800423e:	2300      	movs	r3, #0
 8004240:	e054      	b.n	80042ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	089b      	lsrs	r3, r3, #2
 8004250:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00e      	beq.n	8004278 <osThreadNew+0xa8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	2b5b      	cmp	r3, #91	; 0x5b
 8004260:	d90a      	bls.n	8004278 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004266:	2b00      	cmp	r3, #0
 8004268:	d006      	beq.n	8004278 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <osThreadNew+0xa8>
        mem = 1;
 8004272:	2301      	movs	r3, #1
 8004274:	61bb      	str	r3, [r7, #24]
 8004276:	e010      	b.n	800429a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10c      	bne.n	800429a <osThreadNew+0xca>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d108      	bne.n	800429a <osThreadNew+0xca>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d104      	bne.n	800429a <osThreadNew+0xca>
          mem = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	e001      	b.n	800429a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d110      	bne.n	80042c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042a8:	9202      	str	r2, [sp, #8]
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	6a3a      	ldr	r2, [r7, #32]
 80042b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fff6 	bl	80052a8 <xTaskCreateStatic>
 80042bc:	4603      	mov	r3, r0
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	e013      	b.n	80042ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d110      	bne.n	80042ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	f107 0310 	add.w	r3, r7, #16
 80042d0:	9301      	str	r3, [sp, #4]
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f001 f841 	bl	8005362 <xTaskCreate>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d001      	beq.n	80042ea <osThreadNew+0x11a>
            hTask = NULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042ea:	693b      	ldr	r3, [r7, #16]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3728      	adds	r7, #40	; 0x28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042fc:	f3ef 8305 	mrs	r3, IPSR
 8004300:	60bb      	str	r3, [r7, #8]
  return(result);
 8004302:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <osDelay+0x1c>
    stat = osErrorISR;
 8004308:	f06f 0305 	mvn.w	r3, #5
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	e007      	b.n	8004320 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <osDelay+0x2c>
      vTaskDelay(ticks);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f001 f966 	bl	80055ec <vTaskDelay>
    }
  }

  return (stat);
 8004320:	68fb      	ldr	r3, [r7, #12]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800432a:	b580      	push	{r7, lr}
 800432c:	b08a      	sub	sp, #40	; 0x28
 800432e:	af02      	add	r7, sp, #8
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800433a:	f3ef 8305 	mrs	r3, IPSR
 800433e:	613b      	str	r3, [r7, #16]
  return(result);
 8004340:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004342:	2b00      	cmp	r3, #0
 8004344:	d15f      	bne.n	8004406 <osMessageQueueNew+0xdc>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d05c      	beq.n	8004406 <osMessageQueueNew+0xdc>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d059      	beq.n	8004406 <osMessageQueueNew+0xdc>
    mem = -1;
 8004352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004356:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d029      	beq.n	80043b2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d012      	beq.n	800438c <osMessageQueueNew+0x62>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b4f      	cmp	r3, #79	; 0x4f
 800436c:	d90e      	bls.n	800438c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	429a      	cmp	r2, r3
 8004384:	d302      	bcc.n	800438c <osMessageQueueNew+0x62>
        mem = 1;
 8004386:	2301      	movs	r3, #1
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	e014      	b.n	80043b6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d110      	bne.n	80043b6 <osMessageQueueNew+0x8c>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10c      	bne.n	80043b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d108      	bne.n	80043b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d104      	bne.n	80043b6 <osMessageQueueNew+0x8c>
          mem = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61bb      	str	r3, [r7, #24]
 80043b0:	e001      	b.n	80043b6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d10b      	bne.n	80043d4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2100      	movs	r1, #0
 80043c6:	9100      	str	r1, [sp, #0]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fa2e 	bl	800482c <xQueueGenericCreateStatic>
 80043d0:	61f8      	str	r0, [r7, #28]
 80043d2:	e008      	b.n	80043e6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80043da:	2200      	movs	r2, #0
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fa9c 	bl	800491c <xQueueGenericCreate>
 80043e4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00c      	beq.n	8004406 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <osMessageQueueNew+0xd0>
        name = attr->name;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	e001      	b.n	80043fe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80043fe:	6979      	ldr	r1, [r7, #20]
 8004400:	69f8      	ldr	r0, [r7, #28]
 8004402:	f000 fef3 	bl	80051ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004406:	69fb      	ldr	r3, [r7, #28]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004424:	2300      	movs	r3, #0
 8004426:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004428:	f3ef 8305 	mrs	r3, IPSR
 800442c:	617b      	str	r3, [r7, #20]
  return(result);
 800442e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004430:	2b00      	cmp	r3, #0
 8004432:	d028      	beq.n	8004486 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <osMessageQueuePut+0x36>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <osMessageQueuePut+0x36>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004446:	f06f 0303 	mvn.w	r3, #3
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	e038      	b.n	80044c0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800444e:	2300      	movs	r3, #0
 8004450:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004452:	f107 0210 	add.w	r2, r7, #16
 8004456:	2300      	movs	r3, #0
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	69b8      	ldr	r0, [r7, #24]
 800445c:	f000 fbba 	bl	8004bd4 <xQueueGenericSendFromISR>
 8004460:	4603      	mov	r3, r0
 8004462:	2b01      	cmp	r3, #1
 8004464:	d003      	beq.n	800446e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004466:	f06f 0302 	mvn.w	r3, #2
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	e028      	b.n	80044c0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d025      	beq.n	80044c0 <osMessageQueuePut+0xb0>
 8004474:	4b15      	ldr	r3, [pc, #84]	; (80044cc <osMessageQueuePut+0xbc>)
 8004476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	e01c      	b.n	80044c0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <osMessageQueuePut+0x82>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d103      	bne.n	800449a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004492:	f06f 0303 	mvn.w	r3, #3
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	e012      	b.n	80044c0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800449a:	2300      	movs	r3, #0
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	69b8      	ldr	r0, [r7, #24]
 80044a2:	f000 fa99 	bl	80049d8 <xQueueGenericSend>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d009      	beq.n	80044c0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80044b2:	f06f 0301 	mvn.w	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	e002      	b.n	80044c0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80044ba:	f06f 0302 	mvn.w	r3, #2
 80044be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80044c0:	69fb      	ldr	r3, [r7, #28]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3720      	adds	r7, #32
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	e000ed04 	.word	0xe000ed04

080044d0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044e6:	f3ef 8305 	mrs	r3, IPSR
 80044ea:	617b      	str	r3, [r7, #20]
  return(result);
 80044ec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d028      	beq.n	8004544 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <osMessageQueueGet+0x34>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <osMessageQueueGet+0x34>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004504:	f06f 0303 	mvn.w	r3, #3
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	e037      	b.n	800457c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004510:	f107 0310 	add.w	r3, r7, #16
 8004514:	461a      	mov	r2, r3
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	69b8      	ldr	r0, [r7, #24]
 800451a:	f000 fcd7 	bl	8004ecc <xQueueReceiveFromISR>
 800451e:	4603      	mov	r3, r0
 8004520:	2b01      	cmp	r3, #1
 8004522:	d003      	beq.n	800452c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004524:	f06f 0302 	mvn.w	r3, #2
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	e027      	b.n	800457c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d024      	beq.n	800457c <osMessageQueueGet+0xac>
 8004532:	4b15      	ldr	r3, [pc, #84]	; (8004588 <osMessageQueueGet+0xb8>)
 8004534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	e01b      	b.n	800457c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <osMessageQueueGet+0x80>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d103      	bne.n	8004558 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004550:	f06f 0303 	mvn.w	r3, #3
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	e011      	b.n	800457c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	69b8      	ldr	r0, [r7, #24]
 800455e:	f000 fbd5 	bl	8004d0c <xQueueReceive>
 8004562:	4603      	mov	r3, r0
 8004564:	2b01      	cmp	r3, #1
 8004566:	d009      	beq.n	800457c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800456e:	f06f 0301 	mvn.w	r3, #1
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	e002      	b.n	800457c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004576:	f06f 0302 	mvn.w	r3, #2
 800457a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800457c:	69fb      	ldr	r3, [r7, #28]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4a07      	ldr	r2, [pc, #28]	; (80045b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800459c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4a06      	ldr	r2, [pc, #24]	; (80045bc <vApplicationGetIdleTaskMemory+0x30>)
 80045a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2280      	movs	r2, #128	; 0x80
 80045a8:	601a      	str	r2, [r3, #0]
}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000034 	.word	0x20000034
 80045bc:	20000090 	.word	0x20000090

080045c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a07      	ldr	r2, [pc, #28]	; (80045ec <vApplicationGetTimerTaskMemory+0x2c>)
 80045d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4a06      	ldr	r2, [pc, #24]	; (80045f0 <vApplicationGetTimerTaskMemory+0x30>)
 80045d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045de:	601a      	str	r2, [r3, #0]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	20000290 	.word	0x20000290
 80045f0:	200002ec 	.word	0x200002ec

080045f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f103 0208 	add.w	r2, r3, #8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800460c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f103 0208 	add.w	r2, r3, #8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f103 0208 	add.w	r2, r3, #8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800464e:	b480      	push	{r7}
 8004650:	b085      	sub	sp, #20
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]
}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004696:	b480      	push	{r7}
 8004698:	b085      	sub	sp, #20
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ac:	d103      	bne.n	80046b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	e00c      	b.n	80046d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3308      	adds	r3, #8
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e002      	b.n	80046c4 <vListInsert+0x2e>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d2f6      	bcs.n	80046be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	601a      	str	r2, [r3, #0]
}
 80046fc:	bf00      	nop
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6892      	ldr	r2, [r2, #8]
 800471e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6852      	ldr	r2, [r2, #4]
 8004728:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	d103      	bne.n	800473c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	1e5a      	subs	r2, r3, #1
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004782:	bf00      	nop
 8004784:	e7fe      	b.n	8004784 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004786:	f002 f905 	bl	8006994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	68f9      	ldr	r1, [r7, #12]
 8004794:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	441a      	add	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	3b01      	subs	r3, #1
 80047b8:	68f9      	ldr	r1, [r7, #12]
 80047ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	441a      	add	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	22ff      	movs	r2, #255	; 0xff
 80047ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	22ff      	movs	r2, #255	; 0xff
 80047d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d114      	bne.n	8004806 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01a      	beq.n	800481a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3310      	adds	r3, #16
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 f9bd 	bl	8005b68 <xTaskRemoveFromEventList>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d012      	beq.n	800481a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <xQueueGenericReset+0xcc>)
 80047f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	e009      	b.n	800481a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3310      	adds	r3, #16
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fef2 	bl	80045f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3324      	adds	r3, #36	; 0x24
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff feed 	bl	80045f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800481a:	f002 f8eb 	bl	80069f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800481e:	2301      	movs	r3, #1
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	e000ed04 	.word	0xe000ed04

0800482c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08e      	sub	sp, #56	; 0x38
 8004830:	af02      	add	r7, sp, #8
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <xQueueGenericCreateStatic+0x52>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <xQueueGenericCreateStatic+0x56>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <xQueueGenericCreateStatic+0x58>
 8004882:	2300      	movs	r3, #0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10a      	bne.n	800489e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	623b      	str	r3, [r7, #32]
}
 800489a:	bf00      	nop
 800489c:	e7fe      	b.n	800489c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <xQueueGenericCreateStatic+0x7e>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <xQueueGenericCreateStatic+0x82>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <xQueueGenericCreateStatic+0x84>
 80048ae:	2300      	movs	r3, #0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	61fb      	str	r3, [r7, #28]
}
 80048c6:	bf00      	nop
 80048c8:	e7fe      	b.n	80048c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048ca:	2350      	movs	r3, #80	; 0x50
 80048cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2b50      	cmp	r3, #80	; 0x50
 80048d2:	d00a      	beq.n	80048ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	61bb      	str	r3, [r7, #24]
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	4613      	mov	r3, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f83f 	bl	8004990 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004914:	4618      	mov	r0, r3
 8004916:	3730      	adds	r7, #48	; 0x30
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	; 0x28
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	4613      	mov	r3, r2
 8004928:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	613b      	str	r3, [r7, #16]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	3350      	adds	r3, #80	; 0x50
 8004954:	4618      	mov	r0, r3
 8004956:	f002 f93f 	bl	8006bd8 <pvPortMalloc>
 800495a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d011      	beq.n	8004986 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	3350      	adds	r3, #80	; 0x50
 800496a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004974:	79fa      	ldrb	r2, [r7, #7]
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	4613      	mov	r3, r2
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	68b9      	ldr	r1, [r7, #8]
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f805 	bl	8004990 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004986:	69bb      	ldr	r3, [r7, #24]
	}
 8004988:	4618      	mov	r0, r3
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d103      	bne.n	80049ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e002      	b.n	80049b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049be:	2101      	movs	r1, #1
 80049c0:	69b8      	ldr	r0, [r7, #24]
 80049c2:	f7ff fecb 	bl	800475c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	78fa      	ldrb	r2, [r7, #3]
 80049ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049ce:	bf00      	nop
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08e      	sub	sp, #56	; 0x38
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049e6:	2300      	movs	r3, #0
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <xQueueGenericSend+0x32>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d103      	bne.n	8004a18 <xQueueGenericSend+0x40>
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <xQueueGenericSend+0x44>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <xQueueGenericSend+0x46>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <xQueueGenericSend+0x60>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a34:	bf00      	nop
 8004a36:	e7fe      	b.n	8004a36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d103      	bne.n	8004a46 <xQueueGenericSend+0x6e>
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <xQueueGenericSend+0x72>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <xQueueGenericSend+0x74>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <xQueueGenericSend+0x8e>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	623b      	str	r3, [r7, #32]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a66:	f001 fa3d 	bl	8005ee4 <xTaskGetSchedulerState>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d102      	bne.n	8004a76 <xQueueGenericSend+0x9e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <xQueueGenericSend+0xa2>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <xQueueGenericSend+0xa4>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <xQueueGenericSend+0xbe>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	61fb      	str	r3, [r7, #28]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a96:	f001 ff7d 	bl	8006994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d302      	bcc.n	8004aac <xQueueGenericSend+0xd4>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d129      	bne.n	8004b00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ab2:	f000 fa8b 	bl	8004fcc <prvCopyDataToQueue>
 8004ab6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d010      	beq.n	8004ae2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	3324      	adds	r3, #36	; 0x24
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f001 f84f 	bl	8005b68 <xTaskRemoveFromEventList>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d013      	beq.n	8004af8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ad0:	4b3f      	ldr	r3, [pc, #252]	; (8004bd0 <xQueueGenericSend+0x1f8>)
 8004ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	e00a      	b.n	8004af8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ae8:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <xQueueGenericSend+0x1f8>)
 8004aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004af8:	f001 ff7c 	bl	80069f4 <vPortExitCritical>
				return pdPASS;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e063      	b.n	8004bc8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d103      	bne.n	8004b0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b06:	f001 ff75 	bl	80069f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e05c      	b.n	8004bc8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d106      	bne.n	8004b22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b14:	f107 0314 	add.w	r3, r7, #20
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 f889 	bl	8005c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b22:	f001 ff67 	bl	80069f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b26:	f000 fdfb 	bl	8005720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b2a:	f001 ff33 	bl	8006994 <vPortEnterCritical>
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b34:	b25b      	sxtb	r3, r3
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b3a:	d103      	bne.n	8004b44 <xQueueGenericSend+0x16c>
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b4a:	b25b      	sxtb	r3, r3
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b50:	d103      	bne.n	8004b5a <xQueueGenericSend+0x182>
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b5a:	f001 ff4b 	bl	80069f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b5e:	1d3a      	adds	r2, r7, #4
 8004b60:	f107 0314 	add.w	r3, r7, #20
 8004b64:	4611      	mov	r1, r2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f001 f878 	bl	8005c5c <xTaskCheckForTimeOut>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d124      	bne.n	8004bbc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b74:	f000 fb22 	bl	80051bc <prvIsQueueFull>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d018      	beq.n	8004bb0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	3310      	adds	r3, #16
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	4611      	mov	r1, r2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 ff9e 	bl	8005ac8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b8e:	f000 faad 	bl	80050ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b92:	f000 fdd3 	bl	800573c <xTaskResumeAll>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f47f af7c 	bne.w	8004a96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b9e:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <xQueueGenericSend+0x1f8>)
 8004ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	e772      	b.n	8004a96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bb2:	f000 fa9b 	bl	80050ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bb6:	f000 fdc1 	bl	800573c <xTaskResumeAll>
 8004bba:	e76c      	b.n	8004a96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bbe:	f000 fa95 	bl	80050ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bc2:	f000 fdbb 	bl	800573c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004bc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3738      	adds	r7, #56	; 0x38
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b090      	sub	sp, #64	; 0x40
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d103      	bne.n	8004c10 <xQueueGenericSendFromISR+0x3c>
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <xQueueGenericSendFromISR+0x40>
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <xQueueGenericSendFromISR+0x42>
 8004c14:	2300      	movs	r3, #0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10a      	bne.n	8004c30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d103      	bne.n	8004c3e <xQueueGenericSendFromISR+0x6a>
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <xQueueGenericSendFromISR+0x6e>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <xQueueGenericSendFromISR+0x70>
 8004c42:	2300      	movs	r3, #0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	623b      	str	r3, [r7, #32]
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c5e:	f001 ff7b 	bl	8006b58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c62:	f3ef 8211 	mrs	r2, BASEPRI
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	61fa      	str	r2, [r7, #28]
 8004c78:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c7a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c7c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d302      	bcc.n	8004c90 <xQueueGenericSendFromISR+0xbc>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d12f      	bne.n	8004cf0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ca6:	f000 f991 	bl	8004fcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004caa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cb2:	d112      	bne.n	8004cda <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d016      	beq.n	8004cea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	3324      	adds	r3, #36	; 0x24
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 ff51 	bl	8005b68 <xTaskRemoveFromEventList>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00e      	beq.n	8004cea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	e007      	b.n	8004cea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cde:	3301      	adds	r3, #1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	b25a      	sxtb	r2, r3
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004cea:	2301      	movs	r3, #1
 8004cec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004cee:	e001      	b.n	8004cf4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cfe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3740      	adds	r7, #64	; 0x40
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08c      	sub	sp, #48	; 0x30
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <xQueueReceive+0x30>
	__asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	623b      	str	r3, [r7, #32]
}
 8004d38:	bf00      	nop
 8004d3a:	e7fe      	b.n	8004d3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d103      	bne.n	8004d4a <xQueueReceive+0x3e>
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <xQueueReceive+0x42>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <xQueueReceive+0x44>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <xQueueReceive+0x5e>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	61fb      	str	r3, [r7, #28]
}
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d6a:	f001 f8bb 	bl	8005ee4 <xTaskGetSchedulerState>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d102      	bne.n	8004d7a <xQueueReceive+0x6e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <xQueueReceive+0x72>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <xQueueReceive+0x74>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <xQueueReceive+0x8e>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	61bb      	str	r3, [r7, #24]
}
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d9a:	f001 fdfb 	bl	8006994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01f      	beq.n	8004dea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dae:	f000 f977 	bl	80050a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	1e5a      	subs	r2, r3, #1
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00f      	beq.n	8004de2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	3310      	adds	r3, #16
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fece 	bl	8005b68 <xTaskRemoveFromEventList>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dd2:	4b3d      	ldr	r3, [pc, #244]	; (8004ec8 <xQueueReceive+0x1bc>)
 8004dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004de2:	f001 fe07 	bl	80069f4 <vPortExitCritical>
				return pdPASS;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e069      	b.n	8004ebe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d103      	bne.n	8004df8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004df0:	f001 fe00 	bl	80069f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004df4:	2300      	movs	r3, #0
 8004df6:	e062      	b.n	8004ebe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dfe:	f107 0310 	add.w	r3, r7, #16
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 ff14 	bl	8005c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e0c:	f001 fdf2 	bl	80069f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e10:	f000 fc86 	bl	8005720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e14:	f001 fdbe 	bl	8006994 <vPortEnterCritical>
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e1e:	b25b      	sxtb	r3, r3
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e24:	d103      	bne.n	8004e2e <xQueueReceive+0x122>
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e34:	b25b      	sxtb	r3, r3
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e3a:	d103      	bne.n	8004e44 <xQueueReceive+0x138>
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e44:	f001 fdd6 	bl	80069f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e48:	1d3a      	adds	r2, r7, #4
 8004e4a:	f107 0310 	add.w	r3, r7, #16
 8004e4e:	4611      	mov	r1, r2
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 ff03 	bl	8005c5c <xTaskCheckForTimeOut>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d123      	bne.n	8004ea4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e5e:	f000 f997 	bl	8005190 <prvIsQueueEmpty>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d017      	beq.n	8004e98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	3324      	adds	r3, #36	; 0x24
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fe29 	bl	8005ac8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e78:	f000 f938 	bl	80050ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e7c:	f000 fc5e 	bl	800573c <xTaskResumeAll>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d189      	bne.n	8004d9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <xQueueReceive+0x1bc>)
 8004e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	e780      	b.n	8004d9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e9a:	f000 f927 	bl	80050ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e9e:	f000 fc4d 	bl	800573c <xTaskResumeAll>
 8004ea2:	e77a      	b.n	8004d9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ea6:	f000 f921 	bl	80050ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eaa:	f000 fc47 	bl	800573c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eb0:	f000 f96e 	bl	8005190 <prvIsQueueEmpty>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f43f af6f 	beq.w	8004d9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ebc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3730      	adds	r7, #48	; 0x30
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	e000ed04 	.word	0xe000ed04

08004ecc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08e      	sub	sp, #56	; 0x38
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	623b      	str	r3, [r7, #32]
}
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d103      	bne.n	8004f06 <xQueueReceiveFromISR+0x3a>
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <xQueueReceiveFromISR+0x3e>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <xQueueReceiveFromISR+0x40>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	61fb      	str	r3, [r7, #28]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f26:	f001 fe17 	bl	8006b58 <vPortValidateInterruptPriority>
	__asm volatile
 8004f2a:	f3ef 8211 	mrs	r2, BASEPRI
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	61ba      	str	r2, [r7, #24]
 8004f40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004f42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d02f      	beq.n	8004fb2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f60:	f000 f89e 	bl	80050a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	1e5a      	subs	r2, r3, #1
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004f6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f74:	d112      	bne.n	8004f9c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d016      	beq.n	8004fac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	3310      	adds	r3, #16
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fdf0 	bl	8005b68 <xTaskRemoveFromEventList>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00e      	beq.n	8004fac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e007      	b.n	8004fac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	b25a      	sxtb	r2, r3
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004fac:	2301      	movs	r3, #1
 8004fae:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb0:	e001      	b.n	8004fb6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f383 8811 	msr	BASEPRI, r3
}
 8004fc0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3738      	adds	r7, #56	; 0x38
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10d      	bne.n	8005006 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d14d      	bne.n	800508e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 ff92 	bl	8005f20 <xTaskPriorityDisinherit>
 8004ffc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	e043      	b.n	800508e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d119      	bne.n	8005040 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6858      	ldr	r0, [r3, #4]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	461a      	mov	r2, r3
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	f001 ffec 	bl	8006ff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	441a      	add	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	429a      	cmp	r2, r3
 8005034:	d32b      	bcc.n	800508e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	e026      	b.n	800508e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	68d8      	ldr	r0, [r3, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	461a      	mov	r2, r3
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	f001 ffd2 	bl	8006ff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	425b      	negs	r3, r3
 800505a:	441a      	add	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d207      	bcs.n	800507c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	425b      	negs	r3, r3
 8005076:	441a      	add	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d105      	bne.n	800508e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	3b01      	subs	r3, #1
 800508c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005096:	697b      	ldr	r3, [r7, #20]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d018      	beq.n	80050e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	441a      	add	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d303      	bcc.n	80050d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68d9      	ldr	r1, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	461a      	mov	r2, r3
 80050de:	6838      	ldr	r0, [r7, #0]
 80050e0:	f001 ff88 	bl	8006ff4 <memcpy>
	}
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050f4:	f001 fc4e 	bl	8006994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005100:	e011      	b.n	8005126 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	2b00      	cmp	r3, #0
 8005108:	d012      	beq.n	8005130 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3324      	adds	r3, #36	; 0x24
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fd2a 	bl	8005b68 <xTaskRemoveFromEventList>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800511a:	f000 fe01 	bl	8005d20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	3b01      	subs	r3, #1
 8005122:	b2db      	uxtb	r3, r3
 8005124:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800512a:	2b00      	cmp	r3, #0
 800512c:	dce9      	bgt.n	8005102 <prvUnlockQueue+0x16>
 800512e:	e000      	b.n	8005132 <prvUnlockQueue+0x46>
					break;
 8005130:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	22ff      	movs	r2, #255	; 0xff
 8005136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800513a:	f001 fc5b 	bl	80069f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800513e:	f001 fc29 	bl	8006994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005148:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800514a:	e011      	b.n	8005170 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d012      	beq.n	800517a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3310      	adds	r3, #16
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fd05 	bl	8005b68 <xTaskRemoveFromEventList>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005164:	f000 fddc 	bl	8005d20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005168:	7bbb      	ldrb	r3, [r7, #14]
 800516a:	3b01      	subs	r3, #1
 800516c:	b2db      	uxtb	r3, r3
 800516e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005174:	2b00      	cmp	r3, #0
 8005176:	dce9      	bgt.n	800514c <prvUnlockQueue+0x60>
 8005178:	e000      	b.n	800517c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800517a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	22ff      	movs	r2, #255	; 0xff
 8005180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005184:	f001 fc36 	bl	80069f4 <vPortExitCritical>
}
 8005188:	bf00      	nop
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005198:	f001 fbfc 	bl	8006994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	e001      	b.n	80051ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051ae:	f001 fc21 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 80051b2:	68fb      	ldr	r3, [r7, #12]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051c4:	f001 fbe6 	bl	8006994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d102      	bne.n	80051da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051d4:	2301      	movs	r3, #1
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	e001      	b.n	80051de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051de:	f001 fc09 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 80051e2:	68fb      	ldr	r3, [r7, #12]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	e014      	b.n	8005226 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051fc:	4a0f      	ldr	r2, [pc, #60]	; (800523c <vQueueAddToRegistry+0x50>)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005208:	490c      	ldr	r1, [pc, #48]	; (800523c <vQueueAddToRegistry+0x50>)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005212:	4a0a      	ldr	r2, [pc, #40]	; (800523c <vQueueAddToRegistry+0x50>)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4413      	add	r3, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800521e:	e006      	b.n	800522e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3301      	adds	r3, #1
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b07      	cmp	r3, #7
 800522a:	d9e7      	bls.n	80051fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	200019d8 	.word	0x200019d8

08005240 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005250:	f001 fba0 	bl	8006994 <vPortEnterCritical>
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800525a:	b25b      	sxtb	r3, r3
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005260:	d103      	bne.n	800526a <vQueueWaitForMessageRestricted+0x2a>
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005270:	b25b      	sxtb	r3, r3
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005276:	d103      	bne.n	8005280 <vQueueWaitForMessageRestricted+0x40>
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005280:	f001 fbb8 	bl	80069f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d106      	bne.n	800529a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	3324      	adds	r3, #36	; 0x24
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	4618      	mov	r0, r3
 8005296:	f000 fc3b 	bl	8005b10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800529a:	6978      	ldr	r0, [r7, #20]
 800529c:	f7ff ff26 	bl	80050ec <prvUnlockQueue>
	}
 80052a0:	bf00      	nop
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08e      	sub	sp, #56	; 0x38
 80052ac:	af04      	add	r7, sp, #16
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	623b      	str	r3, [r7, #32]
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <xTaskCreateStatic+0x46>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	61fb      	str	r3, [r7, #28]
}
 80052ea:	bf00      	nop
 80052ec:	e7fe      	b.n	80052ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052ee:	235c      	movs	r3, #92	; 0x5c
 80052f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	2b5c      	cmp	r3, #92	; 0x5c
 80052f6:	d00a      	beq.n	800530e <xTaskCreateStatic+0x66>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	61bb      	str	r3, [r7, #24]
}
 800530a:	bf00      	nop
 800530c:	e7fe      	b.n	800530c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800530e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01e      	beq.n	8005354 <xTaskCreateStatic+0xac>
 8005316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01b      	beq.n	8005354 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005324:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	2202      	movs	r2, #2
 800532a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800532e:	2300      	movs	r3, #0
 8005330:	9303      	str	r3, [sp, #12]
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	9302      	str	r3, [sp, #8]
 8005336:	f107 0314 	add.w	r3, r7, #20
 800533a:	9301      	str	r3, [sp, #4]
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f850 	bl	80053ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800534c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800534e:	f000 f8dd 	bl	800550c <prvAddNewTaskToReadyList>
 8005352:	e001      	b.n	8005358 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005358:	697b      	ldr	r3, [r7, #20]
	}
 800535a:	4618      	mov	r0, r3
 800535c:	3728      	adds	r7, #40	; 0x28
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005362:	b580      	push	{r7, lr}
 8005364:	b08c      	sub	sp, #48	; 0x30
 8005366:	af04      	add	r7, sp, #16
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	603b      	str	r3, [r7, #0]
 800536e:	4613      	mov	r3, r2
 8005370:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4618      	mov	r0, r3
 8005378:	f001 fc2e 	bl	8006bd8 <pvPortMalloc>
 800537c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00e      	beq.n	80053a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005384:	205c      	movs	r0, #92	; 0x5c
 8005386:	f001 fc27 	bl	8006bd8 <pvPortMalloc>
 800538a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	631a      	str	r2, [r3, #48]	; 0x30
 8005398:	e005      	b.n	80053a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800539a:	6978      	ldr	r0, [r7, #20]
 800539c:	f001 fce8 	bl	8006d70 <vPortFree>
 80053a0:	e001      	b.n	80053a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d017      	beq.n	80053dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053b4:	88fa      	ldrh	r2, [r7, #6]
 80053b6:	2300      	movs	r3, #0
 80053b8:	9303      	str	r3, [sp, #12]
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	9302      	str	r3, [sp, #8]
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f80e 	bl	80053ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053d0:	69f8      	ldr	r0, [r7, #28]
 80053d2:	f000 f89b 	bl	800550c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053d6:	2301      	movs	r3, #1
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	e002      	b.n	80053e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053e2:	69bb      	ldr	r3, [r7, #24]
	}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3720      	adds	r7, #32
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	461a      	mov	r2, r3
 8005404:	21a5      	movs	r1, #165	; 0xa5
 8005406:	f001 fe03 	bl	8007010 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005414:	3b01      	subs	r3, #1
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f023 0307 	bic.w	r3, r3, #7
 8005422:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <prvInitialiseNewTask+0x58>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	617b      	str	r3, [r7, #20]
}
 8005440:	bf00      	nop
 8005442:	e7fe      	b.n	8005442 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d01f      	beq.n	800548a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800544a:	2300      	movs	r3, #0
 800544c:	61fb      	str	r3, [r7, #28]
 800544e:	e012      	b.n	8005476 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	7819      	ldrb	r1, [r3, #0]
 8005458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	3334      	adds	r3, #52	; 0x34
 8005460:	460a      	mov	r2, r1
 8005462:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	4413      	add	r3, r2
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d006      	beq.n	800547e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	3301      	adds	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b0f      	cmp	r3, #15
 800547a:	d9e9      	bls.n	8005450 <prvInitialiseNewTask+0x64>
 800547c:	e000      	b.n	8005480 <prvInitialiseNewTask+0x94>
			{
				break;
 800547e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005488:	e003      	b.n	8005492 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	2b37      	cmp	r3, #55	; 0x37
 8005496:	d901      	bls.n	800549c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005498:	2337      	movs	r3, #55	; 0x37
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	2200      	movs	r2, #0
 80054ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	3304      	adds	r3, #4
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff f8be 	bl	8004634 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	3318      	adds	r3, #24
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff f8b9 	bl	8004634 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	2200      	movs	r2, #0
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	68f9      	ldr	r1, [r7, #12]
 80054ea:	69b8      	ldr	r0, [r7, #24]
 80054ec:	f001 f928 	bl	8006740 <pxPortInitialiseStack>
 80054f0:	4602      	mov	r2, r0
 80054f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005502:	bf00      	nop
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005514:	f001 fa3e 	bl	8006994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005518:	4b2d      	ldr	r3, [pc, #180]	; (80055d0 <prvAddNewTaskToReadyList+0xc4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3301      	adds	r3, #1
 800551e:	4a2c      	ldr	r2, [pc, #176]	; (80055d0 <prvAddNewTaskToReadyList+0xc4>)
 8005520:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005522:	4b2c      	ldr	r3, [pc, #176]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800552a:	4a2a      	ldr	r2, [pc, #168]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005530:	4b27      	ldr	r3, [pc, #156]	; (80055d0 <prvAddNewTaskToReadyList+0xc4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d110      	bne.n	800555a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005538:	f000 fc16 	bl	8005d68 <prvInitialiseTaskLists>
 800553c:	e00d      	b.n	800555a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800553e:	4b26      	ldr	r3, [pc, #152]	; (80055d8 <prvAddNewTaskToReadyList+0xcc>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005546:	4b23      	ldr	r3, [pc, #140]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	429a      	cmp	r2, r3
 8005552:	d802      	bhi.n	800555a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005554:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800555a:	4b20      	ldr	r3, [pc, #128]	; (80055dc <prvAddNewTaskToReadyList+0xd0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3301      	adds	r3, #1
 8005560:	4a1e      	ldr	r2, [pc, #120]	; (80055dc <prvAddNewTaskToReadyList+0xd0>)
 8005562:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005564:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <prvAddNewTaskToReadyList+0xd0>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005570:	4b1b      	ldr	r3, [pc, #108]	; (80055e0 <prvAddNewTaskToReadyList+0xd4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d903      	bls.n	8005580 <prvAddNewTaskToReadyList+0x74>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	4a18      	ldr	r2, [pc, #96]	; (80055e0 <prvAddNewTaskToReadyList+0xd4>)
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4a15      	ldr	r2, [pc, #84]	; (80055e4 <prvAddNewTaskToReadyList+0xd8>)
 800558e:	441a      	add	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f7ff f859 	bl	800464e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800559c:	f001 fa2a 	bl	80069f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055a0:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <prvAddNewTaskToReadyList+0xcc>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00e      	beq.n	80055c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d207      	bcs.n	80055c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055b6:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <prvAddNewTaskToReadyList+0xdc>)
 80055b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000bc0 	.word	0x20000bc0
 80055d4:	200006ec 	.word	0x200006ec
 80055d8:	20000bcc 	.word	0x20000bcc
 80055dc:	20000bdc 	.word	0x20000bdc
 80055e0:	20000bc8 	.word	0x20000bc8
 80055e4:	200006f0 	.word	0x200006f0
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d017      	beq.n	800562e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055fe:	4b13      	ldr	r3, [pc, #76]	; (800564c <vTaskDelay+0x60>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <vTaskDelay+0x30>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60bb      	str	r3, [r7, #8]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800561c:	f000 f880 	bl	8005720 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005620:	2100      	movs	r1, #0
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fcea 	bl	8005ffc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005628:	f000 f888 	bl	800573c <xTaskResumeAll>
 800562c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d107      	bne.n	8005644 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <vTaskDelay+0x64>)
 8005636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000be8 	.word	0x20000be8
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08a      	sub	sp, #40	; 0x28
 8005658:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005662:	463a      	mov	r2, r7
 8005664:	1d39      	adds	r1, r7, #4
 8005666:	f107 0308 	add.w	r3, r7, #8
 800566a:	4618      	mov	r0, r3
 800566c:	f7fe ff8e 	bl	800458c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	9202      	str	r2, [sp, #8]
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	2300      	movs	r3, #0
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	2300      	movs	r3, #0
 8005680:	460a      	mov	r2, r1
 8005682:	4921      	ldr	r1, [pc, #132]	; (8005708 <vTaskStartScheduler+0xb4>)
 8005684:	4821      	ldr	r0, [pc, #132]	; (800570c <vTaskStartScheduler+0xb8>)
 8005686:	f7ff fe0f 	bl	80052a8 <xTaskCreateStatic>
 800568a:	4603      	mov	r3, r0
 800568c:	4a20      	ldr	r2, [pc, #128]	; (8005710 <vTaskStartScheduler+0xbc>)
 800568e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005690:	4b1f      	ldr	r3, [pc, #124]	; (8005710 <vTaskStartScheduler+0xbc>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005698:	2301      	movs	r3, #1
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	e001      	b.n	80056a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d102      	bne.n	80056ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056a8:	f000 fcfc 	bl	80060a4 <xTimerCreateTimerTask>
 80056ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d116      	bne.n	80056e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	613b      	str	r3, [r7, #16]
}
 80056c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056c8:	4b12      	ldr	r3, [pc, #72]	; (8005714 <vTaskStartScheduler+0xc0>)
 80056ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056d0:	4b11      	ldr	r3, [pc, #68]	; (8005718 <vTaskStartScheduler+0xc4>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056d6:	4b11      	ldr	r3, [pc, #68]	; (800571c <vTaskStartScheduler+0xc8>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056dc:	f001 f8b8 	bl	8006850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056e0:	e00e      	b.n	8005700 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056e8:	d10a      	bne.n	8005700 <vTaskStartScheduler+0xac>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	60fb      	str	r3, [r7, #12]
}
 80056fc:	bf00      	nop
 80056fe:	e7fe      	b.n	80056fe <vTaskStartScheduler+0xaa>
}
 8005700:	bf00      	nop
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	0800704c 	.word	0x0800704c
 800570c:	08005d39 	.word	0x08005d39
 8005710:	20000be4 	.word	0x20000be4
 8005714:	20000be0 	.word	0x20000be0
 8005718:	20000bcc 	.word	0x20000bcc
 800571c:	20000bc4 	.word	0x20000bc4

08005720 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005724:	4b04      	ldr	r3, [pc, #16]	; (8005738 <vTaskSuspendAll+0x18>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3301      	adds	r3, #1
 800572a:	4a03      	ldr	r2, [pc, #12]	; (8005738 <vTaskSuspendAll+0x18>)
 800572c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800572e:	bf00      	nop
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	20000be8 	.word	0x20000be8

0800573c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800574a:	4b42      	ldr	r3, [pc, #264]	; (8005854 <xTaskResumeAll+0x118>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10a      	bne.n	8005768 <xTaskResumeAll+0x2c>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	603b      	str	r3, [r7, #0]
}
 8005764:	bf00      	nop
 8005766:	e7fe      	b.n	8005766 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005768:	f001 f914 	bl	8006994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800576c:	4b39      	ldr	r3, [pc, #228]	; (8005854 <xTaskResumeAll+0x118>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3b01      	subs	r3, #1
 8005772:	4a38      	ldr	r2, [pc, #224]	; (8005854 <xTaskResumeAll+0x118>)
 8005774:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005776:	4b37      	ldr	r3, [pc, #220]	; (8005854 <xTaskResumeAll+0x118>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d162      	bne.n	8005844 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800577e:	4b36      	ldr	r3, [pc, #216]	; (8005858 <xTaskResumeAll+0x11c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d05e      	beq.n	8005844 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005786:	e02f      	b.n	80057e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005788:	4b34      	ldr	r3, [pc, #208]	; (800585c <xTaskResumeAll+0x120>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3318      	adds	r3, #24
 8005794:	4618      	mov	r0, r3
 8005796:	f7fe ffb7 	bl	8004708 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3304      	adds	r3, #4
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe ffb2 	bl	8004708 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a8:	4b2d      	ldr	r3, [pc, #180]	; (8005860 <xTaskResumeAll+0x124>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d903      	bls.n	80057b8 <xTaskResumeAll+0x7c>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	4a2a      	ldr	r2, [pc, #168]	; (8005860 <xTaskResumeAll+0x124>)
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4a27      	ldr	r2, [pc, #156]	; (8005864 <xTaskResumeAll+0x128>)
 80057c6:	441a      	add	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7fe ff3d 	bl	800464e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d8:	4b23      	ldr	r3, [pc, #140]	; (8005868 <xTaskResumeAll+0x12c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	429a      	cmp	r2, r3
 80057e0:	d302      	bcc.n	80057e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80057e2:	4b22      	ldr	r3, [pc, #136]	; (800586c <xTaskResumeAll+0x130>)
 80057e4:	2201      	movs	r2, #1
 80057e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057e8:	4b1c      	ldr	r3, [pc, #112]	; (800585c <xTaskResumeAll+0x120>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1cb      	bne.n	8005788 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057f6:	f000 fb55 	bl	8005ea4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057fa:	4b1d      	ldr	r3, [pc, #116]	; (8005870 <xTaskResumeAll+0x134>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d010      	beq.n	8005828 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005806:	f000 f847 	bl	8005898 <xTaskIncrementTick>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005810:	4b16      	ldr	r3, [pc, #88]	; (800586c <xTaskResumeAll+0x130>)
 8005812:	2201      	movs	r2, #1
 8005814:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3b01      	subs	r3, #1
 800581a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f1      	bne.n	8005806 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005822:	4b13      	ldr	r3, [pc, #76]	; (8005870 <xTaskResumeAll+0x134>)
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005828:	4b10      	ldr	r3, [pc, #64]	; (800586c <xTaskResumeAll+0x130>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005830:	2301      	movs	r3, #1
 8005832:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005834:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <xTaskResumeAll+0x138>)
 8005836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005844:	f001 f8d6 	bl	80069f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005848:	68bb      	ldr	r3, [r7, #8]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000be8 	.word	0x20000be8
 8005858:	20000bc0 	.word	0x20000bc0
 800585c:	20000b80 	.word	0x20000b80
 8005860:	20000bc8 	.word	0x20000bc8
 8005864:	200006f0 	.word	0x200006f0
 8005868:	200006ec 	.word	0x200006ec
 800586c:	20000bd4 	.word	0x20000bd4
 8005870:	20000bd0 	.word	0x20000bd0
 8005874:	e000ed04 	.word	0xe000ed04

08005878 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <xTaskGetTickCount+0x1c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005884:	687b      	ldr	r3, [r7, #4]
}
 8005886:	4618      	mov	r0, r3
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	20000bc4 	.word	0x20000bc4

08005898 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058a2:	4b4f      	ldr	r3, [pc, #316]	; (80059e0 <xTaskIncrementTick+0x148>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f040 808f 	bne.w	80059ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058ac:	4b4d      	ldr	r3, [pc, #308]	; (80059e4 <xTaskIncrementTick+0x14c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3301      	adds	r3, #1
 80058b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058b4:	4a4b      	ldr	r2, [pc, #300]	; (80059e4 <xTaskIncrementTick+0x14c>)
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d120      	bne.n	8005902 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80058c0:	4b49      	ldr	r3, [pc, #292]	; (80059e8 <xTaskIncrementTick+0x150>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	603b      	str	r3, [r7, #0]
}
 80058dc:	bf00      	nop
 80058de:	e7fe      	b.n	80058de <xTaskIncrementTick+0x46>
 80058e0:	4b41      	ldr	r3, [pc, #260]	; (80059e8 <xTaskIncrementTick+0x150>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	4b41      	ldr	r3, [pc, #260]	; (80059ec <xTaskIncrementTick+0x154>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a3f      	ldr	r2, [pc, #252]	; (80059e8 <xTaskIncrementTick+0x150>)
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	4a3f      	ldr	r2, [pc, #252]	; (80059ec <xTaskIncrementTick+0x154>)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	4b3e      	ldr	r3, [pc, #248]	; (80059f0 <xTaskIncrementTick+0x158>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3301      	adds	r3, #1
 80058fa:	4a3d      	ldr	r2, [pc, #244]	; (80059f0 <xTaskIncrementTick+0x158>)
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	f000 fad1 	bl	8005ea4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005902:	4b3c      	ldr	r3, [pc, #240]	; (80059f4 <xTaskIncrementTick+0x15c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	429a      	cmp	r2, r3
 800590a:	d349      	bcc.n	80059a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800590c:	4b36      	ldr	r3, [pc, #216]	; (80059e8 <xTaskIncrementTick+0x150>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d104      	bne.n	8005920 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005916:	4b37      	ldr	r3, [pc, #220]	; (80059f4 <xTaskIncrementTick+0x15c>)
 8005918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800591c:	601a      	str	r2, [r3, #0]
					break;
 800591e:	e03f      	b.n	80059a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005920:	4b31      	ldr	r3, [pc, #196]	; (80059e8 <xTaskIncrementTick+0x150>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	429a      	cmp	r2, r3
 8005936:	d203      	bcs.n	8005940 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005938:	4a2e      	ldr	r2, [pc, #184]	; (80059f4 <xTaskIncrementTick+0x15c>)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800593e:	e02f      	b.n	80059a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	3304      	adds	r3, #4
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe fedf 	bl	8004708 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	2b00      	cmp	r3, #0
 8005950:	d004      	beq.n	800595c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	3318      	adds	r3, #24
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fed6 	bl	8004708 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005960:	4b25      	ldr	r3, [pc, #148]	; (80059f8 <xTaskIncrementTick+0x160>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d903      	bls.n	8005970 <xTaskIncrementTick+0xd8>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	4a22      	ldr	r2, [pc, #136]	; (80059f8 <xTaskIncrementTick+0x160>)
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4a1f      	ldr	r2, [pc, #124]	; (80059fc <xTaskIncrementTick+0x164>)
 800597e:	441a      	add	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	3304      	adds	r3, #4
 8005984:	4619      	mov	r1, r3
 8005986:	4610      	mov	r0, r2
 8005988:	f7fe fe61 	bl	800464e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	4b1b      	ldr	r3, [pc, #108]	; (8005a00 <xTaskIncrementTick+0x168>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	429a      	cmp	r2, r3
 8005998:	d3b8      	bcc.n	800590c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800599a:	2301      	movs	r3, #1
 800599c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800599e:	e7b5      	b.n	800590c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059a0:	4b17      	ldr	r3, [pc, #92]	; (8005a00 <xTaskIncrementTick+0x168>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a6:	4915      	ldr	r1, [pc, #84]	; (80059fc <xTaskIncrementTick+0x164>)
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	440b      	add	r3, r1
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d901      	bls.n	80059bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80059b8:	2301      	movs	r3, #1
 80059ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059bc:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <xTaskIncrementTick+0x16c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d007      	beq.n	80059d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80059c4:	2301      	movs	r3, #1
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	e004      	b.n	80059d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059ca:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <xTaskIncrementTick+0x170>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3301      	adds	r3, #1
 80059d0:	4a0d      	ldr	r2, [pc, #52]	; (8005a08 <xTaskIncrementTick+0x170>)
 80059d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059d4:	697b      	ldr	r3, [r7, #20]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000be8 	.word	0x20000be8
 80059e4:	20000bc4 	.word	0x20000bc4
 80059e8:	20000b78 	.word	0x20000b78
 80059ec:	20000b7c 	.word	0x20000b7c
 80059f0:	20000bd8 	.word	0x20000bd8
 80059f4:	20000be0 	.word	0x20000be0
 80059f8:	20000bc8 	.word	0x20000bc8
 80059fc:	200006f0 	.word	0x200006f0
 8005a00:	200006ec 	.word	0x200006ec
 8005a04:	20000bd4 	.word	0x20000bd4
 8005a08:	20000bd0 	.word	0x20000bd0

08005a0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a12:	4b28      	ldr	r3, [pc, #160]	; (8005ab4 <vTaskSwitchContext+0xa8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a1a:	4b27      	ldr	r3, [pc, #156]	; (8005ab8 <vTaskSwitchContext+0xac>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a20:	e041      	b.n	8005aa6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005a22:	4b25      	ldr	r3, [pc, #148]	; (8005ab8 <vTaskSwitchContext+0xac>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a28:	4b24      	ldr	r3, [pc, #144]	; (8005abc <vTaskSwitchContext+0xb0>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	e010      	b.n	8005a52 <vTaskSwitchContext+0x46>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10a      	bne.n	8005a4c <vTaskSwitchContext+0x40>
	__asm volatile
 8005a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	607b      	str	r3, [r7, #4]
}
 8005a48:	bf00      	nop
 8005a4a:	e7fe      	b.n	8005a4a <vTaskSwitchContext+0x3e>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	491b      	ldr	r1, [pc, #108]	; (8005ac0 <vTaskSwitchContext+0xb4>)
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0e4      	beq.n	8005a30 <vTaskSwitchContext+0x24>
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <vTaskSwitchContext+0xb4>)
 8005a72:	4413      	add	r3, r2
 8005a74:	60bb      	str	r3, [r7, #8]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	605a      	str	r2, [r3, #4]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	3308      	adds	r3, #8
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d104      	bne.n	8005a96 <vTaskSwitchContext+0x8a>
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <vTaskSwitchContext+0xb8>)
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4a06      	ldr	r2, [pc, #24]	; (8005abc <vTaskSwitchContext+0xb0>)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6013      	str	r3, [r2, #0]
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000be8 	.word	0x20000be8
 8005ab8:	20000bd4 	.word	0x20000bd4
 8005abc:	20000bc8 	.word	0x20000bc8
 8005ac0:	200006f0 	.word	0x200006f0
 8005ac4:	200006ec 	.word	0x200006ec

08005ac8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	60fb      	str	r3, [r7, #12]
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aee:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <vTaskPlaceOnEventList+0x44>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3318      	adds	r3, #24
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fe fdcd 	bl	8004696 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005afc:	2101      	movs	r1, #1
 8005afe:	6838      	ldr	r0, [r7, #0]
 8005b00:	f000 fa7c 	bl	8005ffc <prvAddCurrentTaskToDelayedList>
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	200006ec 	.word	0x200006ec

08005b10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10a      	bne.n	8005b38 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	617b      	str	r3, [r7, #20]
}
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3318      	adds	r3, #24
 8005b3e:	4619      	mov	r1, r3
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f7fe fd84 	bl	800464e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	68b8      	ldr	r0, [r7, #8]
 8005b56:	f000 fa51 	bl	8005ffc <prvAddCurrentTaskToDelayedList>
	}
 8005b5a:	bf00      	nop
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	200006ec 	.word	0x200006ec

08005b68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	60fb      	str	r3, [r7, #12]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	3318      	adds	r3, #24
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fe fdb5 	bl	8004708 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b9e:	4b1e      	ldr	r3, [pc, #120]	; (8005c18 <xTaskRemoveFromEventList+0xb0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d11d      	bne.n	8005be2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fdac 	bl	8004708 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb4:	4b19      	ldr	r3, [pc, #100]	; (8005c1c <xTaskRemoveFromEventList+0xb4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d903      	bls.n	8005bc4 <xTaskRemoveFromEventList+0x5c>
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	4a16      	ldr	r2, [pc, #88]	; (8005c1c <xTaskRemoveFromEventList+0xb4>)
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4a13      	ldr	r2, [pc, #76]	; (8005c20 <xTaskRemoveFromEventList+0xb8>)
 8005bd2:	441a      	add	r2, r3
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f7fe fd37 	bl	800464e <vListInsertEnd>
 8005be0:	e005      	b.n	8005bee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3318      	adds	r3, #24
 8005be6:	4619      	mov	r1, r3
 8005be8:	480e      	ldr	r0, [pc, #56]	; (8005c24 <xTaskRemoveFromEventList+0xbc>)
 8005bea:	f7fe fd30 	bl	800464e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <xTaskRemoveFromEventList+0xc0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d905      	bls.n	8005c08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c00:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <xTaskRemoveFromEventList+0xc4>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	e001      	b.n	8005c0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c0c:	697b      	ldr	r3, [r7, #20]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000be8 	.word	0x20000be8
 8005c1c:	20000bc8 	.word	0x20000bc8
 8005c20:	200006f0 	.word	0x200006f0
 8005c24:	20000b80 	.word	0x20000b80
 8005c28:	200006ec 	.word	0x200006ec
 8005c2c:	20000bd4 	.word	0x20000bd4

08005c30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c38:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <vTaskInternalSetTimeOutState+0x24>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c40:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <vTaskInternalSetTimeOutState+0x28>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	605a      	str	r2, [r3, #4]
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	20000bd8 	.word	0x20000bd8
 8005c58:	20000bc4 	.word	0x20000bc4

08005c5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	613b      	str	r3, [r7, #16]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	60fb      	str	r3, [r7, #12]
}
 8005c9a:	bf00      	nop
 8005c9c:	e7fe      	b.n	8005c9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c9e:	f000 fe79 	bl	8006994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ca2:	4b1d      	ldr	r3, [pc, #116]	; (8005d18 <xTaskCheckForTimeOut+0xbc>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cba:	d102      	bne.n	8005cc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61fb      	str	r3, [r7, #28]
 8005cc0:	e023      	b.n	8005d0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4b15      	ldr	r3, [pc, #84]	; (8005d1c <xTaskCheckForTimeOut+0xc0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d007      	beq.n	8005cde <xTaskCheckForTimeOut+0x82>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d302      	bcc.n	8005cde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	e015      	b.n	8005d0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d20b      	bcs.n	8005d00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff ff9b 	bl	8005c30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	e004      	b.n	8005d0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d06:	2301      	movs	r3, #1
 8005d08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d0a:	f000 fe73 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 8005d0e:	69fb      	ldr	r3, [r7, #28]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3720      	adds	r7, #32
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000bc4 	.word	0x20000bc4
 8005d1c:	20000bd8 	.word	0x20000bd8

08005d20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <vTaskMissedYield+0x14>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	20000bd4 	.word	0x20000bd4

08005d38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d40:	f000 f852 	bl	8005de8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <prvIdleTask+0x28>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d9f9      	bls.n	8005d40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d4c:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <prvIdleTask+0x2c>)
 8005d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d5c:	e7f0      	b.n	8005d40 <prvIdleTask+0x8>
 8005d5e:	bf00      	nop
 8005d60:	200006f0 	.word	0x200006f0
 8005d64:	e000ed04 	.word	0xe000ed04

08005d68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d6e:	2300      	movs	r3, #0
 8005d70:	607b      	str	r3, [r7, #4]
 8005d72:	e00c      	b.n	8005d8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4a12      	ldr	r2, [pc, #72]	; (8005dc8 <prvInitialiseTaskLists+0x60>)
 8005d80:	4413      	add	r3, r2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fc36 	bl	80045f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	607b      	str	r3, [r7, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b37      	cmp	r3, #55	; 0x37
 8005d92:	d9ef      	bls.n	8005d74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d94:	480d      	ldr	r0, [pc, #52]	; (8005dcc <prvInitialiseTaskLists+0x64>)
 8005d96:	f7fe fc2d 	bl	80045f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d9a:	480d      	ldr	r0, [pc, #52]	; (8005dd0 <prvInitialiseTaskLists+0x68>)
 8005d9c:	f7fe fc2a 	bl	80045f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005da0:	480c      	ldr	r0, [pc, #48]	; (8005dd4 <prvInitialiseTaskLists+0x6c>)
 8005da2:	f7fe fc27 	bl	80045f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005da6:	480c      	ldr	r0, [pc, #48]	; (8005dd8 <prvInitialiseTaskLists+0x70>)
 8005da8:	f7fe fc24 	bl	80045f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005dac:	480b      	ldr	r0, [pc, #44]	; (8005ddc <prvInitialiseTaskLists+0x74>)
 8005dae:	f7fe fc21 	bl	80045f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <prvInitialiseTaskLists+0x78>)
 8005db4:	4a05      	ldr	r2, [pc, #20]	; (8005dcc <prvInitialiseTaskLists+0x64>)
 8005db6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005db8:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <prvInitialiseTaskLists+0x7c>)
 8005dba:	4a05      	ldr	r2, [pc, #20]	; (8005dd0 <prvInitialiseTaskLists+0x68>)
 8005dbc:	601a      	str	r2, [r3, #0]
}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	200006f0 	.word	0x200006f0
 8005dcc:	20000b50 	.word	0x20000b50
 8005dd0:	20000b64 	.word	0x20000b64
 8005dd4:	20000b80 	.word	0x20000b80
 8005dd8:	20000b94 	.word	0x20000b94
 8005ddc:	20000bac 	.word	0x20000bac
 8005de0:	20000b78 	.word	0x20000b78
 8005de4:	20000b7c 	.word	0x20000b7c

08005de8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dee:	e019      	b.n	8005e24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005df0:	f000 fdd0 	bl	8006994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df4:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <prvCheckTasksWaitingTermination+0x50>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fe fc81 	bl	8004708 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e06:	4b0d      	ldr	r3, [pc, #52]	; (8005e3c <prvCheckTasksWaitingTermination+0x54>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	4a0b      	ldr	r2, [pc, #44]	; (8005e3c <prvCheckTasksWaitingTermination+0x54>)
 8005e0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e10:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <prvCheckTasksWaitingTermination+0x58>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <prvCheckTasksWaitingTermination+0x58>)
 8005e18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e1a:	f000 fdeb 	bl	80069f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f810 	bl	8005e44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e24:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <prvCheckTasksWaitingTermination+0x58>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e1      	bne.n	8005df0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000b94 	.word	0x20000b94
 8005e3c:	20000bc0 	.word	0x20000bc0
 8005e40:	20000ba8 	.word	0x20000ba8

08005e44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d108      	bne.n	8005e68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 ff88 	bl	8006d70 <vPortFree>
				vPortFree( pxTCB );
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 ff85 	bl	8006d70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e66:	e018      	b.n	8005e9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d103      	bne.n	8005e7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 ff7c 	bl	8006d70 <vPortFree>
	}
 8005e78:	e00f      	b.n	8005e9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d00a      	beq.n	8005e9a <prvDeleteTCB+0x56>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	60fb      	str	r3, [r7, #12]
}
 8005e96:	bf00      	nop
 8005e98:	e7fe      	b.n	8005e98 <prvDeleteTCB+0x54>
	}
 8005e9a:	bf00      	nop
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eaa:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <prvResetNextTaskUnblockTime+0x38>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8005eb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ebc:	e008      	b.n	8005ed0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebe:	4b07      	ldr	r3, [pc, #28]	; (8005edc <prvResetNextTaskUnblockTime+0x38>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	4a04      	ldr	r2, [pc, #16]	; (8005ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ece:	6013      	str	r3, [r2, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	20000b78 	.word	0x20000b78
 8005ee0:	20000be0 	.word	0x20000be0

08005ee4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005eea:	4b0b      	ldr	r3, [pc, #44]	; (8005f18 <xTaskGetSchedulerState+0x34>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	607b      	str	r3, [r7, #4]
 8005ef6:	e008      	b.n	8005f0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ef8:	4b08      	ldr	r3, [pc, #32]	; (8005f1c <xTaskGetSchedulerState+0x38>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d102      	bne.n	8005f06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f00:	2302      	movs	r3, #2
 8005f02:	607b      	str	r3, [r7, #4]
 8005f04:	e001      	b.n	8005f0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f06:	2300      	movs	r3, #0
 8005f08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f0a:	687b      	ldr	r3, [r7, #4]
	}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	20000bcc 	.word	0x20000bcc
 8005f1c:	20000be8 	.word	0x20000be8

08005f20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d056      	beq.n	8005fe4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f36:	4b2e      	ldr	r3, [pc, #184]	; (8005ff0 <xTaskPriorityDisinherit+0xd0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d00a      	beq.n	8005f56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	60fb      	str	r3, [r7, #12]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10a      	bne.n	8005f74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	60bb      	str	r3, [r7, #8]
}
 8005f70:	bf00      	nop
 8005f72:	e7fe      	b.n	8005f72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f78:	1e5a      	subs	r2, r3, #1
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d02c      	beq.n	8005fe4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d128      	bne.n	8005fe4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	3304      	adds	r3, #4
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe fbb6 	bl	8004708 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <xTaskPriorityDisinherit+0xd4>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d903      	bls.n	8005fc4 <xTaskPriorityDisinherit+0xa4>
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	4a0c      	ldr	r2, [pc, #48]	; (8005ff4 <xTaskPriorityDisinherit+0xd4>)
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4a09      	ldr	r2, [pc, #36]	; (8005ff8 <xTaskPriorityDisinherit+0xd8>)
 8005fd2:	441a      	add	r2, r3
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	f7fe fb37 	bl	800464e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fe4:	697b      	ldr	r3, [r7, #20]
	}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	200006ec 	.word	0x200006ec
 8005ff4:	20000bc8 	.word	0x20000bc8
 8005ff8:	200006f0 	.word	0x200006f0

08005ffc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006006:	4b21      	ldr	r3, [pc, #132]	; (800608c <prvAddCurrentTaskToDelayedList+0x90>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800600c:	4b20      	ldr	r3, [pc, #128]	; (8006090 <prvAddCurrentTaskToDelayedList+0x94>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3304      	adds	r3, #4
 8006012:	4618      	mov	r0, r3
 8006014:	f7fe fb78 	bl	8004708 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800601e:	d10a      	bne.n	8006036 <prvAddCurrentTaskToDelayedList+0x3a>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d007      	beq.n	8006036 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006026:	4b1a      	ldr	r3, [pc, #104]	; (8006090 <prvAddCurrentTaskToDelayedList+0x94>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3304      	adds	r3, #4
 800602c:	4619      	mov	r1, r3
 800602e:	4819      	ldr	r0, [pc, #100]	; (8006094 <prvAddCurrentTaskToDelayedList+0x98>)
 8006030:	f7fe fb0d 	bl	800464e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006034:	e026      	b.n	8006084 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4413      	add	r3, r2
 800603c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800603e:	4b14      	ldr	r3, [pc, #80]	; (8006090 <prvAddCurrentTaskToDelayedList+0x94>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	429a      	cmp	r2, r3
 800604c:	d209      	bcs.n	8006062 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800604e:	4b12      	ldr	r3, [pc, #72]	; (8006098 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4b0f      	ldr	r3, [pc, #60]	; (8006090 <prvAddCurrentTaskToDelayedList+0x94>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3304      	adds	r3, #4
 8006058:	4619      	mov	r1, r3
 800605a:	4610      	mov	r0, r2
 800605c:	f7fe fb1b 	bl	8004696 <vListInsert>
}
 8006060:	e010      	b.n	8006084 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006062:	4b0e      	ldr	r3, [pc, #56]	; (800609c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b0a      	ldr	r3, [pc, #40]	; (8006090 <prvAddCurrentTaskToDelayedList+0x94>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f7fe fb11 	bl	8004696 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006074:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	429a      	cmp	r2, r3
 800607c:	d202      	bcs.n	8006084 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800607e:	4a08      	ldr	r2, [pc, #32]	; (80060a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6013      	str	r3, [r2, #0]
}
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000bc4 	.word	0x20000bc4
 8006090:	200006ec 	.word	0x200006ec
 8006094:	20000bac 	.word	0x20000bac
 8006098:	20000b7c 	.word	0x20000b7c
 800609c:	20000b78 	.word	0x20000b78
 80060a0:	20000be0 	.word	0x20000be0

080060a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08a      	sub	sp, #40	; 0x28
 80060a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060ae:	f000 fb07 	bl	80066c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060b2:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <xTimerCreateTimerTask+0x80>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d021      	beq.n	80060fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060c2:	1d3a      	adds	r2, r7, #4
 80060c4:	f107 0108 	add.w	r1, r7, #8
 80060c8:	f107 030c 	add.w	r3, r7, #12
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fe fa77 	bl	80045c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	9202      	str	r2, [sp, #8]
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	2302      	movs	r3, #2
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2300      	movs	r3, #0
 80060e2:	460a      	mov	r2, r1
 80060e4:	4910      	ldr	r1, [pc, #64]	; (8006128 <xTimerCreateTimerTask+0x84>)
 80060e6:	4811      	ldr	r0, [pc, #68]	; (800612c <xTimerCreateTimerTask+0x88>)
 80060e8:	f7ff f8de 	bl	80052a8 <xTaskCreateStatic>
 80060ec:	4603      	mov	r3, r0
 80060ee:	4a10      	ldr	r2, [pc, #64]	; (8006130 <xTimerCreateTimerTask+0x8c>)
 80060f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060f2:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <xTimerCreateTimerTask+0x8c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060fa:	2301      	movs	r3, #1
 80060fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10a      	bne.n	800611a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	613b      	str	r3, [r7, #16]
}
 8006116:	bf00      	nop
 8006118:	e7fe      	b.n	8006118 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800611a:	697b      	ldr	r3, [r7, #20]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	20000c1c 	.word	0x20000c1c
 8006128:	08007054 	.word	0x08007054
 800612c:	08006269 	.word	0x08006269
 8006130:	20000c20 	.word	0x20000c20

08006134 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08a      	sub	sp, #40	; 0x28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006142:	2300      	movs	r3, #0
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <xTimerGenericCommand+0x2e>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	623b      	str	r3, [r7, #32]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006162:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <xTimerGenericCommand+0x98>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d02a      	beq.n	80061c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b05      	cmp	r3, #5
 800617a:	dc18      	bgt.n	80061ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800617c:	f7ff feb2 	bl	8005ee4 <xTaskGetSchedulerState>
 8006180:	4603      	mov	r3, r0
 8006182:	2b02      	cmp	r3, #2
 8006184:	d109      	bne.n	800619a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006186:	4b11      	ldr	r3, [pc, #68]	; (80061cc <xTimerGenericCommand+0x98>)
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	f107 0110 	add.w	r1, r7, #16
 800618e:	2300      	movs	r3, #0
 8006190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006192:	f7fe fc21 	bl	80049d8 <xQueueGenericSend>
 8006196:	6278      	str	r0, [r7, #36]	; 0x24
 8006198:	e012      	b.n	80061c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800619a:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <xTimerGenericCommand+0x98>)
 800619c:	6818      	ldr	r0, [r3, #0]
 800619e:	f107 0110 	add.w	r1, r7, #16
 80061a2:	2300      	movs	r3, #0
 80061a4:	2200      	movs	r2, #0
 80061a6:	f7fe fc17 	bl	80049d8 <xQueueGenericSend>
 80061aa:	6278      	str	r0, [r7, #36]	; 0x24
 80061ac:	e008      	b.n	80061c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061ae:	4b07      	ldr	r3, [pc, #28]	; (80061cc <xTimerGenericCommand+0x98>)
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	f107 0110 	add.w	r1, r7, #16
 80061b6:	2300      	movs	r3, #0
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	f7fe fd0b 	bl	8004bd4 <xQueueGenericSendFromISR>
 80061be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3728      	adds	r7, #40	; 0x28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20000c1c 	.word	0x20000c1c

080061d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061da:	4b22      	ldr	r3, [pc, #136]	; (8006264 <prvProcessExpiredTimer+0x94>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	3304      	adds	r3, #4
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fe fa8d 	bl	8004708 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d022      	beq.n	8006242 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	699a      	ldr	r2, [r3, #24]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	18d1      	adds	r1, r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	6978      	ldr	r0, [r7, #20]
 800620a:	f000 f8d1 	bl	80063b0 <prvInsertTimerInActiveList>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01f      	beq.n	8006254 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006214:	2300      	movs	r3, #0
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	2300      	movs	r3, #0
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	2100      	movs	r1, #0
 800621e:	6978      	ldr	r0, [r7, #20]
 8006220:	f7ff ff88 	bl	8006134 <xTimerGenericCommand>
 8006224:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d113      	bne.n	8006254 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	60fb      	str	r3, [r7, #12]
}
 800623e:	bf00      	nop
 8006240:	e7fe      	b.n	8006240 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006248:	f023 0301 	bic.w	r3, r3, #1
 800624c:	b2da      	uxtb	r2, r3
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	6978      	ldr	r0, [r7, #20]
 800625a:	4798      	blx	r3
}
 800625c:	bf00      	nop
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	20000c14 	.word	0x20000c14

08006268 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006270:	f107 0308 	add.w	r3, r7, #8
 8006274:	4618      	mov	r0, r3
 8006276:	f000 f857 	bl	8006328 <prvGetNextExpireTime>
 800627a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4619      	mov	r1, r3
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f803 	bl	800628c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006286:	f000 f8d5 	bl	8006434 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800628a:	e7f1      	b.n	8006270 <prvTimerTask+0x8>

0800628c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006296:	f7ff fa43 	bl	8005720 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800629a:	f107 0308 	add.w	r3, r7, #8
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f866 	bl	8006370 <prvSampleTimeNow>
 80062a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d130      	bne.n	800630e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10a      	bne.n	80062c8 <prvProcessTimerOrBlockTask+0x3c>
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d806      	bhi.n	80062c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062ba:	f7ff fa3f 	bl	800573c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff ff85 	bl	80061d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062c6:	e024      	b.n	8006312 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <prvProcessTimerOrBlockTask+0x90>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <prvProcessTimerOrBlockTask+0x50>
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <prvProcessTimerOrBlockTask+0x52>
 80062dc:	2300      	movs	r3, #0
 80062de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <prvProcessTimerOrBlockTask+0x94>)
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	4619      	mov	r1, r3
 80062ee:	f7fe ffa7 	bl	8005240 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062f2:	f7ff fa23 	bl	800573c <xTaskResumeAll>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062fc:	4b09      	ldr	r3, [pc, #36]	; (8006324 <prvProcessTimerOrBlockTask+0x98>)
 80062fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	f3bf 8f6f 	isb	sy
}
 800630c:	e001      	b.n	8006312 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800630e:	f7ff fa15 	bl	800573c <xTaskResumeAll>
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20000c18 	.word	0x20000c18
 8006320:	20000c1c 	.word	0x20000c1c
 8006324:	e000ed04 	.word	0xe000ed04

08006328 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006330:	4b0e      	ldr	r3, [pc, #56]	; (800636c <prvGetNextExpireTime+0x44>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <prvGetNextExpireTime+0x16>
 800633a:	2201      	movs	r2, #1
 800633c:	e000      	b.n	8006340 <prvGetNextExpireTime+0x18>
 800633e:	2200      	movs	r2, #0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d105      	bne.n	8006358 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800634c:	4b07      	ldr	r3, [pc, #28]	; (800636c <prvGetNextExpireTime+0x44>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	e001      	b.n	800635c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800635c:	68fb      	ldr	r3, [r7, #12]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	20000c14 	.word	0x20000c14

08006370 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006378:	f7ff fa7e 	bl	8005878 <xTaskGetTickCount>
 800637c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800637e:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <prvSampleTimeNow+0x3c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	429a      	cmp	r2, r3
 8006386:	d205      	bcs.n	8006394 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006388:	f000 f936 	bl	80065f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	e002      	b.n	800639a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800639a:	4a04      	ldr	r2, [pc, #16]	; (80063ac <prvSampleTimeNow+0x3c>)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063a0:	68fb      	ldr	r3, [r7, #12]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000c24 	.word	0x20000c24

080063b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d812      	bhi.n	80063fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	1ad2      	subs	r2, r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d302      	bcc.n	80063ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063e4:	2301      	movs	r3, #1
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	e01b      	b.n	8006422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063ea:	4b10      	ldr	r3, [pc, #64]	; (800642c <prvInsertTimerInActiveList+0x7c>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f7fe f94e 	bl	8004696 <vListInsert>
 80063fa:	e012      	b.n	8006422 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d206      	bcs.n	8006412 <prvInsertTimerInActiveList+0x62>
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d302      	bcc.n	8006412 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800640c:	2301      	movs	r3, #1
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e007      	b.n	8006422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006412:	4b07      	ldr	r3, [pc, #28]	; (8006430 <prvInsertTimerInActiveList+0x80>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3304      	adds	r3, #4
 800641a:	4619      	mov	r1, r3
 800641c:	4610      	mov	r0, r2
 800641e:	f7fe f93a 	bl	8004696 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006422:	697b      	ldr	r3, [r7, #20]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	20000c18 	.word	0x20000c18
 8006430:	20000c14 	.word	0x20000c14

08006434 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08e      	sub	sp, #56	; 0x38
 8006438:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800643a:	e0ca      	b.n	80065d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	da18      	bge.n	8006474 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006442:	1d3b      	adds	r3, r7, #4
 8006444:	3304      	adds	r3, #4
 8006446:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10a      	bne.n	8006464 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	61fb      	str	r3, [r7, #28]
}
 8006460:	bf00      	nop
 8006462:	e7fe      	b.n	8006462 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646a:	6850      	ldr	r0, [r2, #4]
 800646c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646e:	6892      	ldr	r2, [r2, #8]
 8006470:	4611      	mov	r1, r2
 8006472:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f2c0 80aa 	blt.w	80065d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d004      	beq.n	8006492 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	3304      	adds	r3, #4
 800648c:	4618      	mov	r0, r3
 800648e:	f7fe f93b 	bl	8004708 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006492:	463b      	mov	r3, r7
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff ff6b 	bl	8006370 <prvSampleTimeNow>
 800649a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b09      	cmp	r3, #9
 80064a0:	f200 8097 	bhi.w	80065d2 <prvProcessReceivedCommands+0x19e>
 80064a4:	a201      	add	r2, pc, #4	; (adr r2, 80064ac <prvProcessReceivedCommands+0x78>)
 80064a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064aa:	bf00      	nop
 80064ac:	080064d5 	.word	0x080064d5
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064d5 	.word	0x080064d5
 80064b8:	08006549 	.word	0x08006549
 80064bc:	0800655d 	.word	0x0800655d
 80064c0:	080065a7 	.word	0x080065a7
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	080064d5 	.word	0x080064d5
 80064cc:	08006549 	.word	0x08006549
 80064d0:	0800655d 	.word	0x0800655d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064da:	f043 0301 	orr.w	r3, r3, #1
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	18d1      	adds	r1, r2, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f4:	f7ff ff5c 	bl	80063b0 <prvInsertTimerInActiveList>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d069      	beq.n	80065d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006504:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d05e      	beq.n	80065d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	441a      	add	r2, r3
 800651c:	2300      	movs	r3, #0
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	2300      	movs	r3, #0
 8006522:	2100      	movs	r1, #0
 8006524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006526:	f7ff fe05 	bl	8006134 <xTimerGenericCommand>
 800652a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d14f      	bne.n	80065d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	61bb      	str	r3, [r7, #24]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800654e:	f023 0301 	bic.w	r3, r3, #1
 8006552:	b2da      	uxtb	r2, r3
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800655a:	e03a      	b.n	80065d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006562:	f043 0301 	orr.w	r3, r3, #1
 8006566:	b2da      	uxtb	r2, r3
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10a      	bne.n	8006592 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	617b      	str	r3, [r7, #20]
}
 800658e:	bf00      	nop
 8006590:	e7fe      	b.n	8006590 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	699a      	ldr	r2, [r3, #24]
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	18d1      	adds	r1, r2, r3
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a0:	f7ff ff06 	bl	80063b0 <prvInsertTimerInActiveList>
					break;
 80065a4:	e015      	b.n	80065d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d103      	bne.n	80065bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80065b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b6:	f000 fbdb 	bl	8006d70 <vPortFree>
 80065ba:	e00a      	b.n	80065d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065c2:	f023 0301 	bic.w	r3, r3, #1
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065ce:	e000      	b.n	80065d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80065d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065d2:	4b08      	ldr	r3, [pc, #32]	; (80065f4 <prvProcessReceivedCommands+0x1c0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	1d39      	adds	r1, r7, #4
 80065d8:	2200      	movs	r2, #0
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fe fb96 	bl	8004d0c <xQueueReceive>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f47f af2a 	bne.w	800643c <prvProcessReceivedCommands+0x8>
	}
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	3730      	adds	r7, #48	; 0x30
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20000c1c 	.word	0x20000c1c

080065f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065fe:	e048      	b.n	8006692 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006600:	4b2d      	ldr	r3, [pc, #180]	; (80066b8 <prvSwitchTimerLists+0xc0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800660a:	4b2b      	ldr	r3, [pc, #172]	; (80066b8 <prvSwitchTimerLists+0xc0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	3304      	adds	r3, #4
 8006618:	4618      	mov	r0, r3
 800661a:	f7fe f875 	bl	8004708 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d02e      	beq.n	8006692 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4413      	add	r3, r2
 800663c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	429a      	cmp	r2, r3
 8006644:	d90e      	bls.n	8006664 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006652:	4b19      	ldr	r3, [pc, #100]	; (80066b8 <prvSwitchTimerLists+0xc0>)
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3304      	adds	r3, #4
 800665a:	4619      	mov	r1, r3
 800665c:	4610      	mov	r0, r2
 800665e:	f7fe f81a 	bl	8004696 <vListInsert>
 8006662:	e016      	b.n	8006692 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006664:	2300      	movs	r3, #0
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	2300      	movs	r3, #0
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	2100      	movs	r1, #0
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7ff fd60 	bl	8006134 <xTimerGenericCommand>
 8006674:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	603b      	str	r3, [r7, #0]
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006692:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <prvSwitchTimerLists+0xc0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1b1      	bne.n	8006600 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800669c:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <prvSwitchTimerLists+0xc0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066a2:	4b06      	ldr	r3, [pc, #24]	; (80066bc <prvSwitchTimerLists+0xc4>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a04      	ldr	r2, [pc, #16]	; (80066b8 <prvSwitchTimerLists+0xc0>)
 80066a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066aa:	4a04      	ldr	r2, [pc, #16]	; (80066bc <prvSwitchTimerLists+0xc4>)
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	6013      	str	r3, [r2, #0]
}
 80066b0:	bf00      	nop
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	20000c14 	.word	0x20000c14
 80066bc:	20000c18 	.word	0x20000c18

080066c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066c6:	f000 f965 	bl	8006994 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066ca:	4b15      	ldr	r3, [pc, #84]	; (8006720 <prvCheckForValidListAndQueue+0x60>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d120      	bne.n	8006714 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066d2:	4814      	ldr	r0, [pc, #80]	; (8006724 <prvCheckForValidListAndQueue+0x64>)
 80066d4:	f7fd ff8e 	bl	80045f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066d8:	4813      	ldr	r0, [pc, #76]	; (8006728 <prvCheckForValidListAndQueue+0x68>)
 80066da:	f7fd ff8b 	bl	80045f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066de:	4b13      	ldr	r3, [pc, #76]	; (800672c <prvCheckForValidListAndQueue+0x6c>)
 80066e0:	4a10      	ldr	r2, [pc, #64]	; (8006724 <prvCheckForValidListAndQueue+0x64>)
 80066e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066e4:	4b12      	ldr	r3, [pc, #72]	; (8006730 <prvCheckForValidListAndQueue+0x70>)
 80066e6:	4a10      	ldr	r2, [pc, #64]	; (8006728 <prvCheckForValidListAndQueue+0x68>)
 80066e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066ea:	2300      	movs	r3, #0
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	4b11      	ldr	r3, [pc, #68]	; (8006734 <prvCheckForValidListAndQueue+0x74>)
 80066f0:	4a11      	ldr	r2, [pc, #68]	; (8006738 <prvCheckForValidListAndQueue+0x78>)
 80066f2:	2110      	movs	r1, #16
 80066f4:	200a      	movs	r0, #10
 80066f6:	f7fe f899 	bl	800482c <xQueueGenericCreateStatic>
 80066fa:	4603      	mov	r3, r0
 80066fc:	4a08      	ldr	r2, [pc, #32]	; (8006720 <prvCheckForValidListAndQueue+0x60>)
 80066fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006700:	4b07      	ldr	r3, [pc, #28]	; (8006720 <prvCheckForValidListAndQueue+0x60>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006708:	4b05      	ldr	r3, [pc, #20]	; (8006720 <prvCheckForValidListAndQueue+0x60>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	490b      	ldr	r1, [pc, #44]	; (800673c <prvCheckForValidListAndQueue+0x7c>)
 800670e:	4618      	mov	r0, r3
 8006710:	f7fe fd6c 	bl	80051ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006714:	f000 f96e 	bl	80069f4 <vPortExitCritical>
}
 8006718:	bf00      	nop
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20000c1c 	.word	0x20000c1c
 8006724:	20000bec 	.word	0x20000bec
 8006728:	20000c00 	.word	0x20000c00
 800672c:	20000c14 	.word	0x20000c14
 8006730:	20000c18 	.word	0x20000c18
 8006734:	20000cc8 	.word	0x20000cc8
 8006738:	20000c28 	.word	0x20000c28
 800673c:	0800705c 	.word	0x0800705c

08006740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3b04      	subs	r3, #4
 8006750:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3b04      	subs	r3, #4
 800675e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f023 0201 	bic.w	r2, r3, #1
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3b04      	subs	r3, #4
 800676e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006770:	4a0c      	ldr	r2, [pc, #48]	; (80067a4 <pxPortInitialiseStack+0x64>)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3b14      	subs	r3, #20
 800677a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3b04      	subs	r3, #4
 8006786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f06f 0202 	mvn.w	r2, #2
 800678e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3b20      	subs	r3, #32
 8006794:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006796:	68fb      	ldr	r3, [r7, #12]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	080067a9 	.word	0x080067a9

080067a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067b2:	4b12      	ldr	r3, [pc, #72]	; (80067fc <prvTaskExitError+0x54>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ba:	d00a      	beq.n	80067d2 <prvTaskExitError+0x2a>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	60fb      	str	r3, [r7, #12]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <prvTaskExitError+0x28>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	60bb      	str	r3, [r7, #8]
}
 80067e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067e6:	bf00      	nop
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0fc      	beq.n	80067e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067ee:	bf00      	nop
 80067f0:	bf00      	nop
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	2000000c 	.word	0x2000000c

08006800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006800:	4b07      	ldr	r3, [pc, #28]	; (8006820 <pxCurrentTCBConst2>)
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	6808      	ldr	r0, [r1, #0]
 8006806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	f380 8809 	msr	PSP, r0
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f04f 0000 	mov.w	r0, #0
 8006816:	f380 8811 	msr	BASEPRI, r0
 800681a:	4770      	bx	lr
 800681c:	f3af 8000 	nop.w

08006820 <pxCurrentTCBConst2>:
 8006820:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop

08006828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006828:	4808      	ldr	r0, [pc, #32]	; (800684c <prvPortStartFirstTask+0x24>)
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	6800      	ldr	r0, [r0, #0]
 800682e:	f380 8808 	msr	MSP, r0
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8814 	msr	CONTROL, r0
 800683a:	b662      	cpsie	i
 800683c:	b661      	cpsie	f
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	df00      	svc	0
 8006848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800684a:	bf00      	nop
 800684c:	e000ed08 	.word	0xe000ed08

08006850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006856:	4b46      	ldr	r3, [pc, #280]	; (8006970 <xPortStartScheduler+0x120>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a46      	ldr	r2, [pc, #280]	; (8006974 <xPortStartScheduler+0x124>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d10a      	bne.n	8006876 <xPortStartScheduler+0x26>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	613b      	str	r3, [r7, #16]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006876:	4b3e      	ldr	r3, [pc, #248]	; (8006970 <xPortStartScheduler+0x120>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a3f      	ldr	r2, [pc, #252]	; (8006978 <xPortStartScheduler+0x128>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d10a      	bne.n	8006896 <xPortStartScheduler+0x46>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	60fb      	str	r3, [r7, #12]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006896:	4b39      	ldr	r3, [pc, #228]	; (800697c <xPortStartScheduler+0x12c>)
 8006898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	22ff      	movs	r2, #255	; 0xff
 80068a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	4b31      	ldr	r3, [pc, #196]	; (8006980 <xPortStartScheduler+0x130>)
 80068bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068be:	4b31      	ldr	r3, [pc, #196]	; (8006984 <xPortStartScheduler+0x134>)
 80068c0:	2207      	movs	r2, #7
 80068c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068c4:	e009      	b.n	80068da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80068c6:	4b2f      	ldr	r3, [pc, #188]	; (8006984 <xPortStartScheduler+0x134>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	4a2d      	ldr	r2, [pc, #180]	; (8006984 <xPortStartScheduler+0x134>)
 80068ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e2:	2b80      	cmp	r3, #128	; 0x80
 80068e4:	d0ef      	beq.n	80068c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068e6:	4b27      	ldr	r3, [pc, #156]	; (8006984 <xPortStartScheduler+0x134>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f1c3 0307 	rsb	r3, r3, #7
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d00a      	beq.n	8006908 <xPortStartScheduler+0xb8>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	60bb      	str	r3, [r7, #8]
}
 8006904:	bf00      	nop
 8006906:	e7fe      	b.n	8006906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006908:	4b1e      	ldr	r3, [pc, #120]	; (8006984 <xPortStartScheduler+0x134>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <xPortStartScheduler+0x134>)
 8006910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006912:	4b1c      	ldr	r3, [pc, #112]	; (8006984 <xPortStartScheduler+0x134>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800691a:	4a1a      	ldr	r2, [pc, #104]	; (8006984 <xPortStartScheduler+0x134>)
 800691c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	b2da      	uxtb	r2, r3
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006926:	4b18      	ldr	r3, [pc, #96]	; (8006988 <xPortStartScheduler+0x138>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a17      	ldr	r2, [pc, #92]	; (8006988 <xPortStartScheduler+0x138>)
 800692c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006932:	4b15      	ldr	r3, [pc, #84]	; (8006988 <xPortStartScheduler+0x138>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a14      	ldr	r2, [pc, #80]	; (8006988 <xPortStartScheduler+0x138>)
 8006938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800693c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800693e:	f000 f8dd 	bl	8006afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006942:	4b12      	ldr	r3, [pc, #72]	; (800698c <xPortStartScheduler+0x13c>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006948:	f000 f8fc 	bl	8006b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800694c:	4b10      	ldr	r3, [pc, #64]	; (8006990 <xPortStartScheduler+0x140>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a0f      	ldr	r2, [pc, #60]	; (8006990 <xPortStartScheduler+0x140>)
 8006952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006958:	f7ff ff66 	bl	8006828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800695c:	f7ff f856 	bl	8005a0c <vTaskSwitchContext>
	prvTaskExitError();
 8006960:	f7ff ff22 	bl	80067a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	e000ed00 	.word	0xe000ed00
 8006974:	410fc271 	.word	0x410fc271
 8006978:	410fc270 	.word	0x410fc270
 800697c:	e000e400 	.word	0xe000e400
 8006980:	20000d18 	.word	0x20000d18
 8006984:	20000d1c 	.word	0x20000d1c
 8006988:	e000ed20 	.word	0xe000ed20
 800698c:	2000000c 	.word	0x2000000c
 8006990:	e000ef34 	.word	0xe000ef34

08006994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	607b      	str	r3, [r7, #4]
}
 80069ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069ae:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <vPortEnterCritical+0x58>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	4a0d      	ldr	r2, [pc, #52]	; (80069ec <vPortEnterCritical+0x58>)
 80069b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069b8:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <vPortEnterCritical+0x58>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d10f      	bne.n	80069e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <vPortEnterCritical+0x5c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	603b      	str	r3, [r7, #0]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <vPortEnterCritical+0x4a>
	}
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	2000000c 	.word	0x2000000c
 80069f0:	e000ed04 	.word	0xe000ed04

080069f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069fa:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <vPortExitCritical+0x50>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <vPortExitCritical+0x24>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	607b      	str	r3, [r7, #4]
}
 8006a14:	bf00      	nop
 8006a16:	e7fe      	b.n	8006a16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a18:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <vPortExitCritical+0x50>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	4a09      	ldr	r2, [pc, #36]	; (8006a44 <vPortExitCritical+0x50>)
 8006a20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a22:	4b08      	ldr	r3, [pc, #32]	; (8006a44 <vPortExitCritical+0x50>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d105      	bne.n	8006a36 <vPortExitCritical+0x42>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f383 8811 	msr	BASEPRI, r3
}
 8006a34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	2000000c 	.word	0x2000000c
	...

08006a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a50:	f3ef 8009 	mrs	r0, PSP
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <pxCurrentTCBConst>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f01e 0f10 	tst.w	lr, #16
 8006a60:	bf08      	it	eq
 8006a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6a:	6010      	str	r0, [r2, #0]
 8006a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a74:	f380 8811 	msr	BASEPRI, r0
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f7fe ffc4 	bl	8005a0c <vTaskSwitchContext>
 8006a84:	f04f 0000 	mov.w	r0, #0
 8006a88:	f380 8811 	msr	BASEPRI, r0
 8006a8c:	bc09      	pop	{r0, r3}
 8006a8e:	6819      	ldr	r1, [r3, #0]
 8006a90:	6808      	ldr	r0, [r1, #0]
 8006a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a96:	f01e 0f10 	tst.w	lr, #16
 8006a9a:	bf08      	it	eq
 8006a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006aa0:	f380 8809 	msr	PSP, r0
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	f3af 8000 	nop.w

08006ab0 <pxCurrentTCBConst>:
 8006ab0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop

08006ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	607b      	str	r3, [r7, #4]
}
 8006ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ad2:	f7fe fee1 	bl	8005898 <xTaskIncrementTick>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <xPortSysTickHandler+0x40>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f383 8811 	msr	BASEPRI, r3
}
 8006aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b00:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b06:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <vPortSetupTimerInterrupt+0x38>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <vPortSetupTimerInterrupt+0x3c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <vPortSetupTimerInterrupt+0x40>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	099b      	lsrs	r3, r3, #6
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <vPortSetupTimerInterrupt+0x44>)
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b1e:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b20:	2207      	movs	r2, #7
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	e000e010 	.word	0xe000e010
 8006b34:	e000e018 	.word	0xe000e018
 8006b38:	20000000 	.word	0x20000000
 8006b3c:	10624dd3 	.word	0x10624dd3
 8006b40:	e000e014 	.word	0xe000e014

08006b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b54 <vPortEnableVFP+0x10>
 8006b48:	6801      	ldr	r1, [r0, #0]
 8006b4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b4e:	6001      	str	r1, [r0, #0]
 8006b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b52:	bf00      	nop
 8006b54:	e000ed88 	.word	0xe000ed88

08006b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b5e:	f3ef 8305 	mrs	r3, IPSR
 8006b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b0f      	cmp	r3, #15
 8006b68:	d914      	bls.n	8006b94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b6a:	4a17      	ldr	r2, [pc, #92]	; (8006bc8 <vPortValidateInterruptPriority+0x70>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b74:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <vPortValidateInterruptPriority+0x74>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	7afa      	ldrb	r2, [r7, #11]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d20a      	bcs.n	8006b94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	607b      	str	r3, [r7, #4]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b94:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <vPortValidateInterruptPriority+0x78>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b9c:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <vPortValidateInterruptPriority+0x7c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d90a      	bls.n	8006bba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	603b      	str	r3, [r7, #0]
}
 8006bb6:	bf00      	nop
 8006bb8:	e7fe      	b.n	8006bb8 <vPortValidateInterruptPriority+0x60>
	}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	e000e3f0 	.word	0xe000e3f0
 8006bcc:	20000d18 	.word	0x20000d18
 8006bd0:	e000ed0c 	.word	0xe000ed0c
 8006bd4:	20000d1c 	.word	0x20000d1c

08006bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08a      	sub	sp, #40	; 0x28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006be4:	f7fe fd9c 	bl	8005720 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006be8:	4b5b      	ldr	r3, [pc, #364]	; (8006d58 <pvPortMalloc+0x180>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bf0:	f000 f920 	bl	8006e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bf4:	4b59      	ldr	r3, [pc, #356]	; (8006d5c <pvPortMalloc+0x184>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f040 8093 	bne.w	8006d28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01d      	beq.n	8006c44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c08:	2208      	movs	r2, #8
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d014      	beq.n	8006c44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f023 0307 	bic.w	r3, r3, #7
 8006c20:	3308      	adds	r3, #8
 8006c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <pvPortMalloc+0x6c>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	617b      	str	r3, [r7, #20]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d06e      	beq.n	8006d28 <pvPortMalloc+0x150>
 8006c4a:	4b45      	ldr	r3, [pc, #276]	; (8006d60 <pvPortMalloc+0x188>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d869      	bhi.n	8006d28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c54:	4b43      	ldr	r3, [pc, #268]	; (8006d64 <pvPortMalloc+0x18c>)
 8006c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c58:	4b42      	ldr	r3, [pc, #264]	; (8006d64 <pvPortMalloc+0x18c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c5e:	e004      	b.n	8006c6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d903      	bls.n	8006c7c <pvPortMalloc+0xa4>
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f1      	bne.n	8006c60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c7c:	4b36      	ldr	r3, [pc, #216]	; (8006d58 <pvPortMalloc+0x180>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d050      	beq.n	8006d28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2208      	movs	r2, #8
 8006c8c:	4413      	add	r3, r2
 8006c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d91f      	bls.n	8006ce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <pvPortMalloc+0xf8>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	613b      	str	r3, [r7, #16]
}
 8006ccc:	bf00      	nop
 8006cce:	e7fe      	b.n	8006cce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	1ad2      	subs	r2, r2, r3
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ce2:	69b8      	ldr	r0, [r7, #24]
 8006ce4:	f000 f908 	bl	8006ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ce8:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <pvPortMalloc+0x188>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	4a1b      	ldr	r2, [pc, #108]	; (8006d60 <pvPortMalloc+0x188>)
 8006cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <pvPortMalloc+0x188>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <pvPortMalloc+0x190>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d203      	bcs.n	8006d0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d02:	4b17      	ldr	r3, [pc, #92]	; (8006d60 <pvPortMalloc+0x188>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <pvPortMalloc+0x190>)
 8006d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	4b13      	ldr	r3, [pc, #76]	; (8006d5c <pvPortMalloc+0x184>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d1e:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <pvPortMalloc+0x194>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3301      	adds	r3, #1
 8006d24:	4a11      	ldr	r2, [pc, #68]	; (8006d6c <pvPortMalloc+0x194>)
 8006d26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d28:	f7fe fd08 	bl	800573c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <pvPortMalloc+0x174>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	60fb      	str	r3, [r7, #12]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <pvPortMalloc+0x172>
	return pvReturn;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3728      	adds	r7, #40	; 0x28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	200018e0 	.word	0x200018e0
 8006d5c:	200018f4 	.word	0x200018f4
 8006d60:	200018e4 	.word	0x200018e4
 8006d64:	200018d8 	.word	0x200018d8
 8006d68:	200018e8 	.word	0x200018e8
 8006d6c:	200018ec 	.word	0x200018ec

08006d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d04d      	beq.n	8006e1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d82:	2308      	movs	r3, #8
 8006d84:	425b      	negs	r3, r3
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4413      	add	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <vPortFree+0xb8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <vPortFree+0x44>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	60fb      	str	r3, [r7, #12]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <vPortFree+0x62>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	60bb      	str	r3, [r7, #8]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <vPortFree+0xb8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01e      	beq.n	8006e1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d11a      	bne.n	8006e1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	4b0e      	ldr	r3, [pc, #56]	; (8006e28 <vPortFree+0xb8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	43db      	mvns	r3, r3
 8006df2:	401a      	ands	r2, r3
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006df8:	f7fe fc92 	bl	8005720 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <vPortFree+0xbc>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4413      	add	r3, r2
 8006e06:	4a09      	ldr	r2, [pc, #36]	; (8006e2c <vPortFree+0xbc>)
 8006e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e0a:	6938      	ldr	r0, [r7, #16]
 8006e0c:	f000 f874 	bl	8006ef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e10:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <vPortFree+0xc0>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3301      	adds	r3, #1
 8006e16:	4a06      	ldr	r2, [pc, #24]	; (8006e30 <vPortFree+0xc0>)
 8006e18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e1a:	f7fe fc8f 	bl	800573c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e1e:	bf00      	nop
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	200018f4 	.word	0x200018f4
 8006e2c:	200018e4 	.word	0x200018e4
 8006e30:	200018f0 	.word	0x200018f0

08006e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e3a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e40:	4b27      	ldr	r3, [pc, #156]	; (8006ee0 <prvHeapInit+0xac>)
 8006e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00c      	beq.n	8006e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3307      	adds	r3, #7
 8006e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0307 	bic.w	r3, r3, #7
 8006e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	4a1f      	ldr	r2, [pc, #124]	; (8006ee0 <prvHeapInit+0xac>)
 8006e64:	4413      	add	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <prvHeapInit+0xb0>)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e72:	4b1c      	ldr	r3, [pc, #112]	; (8006ee4 <prvHeapInit+0xb0>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e80:	2208      	movs	r2, #8
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	1a9b      	subs	r3, r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0307 	bic.w	r3, r3, #7
 8006e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4a15      	ldr	r2, [pc, #84]	; (8006ee8 <prvHeapInit+0xb4>)
 8006e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e96:	4b14      	ldr	r3, [pc, #80]	; (8006ee8 <prvHeapInit+0xb4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e9e:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <prvHeapInit+0xb4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	1ad2      	subs	r2, r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <prvHeapInit+0xb4>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	4a0a      	ldr	r2, [pc, #40]	; (8006eec <prvHeapInit+0xb8>)
 8006ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	4a09      	ldr	r2, [pc, #36]	; (8006ef0 <prvHeapInit+0xbc>)
 8006eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ecc:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <prvHeapInit+0xc0>)
 8006ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ed2:	601a      	str	r2, [r3, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	20000d20 	.word	0x20000d20
 8006ee4:	200018d8 	.word	0x200018d8
 8006ee8:	200018e0 	.word	0x200018e0
 8006eec:	200018e8 	.word	0x200018e8
 8006ef0:	200018e4 	.word	0x200018e4
 8006ef4:	200018f4 	.word	0x200018f4

08006ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f00:	4b28      	ldr	r3, [pc, #160]	; (8006fa4 <prvInsertBlockIntoFreeList+0xac>)
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e002      	b.n	8006f0c <prvInsertBlockIntoFreeList+0x14>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d8f7      	bhi.n	8006f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	4413      	add	r3, r2
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d108      	bne.n	8006f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	441a      	add	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	441a      	add	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d118      	bne.n	8006f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d00d      	beq.n	8006f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	441a      	add	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	e008      	b.n	8006f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f76:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e003      	b.n	8006f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d002      	beq.n	8006f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f96:	bf00      	nop
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	200018d8 	.word	0x200018d8
 8006fa8:	200018e0 	.word	0x200018e0

08006fac <__libc_init_array>:
 8006fac:	b570      	push	{r4, r5, r6, lr}
 8006fae:	4d0d      	ldr	r5, [pc, #52]	; (8006fe4 <__libc_init_array+0x38>)
 8006fb0:	4c0d      	ldr	r4, [pc, #52]	; (8006fe8 <__libc_init_array+0x3c>)
 8006fb2:	1b64      	subs	r4, r4, r5
 8006fb4:	10a4      	asrs	r4, r4, #2
 8006fb6:	2600      	movs	r6, #0
 8006fb8:	42a6      	cmp	r6, r4
 8006fba:	d109      	bne.n	8006fd0 <__libc_init_array+0x24>
 8006fbc:	4d0b      	ldr	r5, [pc, #44]	; (8006fec <__libc_init_array+0x40>)
 8006fbe:	4c0c      	ldr	r4, [pc, #48]	; (8006ff0 <__libc_init_array+0x44>)
 8006fc0:	f000 f82e 	bl	8007020 <_init>
 8006fc4:	1b64      	subs	r4, r4, r5
 8006fc6:	10a4      	asrs	r4, r4, #2
 8006fc8:	2600      	movs	r6, #0
 8006fca:	42a6      	cmp	r6, r4
 8006fcc:	d105      	bne.n	8006fda <__libc_init_array+0x2e>
 8006fce:	bd70      	pop	{r4, r5, r6, pc}
 8006fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd4:	4798      	blx	r3
 8006fd6:	3601      	adds	r6, #1
 8006fd8:	e7ee      	b.n	8006fb8 <__libc_init_array+0xc>
 8006fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fde:	4798      	blx	r3
 8006fe0:	3601      	adds	r6, #1
 8006fe2:	e7f2      	b.n	8006fca <__libc_init_array+0x1e>
 8006fe4:	080070f0 	.word	0x080070f0
 8006fe8:	080070f0 	.word	0x080070f0
 8006fec:	080070f0 	.word	0x080070f0
 8006ff0:	080070f4 	.word	0x080070f4

08006ff4 <memcpy>:
 8006ff4:	440a      	add	r2, r1
 8006ff6:	4291      	cmp	r1, r2
 8006ff8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ffc:	d100      	bne.n	8007000 <memcpy+0xc>
 8006ffe:	4770      	bx	lr
 8007000:	b510      	push	{r4, lr}
 8007002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800700a:	4291      	cmp	r1, r2
 800700c:	d1f9      	bne.n	8007002 <memcpy+0xe>
 800700e:	bd10      	pop	{r4, pc}

08007010 <memset>:
 8007010:	4402      	add	r2, r0
 8007012:	4603      	mov	r3, r0
 8007014:	4293      	cmp	r3, r2
 8007016:	d100      	bne.n	800701a <memset+0xa>
 8007018:	4770      	bx	lr
 800701a:	f803 1b01 	strb.w	r1, [r3], #1
 800701e:	e7f9      	b.n	8007014 <memset+0x4>

08007020 <_init>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	bf00      	nop
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr

0800702c <_fini>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	bf00      	nop
 8007030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007032:	bc08      	pop	{r3}
 8007034:	469e      	mov	lr, r3
 8007036:	4770      	bx	lr
