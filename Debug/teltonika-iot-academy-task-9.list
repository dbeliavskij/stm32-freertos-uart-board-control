
teltonika-iot-academy-task-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08008d84  08008d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091b4  080091b4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080091b4  080091b4  000191b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091bc  080091bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091bc  080091bc  000191bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091c0  080091c0  000191c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080091c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a20  20000074  08009238  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a94  08009238  00021a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb1e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b91  00000000  00000000  0003fbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f8  00000000  00000000  00043758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a0  00000000  00000000  00044f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000426e  00000000  00000000  000465f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001929e  00000000  00000000  0004a85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdf58  00000000  00000000  00063afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00161a54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065e4  00000000  00000000  00161aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d6c 	.word	0x08008d6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008d6c 	.word	0x08008d6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fea8 	bl	8001230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f886 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f91a 	bl	800071c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f8e8 	bl	80006bc <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004ec:	f000 f8d1 	bl	8000692 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	4927      	ldr	r1, [pc, #156]	; (8000590 <main+0xb8>)
 80004f4:	4827      	ldr	r0, [pc, #156]	; (8000594 <main+0xbc>)
 80004f6:	f003 f8eb 	bl	80036d0 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fa:	f004 f9bb 	bl	8004874 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UARTTxSemaphore */
  UARTTxSemaphoreHandle = osSemaphoreNew(1, 1, &UARTTxSemaphore_attributes);
 80004fe:	4a26      	ldr	r2, [pc, #152]	; (8000598 <main+0xc0>)
 8000500:	2101      	movs	r1, #1
 8000502:	2001      	movs	r0, #1
 8000504:	f004 fc2b 	bl	8004d5e <osSemaphoreNew>
 8000508:	4603      	mov	r3, r0
 800050a:	4a24      	ldr	r2, [pc, #144]	; (800059c <main+0xc4>)
 800050c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RxQueue */
  RxQueueHandle = osMessageQueueNew (12, sizeof(uint8_t), &RxQueue_attributes);
 800050e:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <main+0xc8>)
 8000510:	2101      	movs	r1, #1
 8000512:	200c      	movs	r0, #12
 8000514:	f004 fd42 	bl	8004f9c <osMessageQueueNew>
 8000518:	4603      	mov	r3, r0
 800051a:	4a22      	ldr	r2, [pc, #136]	; (80005a4 <main+0xcc>)
 800051c:	6013      	str	r3, [r2, #0]

  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (1, 13, &CommandQueue_attributes);
 800051e:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <main+0xd0>)
 8000520:	210d      	movs	r1, #13
 8000522:	2001      	movs	r0, #1
 8000524:	f004 fd3a 	bl	8004f9c <osMessageQueueNew>
 8000528:	4603      	mov	r3, r0
 800052a:	4a20      	ldr	r2, [pc, #128]	; (80005ac <main+0xd4>)
 800052c:	6013      	str	r3, [r2, #0]

  /* creation of b_rateQueue */
  b_rateQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &b_rateQueue_attributes);
 800052e:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <main+0xd8>)
 8000530:	2102      	movs	r1, #2
 8000532:	2001      	movs	r0, #1
 8000534:	f004 fd32 	bl	8004f9c <osMessageQueueNew>
 8000538:	4603      	mov	r3, r0
 800053a:	4a1e      	ldr	r2, [pc, #120]	; (80005b4 <main+0xdc>)
 800053c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UARTRx */
  UARTRxHandle = osThreadNew(StartUARTRx, NULL, &UARTRx_attributes);
 800053e:	4a1e      	ldr	r2, [pc, #120]	; (80005b8 <main+0xe0>)
 8000540:	2100      	movs	r1, #0
 8000542:	481e      	ldr	r0, [pc, #120]	; (80005bc <main+0xe4>)
 8000544:	f004 f9e0 	bl	8004908 <osThreadNew>
 8000548:	4603      	mov	r3, r0
 800054a:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <main+0xe8>)
 800054c:	6013      	str	r3, [r2, #0]

  /* creation of TaskHandler */
  TaskHandlerHandle = osThreadNew(StartTTaskHandler, NULL, &TaskHandler_attributes);
 800054e:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <main+0xec>)
 8000550:	2100      	movs	r1, #0
 8000552:	481d      	ldr	r0, [pc, #116]	; (80005c8 <main+0xf0>)
 8000554:	f004 f9d8 	bl	8004908 <osThreadNew>
 8000558:	4603      	mov	r3, r0
 800055a:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <main+0xf4>)
 800055c:	6013      	str	r3, [r2, #0]

  /* creation of ButTask */
  ButTaskHandle = osThreadNew(StartButTask, NULL, &ButTask_attributes);
 800055e:	4a1c      	ldr	r2, [pc, #112]	; (80005d0 <main+0xf8>)
 8000560:	2100      	movs	r1, #0
 8000562:	481c      	ldr	r0, [pc, #112]	; (80005d4 <main+0xfc>)
 8000564:	f004 f9d0 	bl	8004908 <osThreadNew>
 8000568:	4603      	mov	r3, r0
 800056a:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <main+0x100>)
 800056c:	6013      	str	r3, [r2, #0]

  /* creation of LedBlinkTask */
  LedBlinkTaskHandle = osThreadNew(StartLedBlinkTask, NULL, &LedBlinkTask_attributes);
 800056e:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <main+0x104>)
 8000570:	2100      	movs	r1, #0
 8000572:	481b      	ldr	r0, [pc, #108]	; (80005e0 <main+0x108>)
 8000574:	f004 f9c8 	bl	8004908 <osThreadNew>
 8000578:	4603      	mov	r3, r0
 800057a:	4a1a      	ldr	r2, [pc, #104]	; (80005e4 <main+0x10c>)
 800057c:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of ButEvents */
  ButEventsHandle = osEventFlagsNew(&ButEvents_attributes);
 800057e:	481a      	ldr	r0, [pc, #104]	; (80005e8 <main+0x110>)
 8000580:	f004 fab1 	bl	8004ae6 <osEventFlagsNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a19      	ldr	r2, [pc, #100]	; (80005ec <main+0x114>)
 8000588:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800058a:	f004 f997 	bl	80048bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058e:	e7fe      	b.n	800058e <main+0xb6>
 8000590:	20001a00 	.word	0x20001a00
 8000594:	20001974 	.word	0x20001974
 8000598:	08009048 	.word	0x08009048
 800059c:	2000196c 	.word	0x2000196c
 80005a0:	08009000 	.word	0x08009000
 80005a4:	20001958 	.word	0x20001958
 80005a8:	08009018 	.word	0x08009018
 80005ac:	200019f8 	.word	0x200019f8
 80005b0:	08009030 	.word	0x08009030
 80005b4:	20001960 	.word	0x20001960
 80005b8:	08008f70 	.word	0x08008f70
 80005bc:	08000889 	.word	0x08000889
 80005c0:	200019fc 	.word	0x200019fc
 80005c4:	08008f94 	.word	0x08008f94
 80005c8:	08000ad9 	.word	0x08000ad9
 80005cc:	20001968 	.word	0x20001968
 80005d0:	08008fb8 	.word	0x08008fb8
 80005d4:	08000e75 	.word	0x08000e75
 80005d8:	20001970 	.word	0x20001970
 80005dc:	08008fdc 	.word	0x08008fdc
 80005e0:	08000efd 	.word	0x08000efd
 80005e4:	20001964 	.word	0x20001964
 80005e8:	08009058 	.word	0x08009058
 80005ec:	2000195c 	.word	0x2000195c

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f008 faf8 	bl	8008bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f001 f9af 	bl	8001978 <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 fc98 	bl	8000f54 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2310      	movs	r3, #16
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800063e:	230a      	movs	r3, #10
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000642:	2307      	movs	r3, #7
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4618      	mov	r0, r3
 8000654:	f001 f9e6 	bl	8001a24 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800065e:	f000 fc79 	bl	8000f54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	2104      	movs	r1, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fdb8 	bl	80021f0 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000686:	f000 fc65 	bl	8000f54 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3758      	adds	r7, #88	; 0x58
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2105      	movs	r1, #5
 800069a:	2026      	movs	r0, #38	; 0x26
 800069c:	f000 fec0 	bl	8001420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006a0:	2026      	movs	r0, #38	; 0x26
 80006a2:	f000 fed9 	bl	8001458 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2105      	movs	r1, #5
 80006aa:	2028      	movs	r0, #40	; 0x28
 80006ac:	f000 feb8 	bl	8001420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b0:	2028      	movs	r0, #40	; 0x28
 80006b2:	f000 fed1 	bl	8001458 <HAL_NVIC_EnableIRQ>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006c2:	4a15      	ldr	r2, [pc, #84]	; (8000718 <MX_USART2_UART_Init+0x5c>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART2_UART_Init+0x58>)
 8000700:	f002 ff3c 	bl	800357c <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800070a:	f000 fc23 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20001974 	.word	0x20001974
 8000718:	40004400 	.word	0x40004400

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a24      	ldr	r2, [pc, #144]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f001 f895 	bl	80018c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_GPIO_Init+0xc8>)
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_GPIO_Init+0xcc>)
 80007b4:	f000 fede 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b8:	2320      	movs	r3, #32
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f000 fecf 	bl	8001574 <HAL_GPIO_Init>

}
 80007d6:	bf00      	nop
 80007d8:	3728      	adds	r7, #40	; 0x28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000
 80007e4:	10210000 	.word	0x10210000
 80007e8:	48000800 	.word	0x48000800

080007ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a09      	ldr	r2, [pc, #36]	; (8000820 <HAL_UART_RxCpltCallback+0x34>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d10b      	bne.n	8000816 <HAL_UART_RxCpltCallback+0x2a>
  {
    osMessageQueuePut(RxQueueHandle, &rx_char, 1, 0);
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_UART_RxCpltCallback+0x38>)
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	2300      	movs	r3, #0
 8000804:	2201      	movs	r2, #1
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <HAL_UART_RxCpltCallback+0x3c>)
 8000808:	f004 fc3c 	bl	8005084 <osMessageQueuePut>
	HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 800080c:	2201      	movs	r2, #1
 800080e:	4906      	ldr	r1, [pc, #24]	; (8000828 <HAL_UART_RxCpltCallback+0x3c>)
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <HAL_UART_RxCpltCallback+0x40>)
 8000812:	f002 ff5d 	bl	80036d0 <HAL_UART_Receive_IT>

  }
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40004400 	.word	0x40004400
 8000824:	20001958 	.word	0x20001958
 8000828:	20001a00 	.word	0x20001a00
 800082c:	20001974 	.word	0x20001974

08000830 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a05      	ldr	r2, [pc, #20]	; (8000854 <HAL_UART_TxCpltCallback+0x24>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d104      	bne.n	800084c <HAL_UART_TxCpltCallback+0x1c>
	{
		osSemaphoreRelease(UARTTxSemaphoreHandle);
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_UART_TxCpltCallback+0x28>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f004 fb64 	bl	8004f14 <osSemaphoreRelease>

	}
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40004400 	.word	0x40004400
 8000858:	2000196c 	.word	0x2000196c

0800085c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 8000866:	88fb      	ldrh	r3, [r7, #6]
 8000868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800086c:	d105      	bne.n	800087a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		osEventFlagsSet(ButEventsHandle, 0x00000004U);
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_GPIO_EXTI_Callback+0x28>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2104      	movs	r1, #4
 8000874:	4618      	mov	r0, r3
 8000876:	f004 f975 	bl	8004b64 <osEventFlagsSet>
	}
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000195c 	.word	0x2000195c

08000888 <StartUARTRx>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTRx */
void StartUARTRx(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t temp_rx[2] = { '\0' };
 8000890:	2300      	movs	r3, #0
 8000892:	833b      	strh	r3, [r7, #24]
  char rx_msg[13] = { '\0' };
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	721a      	strb	r2, [r3, #8]
  size_t str_sp = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  osStatus_t status;
  bool send = false;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Infinite loop */
  for(;;)
  {
    status = osMessageQueueGet(RxQueueHandle, temp_rx, NULL, 2000);
 80008ae:	4b83      	ldr	r3, [pc, #524]	; (8000abc <StartUARTRx+0x234>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f107 0118 	add.w	r1, r7, #24
 80008b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008ba:	2200      	movs	r2, #0
 80008bc:	f004 fc42 	bl	8005144 <osMessageQueueGet>
 80008c0:	61f8      	str	r0, [r7, #28]

    if (status == osOK)
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d110      	bne.n	80008ea <StartUARTRx+0x62>
    {
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fc7f 	bl	80001d0 <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	f1c3 030c 	rsb	r3, r3, #12
 80008d8:	623b      	str	r3, [r7, #32]
    	strncat(rx_msg, (char *)temp_rx, str_sp);
 80008da:	f107 0118 	add.w	r1, r7, #24
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	6a3a      	ldr	r2, [r7, #32]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f008 f98d 	bl	8008c04 <strncat>

    }

    str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fc6e 	bl	80001d0 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	f1c3 030c 	rsb	r3, r3, #12
 80008fa:	623b      	str	r3, [r7, #32]

    if (str_sp == 0)
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d11d      	bne.n	800093e <StartUARTRx+0xb6>
    {
    	rx_msg[strlen(rx_msg)-1] = '\r';
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc62 	bl	80001d0 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	3b01      	subs	r3, #1
 8000910:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000914:	4413      	add	r3, r2
 8000916:	220d      	movs	r2, #13
 8000918:	f803 2c20 	strb.w	r2, [r3, #-32]
    	rx_msg[strlen(rx_msg)-2] = '\n';
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fc55 	bl	80001d0 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	3b02      	subs	r3, #2
 800092a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800092e:	4413      	add	r3, r2
 8000930:	220a      	movs	r2, #10
 8000932:	f803 2c20 	strb.w	r2, [r3, #-32]
    	send = true;
 8000936:	2301      	movs	r3, #1
 8000938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800093c:	e088      	b.n	8000a50 <StartUARTRx+0x1c8>

    }

    else if (status == osErrorTimeout && strlen(rx_msg) > 0 && str_sp >= 2)
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	f113 0f02 	cmn.w	r3, #2
 8000944:	d11b      	bne.n	800097e <StartUARTRx+0xf6>
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d016      	beq.n	800097e <StartUARTRx+0xf6>
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d913      	bls.n	800097e <StartUARTRx+0xf6>
    {
    	strncat(rx_msg, "\n\r", str_sp);
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	6a3a      	ldr	r2, [r7, #32]
 800095c:	4958      	ldr	r1, [pc, #352]	; (8000ac0 <StartUARTRx+0x238>)
 800095e:	4618      	mov	r0, r3
 8000960:	f008 f950 	bl	8008c04 <strncat>
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fc31 	bl	80001d0 <strlen>
 800096e:	4603      	mov	r3, r0
 8000970:	f1c3 030c 	rsb	r3, r3, #12
 8000974:	623b      	str	r3, [r7, #32]
    	send = true;
 8000976:	2301      	movs	r3, #1
 8000978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800097c:	e068      	b.n	8000a50 <StartUARTRx+0x1c8>

    }

    else if (status == osErrorTimeout && strlen(rx_msg) > 0 && str_sp == 1)
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	f113 0f02 	cmn.w	r3, #2
 8000984:	d128      	bne.n	80009d8 <StartUARTRx+0x150>
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d023      	beq.n	80009d8 <StartUARTRx+0x150>
 8000990:	6a3b      	ldr	r3, [r7, #32]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d120      	bne.n	80009d8 <StartUARTRx+0x150>
    {
    	strncat(rx_msg, "\r", str_sp);
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	6a3a      	ldr	r2, [r7, #32]
 800099c:	4949      	ldr	r1, [pc, #292]	; (8000ac4 <StartUARTRx+0x23c>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f008 f930 	bl	8008c04 <strncat>
    	rx_msg[strlen(rx_msg)-2] = '\n';
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fc11 	bl	80001d0 <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	3b02      	subs	r3, #2
 80009b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009b6:	4413      	add	r3, r2
 80009b8:	220a      	movs	r2, #10
 80009ba:	f803 2c20 	strb.w	r2, [r3, #-32]
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fc04 	bl	80001d0 <strlen>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f1c3 030c 	rsb	r3, r3, #12
 80009ce:	623b      	str	r3, [r7, #32]
    	send = true;
 80009d0:	2301      	movs	r3, #1
 80009d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009d6:	e03b      	b.n	8000a50 <StartUARTRx+0x1c8>

    }

    else if (rx_msg[strlen(rx_msg)-1] == '\n' || rx_msg[strlen(rx_msg)-1] == '\r')
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fbf7 	bl	80001d0 <strlen>
 80009e2:	4603      	mov	r3, r0
 80009e4:	3b01      	subs	r3, #1
 80009e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009ea:	4413      	add	r3, r2
 80009ec:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80009f0:	2b0a      	cmp	r3, #10
 80009f2:	d00d      	beq.n	8000a10 <StartUARTRx+0x188>
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fbe9 	bl	80001d0 <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	3b01      	subs	r3, #1
 8000a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a06:	4413      	add	r3, r2
 8000a08:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000a0c:	2b0d      	cmp	r3, #13
 8000a0e:	d11f      	bne.n	8000a50 <StartUARTRx+0x1c8>
    {
    	rx_msg[strlen(rx_msg)-1] = '\n';
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fbdb 	bl	80001d0 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a22:	4413      	add	r3, r2
 8000a24:	220a      	movs	r2, #10
 8000a26:	f803 2c20 	strb.w	r2, [r3, #-32]
    	strncat(rx_msg, "\r", str_sp);
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	6a3a      	ldr	r2, [r7, #32]
 8000a30:	4924      	ldr	r1, [pc, #144]	; (8000ac4 <StartUARTRx+0x23c>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f008 f8e6 	bl	8008c04 <strncat>
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fbc7 	bl	80001d0 <strlen>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f1c3 030c 	rsb	r3, r3, #12
 8000a48:	623b      	str	r3, [r7, #32]
    	send = true;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    }

    if (send)
 8000a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	f43f af2a 	beq.w	80008ae <StartUARTRx+0x26>
    {
    	osMessageQueuePut(CommandQueueHandle, rx_msg, 1, osWaitForever);
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <StartUARTRx+0x240>)
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	f107 0108 	add.w	r1, r7, #8
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a66:	2201      	movs	r2, #1
 8000a68:	f004 fb0c 	bl	8005084 <osMessageQueuePut>
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <StartUARTRx+0x244>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a74:	4618      	mov	r0, r3
 8000a76:	f004 f9fb 	bl	8004e70 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Received command:\n\r", 19);
 8000a7a:	2213      	movs	r2, #19
 8000a7c:	4914      	ldr	r1, [pc, #80]	; (8000ad0 <StartUARTRx+0x248>)
 8000a7e:	4815      	ldr	r0, [pc, #84]	; (8000ad4 <StartUARTRx+0x24c>)
 8000a80:	f002 fdca 	bl	8003618 <HAL_UART_Transmit_IT>

    	str_sp = strlen(rx_msg);
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fba1 	bl	80001d0 <strlen>
 8000a8e:	6238      	str	r0, [r7, #32]
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <StartUARTRx+0x244>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f004 f9e9 	bl	8004e70 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)rx_msg, str_sp);
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480a      	ldr	r0, [pc, #40]	; (8000ad4 <StartUARTRx+0x24c>)
 8000aaa:	f002 fdb5 	bl	8003618 <HAL_UART_Transmit_IT>
    	rx_msg[0] = '\0';
 8000aae:	2300      	movs	r3, #0
 8000ab0:	723b      	strb	r3, [r7, #8]
    	send = false;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = osMessageQueueGet(RxQueueHandle, temp_rx, NULL, 2000);
 8000ab8:	e6f9      	b.n	80008ae <StartUARTRx+0x26>
 8000aba:	bf00      	nop
 8000abc:	20001958 	.word	0x20001958
 8000ac0:	08008df0 	.word	0x08008df0
 8000ac4:	08008df4 	.word	0x08008df4
 8000ac8:	200019f8 	.word	0x200019f8
 8000acc:	2000196c 	.word	0x2000196c
 8000ad0:	08008df8 	.word	0x08008df8
 8000ad4:	20001974 	.word	0x20001974

08000ad8 <StartTTaskHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTTaskHandler */
void StartTTaskHandler(void *argument)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTTaskHandler */
  osThreadSuspend(LedBlinkTaskHandle);
 8000ae0:	4bba      	ldr	r3, [pc, #744]	; (8000dcc <StartTTaskHandler+0x2f4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 ffa1 	bl	8004a2c <osThreadSuspend>

  char command[13] = { '\0' };
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	721a      	strb	r2, [r3, #8]
  bool led_b_sus = true;
 8000afa:	2301      	movs	r3, #1
 8000afc:	77fb      	strb	r3, [r7, #31]
  int temp_num;
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(CommandQueueHandle, command, NULL, osWaitForever);
 8000afe:	4bb4      	ldr	r3, [pc, #720]	; (8000dd0 <StartTTaskHandler+0x2f8>)
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	f107 0110 	add.w	r1, r7, #16
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f004 fb1a 	bl	8005144 <osMessageQueueGet>

    if (!strncmp(command, "LED", 3) || !strncmp(command, "led", 3))
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	2203      	movs	r2, #3
 8000b16:	49af      	ldr	r1, [pc, #700]	; (8000dd4 <StartTTaskHandler+0x2fc>)
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f008 f886 	bl	8008c2a <strncmp>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00a      	beq.n	8000b3a <StartTTaskHandler+0x62>
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	2203      	movs	r2, #3
 8000b2a:	49ab      	ldr	r1, [pc, #684]	; (8000dd8 <StartTTaskHandler+0x300>)
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f008 f87c 	bl	8008c2a <strncmp>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	f040 80c2 	bne.w	8000cbe <StartTTaskHandler+0x1e6>
    {

    	if (command[4] == 'b' && atoi(command+6) > 0)
 8000b3a:	7d3b      	ldrb	r3, [r7, #20]
 8000b3c:	2b62      	cmp	r3, #98	; 0x62
 8000b3e:	d176      	bne.n	8000c2e <StartTTaskHandler+0x156>
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	3306      	adds	r3, #6
 8000b46:	4618      	mov	r0, r3
 8000b48:	f008 f818 	bl	8008b7c <atoi>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	dd6d      	ble.n	8000c2e <StartTTaskHandler+0x156>
    	{
    		if (led_b_sus)
 8000b52:	7ffb      	ldrb	r3, [r7, #31]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d04c      	beq.n	8000bf2 <StartTTaskHandler+0x11a>
    		{
    			osThreadResume(LedBlinkTaskHandle);
 8000b58:	4b9c      	ldr	r3, [pc, #624]	; (8000dcc <StartTTaskHandler+0x2f4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 ff86 	bl	8004a6e <osThreadResume>
    			temp_num = atoi(command+6);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	3306      	adds	r3, #6
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f008 f807 	bl	8008b7c <atoi>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	60fb      	str	r3, [r7, #12]
    			osMessageQueuePut(b_rateQueueHandle, &temp_num, 1, osWaitForever);
 8000b72:	4b9a      	ldr	r3, [pc, #616]	; (8000ddc <StartTTaskHandler+0x304>)
 8000b74:	6818      	ldr	r0, [r3, #0]
 8000b76:	f107 010c 	add.w	r1, r7, #12
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f004 fa80 	bl	8005084 <osMessageQueuePut>
    			led_b_sus = !led_b_sus;
 8000b84:	7ffb      	ldrb	r3, [r7, #31]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bf14      	ite	ne
 8000b8a:	2301      	movne	r3, #1
 8000b8c:	2300      	moveq	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	f083 0301 	eor.w	r3, r3, #1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	77fb      	strb	r3, [r7, #31]
 8000b98:	7ffb      	ldrb	r3, [r7, #31]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	77fb      	strb	r3, [r7, #31]
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000ba0:	4b8f      	ldr	r3, [pc, #572]	; (8000de0 <StartTTaskHandler+0x308>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f004 f961 	bl	8004e70 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task started\n\r", 27);
 8000bae:	221b      	movs	r2, #27
 8000bb0:	498c      	ldr	r1, [pc, #560]	; (8000de4 <StartTTaskHandler+0x30c>)
 8000bb2:	488d      	ldr	r0, [pc, #564]	; (8000de8 <StartTTaskHandler+0x310>)
 8000bb4:	f002 fd30 	bl	8003618 <HAL_UART_Transmit_IT>
    			if (osEventFlagsGet(ButEventsHandle) & 0x00000002U)
 8000bb8:	4b8c      	ldr	r3, [pc, #560]	; (8000dec <StartTTaskHandler+0x314>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f004 f847 	bl	8004c50 <osEventFlagsGet>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d076      	beq.n	8000cba <StartTTaskHandler+0x1e2>
    			{
    				osEventFlagsClear(ButEventsHandle, 0x00000002U);
 8000bcc:	4b87      	ldr	r3, [pc, #540]	; (8000dec <StartTTaskHandler+0x314>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f004 f80a 	bl	8004bec <osEventFlagsClear>
    				osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000bd8:	4b81      	ldr	r3, [pc, #516]	; (8000de0 <StartTTaskHandler+0x308>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be0:	4618      	mov	r0, r3
 8000be2:	f004 f945 	bl	8004e70 <osSemaphoreAcquire>
    				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED control with button turned off\n\r", 36);
 8000be6:	2224      	movs	r2, #36	; 0x24
 8000be8:	4981      	ldr	r1, [pc, #516]	; (8000df0 <StartTTaskHandler+0x318>)
 8000bea:	487f      	ldr	r0, [pc, #508]	; (8000de8 <StartTTaskHandler+0x310>)
 8000bec:	f002 fd14 	bl	8003618 <HAL_UART_Transmit_IT>
    		if (led_b_sus)
 8000bf0:	e063      	b.n	8000cba <StartTTaskHandler+0x1e2>

    		}

    		else
    		{
    			temp_num = atoi(command+6);
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	3306      	adds	r3, #6
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f007 ffbf 	bl	8008b7c <atoi>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	60fb      	str	r3, [r7, #12]
    			osMessageQueuePut(b_rateQueueHandle, &temp_num, 1, osWaitForever);
 8000c02:	4b76      	ldr	r3, [pc, #472]	; (8000ddc <StartTTaskHandler+0x304>)
 8000c04:	6818      	ldr	r0, [r3, #0]
 8000c06:	f107 010c 	add.w	r1, r7, #12
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f004 fa38 	bl	8005084 <osMessageQueuePut>
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000c14:	4b72      	ldr	r3, [pc, #456]	; (8000de0 <StartTTaskHandler+0x308>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 f927 	bl	8004e70 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking rate updated\n\r", 27);
 8000c22:	221b      	movs	r2, #27
 8000c24:	4973      	ldr	r1, [pc, #460]	; (8000df4 <StartTTaskHandler+0x31c>)
 8000c26:	4870      	ldr	r0, [pc, #448]	; (8000de8 <StartTTaskHandler+0x310>)
 8000c28:	f002 fcf6 	bl	8003618 <HAL_UART_Transmit_IT>
    		if (led_b_sus)
 8000c2c:	e045      	b.n	8000cba <StartTTaskHandler+0x1e2>

    		}
    	}

    	else if (command[4] == 'b' && command[6] == '0')
 8000c2e:	7d3b      	ldrb	r3, [r7, #20]
 8000c30:	2b62      	cmp	r3, #98	; 0x62
 8000c32:	d135      	bne.n	8000ca0 <StartTTaskHandler+0x1c8>
 8000c34:	7dbb      	ldrb	r3, [r7, #22]
 8000c36:	2b30      	cmp	r3, #48	; 0x30
 8000c38:	d132      	bne.n	8000ca0 <StartTTaskHandler+0x1c8>
    	{
    		if (!led_b_sus)
 8000c3a:	7ffb      	ldrb	r3, [r7, #31]
 8000c3c:	f083 0301 	eor.w	r3, r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d01f      	beq.n	8000c86 <StartTTaskHandler+0x1ae>
			{

				osThreadSuspend(LedBlinkTaskHandle);
 8000c46:	4b61      	ldr	r3, [pc, #388]	; (8000dcc <StartTTaskHandler+0x2f4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f003 feee 	bl	8004a2c <osThreadSuspend>
				led_b_sus = !led_b_sus;
 8000c50:	7ffb      	ldrb	r3, [r7, #31]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf14      	ite	ne
 8000c56:	2301      	movne	r3, #1
 8000c58:	2300      	moveq	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	f083 0301 	eor.w	r3, r3, #1
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	77fb      	strb	r3, [r7, #31]
 8000c64:	7ffb      	ldrb	r3, [r7, #31]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	77fb      	strb	r3, [r7, #31]
				osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000c6c:	4b5c      	ldr	r3, [pc, #368]	; (8000de0 <StartTTaskHandler+0x308>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c74:	4618      	mov	r0, r3
 8000c76:	f004 f8fb 	bl	8004e70 <osSemaphoreAcquire>
				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task stopped\n\r", 27);
 8000c7a:	221b      	movs	r2, #27
 8000c7c:	495e      	ldr	r1, [pc, #376]	; (8000df8 <StartTTaskHandler+0x320>)
 8000c7e:	485a      	ldr	r0, [pc, #360]	; (8000de8 <StartTTaskHandler+0x310>)
 8000c80:	f002 fcca 	bl	8003618 <HAL_UART_Transmit_IT>
    		if (!led_b_sus)
 8000c84:	e01a      	b.n	8000cbc <StartTTaskHandler+0x1e4>

			}

			else
			{
				osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000c86:	4b56      	ldr	r3, [pc, #344]	; (8000de0 <StartTTaskHandler+0x308>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 f8ee 	bl	8004e70 <osSemaphoreAcquire>
				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task already stopped\n\r", 35);
 8000c94:	2223      	movs	r2, #35	; 0x23
 8000c96:	4959      	ldr	r1, [pc, #356]	; (8000dfc <StartTTaskHandler+0x324>)
 8000c98:	4853      	ldr	r0, [pc, #332]	; (8000de8 <StartTTaskHandler+0x310>)
 8000c9a:	f002 fcbd 	bl	8003618 <HAL_UART_Transmit_IT>
    		if (!led_b_sus)
 8000c9e:	e00d      	b.n	8000cbc <StartTTaskHandler+0x1e4>

    	}

    	else
    	{
    		osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000ca0:	4b4f      	ldr	r3, [pc, #316]	; (8000de0 <StartTTaskHandler+0x308>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 f8e1 	bl	8004e70 <osSemaphoreAcquire>
    		HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Invalid command\n\r", 17);
 8000cae:	2211      	movs	r2, #17
 8000cb0:	4953      	ldr	r1, [pc, #332]	; (8000e00 <StartTTaskHandler+0x328>)
 8000cb2:	484d      	ldr	r0, [pc, #308]	; (8000de8 <StartTTaskHandler+0x310>)
 8000cb4:	f002 fcb0 	bl	8003618 <HAL_UART_Transmit_IT>
    	if (command[4] == 'b' && atoi(command+6) > 0)
 8000cb8:	e0d0      	b.n	8000e5c <StartTTaskHandler+0x384>
    		if (led_b_sus)
 8000cba:	bf00      	nop
    	if (command[4] == 'b' && atoi(command+6) > 0)
 8000cbc:	e0ce      	b.n	8000e5c <StartTTaskHandler+0x384>
    	}


    }

    else if (!strncmp(command, "BUT", 3) || !strncmp(command, "but", 3))
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	494f      	ldr	r1, [pc, #316]	; (8000e04 <StartTTaskHandler+0x32c>)
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f007 ffaf 	bl	8008c2a <strncmp>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00a      	beq.n	8000ce8 <StartTTaskHandler+0x210>
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	494b      	ldr	r1, [pc, #300]	; (8000e08 <StartTTaskHandler+0x330>)
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f007 ffa5 	bl	8008c2a <strncmp>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 80ac 	bne.w	8000e40 <StartTTaskHandler+0x368>
    {
    	if (command[4] == 'r' || command[4] == 'R')
 8000ce8:	7d3b      	ldrb	r3, [r7, #20]
 8000cea:	2b72      	cmp	r3, #114	; 0x72
 8000cec:	d002      	beq.n	8000cf4 <StartTTaskHandler+0x21c>
 8000cee:	7d3b      	ldrb	r3, [r7, #20]
 8000cf0:	2b52      	cmp	r3, #82	; 0x52
 8000cf2:	d128      	bne.n	8000d46 <StartTTaskHandler+0x26e>
    	{
    		if (command[6] == '1')
 8000cf4:	7dbb      	ldrb	r3, [r7, #22]
 8000cf6:	2b31      	cmp	r3, #49	; 0x31
 8000cf8:	d112      	bne.n	8000d20 <StartTTaskHandler+0x248>
    		{
    			osEventFlagsSet(ButEventsHandle, 0x00000001U);
 8000cfa:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <StartTTaskHandler+0x314>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2101      	movs	r1, #1
 8000d00:	4618      	mov	r0, r3
 8000d02:	f003 ff2f 	bl	8004b64 <osEventFlagsSet>
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000d06:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <StartTTaskHandler+0x308>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f004 f8ae 	bl	8004e70 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button press notifications turned on\n\r", 38);
 8000d14:	2226      	movs	r2, #38	; 0x26
 8000d16:	493d      	ldr	r1, [pc, #244]	; (8000e0c <StartTTaskHandler+0x334>)
 8000d18:	4833      	ldr	r0, [pc, #204]	; (8000de8 <StartTTaskHandler+0x310>)
 8000d1a:	f002 fc7d 	bl	8003618 <HAL_UART_Transmit_IT>
    		if (command[6] == '1')
 8000d1e:	e08e      	b.n	8000e3e <StartTTaskHandler+0x366>

    		}

    		else
    		{
    			osEventFlagsClear(ButEventsHandle, 0x00000001U);
 8000d20:	4b32      	ldr	r3, [pc, #200]	; (8000dec <StartTTaskHandler+0x314>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	4618      	mov	r0, r3
 8000d28:	f003 ff60 	bl	8004bec <osEventFlagsClear>
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <StartTTaskHandler+0x308>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d34:	4618      	mov	r0, r3
 8000d36:	f004 f89b 	bl	8004e70 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button press notifications turned off\n\r", 39);
 8000d3a:	2227      	movs	r2, #39	; 0x27
 8000d3c:	4934      	ldr	r1, [pc, #208]	; (8000e10 <StartTTaskHandler+0x338>)
 8000d3e:	482a      	ldr	r0, [pc, #168]	; (8000de8 <StartTTaskHandler+0x310>)
 8000d40:	f002 fc6a 	bl	8003618 <HAL_UART_Transmit_IT>
    		if (command[6] == '1')
 8000d44:	e07b      	b.n	8000e3e <StartTTaskHandler+0x366>

    		}
    	}

    		else if (command[4] == 'l' || command[4] == 'L')
 8000d46:	7d3b      	ldrb	r3, [r7, #20]
 8000d48:	2b6c      	cmp	r3, #108	; 0x6c
 8000d4a:	d003      	beq.n	8000d54 <StartTTaskHandler+0x27c>
 8000d4c:	7d3b      	ldrb	r3, [r7, #20]
 8000d4e:	2b4c      	cmp	r3, #76	; 0x4c
 8000d50:	f040 8083 	bne.w	8000e5a <StartTTaskHandler+0x382>
    		{
    			if (command[6] == '1')
 8000d54:	7dbb      	ldrb	r3, [r7, #22]
 8000d56:	2b31      	cmp	r3, #49	; 0x31
 8000d58:	d15e      	bne.n	8000e18 <StartTTaskHandler+0x340>
				{
					osEventFlagsSet(ButEventsHandle, 0x00000002U);
 8000d5a:	4b24      	ldr	r3, [pc, #144]	; (8000dec <StartTTaskHandler+0x314>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2102      	movs	r1, #2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 feff 	bl	8004b64 <osEventFlagsSet>
					osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <StartTTaskHandler+0x308>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f004 f87e 	bl	8004e70 <osSemaphoreAcquire>
					HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED control with button turned on\n\r", 35);
 8000d74:	2223      	movs	r2, #35	; 0x23
 8000d76:	4927      	ldr	r1, [pc, #156]	; (8000e14 <StartTTaskHandler+0x33c>)
 8000d78:	481b      	ldr	r0, [pc, #108]	; (8000de8 <StartTTaskHandler+0x310>)
 8000d7a:	f002 fc4d 	bl	8003618 <HAL_UART_Transmit_IT>

					if (!led_b_sus)
 8000d7e:	7ffb      	ldrb	r3, [r7, #31]
 8000d80:	f083 0301 	eor.w	r3, r3, #1
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d067      	beq.n	8000e5a <StartTTaskHandler+0x382>
					{
						osThreadSuspend(LedBlinkTaskHandle);
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <StartTTaskHandler+0x2f4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f003 fe4c 	bl	8004a2c <osThreadSuspend>
						led_b_sus = !led_b_sus;
 8000d94:	7ffb      	ldrb	r3, [r7, #31]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bf14      	ite	ne
 8000d9a:	2301      	movne	r3, #1
 8000d9c:	2300      	moveq	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	f083 0301 	eor.w	r3, r3, #1
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	77fb      	strb	r3, [r7, #31]
 8000da8:	7ffb      	ldrb	r3, [r7, #31]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	77fb      	strb	r3, [r7, #31]
						osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <StartTTaskHandler+0x308>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db8:	4618      	mov	r0, r3
 8000dba:	f004 f859 	bl	8004e70 <osSemaphoreAcquire>
						HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task stopped\n\r", 27);
 8000dbe:	221b      	movs	r2, #27
 8000dc0:	490d      	ldr	r1, [pc, #52]	; (8000df8 <StartTTaskHandler+0x320>)
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <StartTTaskHandler+0x310>)
 8000dc4:	f002 fc28 	bl	8003618 <HAL_UART_Transmit_IT>
    	if (command[4] == 'r' || command[4] == 'R')
 8000dc8:	e047      	b.n	8000e5a <StartTTaskHandler+0x382>
 8000dca:	bf00      	nop
 8000dcc:	20001964 	.word	0x20001964
 8000dd0:	200019f8 	.word	0x200019f8
 8000dd4:	08008e0c 	.word	0x08008e0c
 8000dd8:	08008e10 	.word	0x08008e10
 8000ddc:	20001960 	.word	0x20001960
 8000de0:	2000196c 	.word	0x2000196c
 8000de4:	08008e14 	.word	0x08008e14
 8000de8:	20001974 	.word	0x20001974
 8000dec:	2000195c 	.word	0x2000195c
 8000df0:	08008e30 	.word	0x08008e30
 8000df4:	08008e58 	.word	0x08008e58
 8000df8:	08008e74 	.word	0x08008e74
 8000dfc:	08008e90 	.word	0x08008e90
 8000e00:	08008eb4 	.word	0x08008eb4
 8000e04:	08008ec8 	.word	0x08008ec8
 8000e08:	08008ecc 	.word	0x08008ecc
 8000e0c:	08008ed0 	.word	0x08008ed0
 8000e10:	08008ef8 	.word	0x08008ef8
 8000e14:	08008f20 	.word	0x08008f20

				}

				else
				{
					osEventFlagsClear(ButEventsHandle, 0x00000002U);
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <StartTTaskHandler+0x388>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 fee4 	bl	8004bec <osEventFlagsClear>
					osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <StartTTaskHandler+0x38c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f004 f81f 	bl	8004e70 <osSemaphoreAcquire>
					HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED control with button turned off\n\r", 36);
 8000e32:	2224      	movs	r2, #36	; 0x24
 8000e34:	490c      	ldr	r1, [pc, #48]	; (8000e68 <StartTTaskHandler+0x390>)
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <StartTTaskHandler+0x394>)
 8000e38:	f002 fbee 	bl	8003618 <HAL_UART_Transmit_IT>
    	if (command[4] == 'r' || command[4] == 'R')
 8000e3c:	e00d      	b.n	8000e5a <StartTTaskHandler+0x382>
 8000e3e:	e00c      	b.n	8000e5a <StartTTaskHandler+0x382>

    }

    else
    {
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <StartTTaskHandler+0x38c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 f811 	bl	8004e70 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Invalid command\n\r", 17);
 8000e4e:	2211      	movs	r2, #17
 8000e50:	4907      	ldr	r1, [pc, #28]	; (8000e70 <StartTTaskHandler+0x398>)
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <StartTTaskHandler+0x394>)
 8000e54:	f002 fbe0 	bl	8003618 <HAL_UART_Transmit_IT>
 8000e58:	e651      	b.n	8000afe <StartTTaskHandler+0x26>
    	if (command[4] == 'r' || command[4] == 'R')
 8000e5a:	bf00      	nop
    osMessageQueueGet(CommandQueueHandle, command, NULL, osWaitForever);
 8000e5c:	e64f      	b.n	8000afe <StartTTaskHandler+0x26>
 8000e5e:	bf00      	nop
 8000e60:	2000195c 	.word	0x2000195c
 8000e64:	2000196c 	.word	0x2000196c
 8000e68:	08008e30 	.word	0x08008e30
 8000e6c:	20001974 	.word	0x20001974
 8000e70:	08008eb4 	.word	0x08008eb4

08000e74 <StartButTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButTask */
void StartButTask(void *argument)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButTask */
  /* Infinite loop */
  for(;;)
  {
	switch (osEventFlagsWait(ButEventsHandle, 0x00000004U, osFlagsWaitAny, osWaitForever))
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <StartButTask+0x78>)
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e84:	2200      	movs	r2, #0
 8000e86:	2104      	movs	r1, #4
 8000e88:	f003 ff03 	bl	8004c92 <osEventFlagsWait>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b07      	cmp	r3, #7
 8000e90:	d019      	beq.n	8000ec6 <StartButTask+0x52>
 8000e92:	2b07      	cmp	r3, #7
 8000e94:	d828      	bhi.n	8000ee8 <StartButTask+0x74>
 8000e96:	2b05      	cmp	r3, #5
 8000e98:	d002      	beq.n	8000ea0 <StartButTask+0x2c>
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d00d      	beq.n	8000eba <StartButTask+0x46>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button pressed!\n\r", 17);

		default:
			break;
 8000e9e:	e023      	b.n	8000ee8 <StartButTask+0x74>
			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <StartButTask+0x7c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 ffe1 	bl	8004e70 <osSemaphoreAcquire>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button pressed!\n\r", 17);
 8000eae:	2211      	movs	r2, #17
 8000eb0:	4910      	ldr	r1, [pc, #64]	; (8000ef4 <StartButTask+0x80>)
 8000eb2:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <StartButTask+0x84>)
 8000eb4:	f002 fbb0 	bl	8003618 <HAL_UART_Transmit_IT>
			break;
 8000eb8:	e017      	b.n	8000eea <StartButTask+0x76>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000eba:	2120      	movs	r1, #32
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec0:	f000 fd1a 	bl	80018f8 <HAL_GPIO_TogglePin>
			break;
 8000ec4:	e011      	b.n	8000eea <StartButTask+0x76>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f000 fd14 	bl	80018f8 <HAL_GPIO_TogglePin>
			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <StartButTask+0x7c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f003 ffc9 	bl	8004e70 <osSemaphoreAcquire>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button pressed!\n\r", 17);
 8000ede:	2211      	movs	r2, #17
 8000ee0:	4904      	ldr	r1, [pc, #16]	; (8000ef4 <StartButTask+0x80>)
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <StartButTask+0x84>)
 8000ee4:	f002 fb98 	bl	8003618 <HAL_UART_Transmit_IT>
			break;
 8000ee8:	bf00      	nop
	switch (osEventFlagsWait(ButEventsHandle, 0x00000004U, osFlagsWaitAny, osWaitForever))
 8000eea:	e7c7      	b.n	8000e7c <StartButTask+0x8>
 8000eec:	2000195c 	.word	0x2000195c
 8000ef0:	2000196c 	.word	0x2000196c
 8000ef4:	08008f44 	.word	0x08008f44
 8000ef8:	20001974 	.word	0x20001974

08000efc <StartLedBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedBlinkTask */
void StartLedBlinkTask(void *argument)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedBlinkTask */
  int rate = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(b_rateQueueHandle, &rate, NULL, 0);
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <StartLedBlinkTask+0x30>)
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	f107 010c 	add.w	r1, r7, #12
 8000f10:	2300      	movs	r3, #0
 8000f12:	2200      	movs	r2, #0
 8000f14:	f004 f916 	bl	8005144 <osMessageQueueGet>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f18:	2120      	movs	r1, #32
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f000 fceb 	bl	80018f8 <HAL_GPIO_TogglePin>
    osDelay(rate);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f003 fdc3 	bl	8004ab0 <osDelay>
    osMessageQueueGet(b_rateQueueHandle, &rate, NULL, 0);
 8000f2a:	e7ed      	b.n	8000f08 <StartLedBlinkTask+0xc>
 8000f2c:	20001960 	.word	0x20001960

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f42:	f000 f995 	bl	8001270 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40001000 	.word	0x40001000

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <Error_Handler+0x8>
	...

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_MspInit+0x4c>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6a:	4a10      	ldr	r2, [pc, #64]	; (8000fac <HAL_MspInit+0x4c>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6613      	str	r3, [r2, #96]	; 0x60
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_MspInit+0x4c>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_MspInit+0x4c>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_MspInit+0x4c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6593      	str	r3, [r2, #88]	; 0x58
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_MspInit+0x4c>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	210f      	movs	r1, #15
 8000f9a:	f06f 0001 	mvn.w	r0, #1
 8000f9e:	f000 fa3f 	bl	8001420 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0ac      	sub	sp, #176	; 0xb0
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2288      	movs	r2, #136	; 0x88
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f007 fe0f 	bl	8008bf4 <memset>
  if(huart->Instance==USART2)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a21      	ldr	r2, [pc, #132]	; (8001060 <HAL_UART_MspInit+0xb0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d13b      	bne.n	8001058 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fb37 	bl	8002660 <HAL_RCCEx_PeriphCLKConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ff8:	f7ff ffac 	bl	8000f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_UART_MspInit+0xb4>)
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001000:	4a18      	ldr	r2, [pc, #96]	; (8001064 <HAL_UART_MspInit+0xb4>)
 8001002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001006:	6593      	str	r3, [r2, #88]	; 0x58
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_UART_MspInit+0xb4>)
 800100a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <HAL_UART_MspInit+0xb4>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	4a12      	ldr	r2, [pc, #72]	; (8001064 <HAL_UART_MspInit+0xb4>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <HAL_UART_MspInit+0xb4>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800102c:	230c      	movs	r3, #12
 800102e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001044:	2307      	movs	r3, #7
 8001046:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f000 fa8e 	bl	8001574 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	37b0      	adds	r7, #176	; 0xb0
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40004400 	.word	0x40004400
 8001064:	40021000 	.word	0x40021000

08001068 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001078:	2200      	movs	r2, #0
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	2036      	movs	r0, #54	; 0x36
 800107e:	f000 f9cf 	bl	8001420 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001082:	2036      	movs	r0, #54	; 0x36
 8001084:	f000 f9e8 	bl	8001458 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <HAL_InitTick+0x9c>)
 800108a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108c:	4a1d      	ldr	r2, [pc, #116]	; (8001104 <HAL_InitTick+0x9c>)
 800108e:	f043 0310 	orr.w	r3, r3, #16
 8001092:	6593      	str	r3, [r2, #88]	; 0x58
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_InitTick+0x9c>)
 8001096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010a0:	f107 0210 	add.w	r2, r7, #16
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fa46 	bl	800253c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010b0:	f001 fa18 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 80010b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b8:	4a13      	ldr	r2, [pc, #76]	; (8001108 <HAL_InitTick+0xa0>)
 80010ba:	fba2 2303 	umull	r2, r3, r2, r3
 80010be:	0c9b      	lsrs	r3, r3, #18
 80010c0:	3b01      	subs	r3, #1
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_InitTick+0xa4>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <HAL_InitTick+0xa8>)
 80010c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <HAL_InitTick+0xa4>)
 80010cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010d2:	4a0e      	ldr	r2, [pc, #56]	; (800110c <HAL_InitTick+0xa4>)
 80010d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <HAL_InitTick+0xa4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_InitTick+0xa4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <HAL_InitTick+0xa4>)
 80010e6:	f001 ff77 	bl	8002fd8 <HAL_TIM_Base_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d104      	bne.n	80010fa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010f0:	4806      	ldr	r0, [pc, #24]	; (800110c <HAL_InitTick+0xa4>)
 80010f2:	f001 ffd3 	bl	800309c <HAL_TIM_Base_Start_IT>
 80010f6:	4603      	mov	r3, r0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3730      	adds	r7, #48	; 0x30
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021000 	.word	0x40021000
 8001108:	431bde83 	.word	0x431bde83
 800110c:	20001a04 	.word	0x20001a04
 8001110:	40001000 	.word	0x40001000

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <USART2_IRQHandler+0x10>)
 8001146:	f002 fb07 	bl	8003758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20001974 	.word	0x20001974

08001154 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001158:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800115c:	f000 fbe6 	bl	800192c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <TIM6_DAC_IRQHandler+0x10>)
 800116a:	f002 f807 	bl	800317c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20001a04 	.word	0x20001a04

08001178 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <SystemInit+0x5c>)
 800117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <SystemInit+0x5c>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <SystemInit+0x60>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <SystemInit+0x60>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <SystemInit+0x60>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <SystemInit+0x60>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <SystemInit+0x60>)
 80011a4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011a8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <SystemInit+0x60>)
 80011b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <SystemInit+0x60>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <SystemInit+0x60>)
 80011bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <SystemInit+0x60>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	40021000 	.word	0x40021000

080011dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e0:	f7ff ffca 	bl	8001178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011e6:	e003      	b.n	80011f0 <LoopCopyDataInit>

080011e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011ee:	3104      	adds	r1, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011f0:	480a      	ldr	r0, [pc, #40]	; (800121c <LoopForever+0xa>)
	ldr	r3, =_edata
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011f8:	d3f6      	bcc.n	80011e8 <CopyDataInit>
	ldr	r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011fc:	e002      	b.n	8001204 <LoopFillZerobss>

080011fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001200:	f842 3b04 	str.w	r3, [r2], #4

08001204 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <LoopForever+0x16>)
	cmp	r2, r3
 8001206:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001208:	d3f9      	bcc.n	80011fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120a:	f007 fcc1 	bl	8008b90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800120e:	f7ff f963 	bl	80004d8 <main>

08001212 <LoopForever>:

LoopForever:
    b LoopForever
 8001212:	e7fe      	b.n	8001212 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001214:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001218:	080091c4 	.word	0x080091c4
	ldr	r0, =_sdata
 800121c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001220:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001224:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001228:	20001a94 	.word	0x20001a94

0800122c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC1_2_IRQHandler>
	...

08001230 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_Init+0x3c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <HAL_Init+0x3c>)
 8001240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001244:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001246:	2003      	movs	r0, #3
 8001248:	f000 f8df 	bl	800140a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124c:	200f      	movs	r0, #15
 800124e:	f7ff ff0b 	bl	8001068 <HAL_InitTick>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	e001      	b.n	8001262 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800125e:	f7ff fe7f 	bl	8000f60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001262:	79fb      	ldrb	r3, [r7, #7]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40022000 	.word	0x40022000

08001270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x20>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x24>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <HAL_IncTick+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008
 8001294:	20001a50 	.word	0x20001a50

08001298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20001a50 	.word	0x20001a50

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <__NVIC_EnableIRQ+0x38>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ff4c 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001432:	f7ff ff61 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001436:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	6978      	ldr	r0, [r7, #20]
 800143e:	f7ff ffb1 	bl	80013a4 <NVIC_EncodePriority>
 8001442:	4602      	mov	r2, r0
 8001444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff80 	bl	8001350 <__NVIC_SetPriority>
}
 8001450:	bf00      	nop
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff54 	bl	8001314 <__NVIC_EnableIRQ>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d008      	beq.n	800149e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2204      	movs	r2, #4
 8001490:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e022      	b.n	80014e4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 020e 	bic.w	r2, r2, #14
 80014ac:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0201 	bic.w	r2, r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f003 021c 	and.w	r2, r3, #28
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	2101      	movs	r1, #1
 80014cc:	fa01 f202 	lsl.w	r2, r1, r2
 80014d0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d005      	beq.n	8001514 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2204      	movs	r2, #4
 800150c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e029      	b.n	8001568 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 020e 	bic.w	r2, r2, #14
 8001522:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f003 021c 	and.w	r2, r3, #28
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	2101      	movs	r1, #1
 8001542:	fa01 f202 	lsl.w	r2, r1, r2
 8001546:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	4798      	blx	r3
    }
  }
  return status;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001582:	e17f      	b.n	8001884 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	2101      	movs	r1, #1
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	4013      	ands	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8171 	beq.w	800187e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d00b      	beq.n	80015bc <HAL_GPIO_Init+0x48>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d007      	beq.n	80015bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b0:	2b11      	cmp	r3, #17
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b12      	cmp	r3, #18
 80015ba:	d130      	bne.n	800161e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015f2:	2201      	movs	r2, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	f003 0201 	and.w	r2, r3, #1
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b03      	cmp	r3, #3
 8001628:	d118      	bne.n	800165c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x128>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b12      	cmp	r3, #18
 800169a:	d123      	bne.n	80016e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	08da      	lsrs	r2, r3, #3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3208      	adds	r2, #8
 80016a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	220f      	movs	r2, #15
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	08da      	lsrs	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3208      	adds	r2, #8
 80016de:	6939      	ldr	r1, [r7, #16]
 80016e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0203 	and.w	r2, r3, #3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80ac 	beq.w	800187e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <HAL_GPIO_Init+0x330>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	4a5e      	ldr	r2, [pc, #376]	; (80018a4 <HAL_GPIO_Init+0x330>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6613      	str	r3, [r2, #96]	; 0x60
 8001732:	4b5c      	ldr	r3, [pc, #368]	; (80018a4 <HAL_GPIO_Init+0x330>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800173e:	4a5a      	ldr	r2, [pc, #360]	; (80018a8 <HAL_GPIO_Init+0x334>)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	220f      	movs	r2, #15
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001768:	d025      	beq.n	80017b6 <HAL_GPIO_Init+0x242>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4f      	ldr	r2, [pc, #316]	; (80018ac <HAL_GPIO_Init+0x338>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d01f      	beq.n	80017b2 <HAL_GPIO_Init+0x23e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4e      	ldr	r2, [pc, #312]	; (80018b0 <HAL_GPIO_Init+0x33c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d019      	beq.n	80017ae <HAL_GPIO_Init+0x23a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a4d      	ldr	r2, [pc, #308]	; (80018b4 <HAL_GPIO_Init+0x340>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_GPIO_Init+0x236>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4c      	ldr	r2, [pc, #304]	; (80018b8 <HAL_GPIO_Init+0x344>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00d      	beq.n	80017a6 <HAL_GPIO_Init+0x232>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4b      	ldr	r2, [pc, #300]	; (80018bc <HAL_GPIO_Init+0x348>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d007      	beq.n	80017a2 <HAL_GPIO_Init+0x22e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4a      	ldr	r2, [pc, #296]	; (80018c0 <HAL_GPIO_Init+0x34c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_GPIO_Init+0x22a>
 800179a:	2306      	movs	r3, #6
 800179c:	e00c      	b.n	80017b8 <HAL_GPIO_Init+0x244>
 800179e:	2307      	movs	r3, #7
 80017a0:	e00a      	b.n	80017b8 <HAL_GPIO_Init+0x244>
 80017a2:	2305      	movs	r3, #5
 80017a4:	e008      	b.n	80017b8 <HAL_GPIO_Init+0x244>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x244>
 80017aa:	2303      	movs	r3, #3
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_Init+0x244>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_Init+0x244>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_Init+0x244>
 80017b6:	2300      	movs	r3, #0
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	f002 0203 	and.w	r2, r2, #3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4093      	lsls	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017c8:	4937      	ldr	r1, [pc, #220]	; (80018a8 <HAL_GPIO_Init+0x334>)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017d6:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <HAL_GPIO_Init+0x350>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017fa:	4a32      	ldr	r2, [pc, #200]	; (80018c4 <HAL_GPIO_Init+0x350>)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001800:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <HAL_GPIO_Init+0x350>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001824:	4a27      	ldr	r2, [pc, #156]	; (80018c4 <HAL_GPIO_Init+0x350>)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800182a:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <HAL_GPIO_Init+0x350>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800184e:	4a1d      	ldr	r2, [pc, #116]	; (80018c4 <HAL_GPIO_Init+0x350>)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_GPIO_Init+0x350>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	43db      	mvns	r3, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001878:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <HAL_GPIO_Init+0x350>)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	f47f ae78 	bne.w	8001584 <HAL_GPIO_Init+0x10>
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010000 	.word	0x40010000
 80018ac:	48000400 	.word	0x48000400
 80018b0:	48000800 	.word	0x48000800
 80018b4:	48000c00 	.word	0x48000c00
 80018b8:	48001000 	.word	0x48001000
 80018bc:	48001400 	.word	0x48001400
 80018c0:	48001800 	.word	0x48001800
 80018c4:	40010400 	.word	0x40010400

080018c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
 80018d4:	4613      	mov	r3, r2
 80018d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e4:	e002      	b.n	80018ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4013      	ands	r3, r2
 8001910:	041a      	lsls	r2, r3, #16
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43d9      	mvns	r1, r3
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	400b      	ands	r3, r1
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	619a      	str	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	4013      	ands	r3, r2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe ff86 	bl	800085c <HAL_GPIO_EXTI_Callback>
  }
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <HAL_PWREx_GetVoltageRange+0x18>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40007000 	.word	0x40007000

08001978 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001986:	d130      	bne.n	80019ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001988:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001994:	d038      	beq.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800199e:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2232      	movs	r2, #50	; 0x32
 80019ac:	fb02 f303 	mul.w	r3, r2, r3
 80019b0:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0c9b      	lsrs	r3, r3, #18
 80019b8:	3301      	adds	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019bc:	e002      	b.n	80019c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d0:	d102      	bne.n	80019d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f2      	bne.n	80019be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e4:	d110      	bne.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e00f      	b.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f6:	d007      	beq.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a00:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40007000 	.word	0x40007000
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	431bde83 	.word	0x431bde83

08001a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e3d4      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a36:	4ba1      	ldr	r3, [pc, #644]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a40:	4b9e      	ldr	r3, [pc, #632]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80e4 	beq.w	8001c20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <HAL_RCC_OscConfig+0x4a>
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	f040 808b 	bne.w	8001b7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	f040 8087 	bne.w	8001b7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a6e:	4b93      	ldr	r3, [pc, #588]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_RCC_OscConfig+0x62>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e3ac      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1a      	ldr	r2, [r3, #32]
 8001a8a:	4b8c      	ldr	r3, [pc, #560]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x7c>
 8001a96:	4b89      	ldr	r3, [pc, #548]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a9e:	e005      	b.n	8001aac <HAL_RCC_OscConfig+0x88>
 8001aa0:	4b86      	ldr	r3, [pc, #536]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d223      	bcs.n	8001af8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 fd73 	bl	80025a0 <RCC_SetFlashLatencyFromMSIRange>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e38d      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ac4:	4b7d      	ldr	r3, [pc, #500]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a7c      	ldr	r2, [pc, #496]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001aca:	f043 0308 	orr.w	r3, r3, #8
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b7a      	ldr	r3, [pc, #488]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4977      	ldr	r1, [pc, #476]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ae2:	4b76      	ldr	r3, [pc, #472]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	4972      	ldr	r1, [pc, #456]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
 8001af6:	e025      	b.n	8001b44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af8:	4b70      	ldr	r3, [pc, #448]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a6f      	ldr	r2, [pc, #444]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001afe:	f043 0308 	orr.w	r3, r3, #8
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b6d      	ldr	r3, [pc, #436]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	496a      	ldr	r1, [pc, #424]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b16:	4b69      	ldr	r3, [pc, #420]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	4965      	ldr	r1, [pc, #404]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d109      	bne.n	8001b44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 fd33 	bl	80025a0 <RCC_SetFlashLatencyFromMSIRange>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e34d      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b44:	f000 fc36 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b5c      	ldr	r3, [pc, #368]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	495a      	ldr	r1, [pc, #360]	; (8001cc0 <HAL_RCC_OscConfig+0x29c>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b60:	4a58      	ldr	r2, [pc, #352]	; (8001cc4 <HAL_RCC_OscConfig+0x2a0>)
 8001b62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b64:	4b58      	ldr	r3, [pc, #352]	; (8001cc8 <HAL_RCC_OscConfig+0x2a4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fa7d 	bl	8001068 <HAL_InitTick>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d052      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	e331      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d032      	beq.n	8001bea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b84:	4b4d      	ldr	r3, [pc, #308]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a4c      	ldr	r2, [pc, #304]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fb82 	bl	8001298 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b98:	f7ff fb7e 	bl	8001298 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e31a      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001baa:	4b44      	ldr	r3, [pc, #272]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb6:	4b41      	ldr	r3, [pc, #260]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a40      	ldr	r2, [pc, #256]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b3e      	ldr	r3, [pc, #248]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	493b      	ldr	r1, [pc, #236]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bd4:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	4936      	ldr	r1, [pc, #216]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
 8001be8:	e01a      	b.n	8001c20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bea:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a33      	ldr	r2, [pc, #204]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf6:	f7ff fb4f 	bl	8001298 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bfe:	f7ff fb4b 	bl	8001298 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e2e7      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x1da>
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d074      	beq.n	8001d16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x21a>
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2b0c      	cmp	r3, #12
 8001c36:	d10e      	bne.n	8001c56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d10b      	bne.n	8001c56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d064      	beq.n	8001d14 <HAL_RCC_OscConfig+0x2f0>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d160      	bne.n	8001d14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e2c4      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x24a>
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	e01d      	b.n	8001caa <HAL_RCC_OscConfig+0x286>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c76:	d10c      	bne.n	8001c92 <HAL_RCC_OscConfig+0x26e>
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001c7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	e00b      	b.n	8001caa <HAL_RCC_OscConfig+0x286>
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <HAL_RCC_OscConfig+0x298>)
 8001ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01c      	beq.n	8001cec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb2:	f7ff faf1 	bl	8001298 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cb8:	e011      	b.n	8001cde <HAL_RCC_OscConfig+0x2ba>
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	08009068 	.word	0x08009068
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fae4 	bl	8001298 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e280      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cde:	4baf      	ldr	r3, [pc, #700]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x2a8>
 8001cea:	e014      	b.n	8001d16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff fad4 	bl	8001298 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fad0 	bl	8001298 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e26c      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d06:	4ba5      	ldr	r3, [pc, #660]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x2d0>
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d060      	beq.n	8001de4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_OscConfig+0x310>
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d119      	bne.n	8001d62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d116      	bne.n	8001d62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d34:	4b99      	ldr	r3, [pc, #612]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_OscConfig+0x328>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e249      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4c:	4b93      	ldr	r3, [pc, #588]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	061b      	lsls	r3, r3, #24
 8001d5a:	4990      	ldr	r1, [pc, #576]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d60:	e040      	b.n	8001de4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d023      	beq.n	8001db2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6a:	4b8c      	ldr	r3, [pc, #560]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a8b      	ldr	r2, [pc, #556]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff fa8f 	bl	8001298 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fa8b 	bl	8001298 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e227      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d90:	4b82      	ldr	r3, [pc, #520]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	061b      	lsls	r3, r3, #24
 8001daa:	497c      	ldr	r1, [pc, #496]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
 8001db0:	e018      	b.n	8001de4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db2:	4b7a      	ldr	r3, [pc, #488]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a79      	ldr	r2, [pc, #484]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fa6b 	bl	8001298 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff fa67 	bl	8001298 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e203      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd8:	4b70      	ldr	r3, [pc, #448]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f0      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d03c      	beq.n	8001e6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01c      	beq.n	8001e32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df8:	4b68      	ldr	r3, [pc, #416]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfe:	4a67      	ldr	r2, [pc, #412]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7ff fa46 	bl	8001298 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff fa42 	bl	8001298 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1de      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e22:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ef      	beq.n	8001e10 <HAL_RCC_OscConfig+0x3ec>
 8001e30:	e01b      	b.n	8001e6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e32:	4b5a      	ldr	r3, [pc, #360]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e38:	4a58      	ldr	r2, [pc, #352]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e42:	f7ff fa29 	bl	8001298 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fa25 	bl	8001298 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e1c1      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1ef      	bne.n	8001e4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80a6 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e7c:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10d      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e88:	4b44      	ldr	r3, [pc, #272]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	4a43      	ldr	r2, [pc, #268]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e92:	6593      	str	r3, [r2, #88]	; 0x58
 8001e94:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea4:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <HAL_RCC_OscConfig+0x57c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d118      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <HAL_RCC_OscConfig+0x57c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3a      	ldr	r2, [pc, #232]	; (8001fa0 <HAL_RCC_OscConfig+0x57c>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f9ec 	bl	8001298 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec4:	f7ff f9e8 	bl	8001298 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e184      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed6:	4b32      	ldr	r3, [pc, #200]	; (8001fa0 <HAL_RCC_OscConfig+0x57c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d108      	bne.n	8001efc <HAL_RCC_OscConfig+0x4d8>
 8001eea:	4b2c      	ldr	r3, [pc, #176]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef0:	4a2a      	ldr	r2, [pc, #168]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001efa:	e024      	b.n	8001f46 <HAL_RCC_OscConfig+0x522>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b05      	cmp	r3, #5
 8001f02:	d110      	bne.n	8001f26 <HAL_RCC_OscConfig+0x502>
 8001f04:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	4a24      	ldr	r2, [pc, #144]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f24:	e00f      	b.n	8001f46 <HAL_RCC_OscConfig+0x522>
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001f3e:	f023 0304 	bic.w	r3, r3, #4
 8001f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d016      	beq.n	8001f7c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4e:	f7ff f9a3 	bl	8001298 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f54:	e00a      	b.n	8001f6c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f56:	f7ff f99f 	bl	8001298 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e139      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_RCC_OscConfig+0x578>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0ed      	beq.n	8001f56 <HAL_RCC_OscConfig+0x532>
 8001f7a:	e01a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f98c 	bl	8001298 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f82:	e00f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7ff f988 	bl	8001298 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d906      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e122      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa4:	4b90      	ldr	r3, [pc, #576]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1e8      	bne.n	8001f84 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb2:	7ffb      	ldrb	r3, [r7, #31]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d105      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb8:	4b8b      	ldr	r3, [pc, #556]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	4a8a      	ldr	r2, [pc, #552]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 8001fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 8108 	beq.w	80021de <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	f040 80d0 	bne.w	8002178 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fd8:	4b83      	ldr	r3, [pc, #524]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0203 	and.w	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d130      	bne.n	800204e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d127      	bne.n	800204e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002008:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d11f      	bne.n	800204e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002018:	2a07      	cmp	r2, #7
 800201a:	bf14      	ite	ne
 800201c:	2201      	movne	r2, #1
 800201e:	2200      	moveq	r2, #0
 8002020:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002022:	4293      	cmp	r3, r2
 8002024:	d113      	bne.n	800204e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002030:	085b      	lsrs	r3, r3, #1
 8002032:	3b01      	subs	r3, #1
 8002034:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002036:	429a      	cmp	r2, r3
 8002038:	d109      	bne.n	800204e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	3b01      	subs	r3, #1
 8002048:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d06e      	beq.n	800212c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b0c      	cmp	r3, #12
 8002052:	d069      	beq.n	8002128 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002054:	4b64      	ldr	r3, [pc, #400]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002060:	4b61      	ldr	r3, [pc, #388]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b7      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002070:	4b5d      	ldr	r3, [pc, #372]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a5c      	ldr	r2, [pc, #368]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 8002076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800207a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800207c:	f7ff f90c 	bl	8001298 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002084:	f7ff f908 	bl	8001298 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0a4      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002096:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a2:	4b51      	ldr	r3, [pc, #324]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	4b51      	ldr	r3, [pc, #324]	; (80021ec <HAL_RCC_OscConfig+0x7c8>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020b2:	3a01      	subs	r2, #1
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	4311      	orrs	r1, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020bc:	0212      	lsls	r2, r2, #8
 80020be:	4311      	orrs	r1, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020c4:	0852      	lsrs	r2, r2, #1
 80020c6:	3a01      	subs	r2, #1
 80020c8:	0552      	lsls	r2, r2, #21
 80020ca:	4311      	orrs	r1, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020d0:	0852      	lsrs	r2, r2, #1
 80020d2:	3a01      	subs	r2, #1
 80020d4:	0652      	lsls	r2, r2, #25
 80020d6:	4311      	orrs	r1, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020dc:	0912      	lsrs	r2, r2, #4
 80020de:	0452      	lsls	r2, r2, #17
 80020e0:	430a      	orrs	r2, r1
 80020e2:	4941      	ldr	r1, [pc, #260]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020e8:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a3e      	ldr	r2, [pc, #248]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 80020ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020f4:	4b3c      	ldr	r3, [pc, #240]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4a3b      	ldr	r2, [pc, #236]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 80020fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002100:	f7ff f8ca 	bl	8001298 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7ff f8c6 	bl	8001298 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e062      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211a:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002126:	e05a      	b.n	80021de <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e059      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212c:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d152      	bne.n	80021de <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002142:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002150:	f7ff f8a2 	bl	8001298 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f89e 	bl	8001298 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e03a      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x734>
 8002176:	e032      	b.n	80021de <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d02d      	beq.n	80021da <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 8002184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002188:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 800219c:	f023 0303 	bic.w	r3, r3, #3
 80021a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	4a10      	ldr	r2, [pc, #64]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 80021a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7ff f871 	bl	8001298 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7ff f86d 	bl	8001298 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e009      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_OscConfig+0x7c4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x796>
 80021d8:	e001      	b.n	80021de <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	f99d808c 	.word	0xf99d808c

080021f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0c8      	b.n	8002396 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002204:	4b66      	ldr	r3, [pc, #408]	; (80023a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d910      	bls.n	8002234 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b63      	ldr	r3, [pc, #396]	; (80023a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 0207 	bic.w	r2, r3, #7
 800221a:	4961      	ldr	r1, [pc, #388]	; (80023a0 <HAL_RCC_ClockConfig+0x1b0>)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b5f      	ldr	r3, [pc, #380]	; (80023a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0b0      	b.n	8002396 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d04c      	beq.n	80022da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d107      	bne.n	8002258 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002248:	4b56      	ldr	r3, [pc, #344]	; (80023a4 <HAL_RCC_ClockConfig+0x1b4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d121      	bne.n	8002298 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e09e      	b.n	8002396 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d107      	bne.n	8002270 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002260:	4b50      	ldr	r3, [pc, #320]	; (80023a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d115      	bne.n	8002298 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e092      	b.n	8002396 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d107      	bne.n	8002288 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002278:	4b4a      	ldr	r3, [pc, #296]	; (80023a4 <HAL_RCC_ClockConfig+0x1b4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e086      	b.n	8002396 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002288:	4b46      	ldr	r3, [pc, #280]	; (80023a4 <HAL_RCC_ClockConfig+0x1b4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e07e      	b.n	8002396 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002298:	4b42      	ldr	r3, [pc, #264]	; (80023a4 <HAL_RCC_ClockConfig+0x1b4>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f023 0203 	bic.w	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	493f      	ldr	r1, [pc, #252]	; (80023a4 <HAL_RCC_ClockConfig+0x1b4>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022aa:	f7fe fff5 	bl	8001298 <HAL_GetTick>
 80022ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b0:	e00a      	b.n	80022c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b2:	f7fe fff1 	bl	8001298 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e066      	b.n	8002396 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c8:	4b36      	ldr	r3, [pc, #216]	; (80023a4 <HAL_RCC_ClockConfig+0x1b4>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 020c 	and.w	r2, r3, #12
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d1eb      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e6:	4b2f      	ldr	r3, [pc, #188]	; (80023a4 <HAL_RCC_ClockConfig+0x1b4>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	492c      	ldr	r1, [pc, #176]	; (80023a4 <HAL_RCC_ClockConfig+0x1b4>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <HAL_RCC_ClockConfig+0x1b0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d210      	bcs.n	8002328 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 0207 	bic.w	r2, r3, #7
 800230e:	4924      	ldr	r1, [pc, #144]	; (80023a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e036      	b.n	8002396 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4918      	ldr	r1, [pc, #96]	; (80023a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4910      	ldr	r1, [pc, #64]	; (80023a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002366:	f000 f825 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 800236a:	4602      	mov	r2, r0
 800236c:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_RCC_ClockConfig+0x1b4>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	490c      	ldr	r1, [pc, #48]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	5ccb      	ldrb	r3, [r1, r3]
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	fa22 f303 	lsr.w	r3, r2, r3
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fe6c 	bl	8001068 <HAL_InitTick>
 8002390:	4603      	mov	r3, r0
 8002392:	72fb      	strb	r3, [r7, #11]

  return status;
 8002394:	7afb      	ldrb	r3, [r7, #11]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40022000 	.word	0x40022000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	08009068 	.word	0x08009068
 80023ac:	20000000 	.word	0x20000000
 80023b0:	20000004 	.word	0x20000004

080023b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c2:	4b3e      	ldr	r3, [pc, #248]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023cc:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x34>
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	2b0c      	cmp	r3, #12
 80023e0:	d121      	bne.n	8002426 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d11e      	bne.n	8002426 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023e8:	4b34      	ldr	r3, [pc, #208]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023f4:	4b31      	ldr	r3, [pc, #196]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 80023f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e005      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002410:	4a2b      	ldr	r2, [pc, #172]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002418:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10d      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002424:	e00a      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	2b04      	cmp	r3, #4
 800242a:	d102      	bne.n	8002432 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	e004      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d101      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002438:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800243a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d134      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002442:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d003      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0xa6>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d003      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0xac>
 8002458:	e005      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800245c:	617b      	str	r3, [r7, #20]
      break;
 800245e:	e005      	b.n	800246c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002462:	617b      	str	r3, [r7, #20]
      break;
 8002464:	e002      	b.n	800246c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	617b      	str	r3, [r7, #20]
      break;
 800246a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	3301      	adds	r3, #1
 8002478:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	fb02 f203 	mul.w	r2, r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002490:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	0e5b      	lsrs	r3, r3, #25
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	3301      	adds	r3, #1
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024ac:	69bb      	ldr	r3, [r7, #24]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	08009080 	.word	0x08009080
 80024c4:	00f42400 	.word	0x00f42400
 80024c8:	007a1200 	.word	0x007a1200

080024cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000000 	.word	0x20000000

080024e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024e8:	f7ff fff0 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4904      	ldr	r1, [pc, #16]	; (800250c <HAL_RCC_GetPCLK1Freq+0x28>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	08009078 	.word	0x08009078

08002510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002514:	f7ff ffda 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_RCC_GetPCLK2Freq+0x24>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	0adb      	lsrs	r3, r3, #11
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	4904      	ldr	r1, [pc, #16]	; (8002538 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002530:	4618      	mov	r0, r3
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000
 8002538:	08009078 	.word	0x08009078

0800253c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	220f      	movs	r2, #15
 800254a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_RCC_GetClockConfig+0x5c>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0203 	and.w	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <HAL_RCC_GetClockConfig+0x5c>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <HAL_RCC_GetClockConfig+0x5c>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_RCC_GetClockConfig+0x5c>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	08db      	lsrs	r3, r3, #3
 8002576:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800257e:	4b07      	ldr	r3, [pc, #28]	; (800259c <HAL_RCC_GetClockConfig+0x60>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0207 	and.w	r2, r3, #7
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	601a      	str	r2, [r3, #0]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	40022000 	.word	0x40022000

080025a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025ac:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025b8:	f7ff f9d0 	bl	800195c <HAL_PWREx_GetVoltageRange>
 80025bc:	6178      	str	r0, [r7, #20]
 80025be:	e014      	b.n	80025ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	4a24      	ldr	r2, [pc, #144]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ca:	6593      	str	r3, [r2, #88]	; 0x58
 80025cc:	4b22      	ldr	r3, [pc, #136]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025d8:	f7ff f9c0 	bl	800195c <HAL_PWREx_GetVoltageRange>
 80025dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f0:	d10b      	bne.n	800260a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b80      	cmp	r3, #128	; 0x80
 80025f6:	d919      	bls.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2ba0      	cmp	r3, #160	; 0xa0
 80025fc:	d902      	bls.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025fe:	2302      	movs	r3, #2
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e013      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002604:	2301      	movs	r3, #1
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	e010      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b80      	cmp	r3, #128	; 0x80
 800260e:	d902      	bls.n	8002616 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002610:	2303      	movs	r3, #3
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	e00a      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b80      	cmp	r3, #128	; 0x80
 800261a:	d102      	bne.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800261c:	2302      	movs	r3, #2
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e004      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b70      	cmp	r3, #112	; 0x70
 8002626:	d101      	bne.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002628:	2301      	movs	r3, #1
 800262a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 0207 	bic.w	r2, r3, #7
 8002634:	4909      	ldr	r1, [pc, #36]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800263c:	4b07      	ldr	r3, [pc, #28]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	40022000 	.word	0x40022000

08002660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002668:	2300      	movs	r3, #0
 800266a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800266c:	2300      	movs	r3, #0
 800266e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002678:	2b00      	cmp	r3, #0
 800267a:	d041      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002680:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002684:	d02a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002686:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800268a:	d824      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800268c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002690:	d008      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002692:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002696:	d81e      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800269c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026a0:	d010      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026a2:	e018      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026a4:	4b86      	ldr	r3, [pc, #536]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a85      	ldr	r2, [pc, #532]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026b0:	e015      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fabb 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026c2:	e00c      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3320      	adds	r3, #32
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fba6 	bl	8002e1c <RCCEx_PLLSAI2_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026d4:	e003      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	74fb      	strb	r3, [r7, #19]
      break;
 80026da:	e000      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026de:	7cfb      	ldrb	r3, [r7, #19]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10b      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026e4:	4b76      	ldr	r3, [pc, #472]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f2:	4973      	ldr	r1, [pc, #460]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026fa:	e001      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d041      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002710:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002714:	d02a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002716:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800271a:	d824      	bhi.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800271c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002720:	d008      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002726:	d81e      	bhi.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800272c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002730:	d010      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002732:	e018      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002734:	4b62      	ldr	r3, [pc, #392]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a61      	ldr	r2, [pc, #388]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002740:	e015      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fa73 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002752:	e00c      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3320      	adds	r3, #32
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fb5e 	bl	8002e1c <RCCEx_PLLSAI2_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002764:	e003      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	74fb      	strb	r3, [r7, #19]
      break;
 800276a:	e000      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800276c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10b      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002774:	4b52      	ldr	r3, [pc, #328]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002782:	494f      	ldr	r1, [pc, #316]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800278a:	e001      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a0 	beq.w	80028de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00d      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b8:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	4a40      	ldr	r2, [pc, #256]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c2:	6593      	str	r3, [r2, #88]	; 0x58
 80027c4:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d0:	2301      	movs	r3, #1
 80027d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d4:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a3a      	ldr	r2, [pc, #232]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027e0:	f7fe fd5a 	bl	8001298 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027e6:	e009      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e8:	f7fe fd56 	bl	8001298 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d902      	bls.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	74fb      	strb	r3, [r7, #19]
        break;
 80027fa:	e005      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027fc:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ef      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d15c      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800280e:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002818:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01f      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	d019      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800282c:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002836:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002838:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002848:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002858:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d016      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe fd15 	bl	8001298 <HAL_GetTick>
 800286e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002870:	e00b      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7fe fd11 	bl	8001298 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d902      	bls.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	74fb      	strb	r3, [r7, #19]
            break;
 8002888:	e006      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288a:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ec      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10c      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ae:	4904      	ldr	r1, [pc, #16]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028b6:	e009      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	74bb      	strb	r3, [r7, #18]
 80028bc:	e006      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028cc:	7c7b      	ldrb	r3, [r7, #17]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d105      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d2:	4b9e      	ldr	r3, [pc, #632]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	4a9d      	ldr	r2, [pc, #628]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ea:	4b98      	ldr	r3, [pc, #608]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f023 0203 	bic.w	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	4994      	ldr	r1, [pc, #592]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800290c:	4b8f      	ldr	r3, [pc, #572]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f023 020c 	bic.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	498c      	ldr	r1, [pc, #560]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800292e:	4b87      	ldr	r3, [pc, #540]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002934:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	4983      	ldr	r1, [pc, #524]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002950:	4b7e      	ldr	r3, [pc, #504]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	497b      	ldr	r1, [pc, #492]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002972:	4b76      	ldr	r3, [pc, #472]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002980:	4972      	ldr	r1, [pc, #456]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002994:	4b6d      	ldr	r3, [pc, #436]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a2:	496a      	ldr	r1, [pc, #424]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029b6:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c4:	4961      	ldr	r1, [pc, #388]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029d8:	4b5c      	ldr	r3, [pc, #368]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e6:	4959      	ldr	r1, [pc, #356]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029fa:	4b54      	ldr	r3, [pc, #336]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a08:	4950      	ldr	r1, [pc, #320]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a1c:	4b4b      	ldr	r3, [pc, #300]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	4948      	ldr	r1, [pc, #288]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a3e:	4b43      	ldr	r3, [pc, #268]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	493f      	ldr	r1, [pc, #252]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d028      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a60:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6e:	4937      	ldr	r1, [pc, #220]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a80:	4b32      	ldr	r3, [pc, #200]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a31      	ldr	r2, [pc, #196]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8a:	60d3      	str	r3, [r2, #12]
 8002a8c:	e011      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a96:	d10c      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f8c8 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d028      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002abe:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	491f      	ldr	r1, [pc, #124]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002adc:	d106      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4a1a      	ldr	r2, [pc, #104]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae8:	60d3      	str	r3, [r2, #12]
 8002aea:	e011      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2101      	movs	r1, #1
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 f899 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8002b02:	4603      	mov	r3, r0
 8002b04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d02b      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2a:	4908      	ldr	r1, [pc, #32]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b3a:	d109      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a02      	ldr	r2, [pc, #8]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b46:	60d3      	str	r3, [r2, #12]
 8002b48:	e014      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 f867 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8002b66:	4603      	mov	r3, r0
 8002b68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d02f      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b80:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b8e:	4928      	ldr	r1, [pc, #160]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b9e:	d10d      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f844 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d014      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	74bb      	strb	r3, [r7, #18]
 8002bba:	e011      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3320      	adds	r3, #32
 8002bca:	2102      	movs	r1, #2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f925 	bl	8002e1c <RCCEx_PLLSAI2_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bd6:	7cfb      	ldrb	r3, [r7, #19]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bfa:	490d      	ldr	r1, [pc, #52]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c1e:	4904      	ldr	r1, [pc, #16]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c26:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000

08002c34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c42:	4b75      	ldr	r3, [pc, #468]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d018      	beq.n	8002c80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c4e:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0203 	and.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d10d      	bne.n	8002c7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
       ||
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c66:	4b6c      	ldr	r3, [pc, #432]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
       ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d047      	beq.n	8002d0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e044      	b.n	8002d0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d018      	beq.n	8002cba <RCCEx_PLLSAI1_Config+0x86>
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d825      	bhi.n	8002cd8 <RCCEx_PLLSAI1_Config+0xa4>
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d002      	beq.n	8002c96 <RCCEx_PLLSAI1_Config+0x62>
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d009      	beq.n	8002ca8 <RCCEx_PLLSAI1_Config+0x74>
 8002c94:	e020      	b.n	8002cd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c96:	4b60      	ldr	r3, [pc, #384]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11d      	bne.n	8002cde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca6:	e01a      	b.n	8002cde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ca8:	4b5b      	ldr	r3, [pc, #364]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d116      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb8:	e013      	b.n	8002ce2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cba:	4b57      	ldr	r3, [pc, #348]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cc6:	4b54      	ldr	r3, [pc, #336]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cd6:	e006      	b.n	8002ce6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      break;
 8002cdc:	e004      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e002      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ce6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10d      	bne.n	8002d0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cee:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6819      	ldr	r1, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	430b      	orrs	r3, r1
 8002d04:	4944      	ldr	r1, [pc, #272]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d17d      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d10:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a40      	ldr	r2, [pc, #256]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1c:	f7fe fabc 	bl	8001298 <HAL_GetTick>
 8002d20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d22:	e009      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d24:	f7fe fab8 	bl	8001298 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d902      	bls.n	8002d38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	73fb      	strb	r3, [r7, #15]
        break;
 8002d36:	e005      	b.n	8002d44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d38:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1ef      	bne.n	8002d24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d160      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d111      	bne.n	8002d74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d50:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6892      	ldr	r2, [r2, #8]
 8002d60:	0211      	lsls	r1, r2, #8
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68d2      	ldr	r2, [r2, #12]
 8002d66:	0912      	lsrs	r2, r2, #4
 8002d68:	0452      	lsls	r2, r2, #17
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	492a      	ldr	r1, [pc, #168]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	610b      	str	r3, [r1, #16]
 8002d72:	e027      	b.n	8002dc4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d112      	bne.n	8002da0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d7a:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6892      	ldr	r2, [r2, #8]
 8002d8a:	0211      	lsls	r1, r2, #8
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6912      	ldr	r2, [r2, #16]
 8002d90:	0852      	lsrs	r2, r2, #1
 8002d92:	3a01      	subs	r2, #1
 8002d94:	0552      	lsls	r2, r2, #21
 8002d96:	430a      	orrs	r2, r1
 8002d98:	491f      	ldr	r1, [pc, #124]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	610b      	str	r3, [r1, #16]
 8002d9e:	e011      	b.n	8002dc4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002da8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6892      	ldr	r2, [r2, #8]
 8002db0:	0211      	lsls	r1, r2, #8
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6952      	ldr	r2, [r2, #20]
 8002db6:	0852      	lsrs	r2, r2, #1
 8002db8:	3a01      	subs	r2, #1
 8002dba:	0652      	lsls	r2, r2, #25
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	4916      	ldr	r1, [pc, #88]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7fe fa62 	bl	8001298 <HAL_GetTick>
 8002dd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dd6:	e009      	b.n	8002dec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dd8:	f7fe fa5e 	bl	8001298 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d902      	bls.n	8002dec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	73fb      	strb	r3, [r7, #15]
          break;
 8002dea:	e005      	b.n	8002df8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ef      	beq.n	8002dd8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	4904      	ldr	r1, [pc, #16]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000

08002e1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e2a:	4b6a      	ldr	r3, [pc, #424]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d018      	beq.n	8002e68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e36:	4b67      	ldr	r3, [pc, #412]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0203 	and.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d10d      	bne.n	8002e62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
       ||
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e4e:	4b61      	ldr	r3, [pc, #388]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d047      	beq.n	8002ef2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e044      	b.n	8002ef2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d018      	beq.n	8002ea2 <RCCEx_PLLSAI2_Config+0x86>
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d825      	bhi.n	8002ec0 <RCCEx_PLLSAI2_Config+0xa4>
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d002      	beq.n	8002e7e <RCCEx_PLLSAI2_Config+0x62>
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d009      	beq.n	8002e90 <RCCEx_PLLSAI2_Config+0x74>
 8002e7c:	e020      	b.n	8002ec0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e7e:	4b55      	ldr	r3, [pc, #340]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11d      	bne.n	8002ec6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e01a      	b.n	8002ec6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e90:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d116      	bne.n	8002eca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea0:	e013      	b.n	8002eca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ea2:	4b4c      	ldr	r3, [pc, #304]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10f      	bne.n	8002ece <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eae:	4b49      	ldr	r3, [pc, #292]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ebe:	e006      	b.n	8002ece <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	e004      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ece:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ed6:	4b3f      	ldr	r3, [pc, #252]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	430b      	orrs	r3, r1
 8002eec:	4939      	ldr	r1, [pc, #228]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d167      	bne.n	8002fc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a35      	ldr	r2, [pc, #212]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f04:	f7fe f9c8 	bl	8001298 <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f0a:	e009      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f0c:	f7fe f9c4 	bl	8001298 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d902      	bls.n	8002f20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f1e:	e005      	b.n	8002f2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f20:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ef      	bne.n	8002f0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d14a      	bne.n	8002fc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d111      	bne.n	8002f5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f38:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6892      	ldr	r2, [r2, #8]
 8002f48:	0211      	lsls	r1, r2, #8
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68d2      	ldr	r2, [r2, #12]
 8002f4e:	0912      	lsrs	r2, r2, #4
 8002f50:	0452      	lsls	r2, r2, #17
 8002f52:	430a      	orrs	r2, r1
 8002f54:	491f      	ldr	r1, [pc, #124]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	614b      	str	r3, [r1, #20]
 8002f5a:	e011      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6892      	ldr	r2, [r2, #8]
 8002f6c:	0211      	lsls	r1, r2, #8
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6912      	ldr	r2, [r2, #16]
 8002f72:	0852      	lsrs	r2, r2, #1
 8002f74:	3a01      	subs	r2, #1
 8002f76:	0652      	lsls	r2, r2, #25
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	4916      	ldr	r1, [pc, #88]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fe f984 	bl	8001298 <HAL_GetTick>
 8002f90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f92:	e009      	b.n	8002fa8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f94:	f7fe f980 	bl	8001298 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d902      	bls.n	8002fa8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	73fb      	strb	r3, [r7, #15]
          break;
 8002fa6:	e005      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ef      	beq.n	8002f94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	4904      	ldr	r1, [pc, #16]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e049      	b.n	800307e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f841 	bl	8003086 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f000 f9f8 	bl	800340c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d001      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e04f      	b.n	8003154 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a23      	ldr	r2, [pc, #140]	; (8003160 <HAL_TIM_Base_Start_IT+0xc4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01d      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x76>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030de:	d018      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x76>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1f      	ldr	r2, [pc, #124]	; (8003164 <HAL_TIM_Base_Start_IT+0xc8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x76>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1e      	ldr	r2, [pc, #120]	; (8003168 <HAL_TIM_Base_Start_IT+0xcc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x76>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1c      	ldr	r2, [pc, #112]	; (800316c <HAL_TIM_Base_Start_IT+0xd0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x76>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <HAL_TIM_Base_Start_IT+0xd4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x76>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a19      	ldr	r2, [pc, #100]	; (8003174 <HAL_TIM_Base_Start_IT+0xd8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d115      	bne.n	800313e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <HAL_TIM_Base_Start_IT+0xdc>)
 800311a:	4013      	ands	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b06      	cmp	r3, #6
 8003122:	d015      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0xb4>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312a:	d011      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313c:	e008      	b.n	8003150 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e000      	b.n	8003152 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40000400 	.word	0x40000400
 8003168:	40000800 	.word	0x40000800
 800316c:	40000c00 	.word	0x40000c00
 8003170:	40013400 	.word	0x40013400
 8003174:	40014000 	.word	0x40014000
 8003178:	00010007 	.word	0x00010007

0800317c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b02      	cmp	r3, #2
 8003190:	d122      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b02      	cmp	r3, #2
 800319e:	d11b      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0202 	mvn.w	r2, #2
 80031a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f905 	bl	80033ce <HAL_TIM_IC_CaptureCallback>
 80031c4:	e005      	b.n	80031d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8f7 	bl	80033ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f908 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d122      	bne.n	800322c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d11b      	bne.n	800322c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0204 	mvn.w	r2, #4
 80031fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2202      	movs	r2, #2
 8003202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f8db 	bl	80033ce <HAL_TIM_IC_CaptureCallback>
 8003218:	e005      	b.n	8003226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f8cd 	bl	80033ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f8de 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b08      	cmp	r3, #8
 8003238:	d122      	bne.n	8003280 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b08      	cmp	r3, #8
 8003246:	d11b      	bne.n	8003280 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0208 	mvn.w	r2, #8
 8003250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2204      	movs	r2, #4
 8003256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8b1 	bl	80033ce <HAL_TIM_IC_CaptureCallback>
 800326c:	e005      	b.n	800327a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f8a3 	bl	80033ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f8b4 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b10      	cmp	r3, #16
 800328c:	d122      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b10      	cmp	r3, #16
 800329a:	d11b      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0210 	mvn.w	r2, #16
 80032a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2208      	movs	r2, #8
 80032aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f887 	bl	80033ce <HAL_TIM_IC_CaptureCallback>
 80032c0:	e005      	b.n	80032ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f879 	bl	80033ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f88a 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d10e      	bne.n	8003300 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d107      	bne.n	8003300 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0201 	mvn.w	r2, #1
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fd fe18 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	2b80      	cmp	r3, #128	; 0x80
 800330c:	d10e      	bne.n	800332c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003318:	2b80      	cmp	r3, #128	; 0x80
 800331a:	d107      	bne.n	800332c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f914 	bl	8003554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333a:	d10e      	bne.n	800335a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003346:	2b80      	cmp	r3, #128	; 0x80
 8003348:	d107      	bne.n	800335a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f907 	bl	8003568 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b40      	cmp	r3, #64	; 0x40
 8003366:	d10e      	bne.n	8003386 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b40      	cmp	r3, #64	; 0x40
 8003374:	d107      	bne.n	8003386 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800337e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f838 	bl	80033f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b20      	cmp	r3, #32
 8003392:	d10e      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b20      	cmp	r3, #32
 80033a0:	d107      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f06f 0220 	mvn.w	r2, #32
 80033aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f8c7 	bl	8003540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a40      	ldr	r2, [pc, #256]	; (8003520 <TIM_Base_SetConfig+0x114>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342a:	d00f      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a3d      	ldr	r2, [pc, #244]	; (8003524 <TIM_Base_SetConfig+0x118>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00b      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a3c      	ldr	r2, [pc, #240]	; (8003528 <TIM_Base_SetConfig+0x11c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d007      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a3b      	ldr	r2, [pc, #236]	; (800352c <TIM_Base_SetConfig+0x120>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a3a      	ldr	r2, [pc, #232]	; (8003530 <TIM_Base_SetConfig+0x124>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d108      	bne.n	800345e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a2f      	ldr	r2, [pc, #188]	; (8003520 <TIM_Base_SetConfig+0x114>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01f      	beq.n	80034a6 <TIM_Base_SetConfig+0x9a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346c:	d01b      	beq.n	80034a6 <TIM_Base_SetConfig+0x9a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a2c      	ldr	r2, [pc, #176]	; (8003524 <TIM_Base_SetConfig+0x118>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d017      	beq.n	80034a6 <TIM_Base_SetConfig+0x9a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a2b      	ldr	r2, [pc, #172]	; (8003528 <TIM_Base_SetConfig+0x11c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <TIM_Base_SetConfig+0x9a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a2a      	ldr	r2, [pc, #168]	; (800352c <TIM_Base_SetConfig+0x120>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00f      	beq.n	80034a6 <TIM_Base_SetConfig+0x9a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a29      	ldr	r2, [pc, #164]	; (8003530 <TIM_Base_SetConfig+0x124>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00b      	beq.n	80034a6 <TIM_Base_SetConfig+0x9a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a28      	ldr	r2, [pc, #160]	; (8003534 <TIM_Base_SetConfig+0x128>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d007      	beq.n	80034a6 <TIM_Base_SetConfig+0x9a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a27      	ldr	r2, [pc, #156]	; (8003538 <TIM_Base_SetConfig+0x12c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_Base_SetConfig+0x9a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a26      	ldr	r2, [pc, #152]	; (800353c <TIM_Base_SetConfig+0x130>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d108      	bne.n	80034b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a10      	ldr	r2, [pc, #64]	; (8003520 <TIM_Base_SetConfig+0x114>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00f      	beq.n	8003504 <TIM_Base_SetConfig+0xf8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a12      	ldr	r2, [pc, #72]	; (8003530 <TIM_Base_SetConfig+0x124>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00b      	beq.n	8003504 <TIM_Base_SetConfig+0xf8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a11      	ldr	r2, [pc, #68]	; (8003534 <TIM_Base_SetConfig+0x128>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d007      	beq.n	8003504 <TIM_Base_SetConfig+0xf8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a10      	ldr	r2, [pc, #64]	; (8003538 <TIM_Base_SetConfig+0x12c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <TIM_Base_SetConfig+0xf8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a0f      	ldr	r2, [pc, #60]	; (800353c <TIM_Base_SetConfig+0x130>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d103      	bne.n	800350c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	615a      	str	r2, [r3, #20]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40012c00 	.word	0x40012c00
 8003524:	40000400 	.word	0x40000400
 8003528:	40000800 	.word	0x40000800
 800352c:	40000c00 	.word	0x40000c00
 8003530:	40013400 	.word	0x40013400
 8003534:	40014000 	.word	0x40014000
 8003538:	40014400 	.word	0x40014400
 800353c:	40014800 	.word	0x40014800

08003540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e040      	b.n	8003610 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd fd06 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2224      	movs	r2, #36	; 0x24
 80035a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0201 	bic.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fae4 	bl	8003b88 <UART_SetConfig>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e022      	b.n	8003610 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fd62 	bl	800409c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fde9 	bl	80041e0 <UART_CheckIdleState>
 800360e:	4603      	mov	r3, r0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	4613      	mov	r3, r2
 8003624:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800362a:	2b20      	cmp	r3, #32
 800362c:	d145      	bne.n	80036ba <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <HAL_UART_Transmit_IT+0x22>
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e03e      	b.n	80036bc <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_UART_Transmit_IT+0x34>
 8003648:	2302      	movs	r3, #2
 800364a:	e037      	b.n	80036bc <HAL_UART_Transmit_IT+0xa4>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	88fa      	ldrh	r2, [r7, #6]
 800365e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	88fa      	ldrh	r2, [r7, #6]
 8003666:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2221      	movs	r2, #33	; 0x21
 800367c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003686:	d107      	bne.n	8003698 <HAL_UART_Transmit_IT+0x80>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d103      	bne.n	8003698 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <HAL_UART_Transmit_IT+0xb0>)
 8003694:	669a      	str	r2, [r3, #104]	; 0x68
 8003696:	e002      	b.n	800369e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a0c      	ldr	r2, [pc, #48]	; (80036cc <HAL_UART_Transmit_IT+0xb4>)
 800369c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80036ba:	2302      	movs	r3, #2
  }
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	0800457b 	.word	0x0800457b
 80036cc:	08004507 	.word	0x08004507

080036d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	4613      	mov	r3, r2
 80036dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d131      	bne.n	800374a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_UART_Receive_IT+0x22>
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e02a      	b.n	800374c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_UART_Receive_IT+0x34>
 8003700:	2302      	movs	r3, #2
 8003702:	e023      	b.n	800374c <HAL_UART_Receive_IT+0x7c>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a0f      	ldr	r2, [pc, #60]	; (8003754 <HAL_UART_Receive_IT+0x84>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00e      	beq.n	800373a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003738:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	461a      	mov	r2, r3
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 fe13 	bl	800436c <UART_Start_Receive_IT>
 8003746:	4603      	mov	r3, r0
 8003748:	e000      	b.n	800374c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800374a:	2302      	movs	r3, #2
  }
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40008000 	.word	0x40008000

08003758 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	f640 030f 	movw	r3, #2063	; 0x80f
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d113      	bne.n	80037b0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00e      	beq.n	80037b0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d009      	beq.n	80037b0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 81ce 	beq.w	8003b42 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	4798      	blx	r3
      }
      return;
 80037ae:	e1c8      	b.n	8003b42 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80e3 	beq.w	800397e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d105      	bne.n	80037ce <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4ba6      	ldr	r3, [pc, #664]	; (8003a60 <HAL_UART_IRQHandler+0x308>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80d8 	beq.w	800397e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d010      	beq.n	80037fa <HAL_UART_IRQHandler+0xa2>
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00b      	beq.n	80037fa <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2201      	movs	r2, #1
 80037e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037f0:	f043 0201 	orr.w	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d010      	beq.n	8003826 <HAL_UART_IRQHandler+0xce>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00b      	beq.n	8003826 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2202      	movs	r2, #2
 8003814:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800381c:	f043 0204 	orr.w	r2, r3, #4
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d010      	beq.n	8003852 <HAL_UART_IRQHandler+0xfa>
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00b      	beq.n	8003852 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2204      	movs	r2, #4
 8003840:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003848:	f043 0202 	orr.w	r2, r3, #2
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d015      	beq.n	8003888 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d104      	bne.n	8003870 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00b      	beq.n	8003888 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2208      	movs	r2, #8
 8003876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800387e:	f043 0208 	orr.w	r2, r3, #8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800388e:	2b00      	cmp	r3, #0
 8003890:	d011      	beq.n	80038b6 <HAL_UART_IRQHandler+0x15e>
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00c      	beq.n	80038b6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8142 	beq.w	8003b46 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00c      	beq.n	80038e6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d004      	beq.n	8003906 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003902:	2b00      	cmp	r3, #0
 8003904:	d031      	beq.n	800396a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fdb8 	bl	800447c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003916:	2b40      	cmp	r3, #64	; 0x40
 8003918:	d123      	bne.n	8003962 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003928:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	2b00      	cmp	r3, #0
 8003930:	d013      	beq.n	800395a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	4a4b      	ldr	r2, [pc, #300]	; (8003a64 <HAL_UART_IRQHandler+0x30c>)
 8003938:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fdd6 	bl	80014f0 <HAL_DMA_Abort_IT>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d017      	beq.n	800397a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003954:	4610      	mov	r0, r2
 8003956:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003958:	e00f      	b.n	800397a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f8fe 	bl	8003b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	e00b      	b.n	800397a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f8fa 	bl	8003b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	e007      	b.n	800397a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f8f6 	bl	8003b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003978:	e0e5      	b.n	8003b46 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397a:	bf00      	nop
    return;
 800397c:	e0e3      	b.n	8003b46 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003982:	2b01      	cmp	r3, #1
 8003984:	f040 80a9 	bne.w	8003ada <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80a3 	beq.w	8003ada <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 809d 	beq.w	8003ada <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2210      	movs	r2, #16
 80039a6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d158      	bne.n	8003a68 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80039c0:	893b      	ldrh	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80c1 	beq.w	8003b4a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80039ce:	893a      	ldrh	r2, [r7, #8]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	f080 80ba 	bcs.w	8003b4a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	893a      	ldrh	r2, [r7, #8]
 80039da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d12a      	bne.n	8003a44 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0210 	bic.w	r2, r2, #16
 8003a38:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd fd18 	bl	8001474 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	4619      	mov	r1, r3
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f889 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a5e:	e074      	b.n	8003b4a <HAL_UART_IRQHandler+0x3f2>
 8003a60:	04000120 	.word	0x04000120
 8003a64:	080044db 	.word	0x080044db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d063      	beq.n	8003b4e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003a86:	897b      	ldrh	r3, [r7, #10]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d060      	beq.n	8003b4e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a9a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0210 	bic.w	r2, r2, #16
 8003acc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ace:	897b      	ldrh	r3, [r7, #10]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f84c 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ad8:	e039      	b.n	8003b4e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00d      	beq.n	8003b00 <HAL_UART_IRQHandler+0x3a8>
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003af6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fe6d 	bl	80047d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003afe:	e029      	b.n	8003b54 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00d      	beq.n	8003b26 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01a      	beq.n	8003b52 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	4798      	blx	r3
    }
    return;
 8003b24:	e015      	b.n	8003b52 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d011      	beq.n	8003b54 <HAL_UART_IRQHandler+0x3fc>
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00c      	beq.n	8003b54 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fd5b 	bl	80045f6 <UART_EndTransmit_IT>
    return;
 8003b40:	e008      	b.n	8003b54 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003b42:	bf00      	nop
 8003b44:	e006      	b.n	8003b54 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003b46:	bf00      	nop
 8003b48:	e004      	b.n	8003b54 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003b4a:	bf00      	nop
 8003b4c:	e002      	b.n	8003b54 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003b52:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop

08003b5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b88:	b5b0      	push	{r4, r5, r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4bad      	ldr	r3, [pc, #692]	; (8003e68 <UART_SetConfig+0x2e0>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	69f9      	ldr	r1, [r7, #28]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4aa2      	ldr	r2, [pc, #648]	; (8003e6c <UART_SetConfig+0x2e4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a99      	ldr	r2, [pc, #612]	; (8003e70 <UART_SetConfig+0x2e8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d121      	bne.n	8003c52 <UART_SetConfig+0xca>
 8003c0e:	4b99      	ldr	r3, [pc, #612]	; (8003e74 <UART_SetConfig+0x2ec>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d817      	bhi.n	8003c4c <UART_SetConfig+0xc4>
 8003c1c:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <UART_SetConfig+0x9c>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08003c35 	.word	0x08003c35
 8003c28:	08003c41 	.word	0x08003c41
 8003c2c:	08003c3b 	.word	0x08003c3b
 8003c30:	08003c47 	.word	0x08003c47
 8003c34:	2301      	movs	r3, #1
 8003c36:	76fb      	strb	r3, [r7, #27]
 8003c38:	e0e7      	b.n	8003e0a <UART_SetConfig+0x282>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	76fb      	strb	r3, [r7, #27]
 8003c3e:	e0e4      	b.n	8003e0a <UART_SetConfig+0x282>
 8003c40:	2304      	movs	r3, #4
 8003c42:	76fb      	strb	r3, [r7, #27]
 8003c44:	e0e1      	b.n	8003e0a <UART_SetConfig+0x282>
 8003c46:	2308      	movs	r3, #8
 8003c48:	76fb      	strb	r3, [r7, #27]
 8003c4a:	e0de      	b.n	8003e0a <UART_SetConfig+0x282>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	76fb      	strb	r3, [r7, #27]
 8003c50:	e0db      	b.n	8003e0a <UART_SetConfig+0x282>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a88      	ldr	r2, [pc, #544]	; (8003e78 <UART_SetConfig+0x2f0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d132      	bne.n	8003cc2 <UART_SetConfig+0x13a>
 8003c5c:	4b85      	ldr	r3, [pc, #532]	; (8003e74 <UART_SetConfig+0x2ec>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b0c      	cmp	r3, #12
 8003c68:	d828      	bhi.n	8003cbc <UART_SetConfig+0x134>
 8003c6a:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <UART_SetConfig+0xe8>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003cbd 	.word	0x08003cbd
 8003c78:	08003cbd 	.word	0x08003cbd
 8003c7c:	08003cbd 	.word	0x08003cbd
 8003c80:	08003cb1 	.word	0x08003cb1
 8003c84:	08003cbd 	.word	0x08003cbd
 8003c88:	08003cbd 	.word	0x08003cbd
 8003c8c:	08003cbd 	.word	0x08003cbd
 8003c90:	08003cab 	.word	0x08003cab
 8003c94:	08003cbd 	.word	0x08003cbd
 8003c98:	08003cbd 	.word	0x08003cbd
 8003c9c:	08003cbd 	.word	0x08003cbd
 8003ca0:	08003cb7 	.word	0x08003cb7
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	76fb      	strb	r3, [r7, #27]
 8003ca8:	e0af      	b.n	8003e0a <UART_SetConfig+0x282>
 8003caa:	2302      	movs	r3, #2
 8003cac:	76fb      	strb	r3, [r7, #27]
 8003cae:	e0ac      	b.n	8003e0a <UART_SetConfig+0x282>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	76fb      	strb	r3, [r7, #27]
 8003cb4:	e0a9      	b.n	8003e0a <UART_SetConfig+0x282>
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	76fb      	strb	r3, [r7, #27]
 8003cba:	e0a6      	b.n	8003e0a <UART_SetConfig+0x282>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	76fb      	strb	r3, [r7, #27]
 8003cc0:	e0a3      	b.n	8003e0a <UART_SetConfig+0x282>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a6d      	ldr	r2, [pc, #436]	; (8003e7c <UART_SetConfig+0x2f4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d120      	bne.n	8003d0e <UART_SetConfig+0x186>
 8003ccc:	4b69      	ldr	r3, [pc, #420]	; (8003e74 <UART_SetConfig+0x2ec>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cd6:	2b30      	cmp	r3, #48	; 0x30
 8003cd8:	d013      	beq.n	8003d02 <UART_SetConfig+0x17a>
 8003cda:	2b30      	cmp	r3, #48	; 0x30
 8003cdc:	d814      	bhi.n	8003d08 <UART_SetConfig+0x180>
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d009      	beq.n	8003cf6 <UART_SetConfig+0x16e>
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d810      	bhi.n	8003d08 <UART_SetConfig+0x180>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <UART_SetConfig+0x168>
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d006      	beq.n	8003cfc <UART_SetConfig+0x174>
 8003cee:	e00b      	b.n	8003d08 <UART_SetConfig+0x180>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	76fb      	strb	r3, [r7, #27]
 8003cf4:	e089      	b.n	8003e0a <UART_SetConfig+0x282>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	76fb      	strb	r3, [r7, #27]
 8003cfa:	e086      	b.n	8003e0a <UART_SetConfig+0x282>
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	76fb      	strb	r3, [r7, #27]
 8003d00:	e083      	b.n	8003e0a <UART_SetConfig+0x282>
 8003d02:	2308      	movs	r3, #8
 8003d04:	76fb      	strb	r3, [r7, #27]
 8003d06:	e080      	b.n	8003e0a <UART_SetConfig+0x282>
 8003d08:	2310      	movs	r3, #16
 8003d0a:	76fb      	strb	r3, [r7, #27]
 8003d0c:	e07d      	b.n	8003e0a <UART_SetConfig+0x282>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a5b      	ldr	r2, [pc, #364]	; (8003e80 <UART_SetConfig+0x2f8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d120      	bne.n	8003d5a <UART_SetConfig+0x1d2>
 8003d18:	4b56      	ldr	r3, [pc, #344]	; (8003e74 <UART_SetConfig+0x2ec>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d22:	2bc0      	cmp	r3, #192	; 0xc0
 8003d24:	d013      	beq.n	8003d4e <UART_SetConfig+0x1c6>
 8003d26:	2bc0      	cmp	r3, #192	; 0xc0
 8003d28:	d814      	bhi.n	8003d54 <UART_SetConfig+0x1cc>
 8003d2a:	2b80      	cmp	r3, #128	; 0x80
 8003d2c:	d009      	beq.n	8003d42 <UART_SetConfig+0x1ba>
 8003d2e:	2b80      	cmp	r3, #128	; 0x80
 8003d30:	d810      	bhi.n	8003d54 <UART_SetConfig+0x1cc>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <UART_SetConfig+0x1b4>
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d006      	beq.n	8003d48 <UART_SetConfig+0x1c0>
 8003d3a:	e00b      	b.n	8003d54 <UART_SetConfig+0x1cc>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	76fb      	strb	r3, [r7, #27]
 8003d40:	e063      	b.n	8003e0a <UART_SetConfig+0x282>
 8003d42:	2302      	movs	r3, #2
 8003d44:	76fb      	strb	r3, [r7, #27]
 8003d46:	e060      	b.n	8003e0a <UART_SetConfig+0x282>
 8003d48:	2304      	movs	r3, #4
 8003d4a:	76fb      	strb	r3, [r7, #27]
 8003d4c:	e05d      	b.n	8003e0a <UART_SetConfig+0x282>
 8003d4e:	2308      	movs	r3, #8
 8003d50:	76fb      	strb	r3, [r7, #27]
 8003d52:	e05a      	b.n	8003e0a <UART_SetConfig+0x282>
 8003d54:	2310      	movs	r3, #16
 8003d56:	76fb      	strb	r3, [r7, #27]
 8003d58:	e057      	b.n	8003e0a <UART_SetConfig+0x282>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a49      	ldr	r2, [pc, #292]	; (8003e84 <UART_SetConfig+0x2fc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d125      	bne.n	8003db0 <UART_SetConfig+0x228>
 8003d64:	4b43      	ldr	r3, [pc, #268]	; (8003e74 <UART_SetConfig+0x2ec>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d72:	d017      	beq.n	8003da4 <UART_SetConfig+0x21c>
 8003d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d78:	d817      	bhi.n	8003daa <UART_SetConfig+0x222>
 8003d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7e:	d00b      	beq.n	8003d98 <UART_SetConfig+0x210>
 8003d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d84:	d811      	bhi.n	8003daa <UART_SetConfig+0x222>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <UART_SetConfig+0x20a>
 8003d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8e:	d006      	beq.n	8003d9e <UART_SetConfig+0x216>
 8003d90:	e00b      	b.n	8003daa <UART_SetConfig+0x222>
 8003d92:	2300      	movs	r3, #0
 8003d94:	76fb      	strb	r3, [r7, #27]
 8003d96:	e038      	b.n	8003e0a <UART_SetConfig+0x282>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	76fb      	strb	r3, [r7, #27]
 8003d9c:	e035      	b.n	8003e0a <UART_SetConfig+0x282>
 8003d9e:	2304      	movs	r3, #4
 8003da0:	76fb      	strb	r3, [r7, #27]
 8003da2:	e032      	b.n	8003e0a <UART_SetConfig+0x282>
 8003da4:	2308      	movs	r3, #8
 8003da6:	76fb      	strb	r3, [r7, #27]
 8003da8:	e02f      	b.n	8003e0a <UART_SetConfig+0x282>
 8003daa:	2310      	movs	r3, #16
 8003dac:	76fb      	strb	r3, [r7, #27]
 8003dae:	e02c      	b.n	8003e0a <UART_SetConfig+0x282>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a2d      	ldr	r2, [pc, #180]	; (8003e6c <UART_SetConfig+0x2e4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d125      	bne.n	8003e06 <UART_SetConfig+0x27e>
 8003dba:	4b2e      	ldr	r3, [pc, #184]	; (8003e74 <UART_SetConfig+0x2ec>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc8:	d017      	beq.n	8003dfa <UART_SetConfig+0x272>
 8003dca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dce:	d817      	bhi.n	8003e00 <UART_SetConfig+0x278>
 8003dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd4:	d00b      	beq.n	8003dee <UART_SetConfig+0x266>
 8003dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dda:	d811      	bhi.n	8003e00 <UART_SetConfig+0x278>
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <UART_SetConfig+0x260>
 8003de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de4:	d006      	beq.n	8003df4 <UART_SetConfig+0x26c>
 8003de6:	e00b      	b.n	8003e00 <UART_SetConfig+0x278>
 8003de8:	2300      	movs	r3, #0
 8003dea:	76fb      	strb	r3, [r7, #27]
 8003dec:	e00d      	b.n	8003e0a <UART_SetConfig+0x282>
 8003dee:	2302      	movs	r3, #2
 8003df0:	76fb      	strb	r3, [r7, #27]
 8003df2:	e00a      	b.n	8003e0a <UART_SetConfig+0x282>
 8003df4:	2304      	movs	r3, #4
 8003df6:	76fb      	strb	r3, [r7, #27]
 8003df8:	e007      	b.n	8003e0a <UART_SetConfig+0x282>
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	76fb      	strb	r3, [r7, #27]
 8003dfe:	e004      	b.n	8003e0a <UART_SetConfig+0x282>
 8003e00:	2310      	movs	r3, #16
 8003e02:	76fb      	strb	r3, [r7, #27]
 8003e04:	e001      	b.n	8003e0a <UART_SetConfig+0x282>
 8003e06:	2310      	movs	r3, #16
 8003e08:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <UART_SetConfig+0x2e4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	f040 8087 	bne.w	8003f24 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e16:	7efb      	ldrb	r3, [r7, #27]
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d837      	bhi.n	8003e8c <UART_SetConfig+0x304>
 8003e1c:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <UART_SetConfig+0x29c>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e8d 	.word	0x08003e8d
 8003e2c:	08003e51 	.word	0x08003e51
 8003e30:	08003e8d 	.word	0x08003e8d
 8003e34:	08003e57 	.word	0x08003e57
 8003e38:	08003e8d 	.word	0x08003e8d
 8003e3c:	08003e8d 	.word	0x08003e8d
 8003e40:	08003e8d 	.word	0x08003e8d
 8003e44:	08003e5f 	.word	0x08003e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e48:	f7fe fb4c 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8003e4c:	6178      	str	r0, [r7, #20]
        break;
 8003e4e:	e022      	b.n	8003e96 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <UART_SetConfig+0x300>)
 8003e52:	617b      	str	r3, [r7, #20]
        break;
 8003e54:	e01f      	b.n	8003e96 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7fe faad 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8003e5a:	6178      	str	r0, [r7, #20]
        break;
 8003e5c:	e01b      	b.n	8003e96 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e62:	617b      	str	r3, [r7, #20]
        break;
 8003e64:	e017      	b.n	8003e96 <UART_SetConfig+0x30e>
 8003e66:	bf00      	nop
 8003e68:	efff69f3 	.word	0xefff69f3
 8003e6c:	40008000 	.word	0x40008000
 8003e70:	40013800 	.word	0x40013800
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40004400 	.word	0x40004400
 8003e7c:	40004800 	.word	0x40004800
 8003e80:	40004c00 	.word	0x40004c00
 8003e84:	40005000 	.word	0x40005000
 8003e88:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	76bb      	strb	r3, [r7, #26]
        break;
 8003e94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80f1 	beq.w	8004080 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	4413      	add	r3, r2
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d305      	bcc.n	8003eba <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d902      	bls.n	8003ec0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	76bb      	strb	r3, [r7, #26]
 8003ebe:	e0df      	b.n	8004080 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f04f 0100 	mov.w	r1, #0
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	020b      	lsls	r3, r1, #8
 8003ed2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ed6:	0202      	lsls	r2, r0, #8
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	6849      	ldr	r1, [r1, #4]
 8003edc:	0849      	lsrs	r1, r1, #1
 8003ede:	4608      	mov	r0, r1
 8003ee0:	f04f 0100 	mov.w	r1, #0
 8003ee4:	1814      	adds	r4, r2, r0
 8003ee6:	eb43 0501 	adc.w	r5, r3, r1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	f7fc f972 	bl	80001e0 <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4613      	mov	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f0a:	d308      	bcc.n	8003f1e <UART_SetConfig+0x396>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f12:	d204      	bcs.n	8003f1e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	60da      	str	r2, [r3, #12]
 8003f1c:	e0b0      	b.n	8004080 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	76bb      	strb	r3, [r7, #26]
 8003f22:	e0ad      	b.n	8004080 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2c:	d15c      	bne.n	8003fe8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003f2e:	7efb      	ldrb	r3, [r7, #27]
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d828      	bhi.n	8003f86 <UART_SetConfig+0x3fe>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <UART_SetConfig+0x3b4>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f61 	.word	0x08003f61
 8003f40:	08003f69 	.word	0x08003f69
 8003f44:	08003f71 	.word	0x08003f71
 8003f48:	08003f87 	.word	0x08003f87
 8003f4c:	08003f77 	.word	0x08003f77
 8003f50:	08003f87 	.word	0x08003f87
 8003f54:	08003f87 	.word	0x08003f87
 8003f58:	08003f87 	.word	0x08003f87
 8003f5c:	08003f7f 	.word	0x08003f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f60:	f7fe fac0 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8003f64:	6178      	str	r0, [r7, #20]
        break;
 8003f66:	e013      	b.n	8003f90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f68:	f7fe fad2 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 8003f6c:	6178      	str	r0, [r7, #20]
        break;
 8003f6e:	e00f      	b.n	8003f90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f70:	4b49      	ldr	r3, [pc, #292]	; (8004098 <UART_SetConfig+0x510>)
 8003f72:	617b      	str	r3, [r7, #20]
        break;
 8003f74:	e00c      	b.n	8003f90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f76:	f7fe fa1d 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8003f7a:	6178      	str	r0, [r7, #20]
        break;
 8003f7c:	e008      	b.n	8003f90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f82:	617b      	str	r3, [r7, #20]
        break;
 8003f84:	e004      	b.n	8003f90 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	76bb      	strb	r3, [r7, #26]
        break;
 8003f8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d074      	beq.n	8004080 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	005a      	lsls	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	441a      	add	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b0f      	cmp	r3, #15
 8003fb2:	d916      	bls.n	8003fe2 <UART_SetConfig+0x45a>
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fba:	d212      	bcs.n	8003fe2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f023 030f 	bic.w	r3, r3, #15
 8003fc4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	89fb      	ldrh	r3, [r7, #14]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	89fa      	ldrh	r2, [r7, #14]
 8003fde:	60da      	str	r2, [r3, #12]
 8003fe0:	e04e      	b.n	8004080 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	76bb      	strb	r3, [r7, #26]
 8003fe6:	e04b      	b.n	8004080 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fe8:	7efb      	ldrb	r3, [r7, #27]
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d827      	bhi.n	800403e <UART_SetConfig+0x4b6>
 8003fee:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <UART_SetConfig+0x46c>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	08004021 	.word	0x08004021
 8003ffc:	08004029 	.word	0x08004029
 8004000:	0800403f 	.word	0x0800403f
 8004004:	0800402f 	.word	0x0800402f
 8004008:	0800403f 	.word	0x0800403f
 800400c:	0800403f 	.word	0x0800403f
 8004010:	0800403f 	.word	0x0800403f
 8004014:	08004037 	.word	0x08004037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004018:	f7fe fa64 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 800401c:	6178      	str	r0, [r7, #20]
        break;
 800401e:	e013      	b.n	8004048 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7fe fa76 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 8004024:	6178      	str	r0, [r7, #20]
        break;
 8004026:	e00f      	b.n	8004048 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004028:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <UART_SetConfig+0x510>)
 800402a:	617b      	str	r3, [r7, #20]
        break;
 800402c:	e00c      	b.n	8004048 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402e:	f7fe f9c1 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8004032:	6178      	str	r0, [r7, #20]
        break;
 8004034:	e008      	b.n	8004048 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403a:	617b      	str	r3, [r7, #20]
        break;
 800403c:	e004      	b.n	8004048 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	76bb      	strb	r3, [r7, #26]
        break;
 8004046:	bf00      	nop
    }

    if (pclk != 0U)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d018      	beq.n	8004080 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	085a      	lsrs	r2, r3, #1
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	441a      	add	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	b29b      	uxth	r3, r3
 8004062:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b0f      	cmp	r3, #15
 8004068:	d908      	bls.n	800407c <UART_SetConfig+0x4f4>
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004070:	d204      	bcs.n	800407c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	e001      	b.n	8004080 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800408c:	7ebb      	ldrb	r3, [r7, #26]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bdb0      	pop	{r4, r5, r7, pc}
 8004096:	bf00      	nop
 8004098:	00f42400 	.word	0x00f42400

0800409c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01a      	beq.n	80041b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419a:	d10a      	bne.n	80041b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	605a      	str	r2, [r3, #4]
  }
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041f0:	f7fd f852 	bl	8001298 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b08      	cmp	r3, #8
 8004202:	d10e      	bne.n	8004222 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f82d 	bl	8004272 <UART_WaitOnFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e023      	b.n	800426a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b04      	cmp	r3, #4
 800422e:	d10e      	bne.n	800424e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f817 	bl	8004272 <UART_WaitOnFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e00d      	b.n	800426a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	4613      	mov	r3, r2
 8004280:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004282:	e05e      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800428a:	d05a      	beq.n	8004342 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428c:	f7fd f804 	bl	8001298 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	429a      	cmp	r2, r3
 800429a:	d302      	bcc.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d11b      	bne.n	80042da <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e043      	b.n	8004362 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d02c      	beq.n	8004342 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f6:	d124      	bne.n	8004342 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004300:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004310:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e00f      	b.n	8004362 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4013      	ands	r3, r2
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	bf0c      	ite	eq
 8004352:	2301      	moveq	r3, #1
 8004354:	2300      	movne	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	429a      	cmp	r2, r3
 800435e:	d091      	beq.n	8004284 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	88fa      	ldrh	r2, [r7, #6]
 8004384:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439e:	d10e      	bne.n	80043be <UART_Start_Receive_IT+0x52>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <UART_Start_Receive_IT+0x48>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80043ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043b2:	e02d      	b.n	8004410 <UART_Start_Receive_IT+0xa4>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	22ff      	movs	r2, #255	; 0xff
 80043b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043bc:	e028      	b.n	8004410 <UART_Start_Receive_IT+0xa4>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10d      	bne.n	80043e2 <UART_Start_Receive_IT+0x76>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d104      	bne.n	80043d8 <UART_Start_Receive_IT+0x6c>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	22ff      	movs	r2, #255	; 0xff
 80043d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043d6:	e01b      	b.n	8004410 <UART_Start_Receive_IT+0xa4>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	227f      	movs	r2, #127	; 0x7f
 80043dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043e0:	e016      	b.n	8004410 <UART_Start_Receive_IT+0xa4>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ea:	d10d      	bne.n	8004408 <UART_Start_Receive_IT+0x9c>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d104      	bne.n	80043fe <UART_Start_Receive_IT+0x92>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	227f      	movs	r2, #127	; 0x7f
 80043f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043fc:	e008      	b.n	8004410 <UART_Start_Receive_IT+0xa4>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	223f      	movs	r2, #63	; 0x3f
 8004402:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004406:	e003      	b.n	8004410 <UART_Start_Receive_IT+0xa4>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2222      	movs	r2, #34	; 0x22
 800441c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0201 	orr.w	r2, r2, #1
 800442c:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004436:	d107      	bne.n	8004448 <UART_Start_Receive_IT+0xdc>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d103      	bne.n	8004448 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4a0c      	ldr	r2, [pc, #48]	; (8004474 <UART_Start_Receive_IT+0x108>)
 8004444:	665a      	str	r2, [r3, #100]	; 0x64
 8004446:	e002      	b.n	800444e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4a0b      	ldr	r2, [pc, #44]	; (8004478 <UART_Start_Receive_IT+0x10c>)
 800444c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004464:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	08004701 	.word	0x08004701
 8004478:	08004629 	.word	0x08004629

0800447c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004492:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0201 	bic.w	r2, r2, #1
 80044a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d107      	bne.n	80044bc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0210 	bic.w	r2, r2, #16
 80044ba:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b084      	sub	sp, #16
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff fb2f 	bl	8003b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004512:	2b21      	cmp	r3, #33	; 0x21
 8004514:	d12b      	bne.n	800456e <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d110      	bne.n	8004544 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004530:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004540:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004542:	e014      	b.n	800456e <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b292      	uxth	r2, r2
 8004550:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004586:	2b21      	cmp	r3, #33	; 0x21
 8004588:	d12f      	bne.n	80045ea <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d110      	bne.n	80045b8 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045b4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80045b6:	e018      	b.n	80045ea <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	881a      	ldrh	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ca:	b292      	uxth	r2, r2
 80045cc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d2:	1c9a      	adds	r2, r3, #2
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800460c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc f908 	bl	8000830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004636:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800463c:	2b22      	cmp	r3, #34	; 0x22
 800463e:	d151      	bne.n	80046e4 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004646:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004648:	89bb      	ldrh	r3, [r7, #12]
 800464a:	b2d9      	uxtb	r1, r3
 800464c:	89fb      	ldrh	r3, [r7, #14]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004654:	400a      	ands	r2, r1
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d13a      	bne.n	80046f8 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004690:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d10f      	bne.n	80046d6 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0210 	bic.w	r2, r2, #16
 80046c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046cc:	4619      	mov	r1, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff fa4e 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
 80046d4:	e002      	b.n	80046dc <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fc f888 	bl	80007ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046e2:	e009      	b.n	80046f8 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	8b1b      	ldrh	r3, [r3, #24]
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0208 	orr.w	r2, r2, #8
 80046f4:	b292      	uxth	r2, r2
 80046f6:	831a      	strh	r2, [r3, #24]
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800470e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004714:	2b22      	cmp	r3, #34	; 0x22
 8004716:	d151      	bne.n	80047bc <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800471e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004726:	89ba      	ldrh	r2, [r7, #12]
 8004728:	89fb      	ldrh	r3, [r7, #14]
 800472a:	4013      	ands	r3, r2
 800472c:	b29a      	uxth	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	1c9a      	adds	r2, r3, #2
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d13a      	bne.n	80047d0 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004768:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0201 	bic.w	r2, r2, #1
 8004778:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800478a:	2b01      	cmp	r3, #1
 800478c:	d10f      	bne.n	80047ae <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0210 	bic.w	r2, r2, #16
 800479c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047a4:	4619      	mov	r1, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff f9e2 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
 80047ac:	e002      	b.n	80047b4 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fc f81c 	bl	80007ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047ba:	e009      	b.n	80047d0 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	8b1b      	ldrh	r3, [r3, #24]
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0208 	orr.w	r2, r2, #8
 80047cc:	b292      	uxth	r2, r2
 80047ce:	831a      	strh	r2, [r3, #24]
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <__NVIC_SetPriority>:
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	6039      	str	r1, [r7, #0]
 80047f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	db0a      	blt.n	8004816 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	b2da      	uxtb	r2, r3
 8004804:	490c      	ldr	r1, [pc, #48]	; (8004838 <__NVIC_SetPriority+0x4c>)
 8004806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480a:	0112      	lsls	r2, r2, #4
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	440b      	add	r3, r1
 8004810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004814:	e00a      	b.n	800482c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4908      	ldr	r1, [pc, #32]	; (800483c <__NVIC_SetPriority+0x50>)
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	3b04      	subs	r3, #4
 8004824:	0112      	lsls	r2, r2, #4
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	440b      	add	r3, r1
 800482a:	761a      	strb	r2, [r3, #24]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	e000e100 	.word	0xe000e100
 800483c:	e000ed00 	.word	0xe000ed00

08004840 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004844:	4b05      	ldr	r3, [pc, #20]	; (800485c <SysTick_Handler+0x1c>)
 8004846:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004848:	f002 fffe 	bl	8007848 <xTaskGetSchedulerState>
 800484c:	4603      	mov	r3, r0
 800484e:	2b01      	cmp	r3, #1
 8004850:	d001      	beq.n	8004856 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004852:	f003 ff19 	bl	8008688 <xPortSysTickHandler>
  }
}
 8004856:	bf00      	nop
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	e000e010 	.word	0xe000e010

08004860 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004864:	2100      	movs	r1, #0
 8004866:	f06f 0004 	mvn.w	r0, #4
 800486a:	f7ff ffbf 	bl	80047ec <__NVIC_SetPriority>
#endif
}
 800486e:	bf00      	nop
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800487a:	f3ef 8305 	mrs	r3, IPSR
 800487e:	603b      	str	r3, [r7, #0]
  return(result);
 8004880:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004886:	f06f 0305 	mvn.w	r3, #5
 800488a:	607b      	str	r3, [r7, #4]
 800488c:	e00c      	b.n	80048a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800488e:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <osKernelInitialize+0x44>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d105      	bne.n	80048a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <osKernelInitialize+0x44>)
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800489c:	2300      	movs	r3, #0
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	e002      	b.n	80048a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80048a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048a8:	687b      	ldr	r3, [r7, #4]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000090 	.word	0x20000090

080048bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048c2:	f3ef 8305 	mrs	r3, IPSR
 80048c6:	603b      	str	r3, [r7, #0]
  return(result);
 80048c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80048ce:	f06f 0305 	mvn.w	r3, #5
 80048d2:	607b      	str	r3, [r7, #4]
 80048d4:	e010      	b.n	80048f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <osKernelStart+0x48>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d109      	bne.n	80048f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80048de:	f7ff ffbf 	bl	8004860 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <osKernelStart+0x48>)
 80048e4:	2202      	movs	r2, #2
 80048e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80048e8:	f002 fac8 	bl	8006e7c <vTaskStartScheduler>
      stat = osOK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	e002      	b.n	80048f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80048f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048f8:	687b      	ldr	r3, [r7, #4]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000090 	.word	0x20000090

08004908 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b08e      	sub	sp, #56	; 0x38
 800490c:	af04      	add	r7, sp, #16
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004914:	2300      	movs	r3, #0
 8004916:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004918:	f3ef 8305 	mrs	r3, IPSR
 800491c:	617b      	str	r3, [r7, #20]
  return(result);
 800491e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004920:	2b00      	cmp	r3, #0
 8004922:	d17e      	bne.n	8004a22 <osThreadNew+0x11a>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d07b      	beq.n	8004a22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800492a:	2380      	movs	r3, #128	; 0x80
 800492c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800492e:	2318      	movs	r3, #24
 8004930:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800493a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d045      	beq.n	80049ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <osThreadNew+0x48>
        name = attr->name;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <osThreadNew+0x6e>
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	2b38      	cmp	r3, #56	; 0x38
 8004968:	d805      	bhi.n	8004976 <osThreadNew+0x6e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <osThreadNew+0x72>
        return (NULL);
 8004976:	2300      	movs	r3, #0
 8004978:	e054      	b.n	8004a24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	089b      	lsrs	r3, r3, #2
 8004988:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00e      	beq.n	80049b0 <osThreadNew+0xa8>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b5b      	cmp	r3, #91	; 0x5b
 8004998:	d90a      	bls.n	80049b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d006      	beq.n	80049b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <osThreadNew+0xa8>
        mem = 1;
 80049aa:	2301      	movs	r3, #1
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	e010      	b.n	80049d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10c      	bne.n	80049d2 <osThreadNew+0xca>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d108      	bne.n	80049d2 <osThreadNew+0xca>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d104      	bne.n	80049d2 <osThreadNew+0xca>
          mem = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	e001      	b.n	80049d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d110      	bne.n	80049fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049e0:	9202      	str	r2, [sp, #8]
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	6a3a      	ldr	r2, [r7, #32]
 80049ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f001 ff68 	bl	80068c4 <xTaskCreateStatic>
 80049f4:	4603      	mov	r3, r0
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	e013      	b.n	8004a22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d110      	bne.n	8004a22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	f107 0310 	add.w	r3, r7, #16
 8004a08:	9301      	str	r3, [sp, #4]
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f001 ffb3 	bl	800697e <xTaskCreate>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d001      	beq.n	8004a22 <osThreadNew+0x11a>
            hTask = NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a22:	693b      	ldr	r3, [r7, #16]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3728      	adds	r7, #40	; 0x28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a38:	f3ef 8305 	mrs	r3, IPSR
 8004a3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8004a44:	f06f 0305 	mvn.w	r3, #5
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	e00b      	b.n	8004a64 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d103      	bne.n	8004a5a <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8004a52:	f06f 0303 	mvn.w	r3, #3
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	e004      	b.n	8004a64 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8004a5e:	6938      	ldr	r0, [r7, #16]
 8004a60:	f002 f906 	bl	8006c70 <vTaskSuspend>
  }

  return (stat);
 8004a64:	697b      	ldr	r3, [r7, #20]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a7a:	f3ef 8305 	mrs	r3, IPSR
 8004a7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a80:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <osThreadResume+0x20>
    stat = osErrorISR;
 8004a86:	f06f 0305 	mvn.w	r3, #5
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e00b      	b.n	8004aa6 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d103      	bne.n	8004a9c <osThreadResume+0x2e>
    stat = osErrorParameter;
 8004a94:	f06f 0303 	mvn.w	r3, #3
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	e004      	b.n	8004aa6 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8004aa0:	6938      	ldr	r0, [r7, #16]
 8004aa2:	f002 f98d 	bl	8006dc0 <vTaskResume>
  }

  return (stat);
 8004aa6:	697b      	ldr	r3, [r7, #20]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ab8:	f3ef 8305 	mrs	r3, IPSR
 8004abc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004abe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <osDelay+0x1c>
    stat = osErrorISR;
 8004ac4:	f06f 0305 	mvn.w	r3, #5
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	e007      	b.n	8004adc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <osDelay+0x2c>
      vTaskDelay(ticks);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f002 f896 	bl	8006c08 <vTaskDelay>
    }
  }

  return (stat);
 8004adc:	68fb      	ldr	r3, [r7, #12]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b086      	sub	sp, #24
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004af2:	f3ef 8305 	mrs	r3, IPSR
 8004af6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004af8:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d12d      	bne.n	8004b5a <osEventFlagsNew+0x74>
    mem = -1;
 8004afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b02:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d015      	beq.n	8004b36 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d006      	beq.n	8004b20 <osEventFlagsNew+0x3a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	2b1f      	cmp	r3, #31
 8004b18:	d902      	bls.n	8004b20 <osEventFlagsNew+0x3a>
        mem = 1;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	e00c      	b.n	8004b3a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d108      	bne.n	8004b3a <osEventFlagsNew+0x54>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d104      	bne.n	8004b3a <osEventFlagsNew+0x54>
          mem = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	e001      	b.n	8004b3a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d106      	bne.n	8004b4e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fb8f 	bl	8005268 <xEventGroupCreateStatic>
 8004b4a:	6178      	str	r0, [r7, #20]
 8004b4c:	e005      	b.n	8004b5a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d102      	bne.n	8004b5a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004b54:	f000 fbbf 	bl	80052d6 <xEventGroupCreate>
 8004b58:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004b5a:	697b      	ldr	r3, [r7, #20]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d004      	beq.n	8004b82 <osEventFlagsSet+0x1e>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004b82:	f06f 0303 	mvn.w	r3, #3
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e028      	b.n	8004bdc <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b8a:	f3ef 8305 	mrs	r3, IPSR
 8004b8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b90:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01d      	beq.n	8004bd2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004b9a:	f107 0308 	add.w	r3, r7, #8
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6839      	ldr	r1, [r7, #0]
 8004ba2:	6938      	ldr	r0, [r7, #16]
 8004ba4:	f000 fdb8 	bl	8005718 <xEventGroupSetBitsFromISR>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8004bae:	f06f 0302 	mvn.w	r3, #2
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	e012      	b.n	8004bdc <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00d      	beq.n	8004bdc <osEventFlagsSet+0x78>
 8004bc0:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <osEventFlagsSet+0x84>)
 8004bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	e004      	b.n	8004bdc <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004bd2:	6839      	ldr	r1, [r7, #0]
 8004bd4:	6938      	ldr	r0, [r7, #16]
 8004bd6:	f000 fcd7 	bl	8005588 <xEventGroupSetBits>
 8004bda:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004bdc:	697b      	ldr	r3, [r7, #20]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <osEventFlagsClear+0x1e>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004c0a:	f06f 0303 	mvn.w	r3, #3
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	e019      	b.n	8004c46 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c12:	f3ef 8305 	mrs	r3, IPSR
 8004c16:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c18:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00e      	beq.n	8004c3c <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004c1e:	6938      	ldr	r0, [r7, #16]
 8004c20:	f000 fc8e 	bl	8005540 <xEventGroupGetBitsFromISR>
 8004c24:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8004c26:	6839      	ldr	r1, [r7, #0]
 8004c28:	6938      	ldr	r0, [r7, #16]
 8004c2a:	f000 fc75 	bl	8005518 <xEventGroupClearBitsFromISR>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d108      	bne.n	8004c46 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8004c34:	f06f 0302 	mvn.w	r3, #2
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	e004      	b.n	8004c46 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8004c3c:	6839      	ldr	r1, [r7, #0]
 8004c3e:	6938      	ldr	r0, [r7, #16]
 8004c40:	f000 fc32 	bl	80054a8 <xEventGroupClearBits>
 8004c44:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004c46:	697b      	ldr	r3, [r7, #20]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d102      	bne.n	8004c68 <osEventFlagsGet+0x18>
    rflags = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	e00f      	b.n	8004c88 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c68:	f3ef 8305 	mrs	r3, IPSR
 8004c6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d004      	beq.n	8004c7e <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004c74:	6938      	ldr	r0, [r7, #16]
 8004c76:	f000 fc63 	bl	8005540 <xEventGroupGetBitsFromISR>
 8004c7a:	6178      	str	r0, [r7, #20]
 8004c7c:	e004      	b.n	8004c88 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8004c7e:	2100      	movs	r1, #0
 8004c80:	6938      	ldr	r0, [r7, #16]
 8004c82:	f000 fc11 	bl	80054a8 <xEventGroupClearBits>
 8004c86:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004c88:	697b      	ldr	r3, [r7, #20]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b08c      	sub	sp, #48	; 0x30
 8004c96:	af02      	add	r7, sp, #8
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
 8004c9e:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d004      	beq.n	8004cb4 <osEventFlagsWait+0x22>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8004cb4:	f06f 0303 	mvn.w	r3, #3
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	e04b      	b.n	8004d54 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cbc:	f3ef 8305 	mrs	r3, IPSR
 8004cc0:	617b      	str	r3, [r7, #20]
  return(result);
 8004cc2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8004cc8:	f06f 0305 	mvn.w	r3, #5
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	e041      	b.n	8004d54 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cde:	e001      	b.n	8004ce4 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	623b      	str	r3, [r7, #32]
 8004cf2:	e001      	b.n	8004cf8 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	6a3a      	ldr	r2, [r7, #32]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	69b8      	ldr	r0, [r7, #24]
 8004d04:	f000 fb02 	bl	800530c <xEventGroupWaitBits>
 8004d08:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d010      	beq.n	8004d36 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d019      	beq.n	8004d54 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8004d26:	f06f 0301 	mvn.w	r3, #1
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	e012      	b.n	8004d54 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004d2e:	f06f 0302 	mvn.w	r3, #2
 8004d32:	61fb      	str	r3, [r7, #28]
 8004d34:	e00e      	b.n	8004d54 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d109      	bne.n	8004d54 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8004d46:	f06f 0301 	mvn.w	r3, #1
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e002      	b.n	8004d54 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004d4e:	f06f 0302 	mvn.w	r3, #2
 8004d52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8004d54:	69fb      	ldr	r3, [r7, #28]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3728      	adds	r7, #40	; 0x28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b08a      	sub	sp, #40	; 0x28
 8004d62:	af02      	add	r7, sp, #8
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d6e:	f3ef 8305 	mrs	r3, IPSR
 8004d72:	613b      	str	r3, [r7, #16]
  return(result);
 8004d74:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d175      	bne.n	8004e66 <osSemaphoreNew+0x108>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d072      	beq.n	8004e66 <osSemaphoreNew+0x108>
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d86e      	bhi.n	8004e66 <osSemaphoreNew+0x108>
    mem = -1;
 8004d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d8c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d015      	beq.n	8004dc0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d006      	beq.n	8004daa <osSemaphoreNew+0x4c>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	2b4f      	cmp	r3, #79	; 0x4f
 8004da2:	d902      	bls.n	8004daa <osSemaphoreNew+0x4c>
        mem = 1;
 8004da4:	2301      	movs	r3, #1
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	e00c      	b.n	8004dc4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d108      	bne.n	8004dc4 <osSemaphoreNew+0x66>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <osSemaphoreNew+0x66>
          mem = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61bb      	str	r3, [r7, #24]
 8004dbe:	e001      	b.n	8004dc4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dca:	d04c      	beq.n	8004e66 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d128      	bne.n	8004e24 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d10a      	bne.n	8004dee <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2203      	movs	r2, #3
 8004dde:	9200      	str	r2, [sp, #0]
 8004de0:	2200      	movs	r2, #0
 8004de2:	2100      	movs	r1, #0
 8004de4:	2001      	movs	r0, #1
 8004de6:	f000 fdc7 	bl	8005978 <xQueueGenericCreateStatic>
 8004dea:	61f8      	str	r0, [r7, #28]
 8004dec:	e005      	b.n	8004dfa <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004dee:	2203      	movs	r2, #3
 8004df0:	2100      	movs	r1, #0
 8004df2:	2001      	movs	r0, #1
 8004df4:	f000 fe38 	bl	8005a68 <xQueueGenericCreate>
 8004df8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d022      	beq.n	8004e46 <osSemaphoreNew+0xe8>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01f      	beq.n	8004e46 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004e06:	2300      	movs	r3, #0
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	69f8      	ldr	r0, [r7, #28]
 8004e0e:	f000 fef3 	bl	8005bf8 <xQueueGenericSend>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d016      	beq.n	8004e46 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004e18:	69f8      	ldr	r0, [r7, #28]
 8004e1a:	f001 fb7f 	bl	800651c <vQueueDelete>
            hSemaphore = NULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61fb      	str	r3, [r7, #28]
 8004e22:	e010      	b.n	8004e46 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d108      	bne.n	8004e3c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fe75 	bl	8005b22 <xQueueCreateCountingSemaphoreStatic>
 8004e38:	61f8      	str	r0, [r7, #28]
 8004e3a:	e004      	b.n	8004e46 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fea6 	bl	8005b90 <xQueueCreateCountingSemaphore>
 8004e44:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00c      	beq.n	8004e66 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <osSemaphoreNew+0xfc>
          name = attr->name;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	e001      	b.n	8004e5e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004e5e:	6979      	ldr	r1, [r7, #20]
 8004e60:	69f8      	ldr	r0, [r7, #28]
 8004e62:	f001 fca7 	bl	80067b4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004e66:	69fb      	ldr	r3, [r7, #28]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d103      	bne.n	8004e90 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004e88:	f06f 0303 	mvn.w	r3, #3
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e039      	b.n	8004f04 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e90:	f3ef 8305 	mrs	r3, IPSR
 8004e94:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e96:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d022      	beq.n	8004ee2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004ea2:	f06f 0303 	mvn.w	r3, #3
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	e02c      	b.n	8004f04 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	6938      	ldr	r0, [r7, #16]
 8004eb8:	f001 fab0 	bl	800641c <xQueueReceiveFromISR>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d003      	beq.n	8004eca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004ec2:	f06f 0302 	mvn.w	r3, #2
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	e01c      	b.n	8004f04 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d019      	beq.n	8004f04 <osSemaphoreAcquire+0x94>
 8004ed0:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <osSemaphoreAcquire+0xa0>)
 8004ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	e010      	b.n	8004f04 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004ee2:	6839      	ldr	r1, [r7, #0]
 8004ee4:	6938      	ldr	r0, [r7, #16]
 8004ee6:	f001 f98d 	bl	8006204 <xQueueSemaphoreTake>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d009      	beq.n	8004f04 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004ef6:	f06f 0301 	mvn.w	r3, #1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e002      	b.n	8004f04 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004efe:	f06f 0302 	mvn.w	r3, #2
 8004f02:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004f04:	697b      	ldr	r3, [r7, #20]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	e000ed04 	.word	0xe000ed04

08004f14 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004f2a:	f06f 0303 	mvn.w	r3, #3
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	e02c      	b.n	8004f8c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f32:	f3ef 8305 	mrs	r3, IPSR
 8004f36:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f38:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d01a      	beq.n	8004f74 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004f42:	f107 0308 	add.w	r3, r7, #8
 8004f46:	4619      	mov	r1, r3
 8004f48:	6938      	ldr	r0, [r7, #16]
 8004f4a:	f000 ffee 	bl	8005f2a <xQueueGiveFromISR>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d003      	beq.n	8004f5c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004f54:	f06f 0302 	mvn.w	r3, #2
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	e017      	b.n	8004f8c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d014      	beq.n	8004f8c <osSemaphoreRelease+0x78>
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <osSemaphoreRelease+0x84>)
 8004f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	e00b      	b.n	8004f8c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004f74:	2300      	movs	r3, #0
 8004f76:	2200      	movs	r2, #0
 8004f78:	2100      	movs	r1, #0
 8004f7a:	6938      	ldr	r0, [r7, #16]
 8004f7c:	f000 fe3c 	bl	8005bf8 <xQueueGenericSend>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d002      	beq.n	8004f8c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004f86:	f06f 0302 	mvn.w	r3, #2
 8004f8a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004f8c:	697b      	ldr	r3, [r7, #20]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fac:	f3ef 8305 	mrs	r3, IPSR
 8004fb0:	613b      	str	r3, [r7, #16]
  return(result);
 8004fb2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d15f      	bne.n	8005078 <osMessageQueueNew+0xdc>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d05c      	beq.n	8005078 <osMessageQueueNew+0xdc>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d059      	beq.n	8005078 <osMessageQueueNew+0xdc>
    mem = -1;
 8004fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fc8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d029      	beq.n	8005024 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d012      	beq.n	8004ffe <osMessageQueueNew+0x62>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b4f      	cmp	r3, #79	; 0x4f
 8004fde:	d90e      	bls.n	8004ffe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <osMessageQueueNew+0x62>
        mem = 1;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	61bb      	str	r3, [r7, #24]
 8004ffc:	e014      	b.n	8005028 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d110      	bne.n	8005028 <osMessageQueueNew+0x8c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10c      	bne.n	8005028 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005012:	2b00      	cmp	r3, #0
 8005014:	d108      	bne.n	8005028 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d104      	bne.n	8005028 <osMessageQueueNew+0x8c>
          mem = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	e001      	b.n	8005028 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d10b      	bne.n	8005046 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2100      	movs	r1, #0
 8005038:	9100      	str	r1, [sp, #0]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fc9b 	bl	8005978 <xQueueGenericCreateStatic>
 8005042:	61f8      	str	r0, [r7, #28]
 8005044:	e008      	b.n	8005058 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800504c:	2200      	movs	r2, #0
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 fd09 	bl	8005a68 <xQueueGenericCreate>
 8005056:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00c      	beq.n	8005078 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <osMessageQueueNew+0xd0>
        name = attr->name;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e001      	b.n	8005070 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005070:	6979      	ldr	r1, [r7, #20]
 8005072:	69f8      	ldr	r0, [r7, #28]
 8005074:	f001 fb9e 	bl	80067b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005078:	69fb      	ldr	r3, [r7, #28]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005098:	2300      	movs	r3, #0
 800509a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800509c:	f3ef 8305 	mrs	r3, IPSR
 80050a0:	617b      	str	r3, [r7, #20]
  return(result);
 80050a2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d028      	beq.n	80050fa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <osMessageQueuePut+0x36>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <osMessageQueuePut+0x36>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80050ba:	f06f 0303 	mvn.w	r3, #3
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	e038      	b.n	8005134 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80050c2:	2300      	movs	r3, #0
 80050c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80050c6:	f107 0210 	add.w	r2, r7, #16
 80050ca:	2300      	movs	r3, #0
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	69b8      	ldr	r0, [r7, #24]
 80050d0:	f000 fe90 	bl	8005df4 <xQueueGenericSendFromISR>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d003      	beq.n	80050e2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80050da:	f06f 0302 	mvn.w	r3, #2
 80050de:	61fb      	str	r3, [r7, #28]
 80050e0:	e028      	b.n	8005134 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d025      	beq.n	8005134 <osMessageQueuePut+0xb0>
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <osMessageQueuePut+0xbc>)
 80050ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	e01c      	b.n	8005134 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <osMessageQueuePut+0x82>
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d103      	bne.n	800510e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005106:	f06f 0303 	mvn.w	r3, #3
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	e012      	b.n	8005134 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800510e:	2300      	movs	r3, #0
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	69b8      	ldr	r0, [r7, #24]
 8005116:	f000 fd6f 	bl	8005bf8 <xQueueGenericSend>
 800511a:	4603      	mov	r3, r0
 800511c:	2b01      	cmp	r3, #1
 800511e:	d009      	beq.n	8005134 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005126:	f06f 0301 	mvn.w	r3, #1
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	e002      	b.n	8005134 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800512e:	f06f 0302 	mvn.w	r3, #2
 8005132:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005134:	69fb      	ldr	r3, [r7, #28]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	e000ed04 	.word	0xe000ed04

08005144 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800515a:	f3ef 8305 	mrs	r3, IPSR
 800515e:	617b      	str	r3, [r7, #20]
  return(result);
 8005160:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005162:	2b00      	cmp	r3, #0
 8005164:	d028      	beq.n	80051b8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <osMessageQueueGet+0x34>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <osMessageQueueGet+0x34>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005178:	f06f 0303 	mvn.w	r3, #3
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	e037      	b.n	80051f0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005180:	2300      	movs	r3, #0
 8005182:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005184:	f107 0310 	add.w	r3, r7, #16
 8005188:	461a      	mov	r2, r3
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	69b8      	ldr	r0, [r7, #24]
 800518e:	f001 f945 	bl	800641c <xQueueReceiveFromISR>
 8005192:	4603      	mov	r3, r0
 8005194:	2b01      	cmp	r3, #1
 8005196:	d003      	beq.n	80051a0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005198:	f06f 0302 	mvn.w	r3, #2
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	e027      	b.n	80051f0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d024      	beq.n	80051f0 <osMessageQueueGet+0xac>
 80051a6:	4b15      	ldr	r3, [pc, #84]	; (80051fc <osMessageQueueGet+0xb8>)
 80051a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	e01b      	b.n	80051f0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <osMessageQueueGet+0x80>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d103      	bne.n	80051cc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80051c4:	f06f 0303 	mvn.w	r3, #3
 80051c8:	61fb      	str	r3, [r7, #28]
 80051ca:	e011      	b.n	80051f0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	69b8      	ldr	r0, [r7, #24]
 80051d2:	f000 ff37 	bl	8006044 <xQueueReceive>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d009      	beq.n	80051f0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80051e2:	f06f 0301 	mvn.w	r3, #1
 80051e6:	61fb      	str	r3, [r7, #28]
 80051e8:	e002      	b.n	80051f0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80051ea:	f06f 0302 	mvn.w	r3, #2
 80051ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80051f0:	69fb      	ldr	r3, [r7, #28]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3720      	adds	r7, #32
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	e000ed04 	.word	0xe000ed04

08005200 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4a07      	ldr	r2, [pc, #28]	; (800522c <vApplicationGetIdleTaskMemory+0x2c>)
 8005210:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4a06      	ldr	r2, [pc, #24]	; (8005230 <vApplicationGetIdleTaskMemory+0x30>)
 8005216:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2280      	movs	r2, #128	; 0x80
 800521c:	601a      	str	r2, [r3, #0]
}
 800521e:	bf00      	nop
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	20000094 	.word	0x20000094
 8005230:	200000f0 	.word	0x200000f0

08005234 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4a07      	ldr	r2, [pc, #28]	; (8005260 <vApplicationGetTimerTaskMemory+0x2c>)
 8005244:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4a06      	ldr	r2, [pc, #24]	; (8005264 <vApplicationGetTimerTaskMemory+0x30>)
 800524a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005252:	601a      	str	r2, [r3, #0]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	200002f0 	.word	0x200002f0
 8005264:	2000034c 	.word	0x2000034c

08005268 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005288:	bf00      	nop
 800528a:	e7fe      	b.n	800528a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800528c:	2320      	movs	r3, #32
 800528e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b20      	cmp	r3, #32
 8005294:	d00a      	beq.n	80052ac <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	60fb      	str	r3, [r7, #12]
}
 80052a8:	bf00      	nop
 80052aa:	e7fe      	b.n	80052aa <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	3304      	adds	r3, #4
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fa3d 	bl	8005740 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2201      	movs	r2, #1
 80052ca:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80052cc:	697b      	ldr	r3, [r7, #20]
	}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80052dc:	2020      	movs	r0, #32
 80052de:	f003 fa63 	bl	80087a8 <pvPortMalloc>
 80052e2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fa23 	bl	8005740 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005300:	687b      	ldr	r3, [r7, #4]
	}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b090      	sub	sp, #64	; 0x40
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800531e:	2300      	movs	r3, #0
 8005320:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005322:	2300      	movs	r3, #0
 8005324:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <xEventGroupWaitBits+0x36>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	623b      	str	r3, [r7, #32]
}
 800533e:	bf00      	nop
 8005340:	e7fe      	b.n	8005340 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <xEventGroupWaitBits+0x56>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	61fb      	str	r3, [r7, #28]
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <xEventGroupWaitBits+0x72>
	__asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	61bb      	str	r3, [r7, #24]
}
 800537a:	bf00      	nop
 800537c:	e7fe      	b.n	800537c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800537e:	f002 fa63 	bl	8007848 <xTaskGetSchedulerState>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <xEventGroupWaitBits+0x82>
 8005388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <xEventGroupWaitBits+0x86>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <xEventGroupWaitBits+0x88>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	617b      	str	r3, [r7, #20]
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80053ae:	f001 fdcb 	bl	8006f48 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80053b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053be:	f000 f988 	bl	80056d2 <prvTestWaitCondition>
 80053c2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00e      	beq.n	80053e8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80053ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053cc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d028      	beq.n	800542a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80053d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	43db      	mvns	r3, r3
 80053e0:	401a      	ands	r2, r3
 80053e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e020      	b.n	800542a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80053e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80053f2:	2301      	movs	r3, #1
 80053f4:	633b      	str	r3, [r7, #48]	; 0x30
 80053f6:	e018      	b.n	800542a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005404:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800540c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005412:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005416:	1d18      	adds	r0, r3, #4
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	4313      	orrs	r3, r2
 800541e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005420:	4619      	mov	r1, r3
 8005422:	f001 ff89 	bl	8007338 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005426:	2300      	movs	r3, #0
 8005428:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800542a:	f001 fd9b 	bl	8006f64 <xTaskResumeAll>
 800542e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005432:	2b00      	cmp	r3, #0
 8005434:	d031      	beq.n	800549a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	2b00      	cmp	r3, #0
 800543a:	d107      	bne.n	800544c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800543c:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <xEventGroupWaitBits+0x198>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800544c:	f002 fb72 	bl	8007b34 <uxTaskResetEventItemValue>
 8005450:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d11a      	bne.n	8005492 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800545c:	f003 f882 	bl	8008564 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800546c:	f000 f931 	bl	80056d2 <prvTestWaitCondition>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d006      	beq.n	800548a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800547c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	43db      	mvns	r3, r3
 8005484:	401a      	ands	r2, r3
 8005486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005488:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800548a:	2301      	movs	r3, #1
 800548c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800548e:	f003 f899 	bl	80085c4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005494:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005498:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800549a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800549c:	4618      	mov	r0, r3
 800549e:	3740      	adds	r7, #64	; 0x40
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	e000ed04 	.word	0xe000ed04

080054a8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <xEventGroupClearBits+0x2a>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	60fb      	str	r3, [r7, #12]
}
 80054ce:	bf00      	nop
 80054d0:	e7fe      	b.n	80054d0 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <xEventGroupClearBits+0x4a>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	60bb      	str	r3, [r7, #8]
}
 80054ee:	bf00      	nop
 80054f0:	e7fe      	b.n	80054f0 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80054f2:	f003 f837 	bl	8008564 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	43db      	mvns	r3, r3
 8005504:	401a      	ands	r2, r3
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800550a:	f003 f85b 	bl	80085c4 <vPortExitCritical>

	return uxReturn;
 800550e:	693b      	ldr	r3, [r7, #16]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005522:	2300      	movs	r3, #0
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	4804      	ldr	r0, [pc, #16]	; (800553c <xEventGroupClearBitsFromISR+0x24>)
 800552a:	f002 fed1 	bl	80082d0 <xTimerPendFunctionCallFromISR>
 800552e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8005530:	68fb      	ldr	r3, [r7, #12]
	}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	080056b9 	.word	0x080056b9

08005540 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8005540:	b480      	push	{r7}
 8005542:	b089      	sub	sp, #36	; 0x24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800554c:	f3ef 8211 	mrs	r2, BASEPRI
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	60fa      	str	r2, [r7, #12]
 8005562:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005564:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005566:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005578:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800557a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800557c:	4618      	mov	r0, r3
 800557e:	3724      	adds	r7, #36	; 0x24
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08e      	sub	sp, #56	; 0x38
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005592:	2300      	movs	r3, #0
 8005594:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800559a:	2300      	movs	r3, #0
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <xEventGroupSetBits+0x32>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	613b      	str	r3, [r7, #16]
}
 80055b6:	bf00      	nop
 80055b8:	e7fe      	b.n	80055b8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <xEventGroupSetBits+0x52>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	60fb      	str	r3, [r7, #12]
}
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	3304      	adds	r3, #4
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	3308      	adds	r3, #8
 80055e4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80055e6:	f001 fcaf 	bl	8006f48 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80055fc:	e03c      	b.n	8005678 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80055fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800560a:	2300      	movs	r3, #0
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005614:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800561c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d108      	bne.n	800563a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005634:	2301      	movs	r3, #1
 8005636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005638:	e008      	b.n	800564c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	4013      	ands	r3, r2
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	429a      	cmp	r2, r3
 8005646:	d101      	bne.n	800564c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005648:	2301      	movs	r3, #1
 800564a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564e:	2b00      	cmp	r3, #0
 8005650:	d010      	beq.n	8005674 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800565c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	4313      	orrs	r3, r2
 8005662:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800566c:	4619      	mov	r1, r3
 800566e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005670:	f001 ff2e 	bl	80074d0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	429a      	cmp	r2, r3
 800567e:	d1be      	bne.n	80055fe <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	43db      	mvns	r3, r3
 8005688:	401a      	ands	r2, r3
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800568e:	f001 fc69 	bl	8006f64 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	681b      	ldr	r3, [r3, #0]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3738      	adds	r7, #56	; 0x38
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b082      	sub	sp, #8
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80056a8:	6839      	ldr	r1, [r7, #0]
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff ff6c 	bl	8005588 <xEventGroupSetBits>
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff feef 	bl	80054a8 <xEventGroupClearBits>
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80056d2:	b480      	push	{r7}
 80056d4:	b087      	sub	sp, #28
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d107      	bne.n	80056f8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4013      	ands	r3, r2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80056f2:	2301      	movs	r3, #1
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	e007      	b.n	8005708 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	4013      	ands	r3, r2
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	429a      	cmp	r2, r3
 8005702:	d101      	bne.n	8005708 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005704:	2301      	movs	r3, #1
 8005706:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005708:	697b      	ldr	r3, [r7, #20]
}
 800570a:	4618      	mov	r0, r3
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
	...

08005718 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	68f9      	ldr	r1, [r7, #12]
 800572a:	4804      	ldr	r0, [pc, #16]	; (800573c <xEventGroupSetBitsFromISR+0x24>)
 800572c:	f002 fdd0 	bl	80082d0 <xTimerPendFunctionCallFromISR>
 8005730:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005732:	697b      	ldr	r3, [r7, #20]
	}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	0800569f 	.word	0x0800569f

08005740 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f103 0208 	add.w	r2, r3, #8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005758:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f103 0208 	add.w	r2, r3, #8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f103 0208 	add.w	r2, r3, #8
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800579a:	b480      	push	{r7}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	601a      	str	r2, [r3, #0]
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057e2:	b480      	push	{r7}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f8:	d103      	bne.n	8005802 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	e00c      	b.n	800581c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3308      	adds	r3, #8
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	e002      	b.n	8005810 <vListInsert+0x2e>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	429a      	cmp	r2, r3
 800581a:	d2f6      	bcs.n	800580a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	601a      	str	r2, [r3, #0]
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6892      	ldr	r2, [r2, #8]
 800586a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6852      	ldr	r2, [r2, #4]
 8005874:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	d103      	bne.n	8005888 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	1e5a      	subs	r2, r3, #1
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <xQueueGenericReset+0x2a>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	60bb      	str	r3, [r7, #8]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058d2:	f002 fe47 	bl	8008564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058de:	68f9      	ldr	r1, [r7, #12]
 80058e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058e2:	fb01 f303 	mul.w	r3, r1, r3
 80058e6:	441a      	add	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005902:	3b01      	subs	r3, #1
 8005904:	68f9      	ldr	r1, [r7, #12]
 8005906:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	441a      	add	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	22ff      	movs	r2, #255	; 0xff
 8005916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	22ff      	movs	r2, #255	; 0xff
 800591e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d114      	bne.n	8005952 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01a      	beq.n	8005966 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3310      	adds	r3, #16
 8005934:	4618      	mov	r0, r3
 8005936:	f001 fd67 	bl	8007408 <xTaskRemoveFromEventList>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d012      	beq.n	8005966 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005940:	4b0c      	ldr	r3, [pc, #48]	; (8005974 <xQueueGenericReset+0xcc>)
 8005942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	e009      	b.n	8005966 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3310      	adds	r3, #16
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff fef2 	bl	8005740 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3324      	adds	r3, #36	; 0x24
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff feed 	bl	8005740 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005966:	f002 fe2d 	bl	80085c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800596a:	2301      	movs	r3, #1
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	e000ed04 	.word	0xe000ed04

08005978 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08e      	sub	sp, #56	; 0x38
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10a      	bne.n	80059be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059ba:	bf00      	nop
 80059bc:	e7fe      	b.n	80059bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <xQueueGenericCreateStatic+0x52>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <xQueueGenericCreateStatic+0x56>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <xQueueGenericCreateStatic+0x58>
 80059ce:	2300      	movs	r3, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	623b      	str	r3, [r7, #32]
}
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d102      	bne.n	80059f6 <xQueueGenericCreateStatic+0x7e>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <xQueueGenericCreateStatic+0x82>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <xQueueGenericCreateStatic+0x84>
 80059fa:	2300      	movs	r3, #0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	61fb      	str	r3, [r7, #28]
}
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a16:	2350      	movs	r3, #80	; 0x50
 8005a18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b50      	cmp	r3, #80	; 0x50
 8005a1e:	d00a      	beq.n	8005a36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	61bb      	str	r3, [r7, #24]
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00d      	beq.n	8005a5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	4613      	mov	r3, r2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f83f 	bl	8005adc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3730      	adds	r7, #48	; 0x30
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	613b      	str	r3, [r7, #16]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	fb02 f303 	mul.w	r3, r2, r3
 8005a9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	3350      	adds	r3, #80	; 0x50
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f002 fe81 	bl	80087a8 <pvPortMalloc>
 8005aa6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d011      	beq.n	8005ad2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	3350      	adds	r3, #80	; 0x50
 8005ab6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ac0:	79fa      	ldrb	r2, [r7, #7]
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	68b9      	ldr	r1, [r7, #8]
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 f805 	bl	8005adc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d103      	bne.n	8005af8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	e002      	b.n	8005afe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	69b8      	ldr	r0, [r7, #24]
 8005b0e:	f7ff fecb 	bl	80058a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	78fa      	ldrb	r2, [r7, #3]
 8005b16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b08a      	sub	sp, #40	; 0x28
 8005b26:	af02      	add	r7, sp, #8
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	61bb      	str	r3, [r7, #24]
}
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d90a      	bls.n	8005b68 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	617b      	str	r3, [r7, #20]
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005b68:	2302      	movs	r3, #2
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2100      	movs	r1, #0
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f7ff ff00 	bl	8005978 <xQueueGenericCreateStatic>
 8005b78:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005b86:	69fb      	ldr	r3, [r7, #28]
	}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3720      	adds	r7, #32
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	613b      	str	r3, [r7, #16]
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d90a      	bls.n	8005bd4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60fb      	str	r3, [r7, #12]
}
 8005bd0:	bf00      	nop
 8005bd2:	e7fe      	b.n	8005bd2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff ff45 	bl	8005a68 <xQueueGenericCreate>
 8005bde:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005bec:	697b      	ldr	r3, [r7, #20]
	}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08e      	sub	sp, #56	; 0x38
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c06:	2300      	movs	r3, #0
 8005c08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <xQueueGenericSend+0x32>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c26:	bf00      	nop
 8005c28:	e7fe      	b.n	8005c28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d103      	bne.n	8005c38 <xQueueGenericSend+0x40>
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <xQueueGenericSend+0x44>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <xQueueGenericSend+0x46>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <xQueueGenericSend+0x60>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d103      	bne.n	8005c66 <xQueueGenericSend+0x6e>
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d101      	bne.n	8005c6a <xQueueGenericSend+0x72>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <xQueueGenericSend+0x74>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <xQueueGenericSend+0x8e>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	623b      	str	r3, [r7, #32]
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c86:	f001 fddf 	bl	8007848 <xTaskGetSchedulerState>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d102      	bne.n	8005c96 <xQueueGenericSend+0x9e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <xQueueGenericSend+0xa2>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <xQueueGenericSend+0xa4>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10a      	bne.n	8005cb6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	61fb      	str	r3, [r7, #28]
}
 8005cb2:	bf00      	nop
 8005cb4:	e7fe      	b.n	8005cb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cb6:	f002 fc55 	bl	8008564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d302      	bcc.n	8005ccc <xQueueGenericSend+0xd4>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d129      	bne.n	8005d20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cd2:	f000 fc5e 	bl	8006592 <prvCopyDataToQueue>
 8005cd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d010      	beq.n	8005d02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	3324      	adds	r3, #36	; 0x24
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 fb8f 	bl	8007408 <xTaskRemoveFromEventList>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d013      	beq.n	8005d18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005cf0:	4b3f      	ldr	r3, [pc, #252]	; (8005df0 <xQueueGenericSend+0x1f8>)
 8005cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	e00a      	b.n	8005d18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d007      	beq.n	8005d18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d08:	4b39      	ldr	r3, [pc, #228]	; (8005df0 <xQueueGenericSend+0x1f8>)
 8005d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d18:	f002 fc54 	bl	80085c4 <vPortExitCritical>
				return pdPASS;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e063      	b.n	8005de8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d103      	bne.n	8005d2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d26:	f002 fc4d 	bl	80085c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e05c      	b.n	8005de8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d106      	bne.n	8005d42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d34:	f107 0314 	add.w	r3, r7, #20
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f001 fc2b 	bl	8007594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d42:	f002 fc3f 	bl	80085c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d46:	f001 f8ff 	bl	8006f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d4a:	f002 fc0b 	bl	8008564 <vPortEnterCritical>
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d54:	b25b      	sxtb	r3, r3
 8005d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d5a:	d103      	bne.n	8005d64 <xQueueGenericSend+0x16c>
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d6a:	b25b      	sxtb	r3, r3
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d70:	d103      	bne.n	8005d7a <xQueueGenericSend+0x182>
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d7a:	f002 fc23 	bl	80085c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d7e:	1d3a      	adds	r2, r7, #4
 8005d80:	f107 0314 	add.w	r3, r7, #20
 8005d84:	4611      	mov	r1, r2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 fc1a 	bl	80075c0 <xTaskCheckForTimeOut>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d124      	bne.n	8005ddc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d94:	f000 fcf5 	bl	8006782 <prvIsQueueFull>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d018      	beq.n	8005dd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	3310      	adds	r3, #16
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	4611      	mov	r1, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f001 faa2 	bl	80072f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dae:	f000 fc80 	bl	80066b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005db2:	f001 f8d7 	bl	8006f64 <xTaskResumeAll>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f47f af7c 	bne.w	8005cb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <xQueueGenericSend+0x1f8>)
 8005dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	e772      	b.n	8005cb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dd2:	f000 fc6e 	bl	80066b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dd6:	f001 f8c5 	bl	8006f64 <xTaskResumeAll>
 8005dda:	e76c      	b.n	8005cb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dde:	f000 fc68 	bl	80066b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005de2:	f001 f8bf 	bl	8006f64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005de6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3738      	adds	r7, #56	; 0x38
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	e000ed04 	.word	0xe000ed04

08005df4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b090      	sub	sp, #64	; 0x40
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10a      	bne.n	8005e22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d103      	bne.n	8005e30 <xQueueGenericSendFromISR+0x3c>
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <xQueueGenericSendFromISR+0x40>
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <xQueueGenericSendFromISR+0x42>
 8005e34:	2300      	movs	r3, #0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e4c:	bf00      	nop
 8005e4e:	e7fe      	b.n	8005e4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d103      	bne.n	8005e5e <xQueueGenericSendFromISR+0x6a>
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <xQueueGenericSendFromISR+0x6e>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e000      	b.n	8005e64 <xQueueGenericSendFromISR+0x70>
 8005e62:	2300      	movs	r3, #0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	623b      	str	r3, [r7, #32]
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e7e:	f002 fc53 	bl	8008728 <vPortValidateInterruptPriority>
	__asm volatile
 8005e82:	f3ef 8211 	mrs	r2, BASEPRI
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	61fa      	str	r2, [r7, #28]
 8005e98:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d302      	bcc.n	8005eb0 <xQueueGenericSendFromISR+0xbc>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d12f      	bne.n	8005f10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ec6:	f000 fb64 	bl	8006592 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005eca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ed2:	d112      	bne.n	8005efa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d016      	beq.n	8005f0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	3324      	adds	r3, #36	; 0x24
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f001 fa91 	bl	8007408 <xTaskRemoveFromEventList>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00e      	beq.n	8005f0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00b      	beq.n	8005f0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	e007      	b.n	8005f0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005efa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005efe:	3301      	adds	r3, #1
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	b25a      	sxtb	r2, r3
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f0e:	e001      	b.n	8005f14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f10:	2300      	movs	r3, #0
 8005f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f16:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f383 8811 	msr	BASEPRI, r3
}
 8005f1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3740      	adds	r7, #64	; 0x40
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b08e      	sub	sp, #56	; 0x38
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	623b      	str	r3, [r7, #32]
}
 8005f50:	bf00      	nop
 8005f52:	e7fe      	b.n	8005f52 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	61fb      	str	r3, [r7, #28]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d103      	bne.n	8005f82 <xQueueGiveFromISR+0x58>
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <xQueueGiveFromISR+0x5c>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <xQueueGiveFromISR+0x5e>
 8005f86:	2300      	movs	r3, #0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	61bb      	str	r3, [r7, #24]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fa2:	f002 fbc1 	bl	8008728 <vPortValidateInterruptPriority>
	__asm volatile
 8005fa6:	f3ef 8211 	mrs	r2, BASEPRI
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	617a      	str	r2, [r7, #20]
 8005fbc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005fbe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d22b      	bcs.n	800602a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fe4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fec:	d112      	bne.n	8006014 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d016      	beq.n	8006024 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	3324      	adds	r3, #36	; 0x24
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f001 fa04 	bl	8007408 <xTaskRemoveFromEventList>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00e      	beq.n	8006024 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00b      	beq.n	8006024 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2201      	movs	r2, #1
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	e007      	b.n	8006024 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006018:	3301      	adds	r3, #1
 800601a:	b2db      	uxtb	r3, r3
 800601c:	b25a      	sxtb	r2, r3
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006024:	2301      	movs	r3, #1
 8006026:	637b      	str	r3, [r7, #52]	; 0x34
 8006028:	e001      	b.n	800602e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800602a:	2300      	movs	r3, #0
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006030:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f383 8811 	msr	BASEPRI, r3
}
 8006038:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800603c:	4618      	mov	r0, r3
 800603e:	3738      	adds	r7, #56	; 0x38
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08c      	sub	sp, #48	; 0x30
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006050:	2300      	movs	r3, #0
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10a      	bne.n	8006074 <xQueueReceive+0x30>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	623b      	str	r3, [r7, #32]
}
 8006070:	bf00      	nop
 8006072:	e7fe      	b.n	8006072 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d103      	bne.n	8006082 <xQueueReceive+0x3e>
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <xQueueReceive+0x42>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <xQueueReceive+0x44>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10a      	bne.n	80060a2 <xQueueReceive+0x5e>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	61fb      	str	r3, [r7, #28]
}
 800609e:	bf00      	nop
 80060a0:	e7fe      	b.n	80060a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060a2:	f001 fbd1 	bl	8007848 <xTaskGetSchedulerState>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d102      	bne.n	80060b2 <xQueueReceive+0x6e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <xQueueReceive+0x72>
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <xQueueReceive+0x74>
 80060b6:	2300      	movs	r3, #0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10a      	bne.n	80060d2 <xQueueReceive+0x8e>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	61bb      	str	r3, [r7, #24]
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060d2:	f002 fa47 	bl	8008564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01f      	beq.n	8006122 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e6:	f000 fabe 	bl	8006666 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	1e5a      	subs	r2, r3, #1
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00f      	beq.n	800611a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	3310      	adds	r3, #16
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 f982 	bl	8007408 <xTaskRemoveFromEventList>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800610a:	4b3d      	ldr	r3, [pc, #244]	; (8006200 <xQueueReceive+0x1bc>)
 800610c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800611a:	f002 fa53 	bl	80085c4 <vPortExitCritical>
				return pdPASS;
 800611e:	2301      	movs	r3, #1
 8006120:	e069      	b.n	80061f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d103      	bne.n	8006130 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006128:	f002 fa4c 	bl	80085c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800612c:	2300      	movs	r3, #0
 800612e:	e062      	b.n	80061f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006136:	f107 0310 	add.w	r3, r7, #16
 800613a:	4618      	mov	r0, r3
 800613c:	f001 fa2a 	bl	8007594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006140:	2301      	movs	r3, #1
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006144:	f002 fa3e 	bl	80085c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006148:	f000 fefe 	bl	8006f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800614c:	f002 fa0a 	bl	8008564 <vPortEnterCritical>
 8006150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006156:	b25b      	sxtb	r3, r3
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800615c:	d103      	bne.n	8006166 <xQueueReceive+0x122>
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800616c:	b25b      	sxtb	r3, r3
 800616e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006172:	d103      	bne.n	800617c <xQueueReceive+0x138>
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800617c:	f002 fa22 	bl	80085c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006180:	1d3a      	adds	r2, r7, #4
 8006182:	f107 0310 	add.w	r3, r7, #16
 8006186:	4611      	mov	r1, r2
 8006188:	4618      	mov	r0, r3
 800618a:	f001 fa19 	bl	80075c0 <xTaskCheckForTimeOut>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d123      	bne.n	80061dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006196:	f000 fade 	bl	8006756 <prvIsQueueEmpty>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d017      	beq.n	80061d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	3324      	adds	r3, #36	; 0x24
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	4611      	mov	r1, r2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f001 f8a1 	bl	80072f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b0:	f000 fa7f 	bl	80066b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061b4:	f000 fed6 	bl	8006f64 <xTaskResumeAll>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d189      	bne.n	80060d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80061be:	4b10      	ldr	r3, [pc, #64]	; (8006200 <xQueueReceive+0x1bc>)
 80061c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	e780      	b.n	80060d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d2:	f000 fa6e 	bl	80066b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061d6:	f000 fec5 	bl	8006f64 <xTaskResumeAll>
 80061da:	e77a      	b.n	80060d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061de:	f000 fa68 	bl	80066b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061e2:	f000 febf 	bl	8006f64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e8:	f000 fab5 	bl	8006756 <prvIsQueueEmpty>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f43f af6f 	beq.w	80060d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3730      	adds	r7, #48	; 0x30
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08e      	sub	sp, #56	; 0x38
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800620e:	2300      	movs	r3, #0
 8006210:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006216:	2300      	movs	r3, #0
 8006218:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	623b      	str	r3, [r7, #32]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	61fb      	str	r3, [r7, #28]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006254:	f001 faf8 	bl	8007848 <xTaskGetSchedulerState>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <xQueueSemaphoreTake+0x60>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <xQueueSemaphoreTake+0x64>
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <xQueueSemaphoreTake+0x66>
 8006268:	2300      	movs	r3, #0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	61bb      	str	r3, [r7, #24]
}
 8006280:	bf00      	nop
 8006282:	e7fe      	b.n	8006282 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006284:	f002 f96e 	bl	8008564 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	2b00      	cmp	r3, #0
 8006292:	d024      	beq.n	80062de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	1e5a      	subs	r2, r3, #1
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d104      	bne.n	80062ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80062a4:	f001 fc5e 	bl	8007b64 <pvTaskIncrementMutexHeldCount>
 80062a8:	4602      	mov	r2, r0
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00f      	beq.n	80062d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	3310      	adds	r3, #16
 80062ba:	4618      	mov	r0, r3
 80062bc:	f001 f8a4 	bl	8007408 <xTaskRemoveFromEventList>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062c6:	4b54      	ldr	r3, [pc, #336]	; (8006418 <xQueueSemaphoreTake+0x214>)
 80062c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062d6:	f002 f975 	bl	80085c4 <vPortExitCritical>
				return pdPASS;
 80062da:	2301      	movs	r3, #1
 80062dc:	e097      	b.n	800640e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d111      	bne.n	8006308 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	617b      	str	r3, [r7, #20]
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006300:	f002 f960 	bl	80085c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006304:	2300      	movs	r3, #0
 8006306:	e082      	b.n	800640e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800630e:	f107 030c 	add.w	r3, r7, #12
 8006312:	4618      	mov	r0, r3
 8006314:	f001 f93e 	bl	8007594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006318:	2301      	movs	r3, #1
 800631a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800631c:	f002 f952 	bl	80085c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006320:	f000 fe12 	bl	8006f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006324:	f002 f91e 	bl	8008564 <vPortEnterCritical>
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800632e:	b25b      	sxtb	r3, r3
 8006330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006334:	d103      	bne.n	800633e <xQueueSemaphoreTake+0x13a>
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006344:	b25b      	sxtb	r3, r3
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800634a:	d103      	bne.n	8006354 <xQueueSemaphoreTake+0x150>
 800634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006354:	f002 f936 	bl	80085c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006358:	463a      	mov	r2, r7
 800635a:	f107 030c 	add.w	r3, r7, #12
 800635e:	4611      	mov	r1, r2
 8006360:	4618      	mov	r0, r3
 8006362:	f001 f92d 	bl	80075c0 <xTaskCheckForTimeOut>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d132      	bne.n	80063d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800636c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800636e:	f000 f9f2 	bl	8006756 <prvIsQueueEmpty>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d026      	beq.n	80063c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d109      	bne.n	8006394 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006380:	f002 f8f0 	bl	8008564 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	4618      	mov	r0, r3
 800638a:	f001 fa7b 	bl	8007884 <xTaskPriorityInherit>
 800638e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006390:	f002 f918 	bl	80085c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	3324      	adds	r3, #36	; 0x24
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	4611      	mov	r1, r2
 800639c:	4618      	mov	r0, r3
 800639e:	f000 ffa7 	bl	80072f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063a4:	f000 f985 	bl	80066b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063a8:	f000 fddc 	bl	8006f64 <xTaskResumeAll>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f47f af68 	bne.w	8006284 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80063b4:	4b18      	ldr	r3, [pc, #96]	; (8006418 <xQueueSemaphoreTake+0x214>)
 80063b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	e75e      	b.n	8006284 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80063c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063c8:	f000 f973 	bl	80066b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063cc:	f000 fdca 	bl	8006f64 <xTaskResumeAll>
 80063d0:	e758      	b.n	8006284 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80063d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063d4:	f000 f96d 	bl	80066b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063d8:	f000 fdc4 	bl	8006f64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063de:	f000 f9ba 	bl	8006756 <prvIsQueueEmpty>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f43f af4d 	beq.w	8006284 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00d      	beq.n	800640c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80063f0:	f002 f8b8 	bl	8008564 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80063f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063f6:	f000 f8b4 	bl	8006562 <prvGetDisinheritPriorityAfterTimeout>
 80063fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006402:	4618      	mov	r0, r3
 8006404:	f001 fb14 	bl	8007a30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006408:	f002 f8dc 	bl	80085c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800640c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800640e:	4618      	mov	r0, r3
 8006410:	3738      	adds	r7, #56	; 0x38
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08e      	sub	sp, #56	; 0x38
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10a      	bne.n	8006448 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	623b      	str	r3, [r7, #32]
}
 8006444:	bf00      	nop
 8006446:	e7fe      	b.n	8006446 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d103      	bne.n	8006456 <xQueueReceiveFromISR+0x3a>
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <xQueueReceiveFromISR+0x3e>
 8006456:	2301      	movs	r3, #1
 8006458:	e000      	b.n	800645c <xQueueReceiveFromISR+0x40>
 800645a:	2300      	movs	r3, #0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10a      	bne.n	8006476 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	61fb      	str	r3, [r7, #28]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006476:	f002 f957 	bl	8008728 <vPortValidateInterruptPriority>
	__asm volatile
 800647a:	f3ef 8211 	mrs	r2, BASEPRI
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	61ba      	str	r2, [r7, #24]
 8006490:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006492:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006494:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d02f      	beq.n	8006502 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064ac:	68b9      	ldr	r1, [r7, #8]
 80064ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064b0:	f000 f8d9 	bl	8006666 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	1e5a      	subs	r2, r3, #1
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80064bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c4:	d112      	bne.n	80064ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d016      	beq.n	80064fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	3310      	adds	r3, #16
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 ff98 	bl	8007408 <xTaskRemoveFromEventList>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00e      	beq.n	80064fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00b      	beq.n	80064fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	e007      	b.n	80064fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80064ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064f0:	3301      	adds	r3, #1
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	b25a      	sxtb	r2, r3
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80064fc:	2301      	movs	r3, #1
 80064fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006500:	e001      	b.n	8006506 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006502:	2300      	movs	r3, #0
 8006504:	637b      	str	r3, [r7, #52]	; 0x34
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	613b      	str	r3, [r7, #16]
	__asm volatile
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f383 8811 	msr	BASEPRI, r3
}
 8006510:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006514:	4618      	mov	r0, r3
 8006516:	3738      	adds	r7, #56	; 0x38
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <vQueueDelete+0x28>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	60bb      	str	r3, [r7, #8]
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f95f 	bl	8006808 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f002 f9f3 	bl	8008940 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006562:	b480      	push	{r7}
 8006564:	b085      	sub	sp, #20
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	2b00      	cmp	r3, #0
 8006570:	d006      	beq.n	8006580 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	e001      	b.n	8006584 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006584:	68fb      	ldr	r3, [r7, #12]
	}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b086      	sub	sp, #24
 8006596:	af00      	add	r7, sp, #0
 8006598:	60f8      	str	r0, [r7, #12]
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10d      	bne.n	80065cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d14d      	bne.n	8006654 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 f9c9 	bl	8007954 <xTaskPriorityDisinherit>
 80065c2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	609a      	str	r2, [r3, #8]
 80065ca:	e043      	b.n	8006654 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d119      	bne.n	8006606 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6858      	ldr	r0, [r3, #4]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	461a      	mov	r2, r3
 80065dc:	68b9      	ldr	r1, [r7, #8]
 80065de:	f002 fafb 	bl	8008bd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	441a      	add	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d32b      	bcc.n	8006654 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	605a      	str	r2, [r3, #4]
 8006604:	e026      	b.n	8006654 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68d8      	ldr	r0, [r3, #12]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	461a      	mov	r2, r3
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	f002 fae1 	bl	8008bd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	425b      	negs	r3, r3
 8006620:	441a      	add	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d207      	bcs.n	8006642 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	425b      	negs	r3, r3
 800663c:	441a      	add	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b02      	cmp	r3, #2
 8006646:	d105      	bne.n	8006654 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	3b01      	subs	r3, #1
 8006652:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800665c:	697b      	ldr	r3, [r7, #20]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d018      	beq.n	80066aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	441a      	add	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d303      	bcc.n	800669a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68d9      	ldr	r1, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	461a      	mov	r2, r3
 80066a4:	6838      	ldr	r0, [r7, #0]
 80066a6:	f002 fa97 	bl	8008bd8 <memcpy>
	}
}
 80066aa:	bf00      	nop
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066ba:	f001 ff53 	bl	8008564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066c6:	e011      	b.n	80066ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d012      	beq.n	80066f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3324      	adds	r3, #36	; 0x24
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fe97 	bl	8007408 <xTaskRemoveFromEventList>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066e0:	f000 ffd0 	bl	8007684 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	dce9      	bgt.n	80066c8 <prvUnlockQueue+0x16>
 80066f4:	e000      	b.n	80066f8 <prvUnlockQueue+0x46>
					break;
 80066f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	22ff      	movs	r2, #255	; 0xff
 80066fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006700:	f001 ff60 	bl	80085c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006704:	f001 ff2e 	bl	8008564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800670e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006710:	e011      	b.n	8006736 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d012      	beq.n	8006740 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3310      	adds	r3, #16
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fe72 	bl	8007408 <xTaskRemoveFromEventList>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800672a:	f000 ffab 	bl	8007684 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	3b01      	subs	r3, #1
 8006732:	b2db      	uxtb	r3, r3
 8006734:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800673a:	2b00      	cmp	r3, #0
 800673c:	dce9      	bgt.n	8006712 <prvUnlockQueue+0x60>
 800673e:	e000      	b.n	8006742 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006740:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	22ff      	movs	r2, #255	; 0xff
 8006746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800674a:	f001 ff3b 	bl	80085c4 <vPortExitCritical>
}
 800674e:	bf00      	nop
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800675e:	f001 ff01 	bl	8008564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006766:	2b00      	cmp	r3, #0
 8006768:	d102      	bne.n	8006770 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800676a:	2301      	movs	r3, #1
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	e001      	b.n	8006774 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006774:	f001 ff26 	bl	80085c4 <vPortExitCritical>

	return xReturn;
 8006778:	68fb      	ldr	r3, [r7, #12]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800678a:	f001 feeb 	bl	8008564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006796:	429a      	cmp	r2, r3
 8006798:	d102      	bne.n	80067a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800679a:	2301      	movs	r3, #1
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	e001      	b.n	80067a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067a4:	f001 ff0e 	bl	80085c4 <vPortExitCritical>

	return xReturn;
 80067a8:	68fb      	ldr	r3, [r7, #12]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067be:	2300      	movs	r3, #0
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	e014      	b.n	80067ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067c4:	4a0f      	ldr	r2, [pc, #60]	; (8006804 <vQueueAddToRegistry+0x50>)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10b      	bne.n	80067e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067d0:	490c      	ldr	r1, [pc, #48]	; (8006804 <vQueueAddToRegistry+0x50>)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067da:	4a0a      	ldr	r2, [pc, #40]	; (8006804 <vQueueAddToRegistry+0x50>)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	4413      	add	r3, r2
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80067e6:	e006      	b.n	80067f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3301      	adds	r3, #1
 80067ec:	60fb      	str	r3, [r7, #12]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b07      	cmp	r3, #7
 80067f2:	d9e7      	bls.n	80067c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20001a54 	.word	0x20001a54

08006808 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e016      	b.n	8006844 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006816:	4a10      	ldr	r2, [pc, #64]	; (8006858 <vQueueUnregisterQueue+0x50>)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	4413      	add	r3, r2
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	429a      	cmp	r2, r3
 8006824:	d10b      	bne.n	800683e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006826:	4a0c      	ldr	r2, [pc, #48]	; (8006858 <vQueueUnregisterQueue+0x50>)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2100      	movs	r1, #0
 800682c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006830:	4a09      	ldr	r2, [pc, #36]	; (8006858 <vQueueUnregisterQueue+0x50>)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	4413      	add	r3, r2
 8006838:	2200      	movs	r2, #0
 800683a:	605a      	str	r2, [r3, #4]
				break;
 800683c:	e006      	b.n	800684c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3301      	adds	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b07      	cmp	r3, #7
 8006848:	d9e5      	bls.n	8006816 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	20001a54 	.word	0x20001a54

0800685c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800686c:	f001 fe7a 	bl	8008564 <vPortEnterCritical>
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006876:	b25b      	sxtb	r3, r3
 8006878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800687c:	d103      	bne.n	8006886 <vQueueWaitForMessageRestricted+0x2a>
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800688c:	b25b      	sxtb	r3, r3
 800688e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006892:	d103      	bne.n	800689c <vQueueWaitForMessageRestricted+0x40>
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800689c:	f001 fe92 	bl	80085c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d106      	bne.n	80068b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	3324      	adds	r3, #36	; 0x24
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fd7d 	bl	80073b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80068b6:	6978      	ldr	r0, [r7, #20]
 80068b8:	f7ff fefb 	bl	80066b2 <prvUnlockQueue>
	}
 80068bc:	bf00      	nop
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b08e      	sub	sp, #56	; 0x38
 80068c8:	af04      	add	r7, sp, #16
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	623b      	str	r3, [r7, #32]
}
 80068ea:	bf00      	nop
 80068ec:	e7fe      	b.n	80068ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <xTaskCreateStatic+0x46>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	61fb      	str	r3, [r7, #28]
}
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800690a:	235c      	movs	r3, #92	; 0x5c
 800690c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b5c      	cmp	r3, #92	; 0x5c
 8006912:	d00a      	beq.n	800692a <xTaskCreateStatic+0x66>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	61bb      	str	r3, [r7, #24]
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800692a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800692c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692e:	2b00      	cmp	r3, #0
 8006930:	d01e      	beq.n	8006970 <xTaskCreateStatic+0xac>
 8006932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01b      	beq.n	8006970 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006940:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	2202      	movs	r2, #2
 8006946:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800694a:	2300      	movs	r3, #0
 800694c:	9303      	str	r3, [sp, #12]
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	9302      	str	r3, [sp, #8]
 8006952:	f107 0314 	add.w	r3, r7, #20
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f850 	bl	8006a08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800696a:	f000 f8dd 	bl	8006b28 <prvAddNewTaskToReadyList>
 800696e:	e001      	b.n	8006974 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006970:	2300      	movs	r3, #0
 8006972:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006974:	697b      	ldr	r3, [r7, #20]
	}
 8006976:	4618      	mov	r0, r3
 8006978:	3728      	adds	r7, #40	; 0x28
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800697e:	b580      	push	{r7, lr}
 8006980:	b08c      	sub	sp, #48	; 0x30
 8006982:	af04      	add	r7, sp, #16
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	603b      	str	r3, [r7, #0]
 800698a:	4613      	mov	r3, r2
 800698c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4618      	mov	r0, r3
 8006994:	f001 ff08 	bl	80087a8 <pvPortMalloc>
 8006998:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00e      	beq.n	80069be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069a0:	205c      	movs	r0, #92	; 0x5c
 80069a2:	f001 ff01 	bl	80087a8 <pvPortMalloc>
 80069a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
 80069b4:	e005      	b.n	80069c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069b6:	6978      	ldr	r0, [r7, #20]
 80069b8:	f001 ffc2 	bl	8008940 <vPortFree>
 80069bc:	e001      	b.n	80069c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d017      	beq.n	80069f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069d0:	88fa      	ldrh	r2, [r7, #6]
 80069d2:	2300      	movs	r3, #0
 80069d4:	9303      	str	r3, [sp, #12]
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	9302      	str	r3, [sp, #8]
 80069da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 f80e 	bl	8006a08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069ec:	69f8      	ldr	r0, [r7, #28]
 80069ee:	f000 f89b 	bl	8006b28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069f2:	2301      	movs	r3, #1
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	e002      	b.n	80069fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069fe:	69bb      	ldr	r3, [r7, #24]
	}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3720      	adds	r7, #32
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	461a      	mov	r2, r3
 8006a20:	21a5      	movs	r1, #165	; 0xa5
 8006a22:	f002 f8e7 	bl	8008bf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a30:	3b01      	subs	r3, #1
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f023 0307 	bic.w	r3, r3, #7
 8006a3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	617b      	str	r3, [r7, #20]
}
 8006a5c:	bf00      	nop
 8006a5e:	e7fe      	b.n	8006a5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d01f      	beq.n	8006aa6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a66:	2300      	movs	r3, #0
 8006a68:	61fb      	str	r3, [r7, #28]
 8006a6a:	e012      	b.n	8006a92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	4413      	add	r3, r2
 8006a72:	7819      	ldrb	r1, [r3, #0]
 8006a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	3334      	adds	r3, #52	; 0x34
 8006a7c:	460a      	mov	r2, r1
 8006a7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	4413      	add	r3, r2
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d006      	beq.n	8006a9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	61fb      	str	r3, [r7, #28]
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	2b0f      	cmp	r3, #15
 8006a96:	d9e9      	bls.n	8006a6c <prvInitialiseNewTask+0x64>
 8006a98:	e000      	b.n	8006a9c <prvInitialiseNewTask+0x94>
			{
				break;
 8006a9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006aa4:	e003      	b.n	8006aae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	2b37      	cmp	r3, #55	; 0x37
 8006ab2:	d901      	bls.n	8006ab8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ab4:	2337      	movs	r3, #55	; 0x37
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006abc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ac2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	3304      	adds	r3, #4
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe fe56 	bl	8005780 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	3318      	adds	r3, #24
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fe fe51 	bl	8005780 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ae2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	2200      	movs	r2, #0
 8006af8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	68f9      	ldr	r1, [r7, #12]
 8006b06:	69b8      	ldr	r0, [r7, #24]
 8006b08:	f001 fc02 	bl	8008310 <pxPortInitialiseStack>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b1e:	bf00      	nop
 8006b20:	3720      	adds	r7, #32
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b30:	f001 fd18 	bl	8008564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b34:	4b2d      	ldr	r3, [pc, #180]	; (8006bec <prvAddNewTaskToReadyList+0xc4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	4a2c      	ldr	r2, [pc, #176]	; (8006bec <prvAddNewTaskToReadyList+0xc4>)
 8006b3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b3e:	4b2c      	ldr	r3, [pc, #176]	; (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d109      	bne.n	8006b5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b46:	4a2a      	ldr	r2, [pc, #168]	; (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b4c:	4b27      	ldr	r3, [pc, #156]	; (8006bec <prvAddNewTaskToReadyList+0xc4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d110      	bne.n	8006b76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b54:	f000 fdba 	bl	80076cc <prvInitialiseTaskLists>
 8006b58:	e00d      	b.n	8006b76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b5a:	4b26      	ldr	r3, [pc, #152]	; (8006bf4 <prvAddNewTaskToReadyList+0xcc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b62:	4b23      	ldr	r3, [pc, #140]	; (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d802      	bhi.n	8006b76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b70:	4a1f      	ldr	r2, [pc, #124]	; (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b76:	4b20      	ldr	r3, [pc, #128]	; (8006bf8 <prvAddNewTaskToReadyList+0xd0>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	4a1e      	ldr	r2, [pc, #120]	; (8006bf8 <prvAddNewTaskToReadyList+0xd0>)
 8006b7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b80:	4b1d      	ldr	r3, [pc, #116]	; (8006bf8 <prvAddNewTaskToReadyList+0xd0>)
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	; (8006bfc <prvAddNewTaskToReadyList+0xd4>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d903      	bls.n	8006b9c <prvAddNewTaskToReadyList+0x74>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	4a18      	ldr	r2, [pc, #96]	; (8006bfc <prvAddNewTaskToReadyList+0xd4>)
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4a15      	ldr	r2, [pc, #84]	; (8006c00 <prvAddNewTaskToReadyList+0xd8>)
 8006baa:	441a      	add	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3304      	adds	r3, #4
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	f7fe fdf1 	bl	800579a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bb8:	f001 fd04 	bl	80085c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	; (8006bf4 <prvAddNewTaskToReadyList+0xcc>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00e      	beq.n	8006be2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d207      	bcs.n	8006be2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bd2:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <prvAddNewTaskToReadyList+0xdc>)
 8006bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006be2:	bf00      	nop
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000c20 	.word	0x20000c20
 8006bf0:	2000074c 	.word	0x2000074c
 8006bf4:	20000c2c 	.word	0x20000c2c
 8006bf8:	20000c3c 	.word	0x20000c3c
 8006bfc:	20000c28 	.word	0x20000c28
 8006c00:	20000750 	.word	0x20000750
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d017      	beq.n	8006c4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c1a:	4b13      	ldr	r3, [pc, #76]	; (8006c68 <vTaskDelay+0x60>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <vTaskDelay+0x30>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	60bb      	str	r3, [r7, #8]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c38:	f000 f986 	bl	8006f48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 ffa4 	bl	8007b8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c44:	f000 f98e 	bl	8006f64 <xTaskResumeAll>
 8006c48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d107      	bne.n	8006c60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c50:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <vTaskDelay+0x64>)
 8006c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c60:	bf00      	nop
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20000c48 	.word	0x20000c48
 8006c6c:	e000ed04 	.word	0xe000ed04

08006c70 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006c78:	f001 fc74 	bl	8008564 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d102      	bne.n	8006c88 <vTaskSuspend+0x18>
 8006c82:	4b30      	ldr	r3, [pc, #192]	; (8006d44 <vTaskSuspend+0xd4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	e000      	b.n	8006c8a <vTaskSuspend+0x1a>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fe fddf 	bl	8005854 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3318      	adds	r3, #24
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fe fdd6 	bl	8005854 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3304      	adds	r3, #4
 8006cac:	4619      	mov	r1, r3
 8006cae:	4826      	ldr	r0, [pc, #152]	; (8006d48 <vTaskSuspend+0xd8>)
 8006cb0:	f7fe fd73 	bl	800579a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d103      	bne.n	8006cc8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006cc8:	f001 fc7c 	bl	80085c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006ccc:	4b1f      	ldr	r3, [pc, #124]	; (8006d4c <vTaskSuspend+0xdc>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d005      	beq.n	8006ce0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006cd4:	f001 fc46 	bl	8008564 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006cd8:	f000 fd96 	bl	8007808 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006cdc:	f001 fc72 	bl	80085c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006ce0:	4b18      	ldr	r3, [pc, #96]	; (8006d44 <vTaskSuspend+0xd4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d127      	bne.n	8006d3a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8006cea:	4b18      	ldr	r3, [pc, #96]	; (8006d4c <vTaskSuspend+0xdc>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d017      	beq.n	8006d22 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006cf2:	4b17      	ldr	r3, [pc, #92]	; (8006d50 <vTaskSuspend+0xe0>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <vTaskSuspend+0xa0>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	60bb      	str	r3, [r7, #8]
}
 8006d0c:	bf00      	nop
 8006d0e:	e7fe      	b.n	8006d0e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8006d10:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <vTaskSuspend+0xe4>)
 8006d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d20:	e00b      	b.n	8006d3a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006d22:	4b09      	ldr	r3, [pc, #36]	; (8006d48 <vTaskSuspend+0xd8>)
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <vTaskSuspend+0xe8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d103      	bne.n	8006d36 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <vTaskSuspend+0xd4>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]
	}
 8006d34:	e001      	b.n	8006d3a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8006d36:	f000 fa7d 	bl	8007234 <vTaskSwitchContext>
	}
 8006d3a:	bf00      	nop
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	2000074c 	.word	0x2000074c
 8006d48:	20000c0c 	.word	0x20000c0c
 8006d4c:	20000c2c 	.word	0x20000c2c
 8006d50:	20000c48 	.word	0x20000c48
 8006d54:	e000ed04 	.word	0xe000ed04
 8006d58:	20000c20 	.word	0x20000c20

08006d5c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006d64:	2300      	movs	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10a      	bne.n	8006d88 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	60fb      	str	r3, [r7, #12]
}
 8006d84:	bf00      	nop
 8006d86:	e7fe      	b.n	8006d86 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	4a0a      	ldr	r2, [pc, #40]	; (8006db8 <prvTaskIsTaskSuspended+0x5c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d10a      	bne.n	8006da8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d96:	4a09      	ldr	r2, [pc, #36]	; (8006dbc <prvTaskIsTaskSuspended+0x60>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d005      	beq.n	8006da8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8006da4:	2301      	movs	r3, #1
 8006da6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006da8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006daa:	4618      	mov	r0, r3
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	20000c0c 	.word	0x20000c0c
 8006dbc:	20000be0 	.word	0x20000be0

08006dc0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10a      	bne.n	8006de8 <vTaskResume+0x28>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	60bb      	str	r3, [r7, #8]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006de8:	4b20      	ldr	r3, [pc, #128]	; (8006e6c <vTaskResume+0xac>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d038      	beq.n	8006e64 <vTaskResume+0xa4>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d035      	beq.n	8006e64 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8006df8:	f001 fbb4 	bl	8008564 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff ffad 	bl	8006d5c <prvTaskIsTaskSuspended>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d02b      	beq.n	8006e60 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fe fd21 	bl	8005854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e16:	4b16      	ldr	r3, [pc, #88]	; (8006e70 <vTaskResume+0xb0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d903      	bls.n	8006e26 <vTaskResume+0x66>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e22:	4a13      	ldr	r2, [pc, #76]	; (8006e70 <vTaskResume+0xb0>)
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4a10      	ldr	r2, [pc, #64]	; (8006e74 <vTaskResume+0xb4>)
 8006e34:	441a      	add	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	f7fe fcac 	bl	800579a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e46:	4b09      	ldr	r3, [pc, #36]	; (8006e6c <vTaskResume+0xac>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d307      	bcc.n	8006e60 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <vTaskResume+0xb8>)
 8006e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006e60:	f001 fbb0 	bl	80085c4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	2000074c 	.word	0x2000074c
 8006e70:	20000c28 	.word	0x20000c28
 8006e74:	20000750 	.word	0x20000750
 8006e78:	e000ed04 	.word	0xe000ed04

08006e7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08a      	sub	sp, #40	; 0x28
 8006e80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e8a:	463a      	mov	r2, r7
 8006e8c:	1d39      	adds	r1, r7, #4
 8006e8e:	f107 0308 	add.w	r3, r7, #8
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe f9b4 	bl	8005200 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	9202      	str	r2, [sp, #8]
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	460a      	mov	r2, r1
 8006eaa:	4921      	ldr	r1, [pc, #132]	; (8006f30 <vTaskStartScheduler+0xb4>)
 8006eac:	4821      	ldr	r0, [pc, #132]	; (8006f34 <vTaskStartScheduler+0xb8>)
 8006eae:	f7ff fd09 	bl	80068c4 <xTaskCreateStatic>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	4a20      	ldr	r2, [pc, #128]	; (8006f38 <vTaskStartScheduler+0xbc>)
 8006eb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006eb8:	4b1f      	ldr	r3, [pc, #124]	; (8006f38 <vTaskStartScheduler+0xbc>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	617b      	str	r3, [r7, #20]
 8006ec4:	e001      	b.n	8006eca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d102      	bne.n	8006ed6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ed0:	f000 feb0 	bl	8007c34 <xTimerCreateTimerTask>
 8006ed4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d116      	bne.n	8006f0a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	613b      	str	r3, [r7, #16]
}
 8006eee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ef0:	4b12      	ldr	r3, [pc, #72]	; (8006f3c <vTaskStartScheduler+0xc0>)
 8006ef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ef6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ef8:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <vTaskStartScheduler+0xc4>)
 8006efa:	2201      	movs	r2, #1
 8006efc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006efe:	4b11      	ldr	r3, [pc, #68]	; (8006f44 <vTaskStartScheduler+0xc8>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f04:	f001 fa8c 	bl	8008420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f08:	e00e      	b.n	8006f28 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f10:	d10a      	bne.n	8006f28 <vTaskStartScheduler+0xac>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	60fb      	str	r3, [r7, #12]
}
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <vTaskStartScheduler+0xaa>
}
 8006f28:	bf00      	nop
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	08008f58 	.word	0x08008f58
 8006f34:	0800769d 	.word	0x0800769d
 8006f38:	20000c44 	.word	0x20000c44
 8006f3c:	20000c40 	.word	0x20000c40
 8006f40:	20000c2c 	.word	0x20000c2c
 8006f44:	20000c24 	.word	0x20000c24

08006f48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f4c:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <vTaskSuspendAll+0x18>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3301      	adds	r3, #1
 8006f52:	4a03      	ldr	r2, [pc, #12]	; (8006f60 <vTaskSuspendAll+0x18>)
 8006f54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f56:	bf00      	nop
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	20000c48 	.word	0x20000c48

08006f64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f72:	4b42      	ldr	r3, [pc, #264]	; (800707c <xTaskResumeAll+0x118>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	603b      	str	r3, [r7, #0]
}
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f90:	f001 fae8 	bl	8008564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f94:	4b39      	ldr	r3, [pc, #228]	; (800707c <xTaskResumeAll+0x118>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	4a38      	ldr	r2, [pc, #224]	; (800707c <xTaskResumeAll+0x118>)
 8006f9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f9e:	4b37      	ldr	r3, [pc, #220]	; (800707c <xTaskResumeAll+0x118>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d162      	bne.n	800706c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fa6:	4b36      	ldr	r3, [pc, #216]	; (8007080 <xTaskResumeAll+0x11c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d05e      	beq.n	800706c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fae:	e02f      	b.n	8007010 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb0:	4b34      	ldr	r3, [pc, #208]	; (8007084 <xTaskResumeAll+0x120>)
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3318      	adds	r3, #24
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe fc49 	bl	8005854 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe fc44 	bl	8005854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd0:	4b2d      	ldr	r3, [pc, #180]	; (8007088 <xTaskResumeAll+0x124>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d903      	bls.n	8006fe0 <xTaskResumeAll+0x7c>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	4a2a      	ldr	r2, [pc, #168]	; (8007088 <xTaskResumeAll+0x124>)
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4a27      	ldr	r2, [pc, #156]	; (800708c <xTaskResumeAll+0x128>)
 8006fee:	441a      	add	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f7fe fbcf 	bl	800579a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007000:	4b23      	ldr	r3, [pc, #140]	; (8007090 <xTaskResumeAll+0x12c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	429a      	cmp	r2, r3
 8007008:	d302      	bcc.n	8007010 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800700a:	4b22      	ldr	r3, [pc, #136]	; (8007094 <xTaskResumeAll+0x130>)
 800700c:	2201      	movs	r2, #1
 800700e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007010:	4b1c      	ldr	r3, [pc, #112]	; (8007084 <xTaskResumeAll+0x120>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1cb      	bne.n	8006fb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800701e:	f000 fbf3 	bl	8007808 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007022:	4b1d      	ldr	r3, [pc, #116]	; (8007098 <xTaskResumeAll+0x134>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d010      	beq.n	8007050 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800702e:	f000 f847 	bl	80070c0 <xTaskIncrementTick>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007038:	4b16      	ldr	r3, [pc, #88]	; (8007094 <xTaskResumeAll+0x130>)
 800703a:	2201      	movs	r2, #1
 800703c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3b01      	subs	r3, #1
 8007042:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1f1      	bne.n	800702e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800704a:	4b13      	ldr	r3, [pc, #76]	; (8007098 <xTaskResumeAll+0x134>)
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007050:	4b10      	ldr	r3, [pc, #64]	; (8007094 <xTaskResumeAll+0x130>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007058:	2301      	movs	r3, #1
 800705a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800705c:	4b0f      	ldr	r3, [pc, #60]	; (800709c <xTaskResumeAll+0x138>)
 800705e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800706c:	f001 faaa 	bl	80085c4 <vPortExitCritical>

	return xAlreadyYielded;
 8007070:	68bb      	ldr	r3, [r7, #8]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20000c48 	.word	0x20000c48
 8007080:	20000c20 	.word	0x20000c20
 8007084:	20000be0 	.word	0x20000be0
 8007088:	20000c28 	.word	0x20000c28
 800708c:	20000750 	.word	0x20000750
 8007090:	2000074c 	.word	0x2000074c
 8007094:	20000c34 	.word	0x20000c34
 8007098:	20000c30 	.word	0x20000c30
 800709c:	e000ed04 	.word	0xe000ed04

080070a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070a6:	4b05      	ldr	r3, [pc, #20]	; (80070bc <xTaskGetTickCount+0x1c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070ac:	687b      	ldr	r3, [r7, #4]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	20000c24 	.word	0x20000c24

080070c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ca:	4b4f      	ldr	r3, [pc, #316]	; (8007208 <xTaskIncrementTick+0x148>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f040 808f 	bne.w	80071f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070d4:	4b4d      	ldr	r3, [pc, #308]	; (800720c <xTaskIncrementTick+0x14c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3301      	adds	r3, #1
 80070da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070dc:	4a4b      	ldr	r2, [pc, #300]	; (800720c <xTaskIncrementTick+0x14c>)
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d120      	bne.n	800712a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80070e8:	4b49      	ldr	r3, [pc, #292]	; (8007210 <xTaskIncrementTick+0x150>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <xTaskIncrementTick+0x48>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	603b      	str	r3, [r7, #0]
}
 8007104:	bf00      	nop
 8007106:	e7fe      	b.n	8007106 <xTaskIncrementTick+0x46>
 8007108:	4b41      	ldr	r3, [pc, #260]	; (8007210 <xTaskIncrementTick+0x150>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	4b41      	ldr	r3, [pc, #260]	; (8007214 <xTaskIncrementTick+0x154>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a3f      	ldr	r2, [pc, #252]	; (8007210 <xTaskIncrementTick+0x150>)
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	4a3f      	ldr	r2, [pc, #252]	; (8007214 <xTaskIncrementTick+0x154>)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6013      	str	r3, [r2, #0]
 800711c:	4b3e      	ldr	r3, [pc, #248]	; (8007218 <xTaskIncrementTick+0x158>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3301      	adds	r3, #1
 8007122:	4a3d      	ldr	r2, [pc, #244]	; (8007218 <xTaskIncrementTick+0x158>)
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	f000 fb6f 	bl	8007808 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800712a:	4b3c      	ldr	r3, [pc, #240]	; (800721c <xTaskIncrementTick+0x15c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	429a      	cmp	r2, r3
 8007132:	d349      	bcc.n	80071c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007134:	4b36      	ldr	r3, [pc, #216]	; (8007210 <xTaskIncrementTick+0x150>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d104      	bne.n	8007148 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800713e:	4b37      	ldr	r3, [pc, #220]	; (800721c <xTaskIncrementTick+0x15c>)
 8007140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007144:	601a      	str	r2, [r3, #0]
					break;
 8007146:	e03f      	b.n	80071c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007148:	4b31      	ldr	r3, [pc, #196]	; (8007210 <xTaskIncrementTick+0x150>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	429a      	cmp	r2, r3
 800715e:	d203      	bcs.n	8007168 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007160:	4a2e      	ldr	r2, [pc, #184]	; (800721c <xTaskIncrementTick+0x15c>)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007166:	e02f      	b.n	80071c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	3304      	adds	r3, #4
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe fb71 	bl	8005854 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007176:	2b00      	cmp	r3, #0
 8007178:	d004      	beq.n	8007184 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	3318      	adds	r3, #24
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fb68 	bl	8005854 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007188:	4b25      	ldr	r3, [pc, #148]	; (8007220 <xTaskIncrementTick+0x160>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	429a      	cmp	r2, r3
 800718e:	d903      	bls.n	8007198 <xTaskIncrementTick+0xd8>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	4a22      	ldr	r2, [pc, #136]	; (8007220 <xTaskIncrementTick+0x160>)
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719c:	4613      	mov	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4a1f      	ldr	r2, [pc, #124]	; (8007224 <xTaskIncrementTick+0x164>)
 80071a6:	441a      	add	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	3304      	adds	r3, #4
 80071ac:	4619      	mov	r1, r3
 80071ae:	4610      	mov	r0, r2
 80071b0:	f7fe faf3 	bl	800579a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b8:	4b1b      	ldr	r3, [pc, #108]	; (8007228 <xTaskIncrementTick+0x168>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071be:	429a      	cmp	r2, r3
 80071c0:	d3b8      	bcc.n	8007134 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80071c2:	2301      	movs	r3, #1
 80071c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071c6:	e7b5      	b.n	8007134 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071c8:	4b17      	ldr	r3, [pc, #92]	; (8007228 <xTaskIncrementTick+0x168>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ce:	4915      	ldr	r1, [pc, #84]	; (8007224 <xTaskIncrementTick+0x164>)
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	440b      	add	r3, r1
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d901      	bls.n	80071e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80071e0:	2301      	movs	r3, #1
 80071e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80071e4:	4b11      	ldr	r3, [pc, #68]	; (800722c <xTaskIncrementTick+0x16c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80071ec:	2301      	movs	r3, #1
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	e004      	b.n	80071fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80071f2:	4b0f      	ldr	r3, [pc, #60]	; (8007230 <xTaskIncrementTick+0x170>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3301      	adds	r3, #1
 80071f8:	4a0d      	ldr	r2, [pc, #52]	; (8007230 <xTaskIncrementTick+0x170>)
 80071fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80071fc:	697b      	ldr	r3, [r7, #20]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20000c48 	.word	0x20000c48
 800720c:	20000c24 	.word	0x20000c24
 8007210:	20000bd8 	.word	0x20000bd8
 8007214:	20000bdc 	.word	0x20000bdc
 8007218:	20000c38 	.word	0x20000c38
 800721c:	20000c40 	.word	0x20000c40
 8007220:	20000c28 	.word	0x20000c28
 8007224:	20000750 	.word	0x20000750
 8007228:	2000074c 	.word	0x2000074c
 800722c:	20000c34 	.word	0x20000c34
 8007230:	20000c30 	.word	0x20000c30

08007234 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800723a:	4b28      	ldr	r3, [pc, #160]	; (80072dc <vTaskSwitchContext+0xa8>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d003      	beq.n	800724a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007242:	4b27      	ldr	r3, [pc, #156]	; (80072e0 <vTaskSwitchContext+0xac>)
 8007244:	2201      	movs	r2, #1
 8007246:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007248:	e041      	b.n	80072ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800724a:	4b25      	ldr	r3, [pc, #148]	; (80072e0 <vTaskSwitchContext+0xac>)
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007250:	4b24      	ldr	r3, [pc, #144]	; (80072e4 <vTaskSwitchContext+0xb0>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	e010      	b.n	800727a <vTaskSwitchContext+0x46>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10a      	bne.n	8007274 <vTaskSwitchContext+0x40>
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	607b      	str	r3, [r7, #4]
}
 8007270:	bf00      	nop
 8007272:	e7fe      	b.n	8007272 <vTaskSwitchContext+0x3e>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3b01      	subs	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	491b      	ldr	r1, [pc, #108]	; (80072e8 <vTaskSwitchContext+0xb4>)
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	440b      	add	r3, r1
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0e4      	beq.n	8007258 <vTaskSwitchContext+0x24>
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4a13      	ldr	r2, [pc, #76]	; (80072e8 <vTaskSwitchContext+0xb4>)
 800729a:	4413      	add	r3, r2
 800729c:	60bb      	str	r3, [r7, #8]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	605a      	str	r2, [r3, #4]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	3308      	adds	r3, #8
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d104      	bne.n	80072be <vTaskSwitchContext+0x8a>
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	605a      	str	r2, [r3, #4]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	4a09      	ldr	r2, [pc, #36]	; (80072ec <vTaskSwitchContext+0xb8>)
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	4a06      	ldr	r2, [pc, #24]	; (80072e4 <vTaskSwitchContext+0xb0>)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6013      	str	r3, [r2, #0]
}
 80072ce:	bf00      	nop
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	20000c48 	.word	0x20000c48
 80072e0:	20000c34 	.word	0x20000c34
 80072e4:	20000c28 	.word	0x20000c28
 80072e8:	20000750 	.word	0x20000750
 80072ec:	2000074c 	.word	0x2000074c

080072f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	60fb      	str	r3, [r7, #12]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007316:	4b07      	ldr	r3, [pc, #28]	; (8007334 <vTaskPlaceOnEventList+0x44>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3318      	adds	r3, #24
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7fe fa5f 	bl	80057e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007324:	2101      	movs	r1, #1
 8007326:	6838      	ldr	r0, [r7, #0]
 8007328:	f000 fc30 	bl	8007b8c <prvAddCurrentTaskToDelayedList>
}
 800732c:	bf00      	nop
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	2000074c 	.word	0x2000074c

08007338 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10a      	bne.n	8007360 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	617b      	str	r3, [r7, #20]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007360:	4b11      	ldr	r3, [pc, #68]	; (80073a8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	613b      	str	r3, [r7, #16]
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800737e:	4b0b      	ldr	r3, [pc, #44]	; (80073ac <vTaskPlaceOnUnorderedEventList+0x74>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007388:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800738a:	4b08      	ldr	r3, [pc, #32]	; (80073ac <vTaskPlaceOnUnorderedEventList+0x74>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3318      	adds	r3, #24
 8007390:	4619      	mov	r1, r3
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f7fe fa01 	bl	800579a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007398:	2101      	movs	r1, #1
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fbf6 	bl	8007b8c <prvAddCurrentTaskToDelayedList>
}
 80073a0:	bf00      	nop
 80073a2:	3718      	adds	r7, #24
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	20000c48 	.word	0x20000c48
 80073ac:	2000074c 	.word	0x2000074c

080073b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	617b      	str	r3, [r7, #20]
}
 80073d4:	bf00      	nop
 80073d6:	e7fe      	b.n	80073d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073d8:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <vTaskPlaceOnEventListRestricted+0x54>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3318      	adds	r3, #24
 80073de:	4619      	mov	r1, r3
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f7fe f9da 	bl	800579a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80073ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	68b8      	ldr	r0, [r7, #8]
 80073f6:	f000 fbc9 	bl	8007b8c <prvAddCurrentTaskToDelayedList>
	}
 80073fa:	bf00      	nop
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	2000074c 	.word	0x2000074c

08007408 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10a      	bne.n	8007434 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	60fb      	str	r3, [r7, #12]
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	3318      	adds	r3, #24
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe fa0b 	bl	8005854 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800743e:	4b1e      	ldr	r3, [pc, #120]	; (80074b8 <xTaskRemoveFromEventList+0xb0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d11d      	bne.n	8007482 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	3304      	adds	r3, #4
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe fa02 	bl	8005854 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007454:	4b19      	ldr	r3, [pc, #100]	; (80074bc <xTaskRemoveFromEventList+0xb4>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d903      	bls.n	8007464 <xTaskRemoveFromEventList+0x5c>
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	4a16      	ldr	r2, [pc, #88]	; (80074bc <xTaskRemoveFromEventList+0xb4>)
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007468:	4613      	mov	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4a13      	ldr	r2, [pc, #76]	; (80074c0 <xTaskRemoveFromEventList+0xb8>)
 8007472:	441a      	add	r2, r3
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	3304      	adds	r3, #4
 8007478:	4619      	mov	r1, r3
 800747a:	4610      	mov	r0, r2
 800747c:	f7fe f98d 	bl	800579a <vListInsertEnd>
 8007480:	e005      	b.n	800748e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	3318      	adds	r3, #24
 8007486:	4619      	mov	r1, r3
 8007488:	480e      	ldr	r0, [pc, #56]	; (80074c4 <xTaskRemoveFromEventList+0xbc>)
 800748a:	f7fe f986 	bl	800579a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007492:	4b0d      	ldr	r3, [pc, #52]	; (80074c8 <xTaskRemoveFromEventList+0xc0>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	429a      	cmp	r2, r3
 800749a:	d905      	bls.n	80074a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800749c:	2301      	movs	r3, #1
 800749e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074a0:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <xTaskRemoveFromEventList+0xc4>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	e001      	b.n	80074ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80074a8:	2300      	movs	r3, #0
 80074aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074ac:	697b      	ldr	r3, [r7, #20]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20000c48 	.word	0x20000c48
 80074bc:	20000c28 	.word	0x20000c28
 80074c0:	20000750 	.word	0x20000750
 80074c4:	20000be0 	.word	0x20000be0
 80074c8:	2000074c 	.word	0x2000074c
 80074cc:	20000c34 	.word	0x20000c34

080074d0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80074da:	4b29      	ldr	r3, [pc, #164]	; (8007580 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10a      	bne.n	80074f8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	613b      	str	r3, [r7, #16]
}
 80074f4:	bf00      	nop
 80074f6:	e7fe      	b.n	80074f6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	60fb      	str	r3, [r7, #12]
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7fe f995 	bl	8005854 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	3304      	adds	r3, #4
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe f990 	bl	8005854 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007538:	4b12      	ldr	r3, [pc, #72]	; (8007584 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d903      	bls.n	8007548 <vTaskRemoveFromUnorderedEventList+0x78>
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007544:	4a0f      	ldr	r2, [pc, #60]	; (8007584 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4a0c      	ldr	r2, [pc, #48]	; (8007588 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007556:	441a      	add	r2, r3
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	3304      	adds	r3, #4
 800755c:	4619      	mov	r1, r3
 800755e:	4610      	mov	r0, r2
 8007560:	f7fe f91b 	bl	800579a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007568:	4b08      	ldr	r3, [pc, #32]	; (800758c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756e:	429a      	cmp	r2, r3
 8007570:	d902      	bls.n	8007578 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007572:	4b07      	ldr	r3, [pc, #28]	; (8007590 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007574:	2201      	movs	r2, #1
 8007576:	601a      	str	r2, [r3, #0]
	}
}
 8007578:	bf00      	nop
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	20000c48 	.word	0x20000c48
 8007584:	20000c28 	.word	0x20000c28
 8007588:	20000750 	.word	0x20000750
 800758c:	2000074c 	.word	0x2000074c
 8007590:	20000c34 	.word	0x20000c34

08007594 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800759c:	4b06      	ldr	r3, [pc, #24]	; (80075b8 <vTaskInternalSetTimeOutState+0x24>)
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075a4:	4b05      	ldr	r3, [pc, #20]	; (80075bc <vTaskInternalSetTimeOutState+0x28>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	605a      	str	r2, [r3, #4]
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	20000c38 	.word	0x20000c38
 80075bc:	20000c24 	.word	0x20000c24

080075c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	613b      	str	r3, [r7, #16]
}
 80075e2:	bf00      	nop
 80075e4:	e7fe      	b.n	80075e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10a      	bne.n	8007602 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	60fb      	str	r3, [r7, #12]
}
 80075fe:	bf00      	nop
 8007600:	e7fe      	b.n	8007600 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007602:	f000 ffaf 	bl	8008564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007606:	4b1d      	ldr	r3, [pc, #116]	; (800767c <xTaskCheckForTimeOut+0xbc>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800761e:	d102      	bne.n	8007626 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007620:	2300      	movs	r3, #0
 8007622:	61fb      	str	r3, [r7, #28]
 8007624:	e023      	b.n	800766e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	4b15      	ldr	r3, [pc, #84]	; (8007680 <xTaskCheckForTimeOut+0xc0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d007      	beq.n	8007642 <xTaskCheckForTimeOut+0x82>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	429a      	cmp	r2, r3
 800763a:	d302      	bcc.n	8007642 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800763c:	2301      	movs	r3, #1
 800763e:	61fb      	str	r3, [r7, #28]
 8007640:	e015      	b.n	800766e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	429a      	cmp	r2, r3
 800764a:	d20b      	bcs.n	8007664 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	1ad2      	subs	r2, r2, r3
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff ff9b 	bl	8007594 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800765e:	2300      	movs	r3, #0
 8007660:	61fb      	str	r3, [r7, #28]
 8007662:	e004      	b.n	800766e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2200      	movs	r2, #0
 8007668:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800766a:	2301      	movs	r3, #1
 800766c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800766e:	f000 ffa9 	bl	80085c4 <vPortExitCritical>

	return xReturn;
 8007672:	69fb      	ldr	r3, [r7, #28]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20000c24 	.word	0x20000c24
 8007680:	20000c38 	.word	0x20000c38

08007684 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007688:	4b03      	ldr	r3, [pc, #12]	; (8007698 <vTaskMissedYield+0x14>)
 800768a:	2201      	movs	r2, #1
 800768c:	601a      	str	r2, [r3, #0]
}
 800768e:	bf00      	nop
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	20000c34 	.word	0x20000c34

0800769c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076a4:	f000 f852 	bl	800774c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076a8:	4b06      	ldr	r3, [pc, #24]	; (80076c4 <prvIdleTask+0x28>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d9f9      	bls.n	80076a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076b0:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <prvIdleTask+0x2c>)
 80076b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076c0:	e7f0      	b.n	80076a4 <prvIdleTask+0x8>
 80076c2:	bf00      	nop
 80076c4:	20000750 	.word	0x20000750
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076d2:	2300      	movs	r3, #0
 80076d4:	607b      	str	r3, [r7, #4]
 80076d6:	e00c      	b.n	80076f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4a12      	ldr	r2, [pc, #72]	; (800772c <prvInitialiseTaskLists+0x60>)
 80076e4:	4413      	add	r3, r2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe f82a 	bl	8005740 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3301      	adds	r3, #1
 80076f0:	607b      	str	r3, [r7, #4]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b37      	cmp	r3, #55	; 0x37
 80076f6:	d9ef      	bls.n	80076d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076f8:	480d      	ldr	r0, [pc, #52]	; (8007730 <prvInitialiseTaskLists+0x64>)
 80076fa:	f7fe f821 	bl	8005740 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076fe:	480d      	ldr	r0, [pc, #52]	; (8007734 <prvInitialiseTaskLists+0x68>)
 8007700:	f7fe f81e 	bl	8005740 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007704:	480c      	ldr	r0, [pc, #48]	; (8007738 <prvInitialiseTaskLists+0x6c>)
 8007706:	f7fe f81b 	bl	8005740 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800770a:	480c      	ldr	r0, [pc, #48]	; (800773c <prvInitialiseTaskLists+0x70>)
 800770c:	f7fe f818 	bl	8005740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007710:	480b      	ldr	r0, [pc, #44]	; (8007740 <prvInitialiseTaskLists+0x74>)
 8007712:	f7fe f815 	bl	8005740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007716:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <prvInitialiseTaskLists+0x78>)
 8007718:	4a05      	ldr	r2, [pc, #20]	; (8007730 <prvInitialiseTaskLists+0x64>)
 800771a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800771c:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <prvInitialiseTaskLists+0x7c>)
 800771e:	4a05      	ldr	r2, [pc, #20]	; (8007734 <prvInitialiseTaskLists+0x68>)
 8007720:	601a      	str	r2, [r3, #0]
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20000750 	.word	0x20000750
 8007730:	20000bb0 	.word	0x20000bb0
 8007734:	20000bc4 	.word	0x20000bc4
 8007738:	20000be0 	.word	0x20000be0
 800773c:	20000bf4 	.word	0x20000bf4
 8007740:	20000c0c 	.word	0x20000c0c
 8007744:	20000bd8 	.word	0x20000bd8
 8007748:	20000bdc 	.word	0x20000bdc

0800774c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007752:	e019      	b.n	8007788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007754:	f000 ff06 	bl	8008564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007758:	4b10      	ldr	r3, [pc, #64]	; (800779c <prvCheckTasksWaitingTermination+0x50>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3304      	adds	r3, #4
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe f875 	bl	8005854 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800776a:	4b0d      	ldr	r3, [pc, #52]	; (80077a0 <prvCheckTasksWaitingTermination+0x54>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3b01      	subs	r3, #1
 8007770:	4a0b      	ldr	r2, [pc, #44]	; (80077a0 <prvCheckTasksWaitingTermination+0x54>)
 8007772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007774:	4b0b      	ldr	r3, [pc, #44]	; (80077a4 <prvCheckTasksWaitingTermination+0x58>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3b01      	subs	r3, #1
 800777a:	4a0a      	ldr	r2, [pc, #40]	; (80077a4 <prvCheckTasksWaitingTermination+0x58>)
 800777c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800777e:	f000 ff21 	bl	80085c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f810 	bl	80077a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007788:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <prvCheckTasksWaitingTermination+0x58>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e1      	bne.n	8007754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007790:	bf00      	nop
 8007792:	bf00      	nop
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000bf4 	.word	0x20000bf4
 80077a0:	20000c20 	.word	0x20000c20
 80077a4:	20000c08 	.word	0x20000c08

080077a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d108      	bne.n	80077cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077be:	4618      	mov	r0, r3
 80077c0:	f001 f8be 	bl	8008940 <vPortFree>
				vPortFree( pxTCB );
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 f8bb 	bl	8008940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077ca:	e018      	b.n	80077fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d103      	bne.n	80077de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 f8b2 	bl	8008940 <vPortFree>
	}
 80077dc:	e00f      	b.n	80077fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d00a      	beq.n	80077fe <prvDeleteTCB+0x56>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	60fb      	str	r3, [r7, #12]
}
 80077fa:	bf00      	nop
 80077fc:	e7fe      	b.n	80077fc <prvDeleteTCB+0x54>
	}
 80077fe:	bf00      	nop
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800780e:	4b0c      	ldr	r3, [pc, #48]	; (8007840 <prvResetNextTaskUnblockTime+0x38>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d104      	bne.n	8007822 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007818:	4b0a      	ldr	r3, [pc, #40]	; (8007844 <prvResetNextTaskUnblockTime+0x3c>)
 800781a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800781e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007820:	e008      	b.n	8007834 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007822:	4b07      	ldr	r3, [pc, #28]	; (8007840 <prvResetNextTaskUnblockTime+0x38>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	4a04      	ldr	r2, [pc, #16]	; (8007844 <prvResetNextTaskUnblockTime+0x3c>)
 8007832:	6013      	str	r3, [r2, #0]
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	20000bd8 	.word	0x20000bd8
 8007844:	20000c40 	.word	0x20000c40

08007848 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800784e:	4b0b      	ldr	r3, [pc, #44]	; (800787c <xTaskGetSchedulerState+0x34>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d102      	bne.n	800785c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007856:	2301      	movs	r3, #1
 8007858:	607b      	str	r3, [r7, #4]
 800785a:	e008      	b.n	800786e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800785c:	4b08      	ldr	r3, [pc, #32]	; (8007880 <xTaskGetSchedulerState+0x38>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d102      	bne.n	800786a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007864:	2302      	movs	r3, #2
 8007866:	607b      	str	r3, [r7, #4]
 8007868:	e001      	b.n	800786e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800786a:	2300      	movs	r3, #0
 800786c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800786e:	687b      	ldr	r3, [r7, #4]
	}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	20000c2c 	.word	0x20000c2c
 8007880:	20000c48 	.word	0x20000c48

08007884 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d051      	beq.n	800793e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789e:	4b2a      	ldr	r3, [pc, #168]	; (8007948 <xTaskPriorityInherit+0xc4>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d241      	bcs.n	800792c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	db06      	blt.n	80078be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078b0:	4b25      	ldr	r3, [pc, #148]	; (8007948 <xTaskPriorityInherit+0xc4>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6959      	ldr	r1, [r3, #20]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4a1f      	ldr	r2, [pc, #124]	; (800794c <xTaskPriorityInherit+0xc8>)
 80078d0:	4413      	add	r3, r2
 80078d2:	4299      	cmp	r1, r3
 80078d4:	d122      	bne.n	800791c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	3304      	adds	r3, #4
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fd ffba 	bl	8005854 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80078e0:	4b19      	ldr	r3, [pc, #100]	; (8007948 <xTaskPriorityInherit+0xc4>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ee:	4b18      	ldr	r3, [pc, #96]	; (8007950 <xTaskPriorityInherit+0xcc>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d903      	bls.n	80078fe <xTaskPriorityInherit+0x7a>
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	4a15      	ldr	r2, [pc, #84]	; (8007950 <xTaskPriorityInherit+0xcc>)
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4a10      	ldr	r2, [pc, #64]	; (800794c <xTaskPriorityInherit+0xc8>)
 800790c:	441a      	add	r2, r3
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	3304      	adds	r3, #4
 8007912:	4619      	mov	r1, r3
 8007914:	4610      	mov	r0, r2
 8007916:	f7fd ff40 	bl	800579a <vListInsertEnd>
 800791a:	e004      	b.n	8007926 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800791c:	4b0a      	ldr	r3, [pc, #40]	; (8007948 <xTaskPriorityInherit+0xc4>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007926:	2301      	movs	r3, #1
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	e008      	b.n	800793e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007930:	4b05      	ldr	r3, [pc, #20]	; (8007948 <xTaskPriorityInherit+0xc4>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	429a      	cmp	r2, r3
 8007938:	d201      	bcs.n	800793e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800793a:	2301      	movs	r3, #1
 800793c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800793e:	68fb      	ldr	r3, [r7, #12]
	}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	2000074c 	.word	0x2000074c
 800794c:	20000750 	.word	0x20000750
 8007950:	20000c28 	.word	0x20000c28

08007954 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d056      	beq.n	8007a18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800796a:	4b2e      	ldr	r3, [pc, #184]	; (8007a24 <xTaskPriorityDisinherit+0xd0>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	429a      	cmp	r2, r3
 8007972:	d00a      	beq.n	800798a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	60fb      	str	r3, [r7, #12]
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10a      	bne.n	80079a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	60bb      	str	r3, [r7, #8]
}
 80079a4:	bf00      	nop
 80079a6:	e7fe      	b.n	80079a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ac:	1e5a      	subs	r2, r3, #1
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d02c      	beq.n	8007a18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d128      	bne.n	8007a18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fd ff42 	bl	8005854 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e8:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <xTaskPriorityDisinherit+0xd4>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d903      	bls.n	80079f8 <xTaskPriorityDisinherit+0xa4>
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f4:	4a0c      	ldr	r2, [pc, #48]	; (8007a28 <xTaskPriorityDisinherit+0xd4>)
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fc:	4613      	mov	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4a09      	ldr	r2, [pc, #36]	; (8007a2c <xTaskPriorityDisinherit+0xd8>)
 8007a06:	441a      	add	r2, r3
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	f7fd fec3 	bl	800579a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a14:	2301      	movs	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a18:	697b      	ldr	r3, [r7, #20]
	}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	2000074c 	.word	0x2000074c
 8007a28:	20000c28 	.word	0x20000c28
 8007a2c:	20000750 	.word	0x20000750

08007a30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b088      	sub	sp, #32
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d06a      	beq.n	8007b1e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10a      	bne.n	8007a66 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	60fb      	str	r3, [r7, #12]
}
 8007a62:	bf00      	nop
 8007a64:	e7fe      	b.n	8007a64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d902      	bls.n	8007a76 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	61fb      	str	r3, [r7, #28]
 8007a74:	e002      	b.n	8007a7c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d04b      	beq.n	8007b1e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d146      	bne.n	8007b1e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007a90:	4b25      	ldr	r3, [pc, #148]	; (8007b28 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d10a      	bne.n	8007ab0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	60bb      	str	r3, [r7, #8]
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	db04      	blt.n	8007ace <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	6959      	ldr	r1, [r3, #20]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4a13      	ldr	r2, [pc, #76]	; (8007b2c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ade:	4413      	add	r3, r2
 8007ae0:	4299      	cmp	r1, r3
 8007ae2:	d11c      	bne.n	8007b1e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fd feb3 	bl	8005854 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af2:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d903      	bls.n	8007b02 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	4a0c      	ldr	r2, [pc, #48]	; (8007b30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4a07      	ldr	r2, [pc, #28]	; (8007b2c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007b10:	441a      	add	r2, r3
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	3304      	adds	r3, #4
 8007b16:	4619      	mov	r1, r3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f7fd fe3e 	bl	800579a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b1e:	bf00      	nop
 8007b20:	3720      	adds	r7, #32
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	2000074c 	.word	0x2000074c
 8007b2c:	20000750 	.word	0x20000750
 8007b30:	20000c28 	.word	0x20000c28

08007b34 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007b3a:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <uxTaskResetEventItemValue+0x2c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b42:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <uxTaskResetEventItemValue+0x2c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b48:	4b05      	ldr	r3, [pc, #20]	; (8007b60 <uxTaskResetEventItemValue+0x2c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007b50:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007b52:	687b      	ldr	r3, [r7, #4]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	2000074c 	.word	0x2000074c

08007b64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007b64:	b480      	push	{r7}
 8007b66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007b68:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d004      	beq.n	8007b7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007b70:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b76:	3201      	adds	r2, #1
 8007b78:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007b7a:	4b03      	ldr	r3, [pc, #12]	; (8007b88 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
	}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	2000074c 	.word	0x2000074c

08007b8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b96:	4b21      	ldr	r3, [pc, #132]	; (8007c1c <prvAddCurrentTaskToDelayedList+0x90>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b9c:	4b20      	ldr	r3, [pc, #128]	; (8007c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fd fe56 	bl	8005854 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bae:	d10a      	bne.n	8007bc6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d007      	beq.n	8007bc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bb6:	4b1a      	ldr	r3, [pc, #104]	; (8007c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4819      	ldr	r0, [pc, #100]	; (8007c24 <prvAddCurrentTaskToDelayedList+0x98>)
 8007bc0:	f7fd fdeb 	bl	800579a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bc4:	e026      	b.n	8007c14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4413      	add	r3, r2
 8007bcc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bce:	4b14      	ldr	r3, [pc, #80]	; (8007c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d209      	bcs.n	8007bf2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bde:	4b12      	ldr	r3, [pc, #72]	; (8007c28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	4b0f      	ldr	r3, [pc, #60]	; (8007c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7fd fdf9 	bl	80057e2 <vListInsert>
}
 8007bf0:	e010      	b.n	8007c14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bf2:	4b0e      	ldr	r3, [pc, #56]	; (8007c2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	4b0a      	ldr	r3, [pc, #40]	; (8007c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	f7fd fdef 	bl	80057e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c04:	4b0a      	ldr	r3, [pc, #40]	; (8007c30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d202      	bcs.n	8007c14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c0e:	4a08      	ldr	r2, [pc, #32]	; (8007c30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	6013      	str	r3, [r2, #0]
}
 8007c14:	bf00      	nop
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	20000c24 	.word	0x20000c24
 8007c20:	2000074c 	.word	0x2000074c
 8007c24:	20000c0c 	.word	0x20000c0c
 8007c28:	20000bdc 	.word	0x20000bdc
 8007c2c:	20000bd8 	.word	0x20000bd8
 8007c30:	20000c40 	.word	0x20000c40

08007c34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08a      	sub	sp, #40	; 0x28
 8007c38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c3e:	f000 fb07 	bl	8008250 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c42:	4b1c      	ldr	r3, [pc, #112]	; (8007cb4 <xTimerCreateTimerTask+0x80>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d021      	beq.n	8007c8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c52:	1d3a      	adds	r2, r7, #4
 8007c54:	f107 0108 	add.w	r1, r7, #8
 8007c58:	f107 030c 	add.w	r3, r7, #12
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fd fae9 	bl	8005234 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c62:	6879      	ldr	r1, [r7, #4]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	9202      	str	r2, [sp, #8]
 8007c6a:	9301      	str	r3, [sp, #4]
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	2300      	movs	r3, #0
 8007c72:	460a      	mov	r2, r1
 8007c74:	4910      	ldr	r1, [pc, #64]	; (8007cb8 <xTimerCreateTimerTask+0x84>)
 8007c76:	4811      	ldr	r0, [pc, #68]	; (8007cbc <xTimerCreateTimerTask+0x88>)
 8007c78:	f7fe fe24 	bl	80068c4 <xTaskCreateStatic>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	4a10      	ldr	r2, [pc, #64]	; (8007cc0 <xTimerCreateTimerTask+0x8c>)
 8007c80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c82:	4b0f      	ldr	r3, [pc, #60]	; (8007cc0 <xTimerCreateTimerTask+0x8c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10a      	bne.n	8007caa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	613b      	str	r3, [r7, #16]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007caa:	697b      	ldr	r3, [r7, #20]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20000c7c 	.word	0x20000c7c
 8007cb8:	08008f60 	.word	0x08008f60
 8007cbc:	08007df9 	.word	0x08007df9
 8007cc0:	20000c80 	.word	0x20000c80

08007cc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08a      	sub	sp, #40	; 0x28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	623b      	str	r3, [r7, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007cf2:	4b1a      	ldr	r3, [pc, #104]	; (8007d5c <xTimerGenericCommand+0x98>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d02a      	beq.n	8007d50 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2b05      	cmp	r3, #5
 8007d0a:	dc18      	bgt.n	8007d3e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d0c:	f7ff fd9c 	bl	8007848 <xTaskGetSchedulerState>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d109      	bne.n	8007d2a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d16:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <xTimerGenericCommand+0x98>)
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	f107 0110 	add.w	r1, r7, #16
 8007d1e:	2300      	movs	r3, #0
 8007d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d22:	f7fd ff69 	bl	8005bf8 <xQueueGenericSend>
 8007d26:	6278      	str	r0, [r7, #36]	; 0x24
 8007d28:	e012      	b.n	8007d50 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d2a:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <xTimerGenericCommand+0x98>)
 8007d2c:	6818      	ldr	r0, [r3, #0]
 8007d2e:	f107 0110 	add.w	r1, r7, #16
 8007d32:	2300      	movs	r3, #0
 8007d34:	2200      	movs	r2, #0
 8007d36:	f7fd ff5f 	bl	8005bf8 <xQueueGenericSend>
 8007d3a:	6278      	str	r0, [r7, #36]	; 0x24
 8007d3c:	e008      	b.n	8007d50 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d3e:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <xTimerGenericCommand+0x98>)
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	f107 0110 	add.w	r1, r7, #16
 8007d46:	2300      	movs	r3, #0
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	f7fe f853 	bl	8005df4 <xQueueGenericSendFromISR>
 8007d4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3728      	adds	r7, #40	; 0x28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000c7c 	.word	0x20000c7c

08007d60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af02      	add	r7, sp, #8
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d6a:	4b22      	ldr	r3, [pc, #136]	; (8007df4 <prvProcessExpiredTimer+0x94>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	3304      	adds	r3, #4
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fd fd6b 	bl	8005854 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d022      	beq.n	8007dd2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	699a      	ldr	r2, [r3, #24]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	18d1      	adds	r1, r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	6978      	ldr	r0, [r7, #20]
 8007d9a:	f000 f8d1 	bl	8007f40 <prvInsertTimerInActiveList>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01f      	beq.n	8007de4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007da4:	2300      	movs	r3, #0
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	2300      	movs	r3, #0
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	2100      	movs	r1, #0
 8007dae:	6978      	ldr	r0, [r7, #20]
 8007db0:	f7ff ff88 	bl	8007cc4 <xTimerGenericCommand>
 8007db4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d113      	bne.n	8007de4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	60fb      	str	r3, [r7, #12]
}
 8007dce:	bf00      	nop
 8007dd0:	e7fe      	b.n	8007dd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dd8:	f023 0301 	bic.w	r3, r3, #1
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	6978      	ldr	r0, [r7, #20]
 8007dea:	4798      	blx	r3
}
 8007dec:	bf00      	nop
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20000c74 	.word	0x20000c74

08007df8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e00:	f107 0308 	add.w	r3, r7, #8
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 f857 	bl	8007eb8 <prvGetNextExpireTime>
 8007e0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 f803 	bl	8007e1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e16:	f000 f8d5 	bl	8007fc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e1a:	e7f1      	b.n	8007e00 <prvTimerTask+0x8>

08007e1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e26:	f7ff f88f 	bl	8006f48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e2a:	f107 0308 	add.w	r3, r7, #8
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 f866 	bl	8007f00 <prvSampleTimeNow>
 8007e34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d130      	bne.n	8007e9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10a      	bne.n	8007e58 <prvProcessTimerOrBlockTask+0x3c>
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d806      	bhi.n	8007e58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e4a:	f7ff f88b 	bl	8006f64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e4e:	68f9      	ldr	r1, [r7, #12]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7ff ff85 	bl	8007d60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e56:	e024      	b.n	8007ea2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d008      	beq.n	8007e70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e5e:	4b13      	ldr	r3, [pc, #76]	; (8007eac <prvProcessTimerOrBlockTask+0x90>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <prvProcessTimerOrBlockTask+0x50>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e000      	b.n	8007e6e <prvProcessTimerOrBlockTask+0x52>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e70:	4b0f      	ldr	r3, [pc, #60]	; (8007eb0 <prvProcessTimerOrBlockTask+0x94>)
 8007e72:	6818      	ldr	r0, [r3, #0]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	f7fe fced 	bl	800685c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e82:	f7ff f86f 	bl	8006f64 <xTaskResumeAll>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10a      	bne.n	8007ea2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e8c:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <prvProcessTimerOrBlockTask+0x98>)
 8007e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	f3bf 8f6f 	isb	sy
}
 8007e9c:	e001      	b.n	8007ea2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e9e:	f7ff f861 	bl	8006f64 <xTaskResumeAll>
}
 8007ea2:	bf00      	nop
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000c78 	.word	0x20000c78
 8007eb0:	20000c7c 	.word	0x20000c7c
 8007eb4:	e000ed04 	.word	0xe000ed04

08007eb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ec0:	4b0e      	ldr	r3, [pc, #56]	; (8007efc <prvGetNextExpireTime+0x44>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <prvGetNextExpireTime+0x16>
 8007eca:	2201      	movs	r2, #1
 8007ecc:	e000      	b.n	8007ed0 <prvGetNextExpireTime+0x18>
 8007ece:	2200      	movs	r2, #0
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d105      	bne.n	8007ee8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007edc:	4b07      	ldr	r3, [pc, #28]	; (8007efc <prvGetNextExpireTime+0x44>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	e001      	b.n	8007eec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007eec:	68fb      	ldr	r3, [r7, #12]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20000c74 	.word	0x20000c74

08007f00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f08:	f7ff f8ca 	bl	80070a0 <xTaskGetTickCount>
 8007f0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f0e:	4b0b      	ldr	r3, [pc, #44]	; (8007f3c <prvSampleTimeNow+0x3c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d205      	bcs.n	8007f24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f18:	f000 f936 	bl	8008188 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	e002      	b.n	8007f2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f2a:	4a04      	ldr	r2, [pc, #16]	; (8007f3c <prvSampleTimeNow+0x3c>)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f30:	68fb      	ldr	r3, [r7, #12]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000c84 	.word	0x20000c84

08007f40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d812      	bhi.n	8007f8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	1ad2      	subs	r2, r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d302      	bcc.n	8007f7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f74:	2301      	movs	r3, #1
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	e01b      	b.n	8007fb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f7a:	4b10      	ldr	r3, [pc, #64]	; (8007fbc <prvInsertTimerInActiveList+0x7c>)
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3304      	adds	r3, #4
 8007f82:	4619      	mov	r1, r3
 8007f84:	4610      	mov	r0, r2
 8007f86:	f7fd fc2c 	bl	80057e2 <vListInsert>
 8007f8a:	e012      	b.n	8007fb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d206      	bcs.n	8007fa2 <prvInsertTimerInActiveList+0x62>
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d302      	bcc.n	8007fa2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	617b      	str	r3, [r7, #20]
 8007fa0:	e007      	b.n	8007fb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fa2:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <prvInsertTimerInActiveList+0x80>)
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	3304      	adds	r3, #4
 8007faa:	4619      	mov	r1, r3
 8007fac:	4610      	mov	r0, r2
 8007fae:	f7fd fc18 	bl	80057e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007fb2:	697b      	ldr	r3, [r7, #20]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	20000c78 	.word	0x20000c78
 8007fc0:	20000c74 	.word	0x20000c74

08007fc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b08e      	sub	sp, #56	; 0x38
 8007fc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fca:	e0ca      	b.n	8008162 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	da18      	bge.n	8008004 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007fd2:	1d3b      	adds	r3, r7, #4
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10a      	bne.n	8007ff4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	61fb      	str	r3, [r7, #28]
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ffa:	6850      	ldr	r0, [r2, #4]
 8007ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ffe:	6892      	ldr	r2, [r2, #8]
 8008000:	4611      	mov	r1, r2
 8008002:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	f2c0 80aa 	blt.w	8008160 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d004      	beq.n	8008022 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	3304      	adds	r3, #4
 800801c:	4618      	mov	r0, r3
 800801e:	f7fd fc19 	bl	8005854 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008022:	463b      	mov	r3, r7
 8008024:	4618      	mov	r0, r3
 8008026:	f7ff ff6b 	bl	8007f00 <prvSampleTimeNow>
 800802a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b09      	cmp	r3, #9
 8008030:	f200 8097 	bhi.w	8008162 <prvProcessReceivedCommands+0x19e>
 8008034:	a201      	add	r2, pc, #4	; (adr r2, 800803c <prvProcessReceivedCommands+0x78>)
 8008036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803a:	bf00      	nop
 800803c:	08008065 	.word	0x08008065
 8008040:	08008065 	.word	0x08008065
 8008044:	08008065 	.word	0x08008065
 8008048:	080080d9 	.word	0x080080d9
 800804c:	080080ed 	.word	0x080080ed
 8008050:	08008137 	.word	0x08008137
 8008054:	08008065 	.word	0x08008065
 8008058:	08008065 	.word	0x08008065
 800805c:	080080d9 	.word	0x080080d9
 8008060:	080080ed 	.word	0x080080ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800806a:	f043 0301 	orr.w	r3, r3, #1
 800806e:	b2da      	uxtb	r2, r3
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	18d1      	adds	r1, r2, r3
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008084:	f7ff ff5c 	bl	8007f40 <prvInsertTimerInActiveList>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d069      	beq.n	8008162 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008094:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800809c:	f003 0304 	and.w	r3, r3, #4
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d05e      	beq.n	8008162 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	441a      	add	r2, r3
 80080ac:	2300      	movs	r3, #0
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	2300      	movs	r3, #0
 80080b2:	2100      	movs	r1, #0
 80080b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080b6:	f7ff fe05 	bl	8007cc4 <xTimerGenericCommand>
 80080ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d14f      	bne.n	8008162 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	61bb      	str	r3, [r7, #24]
}
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080de:	f023 0301 	bic.w	r3, r3, #1
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80080ea:	e03a      	b.n	8008162 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080f2:	f043 0301 	orr.w	r3, r3, #1
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008102:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	617b      	str	r3, [r7, #20]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	18d1      	adds	r1, r2, r3
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800812e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008130:	f7ff ff06 	bl	8007f40 <prvInsertTimerInActiveList>
					break;
 8008134:	e015      	b.n	8008162 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d103      	bne.n	800814c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008146:	f000 fbfb 	bl	8008940 <vPortFree>
 800814a:	e00a      	b.n	8008162 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008152:	f023 0301 	bic.w	r3, r3, #1
 8008156:	b2da      	uxtb	r2, r3
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800815e:	e000      	b.n	8008162 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008160:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008162:	4b08      	ldr	r3, [pc, #32]	; (8008184 <prvProcessReceivedCommands+0x1c0>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	1d39      	adds	r1, r7, #4
 8008168:	2200      	movs	r2, #0
 800816a:	4618      	mov	r0, r3
 800816c:	f7fd ff6a 	bl	8006044 <xQueueReceive>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	f47f af2a 	bne.w	8007fcc <prvProcessReceivedCommands+0x8>
	}
}
 8008178:	bf00      	nop
 800817a:	bf00      	nop
 800817c:	3730      	adds	r7, #48	; 0x30
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20000c7c 	.word	0x20000c7c

08008188 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800818e:	e048      	b.n	8008222 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008190:	4b2d      	ldr	r3, [pc, #180]	; (8008248 <prvSwitchTimerLists+0xc0>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800819a:	4b2b      	ldr	r3, [pc, #172]	; (8008248 <prvSwitchTimerLists+0xc0>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3304      	adds	r3, #4
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fd fb53 	bl	8005854 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d02e      	beq.n	8008222 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	4413      	add	r3, r2
 80081cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d90e      	bls.n	80081f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081e2:	4b19      	ldr	r3, [pc, #100]	; (8008248 <prvSwitchTimerLists+0xc0>)
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3304      	adds	r3, #4
 80081ea:	4619      	mov	r1, r3
 80081ec:	4610      	mov	r0, r2
 80081ee:	f7fd faf8 	bl	80057e2 <vListInsert>
 80081f2:	e016      	b.n	8008222 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081f4:	2300      	movs	r3, #0
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	2300      	movs	r3, #0
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	2100      	movs	r1, #0
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f7ff fd60 	bl	8007cc4 <xTimerGenericCommand>
 8008204:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	603b      	str	r3, [r7, #0]
}
 800821e:	bf00      	nop
 8008220:	e7fe      	b.n	8008220 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008222:	4b09      	ldr	r3, [pc, #36]	; (8008248 <prvSwitchTimerLists+0xc0>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1b1      	bne.n	8008190 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800822c:	4b06      	ldr	r3, [pc, #24]	; (8008248 <prvSwitchTimerLists+0xc0>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008232:	4b06      	ldr	r3, [pc, #24]	; (800824c <prvSwitchTimerLists+0xc4>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a04      	ldr	r2, [pc, #16]	; (8008248 <prvSwitchTimerLists+0xc0>)
 8008238:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800823a:	4a04      	ldr	r2, [pc, #16]	; (800824c <prvSwitchTimerLists+0xc4>)
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	6013      	str	r3, [r2, #0]
}
 8008240:	bf00      	nop
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	20000c74 	.word	0x20000c74
 800824c:	20000c78 	.word	0x20000c78

08008250 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008256:	f000 f985 	bl	8008564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800825a:	4b15      	ldr	r3, [pc, #84]	; (80082b0 <prvCheckForValidListAndQueue+0x60>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d120      	bne.n	80082a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008262:	4814      	ldr	r0, [pc, #80]	; (80082b4 <prvCheckForValidListAndQueue+0x64>)
 8008264:	f7fd fa6c 	bl	8005740 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008268:	4813      	ldr	r0, [pc, #76]	; (80082b8 <prvCheckForValidListAndQueue+0x68>)
 800826a:	f7fd fa69 	bl	8005740 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800826e:	4b13      	ldr	r3, [pc, #76]	; (80082bc <prvCheckForValidListAndQueue+0x6c>)
 8008270:	4a10      	ldr	r2, [pc, #64]	; (80082b4 <prvCheckForValidListAndQueue+0x64>)
 8008272:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008274:	4b12      	ldr	r3, [pc, #72]	; (80082c0 <prvCheckForValidListAndQueue+0x70>)
 8008276:	4a10      	ldr	r2, [pc, #64]	; (80082b8 <prvCheckForValidListAndQueue+0x68>)
 8008278:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800827a:	2300      	movs	r3, #0
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	4b11      	ldr	r3, [pc, #68]	; (80082c4 <prvCheckForValidListAndQueue+0x74>)
 8008280:	4a11      	ldr	r2, [pc, #68]	; (80082c8 <prvCheckForValidListAndQueue+0x78>)
 8008282:	2110      	movs	r1, #16
 8008284:	200a      	movs	r0, #10
 8008286:	f7fd fb77 	bl	8005978 <xQueueGenericCreateStatic>
 800828a:	4603      	mov	r3, r0
 800828c:	4a08      	ldr	r2, [pc, #32]	; (80082b0 <prvCheckForValidListAndQueue+0x60>)
 800828e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008290:	4b07      	ldr	r3, [pc, #28]	; (80082b0 <prvCheckForValidListAndQueue+0x60>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008298:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <prvCheckForValidListAndQueue+0x60>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	490b      	ldr	r1, [pc, #44]	; (80082cc <prvCheckForValidListAndQueue+0x7c>)
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fe fa88 	bl	80067b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082a4:	f000 f98e 	bl	80085c4 <vPortExitCritical>
}
 80082a8:	bf00      	nop
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	20000c7c 	.word	0x20000c7c
 80082b4:	20000c4c 	.word	0x20000c4c
 80082b8:	20000c60 	.word	0x20000c60
 80082bc:	20000c74 	.word	0x20000c74
 80082c0:	20000c78 	.word	0x20000c78
 80082c4:	20000d28 	.word	0x20000d28
 80082c8:	20000c88 	.word	0x20000c88
 80082cc:	08008f68 	.word	0x08008f68

080082d0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08a      	sub	sp, #40	; 0x28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80082de:	f06f 0301 	mvn.w	r3, #1
 80082e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082f0:	4b06      	ldr	r3, [pc, #24]	; (800830c <xTimerPendFunctionCallFromISR+0x3c>)
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	f107 0114 	add.w	r1, r7, #20
 80082f8:	2300      	movs	r3, #0
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	f7fd fd7a 	bl	8005df4 <xQueueGenericSendFromISR>
 8008300:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008304:	4618      	mov	r0, r3
 8008306:	3728      	adds	r7, #40	; 0x28
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20000c7c 	.word	0x20000c7c

08008310 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3b04      	subs	r3, #4
 8008320:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3b04      	subs	r3, #4
 800832e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f023 0201 	bic.w	r2, r3, #1
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3b04      	subs	r3, #4
 800833e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008340:	4a0c      	ldr	r2, [pc, #48]	; (8008374 <pxPortInitialiseStack+0x64>)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3b14      	subs	r3, #20
 800834a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3b04      	subs	r3, #4
 8008356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f06f 0202 	mvn.w	r2, #2
 800835e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	3b20      	subs	r3, #32
 8008364:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008366:	68fb      	ldr	r3, [r7, #12]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	08008379 	.word	0x08008379

08008378 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008382:	4b12      	ldr	r3, [pc, #72]	; (80083cc <prvTaskExitError+0x54>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800838a:	d00a      	beq.n	80083a2 <prvTaskExitError+0x2a>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	60fb      	str	r3, [r7, #12]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <prvTaskExitError+0x28>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	60bb      	str	r3, [r7, #8]
}
 80083b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083b6:	bf00      	nop
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0fc      	beq.n	80083b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083be:	bf00      	nop
 80083c0:	bf00      	nop
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	2000000c 	.word	0x2000000c

080083d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <pxCurrentTCBConst2>)
 80083d2:	6819      	ldr	r1, [r3, #0]
 80083d4:	6808      	ldr	r0, [r1, #0]
 80083d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083da:	f380 8809 	msr	PSP, r0
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f04f 0000 	mov.w	r0, #0
 80083e6:	f380 8811 	msr	BASEPRI, r0
 80083ea:	4770      	bx	lr
 80083ec:	f3af 8000 	nop.w

080083f0 <pxCurrentTCBConst2>:
 80083f0:	2000074c 	.word	0x2000074c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop

080083f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083f8:	4808      	ldr	r0, [pc, #32]	; (800841c <prvPortStartFirstTask+0x24>)
 80083fa:	6800      	ldr	r0, [r0, #0]
 80083fc:	6800      	ldr	r0, [r0, #0]
 80083fe:	f380 8808 	msr	MSP, r0
 8008402:	f04f 0000 	mov.w	r0, #0
 8008406:	f380 8814 	msr	CONTROL, r0
 800840a:	b662      	cpsie	i
 800840c:	b661      	cpsie	f
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	df00      	svc	0
 8008418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800841a:	bf00      	nop
 800841c:	e000ed08 	.word	0xe000ed08

08008420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008426:	4b46      	ldr	r3, [pc, #280]	; (8008540 <xPortStartScheduler+0x120>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a46      	ldr	r2, [pc, #280]	; (8008544 <xPortStartScheduler+0x124>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d10a      	bne.n	8008446 <xPortStartScheduler+0x26>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	613b      	str	r3, [r7, #16]
}
 8008442:	bf00      	nop
 8008444:	e7fe      	b.n	8008444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008446:	4b3e      	ldr	r3, [pc, #248]	; (8008540 <xPortStartScheduler+0x120>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a3f      	ldr	r2, [pc, #252]	; (8008548 <xPortStartScheduler+0x128>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d10a      	bne.n	8008466 <xPortStartScheduler+0x46>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	60fb      	str	r3, [r7, #12]
}
 8008462:	bf00      	nop
 8008464:	e7fe      	b.n	8008464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008466:	4b39      	ldr	r3, [pc, #228]	; (800854c <xPortStartScheduler+0x12c>)
 8008468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	b2db      	uxtb	r3, r3
 8008470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	22ff      	movs	r2, #255	; 0xff
 8008476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008488:	b2da      	uxtb	r2, r3
 800848a:	4b31      	ldr	r3, [pc, #196]	; (8008550 <xPortStartScheduler+0x130>)
 800848c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800848e:	4b31      	ldr	r3, [pc, #196]	; (8008554 <xPortStartScheduler+0x134>)
 8008490:	2207      	movs	r2, #7
 8008492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008494:	e009      	b.n	80084aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008496:	4b2f      	ldr	r3, [pc, #188]	; (8008554 <xPortStartScheduler+0x134>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3b01      	subs	r3, #1
 800849c:	4a2d      	ldr	r2, [pc, #180]	; (8008554 <xPortStartScheduler+0x134>)
 800849e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084aa:	78fb      	ldrb	r3, [r7, #3]
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b2:	2b80      	cmp	r3, #128	; 0x80
 80084b4:	d0ef      	beq.n	8008496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084b6:	4b27      	ldr	r3, [pc, #156]	; (8008554 <xPortStartScheduler+0x134>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f1c3 0307 	rsb	r3, r3, #7
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d00a      	beq.n	80084d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	60bb      	str	r3, [r7, #8]
}
 80084d4:	bf00      	nop
 80084d6:	e7fe      	b.n	80084d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084d8:	4b1e      	ldr	r3, [pc, #120]	; (8008554 <xPortStartScheduler+0x134>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	021b      	lsls	r3, r3, #8
 80084de:	4a1d      	ldr	r2, [pc, #116]	; (8008554 <xPortStartScheduler+0x134>)
 80084e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084e2:	4b1c      	ldr	r3, [pc, #112]	; (8008554 <xPortStartScheduler+0x134>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084ea:	4a1a      	ldr	r2, [pc, #104]	; (8008554 <xPortStartScheduler+0x134>)
 80084ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084f6:	4b18      	ldr	r3, [pc, #96]	; (8008558 <xPortStartScheduler+0x138>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a17      	ldr	r2, [pc, #92]	; (8008558 <xPortStartScheduler+0x138>)
 80084fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008502:	4b15      	ldr	r3, [pc, #84]	; (8008558 <xPortStartScheduler+0x138>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a14      	ldr	r2, [pc, #80]	; (8008558 <xPortStartScheduler+0x138>)
 8008508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800850c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800850e:	f000 f8dd 	bl	80086cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008512:	4b12      	ldr	r3, [pc, #72]	; (800855c <xPortStartScheduler+0x13c>)
 8008514:	2200      	movs	r2, #0
 8008516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008518:	f000 f8fc 	bl	8008714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800851c:	4b10      	ldr	r3, [pc, #64]	; (8008560 <xPortStartScheduler+0x140>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a0f      	ldr	r2, [pc, #60]	; (8008560 <xPortStartScheduler+0x140>)
 8008522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008528:	f7ff ff66 	bl	80083f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800852c:	f7fe fe82 	bl	8007234 <vTaskSwitchContext>
	prvTaskExitError();
 8008530:	f7ff ff22 	bl	8008378 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	e000ed00 	.word	0xe000ed00
 8008544:	410fc271 	.word	0x410fc271
 8008548:	410fc270 	.word	0x410fc270
 800854c:	e000e400 	.word	0xe000e400
 8008550:	20000d78 	.word	0x20000d78
 8008554:	20000d7c 	.word	0x20000d7c
 8008558:	e000ed20 	.word	0xe000ed20
 800855c:	2000000c 	.word	0x2000000c
 8008560:	e000ef34 	.word	0xe000ef34

08008564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	607b      	str	r3, [r7, #4]
}
 800857c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800857e:	4b0f      	ldr	r3, [pc, #60]	; (80085bc <vPortEnterCritical+0x58>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3301      	adds	r3, #1
 8008584:	4a0d      	ldr	r2, [pc, #52]	; (80085bc <vPortEnterCritical+0x58>)
 8008586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008588:	4b0c      	ldr	r3, [pc, #48]	; (80085bc <vPortEnterCritical+0x58>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d10f      	bne.n	80085b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008590:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <vPortEnterCritical+0x5c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	603b      	str	r3, [r7, #0]
}
 80085ac:	bf00      	nop
 80085ae:	e7fe      	b.n	80085ae <vPortEnterCritical+0x4a>
	}
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	2000000c 	.word	0x2000000c
 80085c0:	e000ed04 	.word	0xe000ed04

080085c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085ca:	4b12      	ldr	r3, [pc, #72]	; (8008614 <vPortExitCritical+0x50>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10a      	bne.n	80085e8 <vPortExitCritical+0x24>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	607b      	str	r3, [r7, #4]
}
 80085e4:	bf00      	nop
 80085e6:	e7fe      	b.n	80085e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80085e8:	4b0a      	ldr	r3, [pc, #40]	; (8008614 <vPortExitCritical+0x50>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3b01      	subs	r3, #1
 80085ee:	4a09      	ldr	r2, [pc, #36]	; (8008614 <vPortExitCritical+0x50>)
 80085f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085f2:	4b08      	ldr	r3, [pc, #32]	; (8008614 <vPortExitCritical+0x50>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d105      	bne.n	8008606 <vPortExitCritical+0x42>
 80085fa:	2300      	movs	r3, #0
 80085fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	f383 8811 	msr	BASEPRI, r3
}
 8008604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	2000000c 	.word	0x2000000c
	...

08008620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008620:	f3ef 8009 	mrs	r0, PSP
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	4b15      	ldr	r3, [pc, #84]	; (8008680 <pxCurrentTCBConst>)
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	f01e 0f10 	tst.w	lr, #16
 8008630:	bf08      	it	eq
 8008632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863a:	6010      	str	r0, [r2, #0]
 800863c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008644:	f380 8811 	msr	BASEPRI, r0
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f7fe fdf0 	bl	8007234 <vTaskSwitchContext>
 8008654:	f04f 0000 	mov.w	r0, #0
 8008658:	f380 8811 	msr	BASEPRI, r0
 800865c:	bc09      	pop	{r0, r3}
 800865e:	6819      	ldr	r1, [r3, #0]
 8008660:	6808      	ldr	r0, [r1, #0]
 8008662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008666:	f01e 0f10 	tst.w	lr, #16
 800866a:	bf08      	it	eq
 800866c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008670:	f380 8809 	msr	PSP, r0
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	f3af 8000 	nop.w

08008680 <pxCurrentTCBConst>:
 8008680:	2000074c 	.word	0x2000074c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008684:	bf00      	nop
 8008686:	bf00      	nop

08008688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	607b      	str	r3, [r7, #4]
}
 80086a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086a2:	f7fe fd0d 	bl	80070c0 <xTaskIncrementTick>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d003      	beq.n	80086b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086ac:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <xPortSysTickHandler+0x40>)
 80086ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	2300      	movs	r3, #0
 80086b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	f383 8811 	msr	BASEPRI, r3
}
 80086be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	e000ed04 	.word	0xe000ed04

080086cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086d0:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <vPortSetupTimerInterrupt+0x34>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086d6:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <vPortSetupTimerInterrupt+0x38>)
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086dc:	4b0a      	ldr	r3, [pc, #40]	; (8008708 <vPortSetupTimerInterrupt+0x3c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a0a      	ldr	r2, [pc, #40]	; (800870c <vPortSetupTimerInterrupt+0x40>)
 80086e2:	fba2 2303 	umull	r2, r3, r2, r3
 80086e6:	099b      	lsrs	r3, r3, #6
 80086e8:	4a09      	ldr	r2, [pc, #36]	; (8008710 <vPortSetupTimerInterrupt+0x44>)
 80086ea:	3b01      	subs	r3, #1
 80086ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086ee:	4b04      	ldr	r3, [pc, #16]	; (8008700 <vPortSetupTimerInterrupt+0x34>)
 80086f0:	2207      	movs	r2, #7
 80086f2:	601a      	str	r2, [r3, #0]
}
 80086f4:	bf00      	nop
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	e000e010 	.word	0xe000e010
 8008704:	e000e018 	.word	0xe000e018
 8008708:	20000000 	.word	0x20000000
 800870c:	10624dd3 	.word	0x10624dd3
 8008710:	e000e014 	.word	0xe000e014

08008714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008724 <vPortEnableVFP+0x10>
 8008718:	6801      	ldr	r1, [r0, #0]
 800871a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800871e:	6001      	str	r1, [r0, #0]
 8008720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008722:	bf00      	nop
 8008724:	e000ed88 	.word	0xe000ed88

08008728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800872e:	f3ef 8305 	mrs	r3, IPSR
 8008732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b0f      	cmp	r3, #15
 8008738:	d914      	bls.n	8008764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800873a:	4a17      	ldr	r2, [pc, #92]	; (8008798 <vPortValidateInterruptPriority+0x70>)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4413      	add	r3, r2
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008744:	4b15      	ldr	r3, [pc, #84]	; (800879c <vPortValidateInterruptPriority+0x74>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	7afa      	ldrb	r2, [r7, #11]
 800874a:	429a      	cmp	r2, r3
 800874c:	d20a      	bcs.n	8008764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	607b      	str	r3, [r7, #4]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008764:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <vPortValidateInterruptPriority+0x78>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800876c:	4b0d      	ldr	r3, [pc, #52]	; (80087a4 <vPortValidateInterruptPriority+0x7c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	429a      	cmp	r2, r3
 8008772:	d90a      	bls.n	800878a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	603b      	str	r3, [r7, #0]
}
 8008786:	bf00      	nop
 8008788:	e7fe      	b.n	8008788 <vPortValidateInterruptPriority+0x60>
	}
 800878a:	bf00      	nop
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	e000e3f0 	.word	0xe000e3f0
 800879c:	20000d78 	.word	0x20000d78
 80087a0:	e000ed0c 	.word	0xe000ed0c
 80087a4:	20000d7c 	.word	0x20000d7c

080087a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b08a      	sub	sp, #40	; 0x28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087b0:	2300      	movs	r3, #0
 80087b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087b4:	f7fe fbc8 	bl	8006f48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087b8:	4b5b      	ldr	r3, [pc, #364]	; (8008928 <pvPortMalloc+0x180>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087c0:	f000 f920 	bl	8008a04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087c4:	4b59      	ldr	r3, [pc, #356]	; (800892c <pvPortMalloc+0x184>)
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4013      	ands	r3, r2
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f040 8093 	bne.w	80088f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01d      	beq.n	8008814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80087d8:	2208      	movs	r2, #8
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4413      	add	r3, r2
 80087de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d014      	beq.n	8008814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f023 0307 	bic.w	r3, r3, #7
 80087f0:	3308      	adds	r3, #8
 80087f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00a      	beq.n	8008814 <pvPortMalloc+0x6c>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	617b      	str	r3, [r7, #20]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d06e      	beq.n	80088f8 <pvPortMalloc+0x150>
 800881a:	4b45      	ldr	r3, [pc, #276]	; (8008930 <pvPortMalloc+0x188>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	429a      	cmp	r2, r3
 8008822:	d869      	bhi.n	80088f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008824:	4b43      	ldr	r3, [pc, #268]	; (8008934 <pvPortMalloc+0x18c>)
 8008826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008828:	4b42      	ldr	r3, [pc, #264]	; (8008934 <pvPortMalloc+0x18c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800882e:	e004      	b.n	800883a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	429a      	cmp	r2, r3
 8008842:	d903      	bls.n	800884c <pvPortMalloc+0xa4>
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1f1      	bne.n	8008830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800884c:	4b36      	ldr	r3, [pc, #216]	; (8008928 <pvPortMalloc+0x180>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008852:	429a      	cmp	r2, r3
 8008854:	d050      	beq.n	80088f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2208      	movs	r2, #8
 800885c:	4413      	add	r3, r2
 800885e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	1ad2      	subs	r2, r2, r3
 8008870:	2308      	movs	r3, #8
 8008872:	005b      	lsls	r3, r3, #1
 8008874:	429a      	cmp	r2, r3
 8008876:	d91f      	bls.n	80088b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4413      	add	r3, r2
 800887e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00a      	beq.n	80088a0 <pvPortMalloc+0xf8>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	613b      	str	r3, [r7, #16]
}
 800889c:	bf00      	nop
 800889e:	e7fe      	b.n	800889e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	1ad2      	subs	r2, r2, r3
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80088ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088b2:	69b8      	ldr	r0, [r7, #24]
 80088b4:	f000 f908 	bl	8008ac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088b8:	4b1d      	ldr	r3, [pc, #116]	; (8008930 <pvPortMalloc+0x188>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	4a1b      	ldr	r2, [pc, #108]	; (8008930 <pvPortMalloc+0x188>)
 80088c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088c6:	4b1a      	ldr	r3, [pc, #104]	; (8008930 <pvPortMalloc+0x188>)
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	4b1b      	ldr	r3, [pc, #108]	; (8008938 <pvPortMalloc+0x190>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d203      	bcs.n	80088da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088d2:	4b17      	ldr	r3, [pc, #92]	; (8008930 <pvPortMalloc+0x188>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a18      	ldr	r2, [pc, #96]	; (8008938 <pvPortMalloc+0x190>)
 80088d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	685a      	ldr	r2, [r3, #4]
 80088de:	4b13      	ldr	r3, [pc, #76]	; (800892c <pvPortMalloc+0x184>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	431a      	orrs	r2, r3
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80088ee:	4b13      	ldr	r3, [pc, #76]	; (800893c <pvPortMalloc+0x194>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3301      	adds	r3, #1
 80088f4:	4a11      	ldr	r2, [pc, #68]	; (800893c <pvPortMalloc+0x194>)
 80088f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088f8:	f7fe fb34 	bl	8006f64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	f003 0307 	and.w	r3, r3, #7
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <pvPortMalloc+0x174>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	60fb      	str	r3, [r7, #12]
}
 8008918:	bf00      	nop
 800891a:	e7fe      	b.n	800891a <pvPortMalloc+0x172>
	return pvReturn;
 800891c:	69fb      	ldr	r3, [r7, #28]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3728      	adds	r7, #40	; 0x28
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20001940 	.word	0x20001940
 800892c:	20001954 	.word	0x20001954
 8008930:	20001944 	.word	0x20001944
 8008934:	20001938 	.word	0x20001938
 8008938:	20001948 	.word	0x20001948
 800893c:	2000194c 	.word	0x2000194c

08008940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d04d      	beq.n	80089ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008952:	2308      	movs	r3, #8
 8008954:	425b      	negs	r3, r3
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	4413      	add	r3, r2
 800895a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	4b24      	ldr	r3, [pc, #144]	; (80089f8 <vPortFree+0xb8>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4013      	ands	r3, r2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10a      	bne.n	8008984 <vPortFree+0x44>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	60fb      	str	r3, [r7, #12]
}
 8008980:	bf00      	nop
 8008982:	e7fe      	b.n	8008982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00a      	beq.n	80089a2 <vPortFree+0x62>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	60bb      	str	r3, [r7, #8]
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	4b14      	ldr	r3, [pc, #80]	; (80089f8 <vPortFree+0xb8>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4013      	ands	r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01e      	beq.n	80089ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d11a      	bne.n	80089ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	4b0e      	ldr	r3, [pc, #56]	; (80089f8 <vPortFree+0xb8>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	43db      	mvns	r3, r3
 80089c2:	401a      	ands	r2, r3
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80089c8:	f7fe fabe 	bl	8006f48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	4b0a      	ldr	r3, [pc, #40]	; (80089fc <vPortFree+0xbc>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4413      	add	r3, r2
 80089d6:	4a09      	ldr	r2, [pc, #36]	; (80089fc <vPortFree+0xbc>)
 80089d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089da:	6938      	ldr	r0, [r7, #16]
 80089dc:	f000 f874 	bl	8008ac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80089e0:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <vPortFree+0xc0>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3301      	adds	r3, #1
 80089e6:	4a06      	ldr	r2, [pc, #24]	; (8008a00 <vPortFree+0xc0>)
 80089e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80089ea:	f7fe fabb 	bl	8006f64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089ee:	bf00      	nop
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	20001954 	.word	0x20001954
 80089fc:	20001944 	.word	0x20001944
 8008a00:	20001950 	.word	0x20001950

08008a04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008a0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a10:	4b27      	ldr	r3, [pc, #156]	; (8008ab0 <prvHeapInit+0xac>)
 8008a12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f003 0307 	and.w	r3, r3, #7
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00c      	beq.n	8008a38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3307      	adds	r3, #7
 8008a22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 0307 	bic.w	r3, r3, #7
 8008a2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	4a1f      	ldr	r2, [pc, #124]	; (8008ab0 <prvHeapInit+0xac>)
 8008a34:	4413      	add	r3, r2
 8008a36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a3c:	4a1d      	ldr	r2, [pc, #116]	; (8008ab4 <prvHeapInit+0xb0>)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a42:	4b1c      	ldr	r3, [pc, #112]	; (8008ab4 <prvHeapInit+0xb0>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a50:	2208      	movs	r2, #8
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	1a9b      	subs	r3, r3, r2
 8008a56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 0307 	bic.w	r3, r3, #7
 8008a5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4a15      	ldr	r2, [pc, #84]	; (8008ab8 <prvHeapInit+0xb4>)
 8008a64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a66:	4b14      	ldr	r3, [pc, #80]	; (8008ab8 <prvHeapInit+0xb4>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a6e:	4b12      	ldr	r3, [pc, #72]	; (8008ab8 <prvHeapInit+0xb4>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2200      	movs	r2, #0
 8008a74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	1ad2      	subs	r2, r2, r3
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a84:	4b0c      	ldr	r3, [pc, #48]	; (8008ab8 <prvHeapInit+0xb4>)
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	4a0a      	ldr	r2, [pc, #40]	; (8008abc <prvHeapInit+0xb8>)
 8008a92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	4a09      	ldr	r2, [pc, #36]	; (8008ac0 <prvHeapInit+0xbc>)
 8008a9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a9c:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <prvHeapInit+0xc0>)
 8008a9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008aa2:	601a      	str	r2, [r3, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	20000d80 	.word	0x20000d80
 8008ab4:	20001938 	.word	0x20001938
 8008ab8:	20001940 	.word	0x20001940
 8008abc:	20001948 	.word	0x20001948
 8008ac0:	20001944 	.word	0x20001944
 8008ac4:	20001954 	.word	0x20001954

08008ac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ad0:	4b28      	ldr	r3, [pc, #160]	; (8008b74 <prvInsertBlockIntoFreeList+0xac>)
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	e002      	b.n	8008adc <prvInsertBlockIntoFreeList+0x14>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d8f7      	bhi.n	8008ad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	4413      	add	r3, r2
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d108      	bne.n	8008b0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	441a      	add	r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	441a      	add	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d118      	bne.n	8008b50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	4b15      	ldr	r3, [pc, #84]	; (8008b78 <prvInsertBlockIntoFreeList+0xb0>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d00d      	beq.n	8008b46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	441a      	add	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	e008      	b.n	8008b58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b46:	4b0c      	ldr	r3, [pc, #48]	; (8008b78 <prvInsertBlockIntoFreeList+0xb0>)
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	e003      	b.n	8008b58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d002      	beq.n	8008b66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b66:	bf00      	nop
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	20001938 	.word	0x20001938
 8008b78:	20001940 	.word	0x20001940

08008b7c <atoi>:
 8008b7c:	220a      	movs	r2, #10
 8008b7e:	2100      	movs	r1, #0
 8008b80:	f000 b8ea 	b.w	8008d58 <strtol>

08008b84 <__errno>:
 8008b84:	4b01      	ldr	r3, [pc, #4]	; (8008b8c <__errno+0x8>)
 8008b86:	6818      	ldr	r0, [r3, #0]
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	20000010 	.word	0x20000010

08008b90 <__libc_init_array>:
 8008b90:	b570      	push	{r4, r5, r6, lr}
 8008b92:	4d0d      	ldr	r5, [pc, #52]	; (8008bc8 <__libc_init_array+0x38>)
 8008b94:	4c0d      	ldr	r4, [pc, #52]	; (8008bcc <__libc_init_array+0x3c>)
 8008b96:	1b64      	subs	r4, r4, r5
 8008b98:	10a4      	asrs	r4, r4, #2
 8008b9a:	2600      	movs	r6, #0
 8008b9c:	42a6      	cmp	r6, r4
 8008b9e:	d109      	bne.n	8008bb4 <__libc_init_array+0x24>
 8008ba0:	4d0b      	ldr	r5, [pc, #44]	; (8008bd0 <__libc_init_array+0x40>)
 8008ba2:	4c0c      	ldr	r4, [pc, #48]	; (8008bd4 <__libc_init_array+0x44>)
 8008ba4:	f000 f8e2 	bl	8008d6c <_init>
 8008ba8:	1b64      	subs	r4, r4, r5
 8008baa:	10a4      	asrs	r4, r4, #2
 8008bac:	2600      	movs	r6, #0
 8008bae:	42a6      	cmp	r6, r4
 8008bb0:	d105      	bne.n	8008bbe <__libc_init_array+0x2e>
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}
 8008bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bb8:	4798      	blx	r3
 8008bba:	3601      	adds	r6, #1
 8008bbc:	e7ee      	b.n	8008b9c <__libc_init_array+0xc>
 8008bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc2:	4798      	blx	r3
 8008bc4:	3601      	adds	r6, #1
 8008bc6:	e7f2      	b.n	8008bae <__libc_init_array+0x1e>
 8008bc8:	080091bc 	.word	0x080091bc
 8008bcc:	080091bc 	.word	0x080091bc
 8008bd0:	080091bc 	.word	0x080091bc
 8008bd4:	080091c0 	.word	0x080091c0

08008bd8 <memcpy>:
 8008bd8:	440a      	add	r2, r1
 8008bda:	4291      	cmp	r1, r2
 8008bdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008be0:	d100      	bne.n	8008be4 <memcpy+0xc>
 8008be2:	4770      	bx	lr
 8008be4:	b510      	push	{r4, lr}
 8008be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bee:	4291      	cmp	r1, r2
 8008bf0:	d1f9      	bne.n	8008be6 <memcpy+0xe>
 8008bf2:	bd10      	pop	{r4, pc}

08008bf4 <memset>:
 8008bf4:	4402      	add	r2, r0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d100      	bne.n	8008bfe <memset+0xa>
 8008bfc:	4770      	bx	lr
 8008bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8008c02:	e7f9      	b.n	8008bf8 <memset+0x4>

08008c04 <strncat>:
 8008c04:	b530      	push	{r4, r5, lr}
 8008c06:	4604      	mov	r4, r0
 8008c08:	7825      	ldrb	r5, [r4, #0]
 8008c0a:	4623      	mov	r3, r4
 8008c0c:	3401      	adds	r4, #1
 8008c0e:	2d00      	cmp	r5, #0
 8008c10:	d1fa      	bne.n	8008c08 <strncat+0x4>
 8008c12:	3a01      	subs	r2, #1
 8008c14:	d304      	bcc.n	8008c20 <strncat+0x1c>
 8008c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c1a:	f803 4b01 	strb.w	r4, [r3], #1
 8008c1e:	b904      	cbnz	r4, 8008c22 <strncat+0x1e>
 8008c20:	bd30      	pop	{r4, r5, pc}
 8008c22:	2a00      	cmp	r2, #0
 8008c24:	d1f5      	bne.n	8008c12 <strncat+0xe>
 8008c26:	701a      	strb	r2, [r3, #0]
 8008c28:	e7f3      	b.n	8008c12 <strncat+0xe>

08008c2a <strncmp>:
 8008c2a:	b510      	push	{r4, lr}
 8008c2c:	b16a      	cbz	r2, 8008c4a <strncmp+0x20>
 8008c2e:	3901      	subs	r1, #1
 8008c30:	1884      	adds	r4, r0, r2
 8008c32:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d103      	bne.n	8008c46 <strncmp+0x1c>
 8008c3e:	42a0      	cmp	r0, r4
 8008c40:	d001      	beq.n	8008c46 <strncmp+0x1c>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f5      	bne.n	8008c32 <strncmp+0x8>
 8008c46:	1a98      	subs	r0, r3, r2
 8008c48:	bd10      	pop	{r4, pc}
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	e7fc      	b.n	8008c48 <strncmp+0x1e>
	...

08008c50 <_strtol_l.isra.0>:
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c56:	d001      	beq.n	8008c5c <_strtol_l.isra.0+0xc>
 8008c58:	2b24      	cmp	r3, #36	; 0x24
 8008c5a:	d906      	bls.n	8008c6a <_strtol_l.isra.0+0x1a>
 8008c5c:	f7ff ff92 	bl	8008b84 <__errno>
 8008c60:	2316      	movs	r3, #22
 8008c62:	6003      	str	r3, [r0, #0]
 8008c64:	2000      	movs	r0, #0
 8008c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c6a:	4f3a      	ldr	r7, [pc, #232]	; (8008d54 <_strtol_l.isra.0+0x104>)
 8008c6c:	468e      	mov	lr, r1
 8008c6e:	4676      	mov	r6, lr
 8008c70:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008c74:	5de5      	ldrb	r5, [r4, r7]
 8008c76:	f015 0508 	ands.w	r5, r5, #8
 8008c7a:	d1f8      	bne.n	8008c6e <_strtol_l.isra.0+0x1e>
 8008c7c:	2c2d      	cmp	r4, #45	; 0x2d
 8008c7e:	d134      	bne.n	8008cea <_strtol_l.isra.0+0x9a>
 8008c80:	f89e 4000 	ldrb.w	r4, [lr]
 8008c84:	f04f 0801 	mov.w	r8, #1
 8008c88:	f106 0e02 	add.w	lr, r6, #2
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d05c      	beq.n	8008d4a <_strtol_l.isra.0+0xfa>
 8008c90:	2b10      	cmp	r3, #16
 8008c92:	d10c      	bne.n	8008cae <_strtol_l.isra.0+0x5e>
 8008c94:	2c30      	cmp	r4, #48	; 0x30
 8008c96:	d10a      	bne.n	8008cae <_strtol_l.isra.0+0x5e>
 8008c98:	f89e 4000 	ldrb.w	r4, [lr]
 8008c9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008ca0:	2c58      	cmp	r4, #88	; 0x58
 8008ca2:	d14d      	bne.n	8008d40 <_strtol_l.isra.0+0xf0>
 8008ca4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008ca8:	2310      	movs	r3, #16
 8008caa:	f10e 0e02 	add.w	lr, lr, #2
 8008cae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008cb2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008cb6:	2600      	movs	r6, #0
 8008cb8:	fbbc f9f3 	udiv	r9, ip, r3
 8008cbc:	4635      	mov	r5, r6
 8008cbe:	fb03 ca19 	mls	sl, r3, r9, ip
 8008cc2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008cc6:	2f09      	cmp	r7, #9
 8008cc8:	d818      	bhi.n	8008cfc <_strtol_l.isra.0+0xac>
 8008cca:	463c      	mov	r4, r7
 8008ccc:	42a3      	cmp	r3, r4
 8008cce:	dd24      	ble.n	8008d1a <_strtol_l.isra.0+0xca>
 8008cd0:	2e00      	cmp	r6, #0
 8008cd2:	db1f      	blt.n	8008d14 <_strtol_l.isra.0+0xc4>
 8008cd4:	45a9      	cmp	r9, r5
 8008cd6:	d31d      	bcc.n	8008d14 <_strtol_l.isra.0+0xc4>
 8008cd8:	d101      	bne.n	8008cde <_strtol_l.isra.0+0x8e>
 8008cda:	45a2      	cmp	sl, r4
 8008cdc:	db1a      	blt.n	8008d14 <_strtol_l.isra.0+0xc4>
 8008cde:	fb05 4503 	mla	r5, r5, r3, r4
 8008ce2:	2601      	movs	r6, #1
 8008ce4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008ce8:	e7eb      	b.n	8008cc2 <_strtol_l.isra.0+0x72>
 8008cea:	2c2b      	cmp	r4, #43	; 0x2b
 8008cec:	bf08      	it	eq
 8008cee:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008cf2:	46a8      	mov	r8, r5
 8008cf4:	bf08      	it	eq
 8008cf6:	f106 0e02 	addeq.w	lr, r6, #2
 8008cfa:	e7c7      	b.n	8008c8c <_strtol_l.isra.0+0x3c>
 8008cfc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008d00:	2f19      	cmp	r7, #25
 8008d02:	d801      	bhi.n	8008d08 <_strtol_l.isra.0+0xb8>
 8008d04:	3c37      	subs	r4, #55	; 0x37
 8008d06:	e7e1      	b.n	8008ccc <_strtol_l.isra.0+0x7c>
 8008d08:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008d0c:	2f19      	cmp	r7, #25
 8008d0e:	d804      	bhi.n	8008d1a <_strtol_l.isra.0+0xca>
 8008d10:	3c57      	subs	r4, #87	; 0x57
 8008d12:	e7db      	b.n	8008ccc <_strtol_l.isra.0+0x7c>
 8008d14:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008d18:	e7e4      	b.n	8008ce4 <_strtol_l.isra.0+0x94>
 8008d1a:	2e00      	cmp	r6, #0
 8008d1c:	da05      	bge.n	8008d2a <_strtol_l.isra.0+0xda>
 8008d1e:	2322      	movs	r3, #34	; 0x22
 8008d20:	6003      	str	r3, [r0, #0]
 8008d22:	4665      	mov	r5, ip
 8008d24:	b942      	cbnz	r2, 8008d38 <_strtol_l.isra.0+0xe8>
 8008d26:	4628      	mov	r0, r5
 8008d28:	e79d      	b.n	8008c66 <_strtol_l.isra.0+0x16>
 8008d2a:	f1b8 0f00 	cmp.w	r8, #0
 8008d2e:	d000      	beq.n	8008d32 <_strtol_l.isra.0+0xe2>
 8008d30:	426d      	negs	r5, r5
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	d0f7      	beq.n	8008d26 <_strtol_l.isra.0+0xd6>
 8008d36:	b10e      	cbz	r6, 8008d3c <_strtol_l.isra.0+0xec>
 8008d38:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008d3c:	6011      	str	r1, [r2, #0]
 8008d3e:	e7f2      	b.n	8008d26 <_strtol_l.isra.0+0xd6>
 8008d40:	2430      	movs	r4, #48	; 0x30
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1b3      	bne.n	8008cae <_strtol_l.isra.0+0x5e>
 8008d46:	2308      	movs	r3, #8
 8008d48:	e7b1      	b.n	8008cae <_strtol_l.isra.0+0x5e>
 8008d4a:	2c30      	cmp	r4, #48	; 0x30
 8008d4c:	d0a4      	beq.n	8008c98 <_strtol_l.isra.0+0x48>
 8008d4e:	230a      	movs	r3, #10
 8008d50:	e7ad      	b.n	8008cae <_strtol_l.isra.0+0x5e>
 8008d52:	bf00      	nop
 8008d54:	080090b1 	.word	0x080090b1

08008d58 <strtol>:
 8008d58:	4613      	mov	r3, r2
 8008d5a:	460a      	mov	r2, r1
 8008d5c:	4601      	mov	r1, r0
 8008d5e:	4802      	ldr	r0, [pc, #8]	; (8008d68 <strtol+0x10>)
 8008d60:	6800      	ldr	r0, [r0, #0]
 8008d62:	f7ff bf75 	b.w	8008c50 <_strtol_l.isra.0>
 8008d66:	bf00      	nop
 8008d68:	20000010 	.word	0x20000010

08008d6c <_init>:
 8008d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6e:	bf00      	nop
 8008d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d72:	bc08      	pop	{r3}
 8008d74:	469e      	mov	lr, r3
 8008d76:	4770      	bx	lr

08008d78 <_fini>:
 8008d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7a:	bf00      	nop
 8008d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d7e:	bc08      	pop	{r3}
 8008d80:	469e      	mov	lr, r3
 8008d82:	4770      	bx	lr
