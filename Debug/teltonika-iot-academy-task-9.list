
teltonika-iot-academy-task-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08008df4  08008df4  00018df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009244  08009244  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009244  08009244  00019244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800924c  0800924c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800924c  0800924c  0001924c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009250  08009250  00019250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a20  20000074  080092c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a94  080092c8  00021a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb1e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b91  00000000  00000000  0003fbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f8  00000000  00000000  00043758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a0  00000000  00000000  00044f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000426e  00000000  00000000  000465f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192c0  00000000  00000000  0004a85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdf58  00000000  00000000  00063b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00161a76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065e4  00000000  00000000  00161acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ddc 	.word	0x08008ddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008ddc 	.word	0x08008ddc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fedc 	bl	8001298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f886 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f91a 	bl	800071c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f8e8 	bl	80006bc <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004ec:	f000 f8d1 	bl	8000692 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	4927      	ldr	r1, [pc, #156]	; (8000590 <main+0xb8>)
 80004f4:	4827      	ldr	r0, [pc, #156]	; (8000594 <main+0xbc>)
 80004f6:	f003 f91f 	bl	8003738 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fa:	f004 f9ef 	bl	80048dc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UARTTxSemaphore */
  UARTTxSemaphoreHandle = osSemaphoreNew(1, 1, &UARTTxSemaphore_attributes);
 80004fe:	4a26      	ldr	r2, [pc, #152]	; (8000598 <main+0xc0>)
 8000500:	2101      	movs	r1, #1
 8000502:	2001      	movs	r0, #1
 8000504:	f004 fc5f 	bl	8004dc6 <osSemaphoreNew>
 8000508:	4603      	mov	r3, r0
 800050a:	4a24      	ldr	r2, [pc, #144]	; (800059c <main+0xc4>)
 800050c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RxQueue */
  RxQueueHandle = osMessageQueueNew (12, sizeof(uint8_t), &RxQueue_attributes);
 800050e:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <main+0xc8>)
 8000510:	2101      	movs	r1, #1
 8000512:	200c      	movs	r0, #12
 8000514:	f004 fd76 	bl	8005004 <osMessageQueueNew>
 8000518:	4603      	mov	r3, r0
 800051a:	4a22      	ldr	r2, [pc, #136]	; (80005a4 <main+0xcc>)
 800051c:	6013      	str	r3, [r2, #0]

  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (1, 13, &CommandQueue_attributes);
 800051e:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <main+0xd0>)
 8000520:	210d      	movs	r1, #13
 8000522:	2001      	movs	r0, #1
 8000524:	f004 fd6e 	bl	8005004 <osMessageQueueNew>
 8000528:	4603      	mov	r3, r0
 800052a:	4a20      	ldr	r2, [pc, #128]	; (80005ac <main+0xd4>)
 800052c:	6013      	str	r3, [r2, #0]

  /* creation of b_rateQueue */
  b_rateQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &b_rateQueue_attributes);
 800052e:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <main+0xd8>)
 8000530:	2102      	movs	r1, #2
 8000532:	2001      	movs	r0, #1
 8000534:	f004 fd66 	bl	8005004 <osMessageQueueNew>
 8000538:	4603      	mov	r3, r0
 800053a:	4a1e      	ldr	r2, [pc, #120]	; (80005b4 <main+0xdc>)
 800053c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UARTRx */
  UARTRxHandle = osThreadNew(StartUARTRx, NULL, &UARTRx_attributes);
 800053e:	4a1e      	ldr	r2, [pc, #120]	; (80005b8 <main+0xe0>)
 8000540:	2100      	movs	r1, #0
 8000542:	481e      	ldr	r0, [pc, #120]	; (80005bc <main+0xe4>)
 8000544:	f004 fa14 	bl	8004970 <osThreadNew>
 8000548:	4603      	mov	r3, r0
 800054a:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <main+0xe8>)
 800054c:	6013      	str	r3, [r2, #0]

  /* creation of TaskHandler */
  TaskHandlerHandle = osThreadNew(StartTTaskHandler, NULL, &TaskHandler_attributes);
 800054e:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <main+0xec>)
 8000550:	2100      	movs	r1, #0
 8000552:	481d      	ldr	r0, [pc, #116]	; (80005c8 <main+0xf0>)
 8000554:	f004 fa0c 	bl	8004970 <osThreadNew>
 8000558:	4603      	mov	r3, r0
 800055a:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <main+0xf4>)
 800055c:	6013      	str	r3, [r2, #0]

  /* creation of ButTask */
  ButTaskHandle = osThreadNew(StartButTask, NULL, &ButTask_attributes);
 800055e:	4a1c      	ldr	r2, [pc, #112]	; (80005d0 <main+0xf8>)
 8000560:	2100      	movs	r1, #0
 8000562:	481c      	ldr	r0, [pc, #112]	; (80005d4 <main+0xfc>)
 8000564:	f004 fa04 	bl	8004970 <osThreadNew>
 8000568:	4603      	mov	r3, r0
 800056a:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <main+0x100>)
 800056c:	6013      	str	r3, [r2, #0]

  /* creation of LedBlinkTask */
  LedBlinkTaskHandle = osThreadNew(StartLedBlinkTask, NULL, &LedBlinkTask_attributes);
 800056e:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <main+0x104>)
 8000570:	2100      	movs	r1, #0
 8000572:	481b      	ldr	r0, [pc, #108]	; (80005e0 <main+0x108>)
 8000574:	f004 f9fc 	bl	8004970 <osThreadNew>
 8000578:	4603      	mov	r3, r0
 800057a:	4a1a      	ldr	r2, [pc, #104]	; (80005e4 <main+0x10c>)
 800057c:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of ButEvents */
  ButEventsHandle = osEventFlagsNew(&ButEvents_attributes);
 800057e:	481a      	ldr	r0, [pc, #104]	; (80005e8 <main+0x110>)
 8000580:	f004 fae5 	bl	8004b4e <osEventFlagsNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a19      	ldr	r2, [pc, #100]	; (80005ec <main+0x114>)
 8000588:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800058a:	f004 f9cb 	bl	8004924 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058e:	e7fe      	b.n	800058e <main+0xb6>
 8000590:	20001a00 	.word	0x20001a00
 8000594:	20001974 	.word	0x20001974
 8000598:	080090d8 	.word	0x080090d8
 800059c:	2000196c 	.word	0x2000196c
 80005a0:	08009090 	.word	0x08009090
 80005a4:	20001958 	.word	0x20001958
 80005a8:	080090a8 	.word	0x080090a8
 80005ac:	200019f8 	.word	0x200019f8
 80005b0:	080090c0 	.word	0x080090c0
 80005b4:	20001960 	.word	0x20001960
 80005b8:	08009000 	.word	0x08009000
 80005bc:	08000889 	.word	0x08000889
 80005c0:	200019fc 	.word	0x200019fc
 80005c4:	08009024 	.word	0x08009024
 80005c8:	08000b41 	.word	0x08000b41
 80005cc:	20001968 	.word	0x20001968
 80005d0:	08009048 	.word	0x08009048
 80005d4:	08000edd 	.word	0x08000edd
 80005d8:	20001970 	.word	0x20001970
 80005dc:	0800906c 	.word	0x0800906c
 80005e0:	08000f65 	.word	0x08000f65
 80005e4:	20001964 	.word	0x20001964
 80005e8:	080090e8 	.word	0x080090e8
 80005ec:	2000195c 	.word	0x2000195c

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f008 fb30 	bl	8008c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f001 f9e3 	bl	80019e0 <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 fccc 	bl	8000fbc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2310      	movs	r3, #16
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800063e:	230a      	movs	r3, #10
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000642:	2307      	movs	r3, #7
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fa1a 	bl	8001a8c <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800065e:	f000 fcad 	bl	8000fbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	2104      	movs	r1, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fdec 	bl	8002258 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000686:	f000 fc99 	bl	8000fbc <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3758      	adds	r7, #88	; 0x58
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2105      	movs	r1, #5
 800069a:	2026      	movs	r0, #38	; 0x26
 800069c:	f000 fef4 	bl	8001488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006a0:	2026      	movs	r0, #38	; 0x26
 80006a2:	f000 ff0d 	bl	80014c0 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2105      	movs	r1, #5
 80006aa:	2028      	movs	r0, #40	; 0x28
 80006ac:	f000 feec 	bl	8001488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b0:	2028      	movs	r0, #40	; 0x28
 80006b2:	f000 ff05 	bl	80014c0 <HAL_NVIC_EnableIRQ>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006c2:	4a15      	ldr	r2, [pc, #84]	; (8000718 <MX_USART2_UART_Init+0x5c>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART2_UART_Init+0x58>)
 8000700:	f002 ff70 	bl	80035e4 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800070a:	f000 fc57 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20001974 	.word	0x20001974
 8000718:	40004400 	.word	0x40004400

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a24      	ldr	r2, [pc, #144]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f001 f8c9 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_GPIO_Init+0xc8>)
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_GPIO_Init+0xcc>)
 80007b4:	f000 ff12 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b8:	2320      	movs	r3, #32
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f000 ff03 	bl	80015dc <HAL_GPIO_Init>

}
 80007d6:	bf00      	nop
 80007d8:	3728      	adds	r7, #40	; 0x28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000
 80007e4:	10210000 	.word	0x10210000
 80007e8:	48000800 	.word	0x48000800

080007ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a09      	ldr	r2, [pc, #36]	; (8000820 <HAL_UART_RxCpltCallback+0x34>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d10b      	bne.n	8000816 <HAL_UART_RxCpltCallback+0x2a>
  {
    osMessageQueuePut(RxQueueHandle, &rx_char, 1, 0);
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_UART_RxCpltCallback+0x38>)
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	2300      	movs	r3, #0
 8000804:	2201      	movs	r2, #1
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <HAL_UART_RxCpltCallback+0x3c>)
 8000808:	f004 fc70 	bl	80050ec <osMessageQueuePut>
	HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 800080c:	2201      	movs	r2, #1
 800080e:	4906      	ldr	r1, [pc, #24]	; (8000828 <HAL_UART_RxCpltCallback+0x3c>)
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <HAL_UART_RxCpltCallback+0x40>)
 8000812:	f002 ff91 	bl	8003738 <HAL_UART_Receive_IT>

  }
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40004400 	.word	0x40004400
 8000824:	20001958 	.word	0x20001958
 8000828:	20001a00 	.word	0x20001a00
 800082c:	20001974 	.word	0x20001974

08000830 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a05      	ldr	r2, [pc, #20]	; (8000854 <HAL_UART_TxCpltCallback+0x24>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d104      	bne.n	800084c <HAL_UART_TxCpltCallback+0x1c>
	{
		osSemaphoreRelease(UARTTxSemaphoreHandle);
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_UART_TxCpltCallback+0x28>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f004 fb98 	bl	8004f7c <osSemaphoreRelease>

	}
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40004400 	.word	0x40004400
 8000858:	2000196c 	.word	0x2000196c

0800085c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 8000866:	88fb      	ldrh	r3, [r7, #6]
 8000868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800086c:	d105      	bne.n	800087a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		osEventFlagsSet(ButEventsHandle, 0x00000004U);
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_GPIO_EXTI_Callback+0x28>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2104      	movs	r1, #4
 8000874:	4618      	mov	r0, r3
 8000876:	f004 f9a9 	bl	8004bcc <osEventFlagsSet>
	}
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000195c 	.word	0x2000195c

08000888 <StartUARTRx>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTRx */
void StartUARTRx(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t temp_rx[2] = { '\0' };
 8000890:	2300      	movs	r3, #0
 8000892:	833b      	strh	r3, [r7, #24]
  char rx_msg[13] = { '\0' };
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	721a      	strb	r2, [r3, #8]
  size_t str_sp = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  osStatus_t status;
  bool send = false;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Infinite loop */
  for(;;)
  {
    status = osMessageQueueGet(RxQueueHandle, temp_rx, NULL, 2000);
 80008ae:	4b9c      	ldr	r3, [pc, #624]	; (8000b20 <StartUARTRx+0x298>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f107 0118 	add.w	r1, r7, #24
 80008b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008ba:	2200      	movs	r2, #0
 80008bc:	f004 fc76 	bl	80051ac <osMessageQueueGet>
 80008c0:	61f8      	str	r0, [r7, #28]

    if (status == osOK)
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d110      	bne.n	80008ea <StartUARTRx+0x62>
    {
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fc7f 	bl	80001d0 <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	f1c3 030c 	rsb	r3, r3, #12
 80008d8:	623b      	str	r3, [r7, #32]
    	strncat(rx_msg, (char *)temp_rx, str_sp);
 80008da:	f107 0118 	add.w	r1, r7, #24
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	6a3a      	ldr	r2, [r7, #32]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f008 f9c5 	bl	8008c74 <strncat>

    }

    str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fc6e 	bl	80001d0 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	f1c3 030c 	rsb	r3, r3, #12
 80008fa:	623b      	str	r3, [r7, #32]

    if (str_sp == 0)
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d11d      	bne.n	800093e <StartUARTRx+0xb6>
    {
    	rx_msg[strlen(rx_msg)-1] = '\r';
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc62 	bl	80001d0 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	3b01      	subs	r3, #1
 8000910:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000914:	4413      	add	r3, r2
 8000916:	220d      	movs	r2, #13
 8000918:	f803 2c20 	strb.w	r2, [r3, #-32]
    	rx_msg[strlen(rx_msg)-2] = '\n';
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fc55 	bl	80001d0 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	3b02      	subs	r3, #2
 800092a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800092e:	4413      	add	r3, r2
 8000930:	220a      	movs	r2, #10
 8000932:	f803 2c20 	strb.w	r2, [r3, #-32]
    	send = true;
 8000936:	2301      	movs	r3, #1
 8000938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800093c:	e088      	b.n	8000a50 <StartUARTRx+0x1c8>

    }

    else if (status == osErrorTimeout && strlen(rx_msg) > 0 && str_sp >= 2)
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	f113 0f02 	cmn.w	r3, #2
 8000944:	d11b      	bne.n	800097e <StartUARTRx+0xf6>
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d016      	beq.n	800097e <StartUARTRx+0xf6>
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d913      	bls.n	800097e <StartUARTRx+0xf6>
    {
    	strncat(rx_msg, "\n\r", str_sp);
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	6a3a      	ldr	r2, [r7, #32]
 800095c:	4971      	ldr	r1, [pc, #452]	; (8000b24 <StartUARTRx+0x29c>)
 800095e:	4618      	mov	r0, r3
 8000960:	f008 f988 	bl	8008c74 <strncat>
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fc31 	bl	80001d0 <strlen>
 800096e:	4603      	mov	r3, r0
 8000970:	f1c3 030c 	rsb	r3, r3, #12
 8000974:	623b      	str	r3, [r7, #32]
    	send = true;
 8000976:	2301      	movs	r3, #1
 8000978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800097c:	e068      	b.n	8000a50 <StartUARTRx+0x1c8>

    }

    else if (status == osErrorTimeout && strlen(rx_msg) > 0 && str_sp == 1)
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	f113 0f02 	cmn.w	r3, #2
 8000984:	d128      	bne.n	80009d8 <StartUARTRx+0x150>
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d023      	beq.n	80009d8 <StartUARTRx+0x150>
 8000990:	6a3b      	ldr	r3, [r7, #32]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d120      	bne.n	80009d8 <StartUARTRx+0x150>
    {
    	strncat(rx_msg, "\r", str_sp);
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	6a3a      	ldr	r2, [r7, #32]
 800099c:	4962      	ldr	r1, [pc, #392]	; (8000b28 <StartUARTRx+0x2a0>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f008 f968 	bl	8008c74 <strncat>
    	rx_msg[strlen(rx_msg)-2] = '\n';
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fc11 	bl	80001d0 <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	3b02      	subs	r3, #2
 80009b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009b6:	4413      	add	r3, r2
 80009b8:	220a      	movs	r2, #10
 80009ba:	f803 2c20 	strb.w	r2, [r3, #-32]
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fc04 	bl	80001d0 <strlen>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f1c3 030c 	rsb	r3, r3, #12
 80009ce:	623b      	str	r3, [r7, #32]
    	send = true;
 80009d0:	2301      	movs	r3, #1
 80009d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009d6:	e03b      	b.n	8000a50 <StartUARTRx+0x1c8>

    }

    else if (rx_msg[strlen(rx_msg)-1] == '\n' || rx_msg[strlen(rx_msg)-1] == '\r')
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fbf7 	bl	80001d0 <strlen>
 80009e2:	4603      	mov	r3, r0
 80009e4:	3b01      	subs	r3, #1
 80009e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009ea:	4413      	add	r3, r2
 80009ec:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80009f0:	2b0a      	cmp	r3, #10
 80009f2:	d00d      	beq.n	8000a10 <StartUARTRx+0x188>
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fbe9 	bl	80001d0 <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	3b01      	subs	r3, #1
 8000a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a06:	4413      	add	r3, r2
 8000a08:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000a0c:	2b0d      	cmp	r3, #13
 8000a0e:	d11f      	bne.n	8000a50 <StartUARTRx+0x1c8>
    {
    	rx_msg[strlen(rx_msg)-1] = '\n';
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fbdb 	bl	80001d0 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a22:	4413      	add	r3, r2
 8000a24:	220a      	movs	r2, #10
 8000a26:	f803 2c20 	strb.w	r2, [r3, #-32]
    	strncat(rx_msg, "\r", str_sp);
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	6a3a      	ldr	r2, [r7, #32]
 8000a30:	493d      	ldr	r1, [pc, #244]	; (8000b28 <StartUARTRx+0x2a0>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f008 f91e 	bl	8008c74 <strncat>
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fbc7 	bl	80001d0 <strlen>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f1c3 030c 	rsb	r3, r3, #12
 8000a48:	623b      	str	r3, [r7, #32]
    	send = true;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    }

    if (send && strlen(rx_msg) > 8)
 8000a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d037      	beq.n	8000ac8 <StartUARTRx+0x240>
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fbb7 	bl	80001d0 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b08      	cmp	r3, #8
 8000a66:	d92f      	bls.n	8000ac8 <StartUARTRx+0x240>
    {
    	osMessageQueuePut(CommandQueueHandle, rx_msg, 1, osWaitForever);
 8000a68:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <StartUARTRx+0x2a4>)
 8000a6a:	6818      	ldr	r0, [r3, #0]
 8000a6c:	f107 0108 	add.w	r1, r7, #8
 8000a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a74:	2201      	movs	r2, #1
 8000a76:	f004 fb39 	bl	80050ec <osMessageQueuePut>
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <StartUARTRx+0x2a8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a82:	4618      	mov	r0, r3
 8000a84:	f004 fa28 	bl	8004ed8 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Received command:\n\r", 19);
 8000a88:	2213      	movs	r2, #19
 8000a8a:	492a      	ldr	r1, [pc, #168]	; (8000b34 <StartUARTRx+0x2ac>)
 8000a8c:	482a      	ldr	r0, [pc, #168]	; (8000b38 <StartUARTRx+0x2b0>)
 8000a8e:	f002 fdf7 	bl	8003680 <HAL_UART_Transmit_IT>

    	str_sp = strlen(rx_msg);
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fb9a 	bl	80001d0 <strlen>
 8000a9c:	6238      	str	r0, [r7, #32]
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <StartUARTRx+0x2a8>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 fa16 	bl	8004ed8 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)rx_msg, str_sp);
 8000aac:	6a3b      	ldr	r3, [r7, #32]
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4820      	ldr	r0, [pc, #128]	; (8000b38 <StartUARTRx+0x2b0>)
 8000ab8:	f002 fde2 	bl	8003680 <HAL_UART_Transmit_IT>
    	rx_msg[0] = '\0';
 8000abc:	2300      	movs	r3, #0
 8000abe:	723b      	strb	r3, [r7, #8]
    	send = false;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ac6:	e02a      	b.n	8000b1e <StartUARTRx+0x296>

    }

    else if (send)
 8000ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	f43f aeee 	beq.w	80008ae <StartUARTRx+0x26>
    {
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <StartUARTRx+0x2a8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ada:	4618      	mov	r0, r3
 8000adc:	f004 f9fc 	bl	8004ed8 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Received command too short:\n\r", 29);
 8000ae0:	221d      	movs	r2, #29
 8000ae2:	4916      	ldr	r1, [pc, #88]	; (8000b3c <StartUARTRx+0x2b4>)
 8000ae4:	4814      	ldr	r0, [pc, #80]	; (8000b38 <StartUARTRx+0x2b0>)
 8000ae6:	f002 fdcb 	bl	8003680 <HAL_UART_Transmit_IT>
    	str_sp = strlen(rx_msg);
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fb6e 	bl	80001d0 <strlen>
 8000af4:	6238      	str	r0, [r7, #32]
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <StartUARTRx+0x2a8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000afe:	4618      	mov	r0, r3
 8000b00:	f004 f9ea 	bl	8004ed8 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)rx_msg, str_sp);
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480a      	ldr	r0, [pc, #40]	; (8000b38 <StartUARTRx+0x2b0>)
 8000b10:	f002 fdb6 	bl	8003680 <HAL_UART_Transmit_IT>
    	rx_msg[0] = '\0';
 8000b14:	2300      	movs	r3, #0
 8000b16:	723b      	strb	r3, [r7, #8]
    	send = false;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = osMessageQueueGet(RxQueueHandle, temp_rx, NULL, 2000);
 8000b1e:	e6c6      	b.n	80008ae <StartUARTRx+0x26>
 8000b20:	20001958 	.word	0x20001958
 8000b24:	08008e60 	.word	0x08008e60
 8000b28:	08008e64 	.word	0x08008e64
 8000b2c:	200019f8 	.word	0x200019f8
 8000b30:	2000196c 	.word	0x2000196c
 8000b34:	08008e68 	.word	0x08008e68
 8000b38:	20001974 	.word	0x20001974
 8000b3c:	08008e7c 	.word	0x08008e7c

08000b40 <StartTTaskHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTTaskHandler */
void StartTTaskHandler(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTTaskHandler */
  osThreadSuspend(LedBlinkTaskHandle);
 8000b48:	4bba      	ldr	r3, [pc, #744]	; (8000e34 <StartTTaskHandler+0x2f4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 ffa1 	bl	8004a94 <osThreadSuspend>

  char command[13] = { '\0' };
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	721a      	strb	r2, [r3, #8]
  bool led_b_sus = true;
 8000b62:	2301      	movs	r3, #1
 8000b64:	77fb      	strb	r3, [r7, #31]
  int temp_num;
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(CommandQueueHandle, command, NULL, osWaitForever);
 8000b66:	4bb4      	ldr	r3, [pc, #720]	; (8000e38 <StartTTaskHandler+0x2f8>)
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	f107 0110 	add.w	r1, r7, #16
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b72:	2200      	movs	r2, #0
 8000b74:	f004 fb1a 	bl	80051ac <osMessageQueueGet>

    if (!strncmp(command, "LED", 3) || !strncmp(command, "led", 3))
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	49af      	ldr	r1, [pc, #700]	; (8000e3c <StartTTaskHandler+0x2fc>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f008 f88a 	bl	8008c9a <strncmp>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00a      	beq.n	8000ba2 <StartTTaskHandler+0x62>
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	2203      	movs	r2, #3
 8000b92:	49ab      	ldr	r1, [pc, #684]	; (8000e40 <StartTTaskHandler+0x300>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f008 f880 	bl	8008c9a <strncmp>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f040 80c2 	bne.w	8000d26 <StartTTaskHandler+0x1e6>
    {

    	if (command[4] == 'b' && atoi(command+6) > 0)
 8000ba2:	7d3b      	ldrb	r3, [r7, #20]
 8000ba4:	2b62      	cmp	r3, #98	; 0x62
 8000ba6:	d176      	bne.n	8000c96 <StartTTaskHandler+0x156>
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	3306      	adds	r3, #6
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f008 f81c 	bl	8008bec <atoi>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	dd6d      	ble.n	8000c96 <StartTTaskHandler+0x156>
    	{
    		if (led_b_sus)
 8000bba:	7ffb      	ldrb	r3, [r7, #31]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d04c      	beq.n	8000c5a <StartTTaskHandler+0x11a>
    		{
    			osThreadResume(LedBlinkTaskHandle);
 8000bc0:	4b9c      	ldr	r3, [pc, #624]	; (8000e34 <StartTTaskHandler+0x2f4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 ff86 	bl	8004ad6 <osThreadResume>
    			temp_num = atoi(command+6);
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	3306      	adds	r3, #6
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f008 f80b 	bl	8008bec <atoi>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	60fb      	str	r3, [r7, #12]
    			osMessageQueuePut(b_rateQueueHandle, &temp_num, 1, osWaitForever);
 8000bda:	4b9a      	ldr	r3, [pc, #616]	; (8000e44 <StartTTaskHandler+0x304>)
 8000bdc:	6818      	ldr	r0, [r3, #0]
 8000bde:	f107 010c 	add.w	r1, r7, #12
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000be6:	2201      	movs	r2, #1
 8000be8:	f004 fa80 	bl	80050ec <osMessageQueuePut>
    			led_b_sus = !led_b_sus;
 8000bec:	7ffb      	ldrb	r3, [r7, #31]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bf14      	ite	ne
 8000bf2:	2301      	movne	r3, #1
 8000bf4:	2300      	moveq	r3, #0
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	f083 0301 	eor.w	r3, r3, #1
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	77fb      	strb	r3, [r7, #31]
 8000c00:	7ffb      	ldrb	r3, [r7, #31]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	77fb      	strb	r3, [r7, #31]
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000c08:	4b8f      	ldr	r3, [pc, #572]	; (8000e48 <StartTTaskHandler+0x308>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c10:	4618      	mov	r0, r3
 8000c12:	f004 f961 	bl	8004ed8 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task started\n\r", 27);
 8000c16:	221b      	movs	r2, #27
 8000c18:	498c      	ldr	r1, [pc, #560]	; (8000e4c <StartTTaskHandler+0x30c>)
 8000c1a:	488d      	ldr	r0, [pc, #564]	; (8000e50 <StartTTaskHandler+0x310>)
 8000c1c:	f002 fd30 	bl	8003680 <HAL_UART_Transmit_IT>
    			if (osEventFlagsGet(ButEventsHandle) & 0x00000002U)
 8000c20:	4b8c      	ldr	r3, [pc, #560]	; (8000e54 <StartTTaskHandler+0x314>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f004 f847 	bl	8004cb8 <osEventFlagsGet>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d076      	beq.n	8000d22 <StartTTaskHandler+0x1e2>
    			{
    				osEventFlagsClear(ButEventsHandle, 0x00000002U);
 8000c34:	4b87      	ldr	r3, [pc, #540]	; (8000e54 <StartTTaskHandler+0x314>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f004 f80a 	bl	8004c54 <osEventFlagsClear>
    				osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000c40:	4b81      	ldr	r3, [pc, #516]	; (8000e48 <StartTTaskHandler+0x308>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 f945 	bl	8004ed8 <osSemaphoreAcquire>
    				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED control with button turned off\n\r", 36);
 8000c4e:	2224      	movs	r2, #36	; 0x24
 8000c50:	4981      	ldr	r1, [pc, #516]	; (8000e58 <StartTTaskHandler+0x318>)
 8000c52:	487f      	ldr	r0, [pc, #508]	; (8000e50 <StartTTaskHandler+0x310>)
 8000c54:	f002 fd14 	bl	8003680 <HAL_UART_Transmit_IT>
    		if (led_b_sus)
 8000c58:	e063      	b.n	8000d22 <StartTTaskHandler+0x1e2>

    		}

    		else
    		{
    			temp_num = atoi(command+6);
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	3306      	adds	r3, #6
 8000c60:	4618      	mov	r0, r3
 8000c62:	f007 ffc3 	bl	8008bec <atoi>
 8000c66:	4603      	mov	r3, r0
 8000c68:	60fb      	str	r3, [r7, #12]
    			osMessageQueuePut(b_rateQueueHandle, &temp_num, 1, osWaitForever);
 8000c6a:	4b76      	ldr	r3, [pc, #472]	; (8000e44 <StartTTaskHandler+0x304>)
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	f107 010c 	add.w	r1, r7, #12
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c76:	2201      	movs	r2, #1
 8000c78:	f004 fa38 	bl	80050ec <osMessageQueuePut>
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000c7c:	4b72      	ldr	r3, [pc, #456]	; (8000e48 <StartTTaskHandler+0x308>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c84:	4618      	mov	r0, r3
 8000c86:	f004 f927 	bl	8004ed8 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking rate updated\n\r", 27);
 8000c8a:	221b      	movs	r2, #27
 8000c8c:	4973      	ldr	r1, [pc, #460]	; (8000e5c <StartTTaskHandler+0x31c>)
 8000c8e:	4870      	ldr	r0, [pc, #448]	; (8000e50 <StartTTaskHandler+0x310>)
 8000c90:	f002 fcf6 	bl	8003680 <HAL_UART_Transmit_IT>
    		if (led_b_sus)
 8000c94:	e045      	b.n	8000d22 <StartTTaskHandler+0x1e2>

    		}
    	}

    	else if (command[4] == 'b' && command[6] == '0')
 8000c96:	7d3b      	ldrb	r3, [r7, #20]
 8000c98:	2b62      	cmp	r3, #98	; 0x62
 8000c9a:	d135      	bne.n	8000d08 <StartTTaskHandler+0x1c8>
 8000c9c:	7dbb      	ldrb	r3, [r7, #22]
 8000c9e:	2b30      	cmp	r3, #48	; 0x30
 8000ca0:	d132      	bne.n	8000d08 <StartTTaskHandler+0x1c8>
    	{
    		if (!led_b_sus)
 8000ca2:	7ffb      	ldrb	r3, [r7, #31]
 8000ca4:	f083 0301 	eor.w	r3, r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d01f      	beq.n	8000cee <StartTTaskHandler+0x1ae>
			{

				osThreadSuspend(LedBlinkTaskHandle);
 8000cae:	4b61      	ldr	r3, [pc, #388]	; (8000e34 <StartTTaskHandler+0x2f4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f003 feee 	bl	8004a94 <osThreadSuspend>
				led_b_sus = !led_b_sus;
 8000cb8:	7ffb      	ldrb	r3, [r7, #31]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	bf14      	ite	ne
 8000cbe:	2301      	movne	r3, #1
 8000cc0:	2300      	moveq	r3, #0
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	f083 0301 	eor.w	r3, r3, #1
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	77fb      	strb	r3, [r7, #31]
 8000ccc:	7ffb      	ldrb	r3, [r7, #31]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	77fb      	strb	r3, [r7, #31]
				osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000cd4:	4b5c      	ldr	r3, [pc, #368]	; (8000e48 <StartTTaskHandler+0x308>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f004 f8fb 	bl	8004ed8 <osSemaphoreAcquire>
				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task stopped\n\r", 27);
 8000ce2:	221b      	movs	r2, #27
 8000ce4:	495e      	ldr	r1, [pc, #376]	; (8000e60 <StartTTaskHandler+0x320>)
 8000ce6:	485a      	ldr	r0, [pc, #360]	; (8000e50 <StartTTaskHandler+0x310>)
 8000ce8:	f002 fcca 	bl	8003680 <HAL_UART_Transmit_IT>
    		if (!led_b_sus)
 8000cec:	e01a      	b.n	8000d24 <StartTTaskHandler+0x1e4>

			}

			else
			{
				osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000cee:	4b56      	ldr	r3, [pc, #344]	; (8000e48 <StartTTaskHandler+0x308>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f004 f8ee 	bl	8004ed8 <osSemaphoreAcquire>
				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task already stopped\n\r", 35);
 8000cfc:	2223      	movs	r2, #35	; 0x23
 8000cfe:	4959      	ldr	r1, [pc, #356]	; (8000e64 <StartTTaskHandler+0x324>)
 8000d00:	4853      	ldr	r0, [pc, #332]	; (8000e50 <StartTTaskHandler+0x310>)
 8000d02:	f002 fcbd 	bl	8003680 <HAL_UART_Transmit_IT>
    		if (!led_b_sus)
 8000d06:	e00d      	b.n	8000d24 <StartTTaskHandler+0x1e4>

    	}

    	else
    	{
    		osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000d08:	4b4f      	ldr	r3, [pc, #316]	; (8000e48 <StartTTaskHandler+0x308>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 f8e1 	bl	8004ed8 <osSemaphoreAcquire>
    		HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Invalid command\n\r", 17);
 8000d16:	2211      	movs	r2, #17
 8000d18:	4953      	ldr	r1, [pc, #332]	; (8000e68 <StartTTaskHandler+0x328>)
 8000d1a:	484d      	ldr	r0, [pc, #308]	; (8000e50 <StartTTaskHandler+0x310>)
 8000d1c:	f002 fcb0 	bl	8003680 <HAL_UART_Transmit_IT>
    	if (command[4] == 'b' && atoi(command+6) > 0)
 8000d20:	e0d0      	b.n	8000ec4 <StartTTaskHandler+0x384>
    		if (led_b_sus)
 8000d22:	bf00      	nop
    	if (command[4] == 'b' && atoi(command+6) > 0)
 8000d24:	e0ce      	b.n	8000ec4 <StartTTaskHandler+0x384>
    	}


    }

    else if (!strncmp(command, "BUT", 3) || !strncmp(command, "but", 3))
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	494f      	ldr	r1, [pc, #316]	; (8000e6c <StartTTaskHandler+0x32c>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f007 ffb3 	bl	8008c9a <strncmp>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00a      	beq.n	8000d50 <StartTTaskHandler+0x210>
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	2203      	movs	r2, #3
 8000d40:	494b      	ldr	r1, [pc, #300]	; (8000e70 <StartTTaskHandler+0x330>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	f007 ffa9 	bl	8008c9a <strncmp>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f040 80ac 	bne.w	8000ea8 <StartTTaskHandler+0x368>
    {
    	if (command[4] == 'r' || command[4] == 'R')
 8000d50:	7d3b      	ldrb	r3, [r7, #20]
 8000d52:	2b72      	cmp	r3, #114	; 0x72
 8000d54:	d002      	beq.n	8000d5c <StartTTaskHandler+0x21c>
 8000d56:	7d3b      	ldrb	r3, [r7, #20]
 8000d58:	2b52      	cmp	r3, #82	; 0x52
 8000d5a:	d128      	bne.n	8000dae <StartTTaskHandler+0x26e>
    	{
    		if (command[6] == '1')
 8000d5c:	7dbb      	ldrb	r3, [r7, #22]
 8000d5e:	2b31      	cmp	r3, #49	; 0x31
 8000d60:	d112      	bne.n	8000d88 <StartTTaskHandler+0x248>
    		{
    			osEventFlagsSet(ButEventsHandle, 0x00000001U);
 8000d62:	4b3c      	ldr	r3, [pc, #240]	; (8000e54 <StartTTaskHandler+0x314>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2101      	movs	r1, #1
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 ff2f 	bl	8004bcc <osEventFlagsSet>
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000d6e:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <StartTTaskHandler+0x308>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d76:	4618      	mov	r0, r3
 8000d78:	f004 f8ae 	bl	8004ed8 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button press notifications turned on\n\r", 38);
 8000d7c:	2226      	movs	r2, #38	; 0x26
 8000d7e:	493d      	ldr	r1, [pc, #244]	; (8000e74 <StartTTaskHandler+0x334>)
 8000d80:	4833      	ldr	r0, [pc, #204]	; (8000e50 <StartTTaskHandler+0x310>)
 8000d82:	f002 fc7d 	bl	8003680 <HAL_UART_Transmit_IT>
    		if (command[6] == '1')
 8000d86:	e08e      	b.n	8000ea6 <StartTTaskHandler+0x366>

    		}

    		else
    		{
    			osEventFlagsClear(ButEventsHandle, 0x00000001U);
 8000d88:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <StartTTaskHandler+0x314>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f003 ff60 	bl	8004c54 <osEventFlagsClear>
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000d94:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <StartTTaskHandler+0x308>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f004 f89b 	bl	8004ed8 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button press notifications turned off\n\r", 39);
 8000da2:	2227      	movs	r2, #39	; 0x27
 8000da4:	4934      	ldr	r1, [pc, #208]	; (8000e78 <StartTTaskHandler+0x338>)
 8000da6:	482a      	ldr	r0, [pc, #168]	; (8000e50 <StartTTaskHandler+0x310>)
 8000da8:	f002 fc6a 	bl	8003680 <HAL_UART_Transmit_IT>
    		if (command[6] == '1')
 8000dac:	e07b      	b.n	8000ea6 <StartTTaskHandler+0x366>

    		}
    	}

    		else if (command[4] == 'l' || command[4] == 'L')
 8000dae:	7d3b      	ldrb	r3, [r7, #20]
 8000db0:	2b6c      	cmp	r3, #108	; 0x6c
 8000db2:	d003      	beq.n	8000dbc <StartTTaskHandler+0x27c>
 8000db4:	7d3b      	ldrb	r3, [r7, #20]
 8000db6:	2b4c      	cmp	r3, #76	; 0x4c
 8000db8:	f040 8083 	bne.w	8000ec2 <StartTTaskHandler+0x382>
    		{
    			if (command[6] == '1')
 8000dbc:	7dbb      	ldrb	r3, [r7, #22]
 8000dbe:	2b31      	cmp	r3, #49	; 0x31
 8000dc0:	d15e      	bne.n	8000e80 <StartTTaskHandler+0x340>
				{
					osEventFlagsSet(ButEventsHandle, 0x00000002U);
 8000dc2:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <StartTTaskHandler+0x314>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f003 feff 	bl	8004bcc <osEventFlagsSet>
					osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <StartTTaskHandler+0x308>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f004 f87e 	bl	8004ed8 <osSemaphoreAcquire>
					HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED control with button turned on\n\r", 35);
 8000ddc:	2223      	movs	r2, #35	; 0x23
 8000dde:	4927      	ldr	r1, [pc, #156]	; (8000e7c <StartTTaskHandler+0x33c>)
 8000de0:	481b      	ldr	r0, [pc, #108]	; (8000e50 <StartTTaskHandler+0x310>)
 8000de2:	f002 fc4d 	bl	8003680 <HAL_UART_Transmit_IT>

					if (!led_b_sus)
 8000de6:	7ffb      	ldrb	r3, [r7, #31]
 8000de8:	f083 0301 	eor.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d067      	beq.n	8000ec2 <StartTTaskHandler+0x382>
					{
						osThreadSuspend(LedBlinkTaskHandle);
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <StartTTaskHandler+0x2f4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 fe4c 	bl	8004a94 <osThreadSuspend>
						led_b_sus = !led_b_sus;
 8000dfc:	7ffb      	ldrb	r3, [r7, #31]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf14      	ite	ne
 8000e02:	2301      	movne	r3, #1
 8000e04:	2300      	moveq	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f083 0301 	eor.w	r3, r3, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	77fb      	strb	r3, [r7, #31]
 8000e10:	7ffb      	ldrb	r3, [r7, #31]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	77fb      	strb	r3, [r7, #31]
						osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <StartTTaskHandler+0x308>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e20:	4618      	mov	r0, r3
 8000e22:	f004 f859 	bl	8004ed8 <osSemaphoreAcquire>
						HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task stopped\n\r", 27);
 8000e26:	221b      	movs	r2, #27
 8000e28:	490d      	ldr	r1, [pc, #52]	; (8000e60 <StartTTaskHandler+0x320>)
 8000e2a:	4809      	ldr	r0, [pc, #36]	; (8000e50 <StartTTaskHandler+0x310>)
 8000e2c:	f002 fc28 	bl	8003680 <HAL_UART_Transmit_IT>
    	if (command[4] == 'r' || command[4] == 'R')
 8000e30:	e047      	b.n	8000ec2 <StartTTaskHandler+0x382>
 8000e32:	bf00      	nop
 8000e34:	20001964 	.word	0x20001964
 8000e38:	200019f8 	.word	0x200019f8
 8000e3c:	08008e9c 	.word	0x08008e9c
 8000e40:	08008ea0 	.word	0x08008ea0
 8000e44:	20001960 	.word	0x20001960
 8000e48:	2000196c 	.word	0x2000196c
 8000e4c:	08008ea4 	.word	0x08008ea4
 8000e50:	20001974 	.word	0x20001974
 8000e54:	2000195c 	.word	0x2000195c
 8000e58:	08008ec0 	.word	0x08008ec0
 8000e5c:	08008ee8 	.word	0x08008ee8
 8000e60:	08008f04 	.word	0x08008f04
 8000e64:	08008f20 	.word	0x08008f20
 8000e68:	08008f44 	.word	0x08008f44
 8000e6c:	08008f58 	.word	0x08008f58
 8000e70:	08008f5c 	.word	0x08008f5c
 8000e74:	08008f60 	.word	0x08008f60
 8000e78:	08008f88 	.word	0x08008f88
 8000e7c:	08008fb0 	.word	0x08008fb0

				}

				else
				{
					osEventFlagsClear(ButEventsHandle, 0x00000002U);
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <StartTTaskHandler+0x388>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2102      	movs	r1, #2
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 fee4 	bl	8004c54 <osEventFlagsClear>
					osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <StartTTaskHandler+0x38c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e94:	4618      	mov	r0, r3
 8000e96:	f004 f81f 	bl	8004ed8 <osSemaphoreAcquire>
					HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED control with button turned off\n\r", 36);
 8000e9a:	2224      	movs	r2, #36	; 0x24
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <StartTTaskHandler+0x390>)
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <StartTTaskHandler+0x394>)
 8000ea0:	f002 fbee 	bl	8003680 <HAL_UART_Transmit_IT>
    	if (command[4] == 'r' || command[4] == 'R')
 8000ea4:	e00d      	b.n	8000ec2 <StartTTaskHandler+0x382>
 8000ea6:	e00c      	b.n	8000ec2 <StartTTaskHandler+0x382>

    }

    else
    {
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <StartTTaskHandler+0x38c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f004 f811 	bl	8004ed8 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Invalid command\n\r", 17);
 8000eb6:	2211      	movs	r2, #17
 8000eb8:	4907      	ldr	r1, [pc, #28]	; (8000ed8 <StartTTaskHandler+0x398>)
 8000eba:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <StartTTaskHandler+0x394>)
 8000ebc:	f002 fbe0 	bl	8003680 <HAL_UART_Transmit_IT>
 8000ec0:	e651      	b.n	8000b66 <StartTTaskHandler+0x26>
    	if (command[4] == 'r' || command[4] == 'R')
 8000ec2:	bf00      	nop
    osMessageQueueGet(CommandQueueHandle, command, NULL, osWaitForever);
 8000ec4:	e64f      	b.n	8000b66 <StartTTaskHandler+0x26>
 8000ec6:	bf00      	nop
 8000ec8:	2000195c 	.word	0x2000195c
 8000ecc:	2000196c 	.word	0x2000196c
 8000ed0:	08008ec0 	.word	0x08008ec0
 8000ed4:	20001974 	.word	0x20001974
 8000ed8:	08008f44 	.word	0x08008f44

08000edc <StartButTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButTask */
void StartButTask(void *argument)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButTask */
  /* Infinite loop */
  for(;;)
  {
	switch (osEventFlagsWait(ButEventsHandle, 0x00000004U, osFlagsWaitAny, osWaitForever))
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <StartButTask+0x78>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eec:	2200      	movs	r2, #0
 8000eee:	2104      	movs	r1, #4
 8000ef0:	f003 ff03 	bl	8004cfa <osEventFlagsWait>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b07      	cmp	r3, #7
 8000ef8:	d019      	beq.n	8000f2e <StartButTask+0x52>
 8000efa:	2b07      	cmp	r3, #7
 8000efc:	d828      	bhi.n	8000f50 <StartButTask+0x74>
 8000efe:	2b05      	cmp	r3, #5
 8000f00:	d002      	beq.n	8000f08 <StartButTask+0x2c>
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d00d      	beq.n	8000f22 <StartButTask+0x46>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button pressed!\n\r", 17);

		default:
			break;
 8000f06:	e023      	b.n	8000f50 <StartButTask+0x74>
			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <StartButTask+0x7c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 ffe1 	bl	8004ed8 <osSemaphoreAcquire>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button pressed!\n\r", 17);
 8000f16:	2211      	movs	r2, #17
 8000f18:	4910      	ldr	r1, [pc, #64]	; (8000f5c <StartButTask+0x80>)
 8000f1a:	4811      	ldr	r0, [pc, #68]	; (8000f60 <StartButTask+0x84>)
 8000f1c:	f002 fbb0 	bl	8003680 <HAL_UART_Transmit_IT>
			break;
 8000f20:	e017      	b.n	8000f52 <StartButTask+0x76>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f22:	2120      	movs	r1, #32
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f28:	f000 fd1a 	bl	8001960 <HAL_GPIO_TogglePin>
			break;
 8000f2c:	e011      	b.n	8000f52 <StartButTask+0x76>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f2e:	2120      	movs	r1, #32
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f000 fd14 	bl	8001960 <HAL_GPIO_TogglePin>
			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <StartButTask+0x7c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 ffc9 	bl	8004ed8 <osSemaphoreAcquire>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Button pressed!\n\r", 17);
 8000f46:	2211      	movs	r2, #17
 8000f48:	4904      	ldr	r1, [pc, #16]	; (8000f5c <StartButTask+0x80>)
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <StartButTask+0x84>)
 8000f4c:	f002 fb98 	bl	8003680 <HAL_UART_Transmit_IT>
			break;
 8000f50:	bf00      	nop
	switch (osEventFlagsWait(ButEventsHandle, 0x00000004U, osFlagsWaitAny, osWaitForever))
 8000f52:	e7c7      	b.n	8000ee4 <StartButTask+0x8>
 8000f54:	2000195c 	.word	0x2000195c
 8000f58:	2000196c 	.word	0x2000196c
 8000f5c:	08008fd4 	.word	0x08008fd4
 8000f60:	20001974 	.word	0x20001974

08000f64 <StartLedBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedBlinkTask */
void StartLedBlinkTask(void *argument)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedBlinkTask */
  int rate = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(b_rateQueueHandle, &rate, NULL, 0);
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <StartLedBlinkTask+0x30>)
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	f107 010c 	add.w	r1, r7, #12
 8000f78:	2300      	movs	r3, #0
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f004 f916 	bl	80051ac <osMessageQueueGet>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f80:	2120      	movs	r1, #32
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f000 fceb 	bl	8001960 <HAL_GPIO_TogglePin>
    osDelay(rate);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f003 fdc3 	bl	8004b18 <osDelay>
    osMessageQueueGet(b_rateQueueHandle, &rate, NULL, 0);
 8000f92:	e7ed      	b.n	8000f70 <StartLedBlinkTask+0xc>
 8000f94:	20001960 	.word	0x20001960

08000f98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000faa:	f000 f995 	bl	80012d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40001000 	.word	0x40001000

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <Error_Handler+0x8>
	...

08000fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_MspInit+0x4c>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	4a10      	ldr	r2, [pc, #64]	; (8001014 <HAL_MspInit+0x4c>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_MspInit+0x4c>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_MspInit+0x4c>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_MspInit+0x4c>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_MspInit+0x4c>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	210f      	movs	r1, #15
 8001002:	f06f 0001 	mvn.w	r0, #1
 8001006:	f000 fa3f 	bl	8001488 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0ac      	sub	sp, #176	; 0xb0
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2288      	movs	r2, #136	; 0x88
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f007 fe13 	bl	8008c64 <memset>
  if(huart->Instance==USART2)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <HAL_UART_MspInit+0xb0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d13b      	bne.n	80010c0 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001048:	2302      	movs	r3, #2
 800104a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800104c:	2300      	movs	r3, #0
 800104e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fb37 	bl	80026c8 <HAL_RCCEx_PeriphCLKConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001060:	f7ff ffac 	bl	8000fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_UART_MspInit+0xb4>)
 8001066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001068:	4a18      	ldr	r2, [pc, #96]	; (80010cc <HAL_UART_MspInit+0xb4>)
 800106a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106e:	6593      	str	r3, [r2, #88]	; 0x58
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_UART_MspInit+0xb4>)
 8001072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_UART_MspInit+0xb4>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001080:	4a12      	ldr	r2, [pc, #72]	; (80010cc <HAL_UART_MspInit+0xb4>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HAL_UART_MspInit+0xb4>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001094:	230c      	movs	r3, #12
 8001096:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ac:	2307      	movs	r3, #7
 80010ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010b6:	4619      	mov	r1, r3
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010bc:	f000 fa8e 	bl	80015dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010c0:	bf00      	nop
 80010c2:	37b0      	adds	r7, #176	; 0xb0
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40004400 	.word	0x40004400
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	2036      	movs	r0, #54	; 0x36
 80010e6:	f000 f9cf 	bl	8001488 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010ea:	2036      	movs	r0, #54	; 0x36
 80010ec:	f000 f9e8 	bl	80014c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_InitTick+0x9c>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f4:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_InitTick+0x9c>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6593      	str	r3, [r2, #88]	; 0x58
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_InitTick+0x9c>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001108:	f107 0210 	add.w	r2, r7, #16
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fa46 	bl	80025a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001118:	f001 fa18 	bl	800254c <HAL_RCC_GetPCLK1Freq>
 800111c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001120:	4a13      	ldr	r2, [pc, #76]	; (8001170 <HAL_InitTick+0xa0>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0c9b      	lsrs	r3, r3, #18
 8001128:	3b01      	subs	r3, #1
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_InitTick+0xa4>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <HAL_InitTick+0xa8>)
 8001130:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_InitTick+0xa4>)
 8001134:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001138:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_InitTick+0xa4>)
 800113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_InitTick+0xa4>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_InitTick+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <HAL_InitTick+0xa4>)
 800114e:	f001 ff77 	bl	8003040 <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d104      	bne.n	8001162 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001158:	4806      	ldr	r0, [pc, #24]	; (8001174 <HAL_InitTick+0xa4>)
 800115a:	f001 ffd3 	bl	8003104 <HAL_TIM_Base_Start_IT>
 800115e:	4603      	mov	r3, r0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3730      	adds	r7, #48	; 0x30
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000
 8001170:	431bde83 	.word	0x431bde83
 8001174:	20001a04 	.word	0x20001a04
 8001178:	40001000 	.word	0x40001000

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x4>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <USART2_IRQHandler+0x10>)
 80011ae:	f002 fb07 	bl	80037c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20001974 	.word	0x20001974

080011bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011c4:	f000 fbe6 	bl	8001994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}

080011cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <TIM6_DAC_IRQHandler+0x10>)
 80011d2:	f002 f807 	bl	80031e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20001a04 	.word	0x20001a04

080011e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <SystemInit+0x5c>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <SystemInit+0x5c>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <SystemInit+0x60>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a11      	ldr	r2, [pc, #68]	; (8001240 <SystemInit+0x60>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <SystemInit+0x60>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <SystemInit+0x60>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <SystemInit+0x60>)
 800120c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001210:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001214:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <SystemInit+0x60>)
 8001218:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800121c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <SystemInit+0x60>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a07      	ldr	r2, [pc, #28]	; (8001240 <SystemInit+0x60>)
 8001224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001228:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SystemInit+0x60>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	40021000 	.word	0x40021000

08001244 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800127c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001248:	f7ff ffca 	bl	80011e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800124c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800124e:	e003      	b.n	8001258 <LoopCopyDataInit>

08001250 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001252:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001254:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001256:	3104      	adds	r1, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001258:	480a      	ldr	r0, [pc, #40]	; (8001284 <LoopForever+0xa>)
	ldr	r3, =_edata
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <LoopForever+0xe>)
	adds	r2, r0, r1
 800125c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800125e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001260:	d3f6      	bcc.n	8001250 <CopyDataInit>
	ldr	r2, =_sbss
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001264:	e002      	b.n	800126c <LoopFillZerobss>

08001266 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001266:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001268:	f842 3b04 	str.w	r3, [r2], #4

0800126c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <LoopForever+0x16>)
	cmp	r2, r3
 800126e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001270:	d3f9      	bcc.n	8001266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001272:	f007 fcc5 	bl	8008c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001276:	f7ff f92f 	bl	80004d8 <main>

0800127a <LoopForever>:

LoopForever:
    b LoopForever
 800127a:	e7fe      	b.n	800127a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800127c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001280:	08009254 	.word	0x08009254
	ldr	r0, =_sdata
 8001284:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001288:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 800128c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001290:	20001a94 	.word	0x20001a94

08001294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC1_2_IRQHandler>
	...

08001298 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_Init+0x3c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <HAL_Init+0x3c>)
 80012a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ae:	2003      	movs	r0, #3
 80012b0:	f000 f8df 	bl	8001472 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b4:	200f      	movs	r0, #15
 80012b6:	f7ff ff0b 	bl	80010d0 <HAL_InitTick>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	e001      	b.n	80012ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c6:	f7ff fe7f 	bl	8000fc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ca:	79fb      	ldrb	r3, [r7, #7]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40022000 	.word	0x40022000

080012d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x20>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x24>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_IncTick+0x24>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20001a50 	.word	0x20001a50

08001300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_GetTick+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20001a50 	.word	0x20001a50

08001318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <__NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db0b      	blt.n	80013a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f003 021f 	and.w	r2, r3, #31
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <__NVIC_EnableIRQ+0x38>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	2001      	movs	r0, #1
 800139e:	fa00 f202 	lsl.w	r2, r0, r2
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	; (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff4c 	bl	8001318 <__NVIC_SetPriorityGrouping>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800149a:	f7ff ff61 	bl	8001360 <__NVIC_GetPriorityGrouping>
 800149e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	6978      	ldr	r0, [r7, #20]
 80014a6:	f7ff ffb1 	bl	800140c <NVIC_EncodePriority>
 80014aa:	4602      	mov	r2, r0
 80014ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff80 	bl	80013b8 <__NVIC_SetPriority>
}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff54 	bl	800137c <__NVIC_EnableIRQ>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d008      	beq.n	8001506 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2204      	movs	r2, #4
 80014f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e022      	b.n	800154c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 020e 	bic.w	r2, r2, #14
 8001514:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0201 	bic.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f003 021c 	and.w	r2, r3, #28
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	2101      	movs	r1, #1
 8001534:	fa01 f202 	lsl.w	r2, r1, r2
 8001538:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d005      	beq.n	800157c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2204      	movs	r2, #4
 8001574:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	e029      	b.n	80015d0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 020e 	bic.w	r2, r2, #14
 800158a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	f003 021c 	and.w	r2, r3, #28
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	2101      	movs	r1, #1
 80015aa:	fa01 f202 	lsl.w	r2, r1, r2
 80015ae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	4798      	blx	r3
    }
  }
  return status;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ea:	e17f      	b.n	80018ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8171 	beq.w	80018e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d00b      	beq.n	8001624 <HAL_GPIO_Init+0x48>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d007      	beq.n	8001624 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001618:	2b11      	cmp	r3, #17
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b12      	cmp	r3, #18
 8001622:	d130      	bne.n	8001686 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800165a:	2201      	movs	r2, #1
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	091b      	lsrs	r3, r3, #4
 8001670:	f003 0201 	and.w	r2, r3, #1
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b03      	cmp	r3, #3
 8001690:	d118      	bne.n	80016c4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001698:	2201      	movs	r2, #1
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	08db      	lsrs	r3, r3, #3
 80016ae:	f003 0201 	and.w	r2, r3, #1
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x128>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b12      	cmp	r3, #18
 8001702:	d123      	bne.n	800174c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	08da      	lsrs	r2, r3, #3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3208      	adds	r2, #8
 800170c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	08da      	lsrs	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3208      	adds	r2, #8
 8001746:	6939      	ldr	r1, [r7, #16]
 8001748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0203 	and.w	r2, r3, #3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80ac 	beq.w	80018e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	4b5f      	ldr	r3, [pc, #380]	; (800190c <HAL_GPIO_Init+0x330>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	4a5e      	ldr	r2, [pc, #376]	; (800190c <HAL_GPIO_Init+0x330>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6613      	str	r3, [r2, #96]	; 0x60
 800179a:	4b5c      	ldr	r3, [pc, #368]	; (800190c <HAL_GPIO_Init+0x330>)
 800179c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017a6:	4a5a      	ldr	r2, [pc, #360]	; (8001910 <HAL_GPIO_Init+0x334>)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	220f      	movs	r2, #15
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017d0:	d025      	beq.n	800181e <HAL_GPIO_Init+0x242>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4f      	ldr	r2, [pc, #316]	; (8001914 <HAL_GPIO_Init+0x338>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d01f      	beq.n	800181a <HAL_GPIO_Init+0x23e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4e      	ldr	r2, [pc, #312]	; (8001918 <HAL_GPIO_Init+0x33c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d019      	beq.n	8001816 <HAL_GPIO_Init+0x23a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4d      	ldr	r2, [pc, #308]	; (800191c <HAL_GPIO_Init+0x340>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d013      	beq.n	8001812 <HAL_GPIO_Init+0x236>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4c      	ldr	r2, [pc, #304]	; (8001920 <HAL_GPIO_Init+0x344>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d00d      	beq.n	800180e <HAL_GPIO_Init+0x232>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4b      	ldr	r2, [pc, #300]	; (8001924 <HAL_GPIO_Init+0x348>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d007      	beq.n	800180a <HAL_GPIO_Init+0x22e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4a      	ldr	r2, [pc, #296]	; (8001928 <HAL_GPIO_Init+0x34c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_GPIO_Init+0x22a>
 8001802:	2306      	movs	r3, #6
 8001804:	e00c      	b.n	8001820 <HAL_GPIO_Init+0x244>
 8001806:	2307      	movs	r3, #7
 8001808:	e00a      	b.n	8001820 <HAL_GPIO_Init+0x244>
 800180a:	2305      	movs	r3, #5
 800180c:	e008      	b.n	8001820 <HAL_GPIO_Init+0x244>
 800180e:	2304      	movs	r3, #4
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x244>
 8001812:	2303      	movs	r3, #3
 8001814:	e004      	b.n	8001820 <HAL_GPIO_Init+0x244>
 8001816:	2302      	movs	r3, #2
 8001818:	e002      	b.n	8001820 <HAL_GPIO_Init+0x244>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_GPIO_Init+0x244>
 800181e:	2300      	movs	r3, #0
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	f002 0203 	and.w	r2, r2, #3
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	4093      	lsls	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001830:	4937      	ldr	r1, [pc, #220]	; (8001910 <HAL_GPIO_Init+0x334>)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800183e:	4b3b      	ldr	r3, [pc, #236]	; (800192c <HAL_GPIO_Init+0x350>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001862:	4a32      	ldr	r2, [pc, #200]	; (800192c <HAL_GPIO_Init+0x350>)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001868:	4b30      	ldr	r3, [pc, #192]	; (800192c <HAL_GPIO_Init+0x350>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800188c:	4a27      	ldr	r2, [pc, #156]	; (800192c <HAL_GPIO_Init+0x350>)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001892:	4b26      	ldr	r3, [pc, #152]	; (800192c <HAL_GPIO_Init+0x350>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018b6:	4a1d      	ldr	r2, [pc, #116]	; (800192c <HAL_GPIO_Init+0x350>)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_GPIO_Init+0x350>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018e0:	4a12      	ldr	r2, [pc, #72]	; (800192c <HAL_GPIO_Init+0x350>)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa22 f303 	lsr.w	r3, r2, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f47f ae78 	bne.w	80015ec <HAL_GPIO_Init+0x10>
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000
 8001910:	40010000 	.word	0x40010000
 8001914:	48000400 	.word	0x48000400
 8001918:	48000800 	.word	0x48000800
 800191c:	48000c00 	.word	0x48000c00
 8001920:	48001000 	.word	0x48001000
 8001924:	48001400 	.word	0x48001400
 8001928:	48001800 	.word	0x48001800
 800192c:	40010400 	.word	0x40010400

08001930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
 800193c:	4613      	mov	r3, r2
 800193e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001940:	787b      	ldrb	r3, [r7, #1]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001946:	887a      	ldrh	r2, [r7, #2]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800194c:	e002      	b.n	8001954 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4013      	ands	r3, r2
 8001978:	041a      	lsls	r2, r3, #16
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43d9      	mvns	r1, r3
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	400b      	ands	r3, r1
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	619a      	str	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe ff52 	bl	800085c <HAL_GPIO_EXTI_Callback>
  }
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40010400 	.word	0x40010400

080019c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <HAL_PWREx_GetVoltageRange+0x18>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40007000 	.word	0x40007000

080019e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ee:	d130      	bne.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019fc:	d038      	beq.n	8001a70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a06:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2232      	movs	r2, #50	; 0x32
 8001a14:	fb02 f303 	mul.w	r3, r2, r3
 8001a18:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	0c9b      	lsrs	r3, r3, #18
 8001a20:	3301      	adds	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a24:	e002      	b.n	8001a2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a38:	d102      	bne.n	8001a40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f2      	bne.n	8001a26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4c:	d110      	bne.n	8001a70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e00f      	b.n	8001a72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5e:	d007      	beq.n	8001a70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a68:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40007000 	.word	0x40007000
 8001a84:	20000000 	.word	0x20000000
 8001a88:	431bde83 	.word	0x431bde83

08001a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e3d4      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9e:	4ba1      	ldr	r3, [pc, #644]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aa8:	4b9e      	ldr	r3, [pc, #632]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 80e4 	beq.w	8001c88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x4a>
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	f040 808b 	bne.w	8001be4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	f040 8087 	bne.w	8001be4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ad6:	4b93      	ldr	r3, [pc, #588]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d005      	beq.n	8001aee <HAL_RCC_OscConfig+0x62>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e3ac      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1a      	ldr	r2, [r3, #32]
 8001af2:	4b8c      	ldr	r3, [pc, #560]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <HAL_RCC_OscConfig+0x7c>
 8001afe:	4b89      	ldr	r3, [pc, #548]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b06:	e005      	b.n	8001b14 <HAL_RCC_OscConfig+0x88>
 8001b08:	4b86      	ldr	r3, [pc, #536]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d223      	bcs.n	8001b60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fd73 	bl	8002608 <RCC_SetFlashLatencyFromMSIRange>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e38d      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b2c:	4b7d      	ldr	r3, [pc, #500]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a7c      	ldr	r2, [pc, #496]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001b32:	f043 0308 	orr.w	r3, r3, #8
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b7a      	ldr	r3, [pc, #488]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4977      	ldr	r1, [pc, #476]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b4a:	4b76      	ldr	r3, [pc, #472]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	4972      	ldr	r1, [pc, #456]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
 8001b5e:	e025      	b.n	8001bac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b60:	4b70      	ldr	r3, [pc, #448]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a6f      	ldr	r2, [pc, #444]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001b66:	f043 0308 	orr.w	r3, r3, #8
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b6d      	ldr	r3, [pc, #436]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	496a      	ldr	r1, [pc, #424]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7e:	4b69      	ldr	r3, [pc, #420]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	4965      	ldr	r1, [pc, #404]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 fd33 	bl	8002608 <RCC_SetFlashLatencyFromMSIRange>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e34d      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bac:	f000 fc36 	bl	800241c <HAL_RCC_GetSysClockFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b5c      	ldr	r3, [pc, #368]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	495a      	ldr	r1, [pc, #360]	; (8001d28 <HAL_RCC_OscConfig+0x29c>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	4a58      	ldr	r2, [pc, #352]	; (8001d2c <HAL_RCC_OscConfig+0x2a0>)
 8001bca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bcc:	4b58      	ldr	r3, [pc, #352]	; (8001d30 <HAL_RCC_OscConfig+0x2a4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fa7d 	bl	80010d0 <HAL_InitTick>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d052      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	e331      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d032      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bec:	4b4d      	ldr	r3, [pc, #308]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a4c      	ldr	r2, [pc, #304]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fb82 	bl	8001300 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c00:	f7ff fb7e 	bl	8001300 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e31a      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c12:	4b44      	ldr	r3, [pc, #272]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c1e:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a40      	ldr	r2, [pc, #256]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b3e      	ldr	r3, [pc, #248]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	493b      	ldr	r1, [pc, #236]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c3c:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	4936      	ldr	r1, [pc, #216]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
 8001c50:	e01a      	b.n	8001c88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c52:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a33      	ldr	r2, [pc, #204]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fb4f 	bl	8001300 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c66:	f7ff fb4b 	bl	8001300 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e2e7      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x1da>
 8001c84:	e000      	b.n	8001c88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d074      	beq.n	8001d7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d005      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x21a>
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b0c      	cmp	r3, #12
 8001c9e:	d10e      	bne.n	8001cbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d10b      	bne.n	8001cbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d064      	beq.n	8001d7c <HAL_RCC_OscConfig+0x2f0>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d160      	bne.n	8001d7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e2c4      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc6:	d106      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x24a>
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e01d      	b.n	8001d12 <HAL_RCC_OscConfig+0x286>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cde:	d10c      	bne.n	8001cfa <HAL_RCC_OscConfig+0x26e>
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001ce6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	e00b      	b.n	8001d12 <HAL_RCC_OscConfig+0x286>
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a09      	ldr	r2, [pc, #36]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <HAL_RCC_OscConfig+0x298>)
 8001d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d01c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1a:	f7ff faf1 	bl	8001300 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d20:	e011      	b.n	8001d46 <HAL_RCC_OscConfig+0x2ba>
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	080090f8 	.word	0x080090f8
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff fae4 	bl	8001300 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e280      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d46:	4baf      	ldr	r3, [pc, #700]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x2a8>
 8001d52:	e014      	b.n	8001d7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fad4 	bl	8001300 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fad0 	bl	8001300 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e26c      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6e:	4ba5      	ldr	r3, [pc, #660]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x2d0>
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d060      	beq.n	8001e4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_OscConfig+0x310>
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d119      	bne.n	8001dca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d116      	bne.n	8001dca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d9c:	4b99      	ldr	r3, [pc, #612]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_OscConfig+0x328>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e249      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b93      	ldr	r3, [pc, #588]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	061b      	lsls	r3, r3, #24
 8001dc2:	4990      	ldr	r1, [pc, #576]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc8:	e040      	b.n	8001e4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d023      	beq.n	8001e1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd2:	4b8c      	ldr	r3, [pc, #560]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a8b      	ldr	r2, [pc, #556]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff fa8f 	bl	8001300 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de6:	f7ff fa8b 	bl	8001300 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e227      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df8:	4b82      	ldr	r3, [pc, #520]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	4b7f      	ldr	r3, [pc, #508]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	061b      	lsls	r3, r3, #24
 8001e12:	497c      	ldr	r1, [pc, #496]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
 8001e18:	e018      	b.n	8001e4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1a:	4b7a      	ldr	r3, [pc, #488]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a79      	ldr	r2, [pc, #484]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7ff fa6b 	bl	8001300 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fa67 	bl	8001300 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e203      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e40:	4b70      	ldr	r3, [pc, #448]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d03c      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01c      	beq.n	8001e9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e60:	4b68      	ldr	r3, [pc, #416]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e66:	4a67      	ldr	r2, [pc, #412]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7ff fa46 	bl	8001300 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e78:	f7ff fa42 	bl	8001300 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e1de      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e8a:	4b5e      	ldr	r3, [pc, #376]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0ef      	beq.n	8001e78 <HAL_RCC_OscConfig+0x3ec>
 8001e98:	e01b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9a:	4b5a      	ldr	r3, [pc, #360]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea0:	4a58      	ldr	r2, [pc, #352]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fa29 	bl	8001300 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb2:	f7ff fa25 	bl	8001300 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e1c1      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ef      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80a6 	beq.w	800202c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ee4:	4b47      	ldr	r3, [pc, #284]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10d      	bne.n	8001f0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	4b44      	ldr	r3, [pc, #272]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	4a43      	ldr	r2, [pc, #268]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efa:	6593      	str	r3, [r2, #88]	; 0x58
 8001efc:	4b41      	ldr	r3, [pc, #260]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0c:	4b3e      	ldr	r3, [pc, #248]	; (8002008 <HAL_RCC_OscConfig+0x57c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d118      	bne.n	8001f4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f18:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <HAL_RCC_OscConfig+0x57c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a3a      	ldr	r2, [pc, #232]	; (8002008 <HAL_RCC_OscConfig+0x57c>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f24:	f7ff f9ec 	bl	8001300 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2c:	f7ff f9e8 	bl	8001300 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e184      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3e:	4b32      	ldr	r3, [pc, #200]	; (8002008 <HAL_RCC_OscConfig+0x57c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d108      	bne.n	8001f64 <HAL_RCC_OscConfig+0x4d8>
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f58:	4a2a      	ldr	r2, [pc, #168]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f62:	e024      	b.n	8001fae <HAL_RCC_OscConfig+0x522>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b05      	cmp	r3, #5
 8001f6a:	d110      	bne.n	8001f8e <HAL_RCC_OscConfig+0x502>
 8001f6c:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	4a24      	ldr	r2, [pc, #144]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f7c:	4b21      	ldr	r3, [pc, #132]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	4a20      	ldr	r2, [pc, #128]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f8c:	e00f      	b.n	8001fae <HAL_RCC_OscConfig+0x522>
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f94:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f9e:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa4:	4a17      	ldr	r2, [pc, #92]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001fa6:	f023 0304 	bic.w	r3, r3, #4
 8001faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d016      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7ff f9a3 	bl	8001300 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff f99f 	bl	8001300 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e139      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0ed      	beq.n	8001fbe <HAL_RCC_OscConfig+0x532>
 8001fe2:	e01a      	b.n	800201a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe4:	f7ff f98c 	bl	8001300 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fea:	e00f      	b.n	800200c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fec:	f7ff f988 	bl	8001300 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d906      	bls.n	800200c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e122      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800200c:	4b90      	ldr	r3, [pc, #576]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1e8      	bne.n	8001fec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800201a:	7ffb      	ldrb	r3, [r7, #31]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d105      	bne.n	800202c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002020:	4b8b      	ldr	r3, [pc, #556]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	4a8a      	ldr	r2, [pc, #552]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 8002026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 8108 	beq.w	8002246 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	2b02      	cmp	r3, #2
 800203c:	f040 80d0 	bne.w	80021e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002040:	4b83      	ldr	r3, [pc, #524]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0203 	and.w	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	429a      	cmp	r2, r3
 8002052:	d130      	bne.n	80020b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	3b01      	subs	r3, #1
 8002060:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d127      	bne.n	80020b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002070:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d11f      	bne.n	80020b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002080:	2a07      	cmp	r2, #7
 8002082:	bf14      	ite	ne
 8002084:	2201      	movne	r2, #1
 8002086:	2200      	moveq	r2, #0
 8002088:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800208a:	4293      	cmp	r3, r2
 800208c:	d113      	bne.n	80020b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	3b01      	subs	r3, #1
 800209c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	085b      	lsrs	r3, r3, #1
 80020ae:	3b01      	subs	r3, #1
 80020b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d06e      	beq.n	8002194 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	d069      	beq.n	8002190 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020bc:	4b64      	ldr	r3, [pc, #400]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020c8:	4b61      	ldr	r3, [pc, #388]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0b7      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020d8:	4b5d      	ldr	r3, [pc, #372]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a5c      	ldr	r2, [pc, #368]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 80020de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e4:	f7ff f90c 	bl	8001300 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ec:	f7ff f908 	bl	8001300 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e0a4      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fe:	4b54      	ldr	r3, [pc, #336]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210a:	4b51      	ldr	r3, [pc, #324]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	4b51      	ldr	r3, [pc, #324]	; (8002254 <HAL_RCC_OscConfig+0x7c8>)
 8002110:	4013      	ands	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800211a:	3a01      	subs	r2, #1
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002124:	0212      	lsls	r2, r2, #8
 8002126:	4311      	orrs	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800212c:	0852      	lsrs	r2, r2, #1
 800212e:	3a01      	subs	r2, #1
 8002130:	0552      	lsls	r2, r2, #21
 8002132:	4311      	orrs	r1, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002138:	0852      	lsrs	r2, r2, #1
 800213a:	3a01      	subs	r2, #1
 800213c:	0652      	lsls	r2, r2, #25
 800213e:	4311      	orrs	r1, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002144:	0912      	lsrs	r2, r2, #4
 8002146:	0452      	lsls	r2, r2, #17
 8002148:	430a      	orrs	r2, r1
 800214a:	4941      	ldr	r1, [pc, #260]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002150:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3e      	ldr	r2, [pc, #248]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 8002156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800215c:	4b3c      	ldr	r3, [pc, #240]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a3b      	ldr	r2, [pc, #236]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 8002162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002166:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002168:	f7ff f8ca 	bl	8001300 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f8c6 	bl	8001300 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e062      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002182:	4b33      	ldr	r3, [pc, #204]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800218e:	e05a      	b.n	8002246 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e059      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002194:	4b2e      	ldr	r3, [pc, #184]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d152      	bne.n	8002246 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021a0:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2a      	ldr	r2, [pc, #168]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 80021a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a27      	ldr	r2, [pc, #156]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 80021b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021b8:	f7ff f8a2 	bl	8001300 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c0:	f7ff f89e 	bl	8001300 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e03a      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d2:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x734>
 80021de:	e032      	b.n	8002246 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d02d      	beq.n	8002242 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a19      	ldr	r2, [pc, #100]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 80021ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d105      	bne.n	800220a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	4a13      	ldr	r2, [pc, #76]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 8002204:	f023 0303 	bic.w	r3, r3, #3
 8002208:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	4a10      	ldr	r2, [pc, #64]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 8002210:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002218:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7ff f871 	bl	8001300 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff f86d 	bl	8001300 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e009      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_RCC_OscConfig+0x7c4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f0      	bne.n	8002222 <HAL_RCC_OscConfig+0x796>
 8002240:	e001      	b.n	8002246 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3720      	adds	r7, #32
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	f99d808c 	.word	0xf99d808c

08002258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0c8      	b.n	80023fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800226c:	4b66      	ldr	r3, [pc, #408]	; (8002408 <HAL_RCC_ClockConfig+0x1b0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d910      	bls.n	800229c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_RCC_ClockConfig+0x1b0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 0207 	bic.w	r2, r3, #7
 8002282:	4961      	ldr	r1, [pc, #388]	; (8002408 <HAL_RCC_ClockConfig+0x1b0>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b5f      	ldr	r3, [pc, #380]	; (8002408 <HAL_RCC_ClockConfig+0x1b0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0b0      	b.n	80023fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d04c      	beq.n	8002342 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b0:	4b56      	ldr	r3, [pc, #344]	; (800240c <HAL_RCC_ClockConfig+0x1b4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d121      	bne.n	8002300 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e09e      	b.n	80023fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022c8:	4b50      	ldr	r3, [pc, #320]	; (800240c <HAL_RCC_ClockConfig+0x1b4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d115      	bne.n	8002300 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e092      	b.n	80023fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d107      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022e0:	4b4a      	ldr	r3, [pc, #296]	; (800240c <HAL_RCC_ClockConfig+0x1b4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d109      	bne.n	8002300 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e086      	b.n	80023fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f0:	4b46      	ldr	r3, [pc, #280]	; (800240c <HAL_RCC_ClockConfig+0x1b4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e07e      	b.n	80023fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002300:	4b42      	ldr	r3, [pc, #264]	; (800240c <HAL_RCC_ClockConfig+0x1b4>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f023 0203 	bic.w	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	493f      	ldr	r1, [pc, #252]	; (800240c <HAL_RCC_ClockConfig+0x1b4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002312:	f7fe fff5 	bl	8001300 <HAL_GetTick>
 8002316:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002318:	e00a      	b.n	8002330 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231a:	f7fe fff1 	bl	8001300 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	; 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e066      	b.n	80023fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002330:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCC_ClockConfig+0x1b4>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 020c 	and.w	r2, r3, #12
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	429a      	cmp	r2, r3
 8002340:	d1eb      	bne.n	800231a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234e:	4b2f      	ldr	r3, [pc, #188]	; (800240c <HAL_RCC_ClockConfig+0x1b4>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	492c      	ldr	r1, [pc, #176]	; (800240c <HAL_RCC_ClockConfig+0x1b4>)
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <HAL_RCC_ClockConfig+0x1b0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d210      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b26      	ldr	r3, [pc, #152]	; (8002408 <HAL_RCC_ClockConfig+0x1b0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 0207 	bic.w	r2, r3, #7
 8002376:	4924      	ldr	r1, [pc, #144]	; (8002408 <HAL_RCC_ClockConfig+0x1b0>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b22      	ldr	r3, [pc, #136]	; (8002408 <HAL_RCC_ClockConfig+0x1b0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e036      	b.n	80023fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_RCC_ClockConfig+0x1b4>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4918      	ldr	r1, [pc, #96]	; (800240c <HAL_RCC_ClockConfig+0x1b4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_RCC_ClockConfig+0x1b4>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4910      	ldr	r1, [pc, #64]	; (800240c <HAL_RCC_ClockConfig+0x1b4>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ce:	f000 f825 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_RCC_ClockConfig+0x1b4>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	490c      	ldr	r1, [pc, #48]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	f003 031f 	and.w	r3, r3, #31
 80023e6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fe6c 	bl	80010d0 <HAL_InitTick>
 80023f8:	4603      	mov	r3, r0
 80023fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80023fc:	7afb      	ldrb	r3, [r7, #11]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40022000 	.word	0x40022000
 800240c:	40021000 	.word	0x40021000
 8002410:	080090f8 	.word	0x080090f8
 8002414:	20000000 	.word	0x20000000
 8002418:	20000004 	.word	0x20000004

0800241c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242a:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002434:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x34>
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d121      	bne.n	800248e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d11e      	bne.n	800248e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002450:	4b34      	ldr	r3, [pc, #208]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d107      	bne.n	800246c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800245c:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 800245e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	e005      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800246c:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002478:	4a2b      	ldr	r2, [pc, #172]	; (8002528 <HAL_RCC_GetSysClockFreq+0x10c>)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002480:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10d      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b04      	cmp	r3, #4
 8002492:	d102      	bne.n	800249a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_RCC_GetSysClockFreq+0x110>)
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	e004      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024a0:	4b23      	ldr	r3, [pc, #140]	; (8002530 <HAL_RCC_GetSysClockFreq+0x114>)
 80024a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b0c      	cmp	r3, #12
 80024a8:	d134      	bne.n	8002514 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d003      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d003      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0xac>
 80024c0:	e005      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <HAL_RCC_GetSysClockFreq+0x110>)
 80024c4:	617b      	str	r3, [r7, #20]
      break;
 80024c6:	e005      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ca:	617b      	str	r3, [r7, #20]
      break;
 80024cc:	e002      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	617b      	str	r3, [r7, #20]
      break;
 80024d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024d4:	4b13      	ldr	r3, [pc, #76]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	3301      	adds	r3, #1
 80024e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	fb02 f203 	mul.w	r2, r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	0e5b      	lsrs	r3, r3, #25
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	3301      	adds	r3, #1
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002514:	69bb      	ldr	r3, [r7, #24]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	; 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	08009110 	.word	0x08009110
 800252c:	00f42400 	.word	0x00f42400
 8002530:	007a1200 	.word	0x007a1200

08002534 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <HAL_RCC_GetHCLKFreq+0x14>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	20000000 	.word	0x20000000

0800254c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002550:	f7ff fff0 	bl	8002534 <HAL_RCC_GetHCLKFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	4904      	ldr	r1, [pc, #16]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002562:	5ccb      	ldrb	r3, [r1, r3]
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	08009108 	.word	0x08009108

08002578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800257c:	f7ff ffda 	bl	8002534 <HAL_RCC_GetHCLKFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	0adb      	lsrs	r3, r3, #11
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	4904      	ldr	r1, [pc, #16]	; (80025a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	08009108 	.word	0x08009108

080025a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	220f      	movs	r2, #15
 80025b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_RCC_GetClockConfig+0x5c>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80025c0:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <HAL_RCC_GetClockConfig+0x5c>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <HAL_RCC_GetClockConfig+0x5c>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80025d8:	4b09      	ldr	r3, [pc, #36]	; (8002600 <HAL_RCC_GetClockConfig+0x5c>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	08db      	lsrs	r3, r3, #3
 80025de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <HAL_RCC_GetClockConfig+0x60>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0207 	and.w	r2, r3, #7
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	601a      	str	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	40022000 	.word	0x40022000

08002608 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002614:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002620:	f7ff f9d0 	bl	80019c4 <HAL_PWREx_GetVoltageRange>
 8002624:	6178      	str	r0, [r7, #20]
 8002626:	e014      	b.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002632:	6593      	str	r3, [r2, #88]	; 0x58
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002640:	f7ff f9c0 	bl	80019c4 <HAL_PWREx_GetVoltageRange>
 8002644:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002646:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800264c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002650:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002658:	d10b      	bne.n	8002672 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b80      	cmp	r3, #128	; 0x80
 800265e:	d919      	bls.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2ba0      	cmp	r3, #160	; 0xa0
 8002664:	d902      	bls.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002666:	2302      	movs	r3, #2
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	e013      	b.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800266c:	2301      	movs	r3, #1
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	e010      	b.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	d902      	bls.n	800267e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002678:	2303      	movs	r3, #3
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	e00a      	b.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b80      	cmp	r3, #128	; 0x80
 8002682:	d102      	bne.n	800268a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002684:	2302      	movs	r3, #2
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	e004      	b.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b70      	cmp	r3, #112	; 0x70
 800268e:	d101      	bne.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002690:	2301      	movs	r3, #1
 8002692:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 0207 	bic.w	r2, r3, #7
 800269c:	4909      	ldr	r1, [pc, #36]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026a4:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40022000 	.word	0x40022000

080026c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026d0:	2300      	movs	r3, #0
 80026d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026d4:	2300      	movs	r3, #0
 80026d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d041      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026ec:	d02a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026f2:	d824      	bhi.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026f8:	d008      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026fe:	d81e      	bhi.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002708:	d010      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800270a:	e018      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800270c:	4b86      	ldr	r3, [pc, #536]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a85      	ldr	r2, [pc, #532]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002716:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002718:	e015      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fabb 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002726:	4603      	mov	r3, r0
 8002728:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800272a:	e00c      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3320      	adds	r3, #32
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fba6 	bl	8002e84 <RCCEx_PLLSAI2_Config>
 8002738:	4603      	mov	r3, r0
 800273a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800273c:	e003      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	74fb      	strb	r3, [r7, #19]
      break;
 8002742:	e000      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10b      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800274c:	4b76      	ldr	r3, [pc, #472]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800275a:	4973      	ldr	r1, [pc, #460]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002762:	e001      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d041      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002778:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800277c:	d02a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800277e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002782:	d824      	bhi.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002784:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002788:	d008      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800278a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800278e:	d81e      	bhi.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002798:	d010      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800279a:	e018      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800279c:	4b62      	ldr	r3, [pc, #392]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a61      	ldr	r2, [pc, #388]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027a8:	e015      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fa73 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027ba:	e00c      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3320      	adds	r3, #32
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fb5e 	bl	8002e84 <RCCEx_PLLSAI2_Config>
 80027c8:	4603      	mov	r3, r0
 80027ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027cc:	e003      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	74fb      	strb	r3, [r7, #19]
      break;
 80027d2:	e000      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027d6:	7cfb      	ldrb	r3, [r7, #19]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10b      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027dc:	4b52      	ldr	r3, [pc, #328]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ea:	494f      	ldr	r1, [pc, #316]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027f2:	e001      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f4:	7cfb      	ldrb	r3, [r7, #19]
 80027f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80a0 	beq.w	8002946 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002806:	2300      	movs	r3, #0
 8002808:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800281a:	2300      	movs	r3, #0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00d      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002820:	4b41      	ldr	r3, [pc, #260]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	4a40      	ldr	r2, [pc, #256]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282a:	6593      	str	r3, [r2, #88]	; 0x58
 800282c:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002838:	2301      	movs	r3, #1
 800283a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800283c:	4b3b      	ldr	r3, [pc, #236]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a3a      	ldr	r2, [pc, #232]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002846:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002848:	f7fe fd5a 	bl	8001300 <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800284e:	e009      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002850:	f7fe fd56 	bl	8001300 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d902      	bls.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	74fb      	strb	r3, [r7, #19]
        break;
 8002862:	e005      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002864:	4b31      	ldr	r3, [pc, #196]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ef      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d15c      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002876:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002880:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01f      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	429a      	cmp	r2, r3
 8002892:	d019      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800289e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028a0:	4b21      	ldr	r3, [pc, #132]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	4a20      	ldr	r2, [pc, #128]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b6:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028c0:	4a19      	ldr	r2, [pc, #100]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d016      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe fd15 	bl	8001300 <HAL_GetTick>
 80028d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d8:	e00b      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028da:	f7fe fd11 	bl	8001300 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d902      	bls.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	74fb      	strb	r3, [r7, #19]
            break;
 80028f0:	e006      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ec      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10c      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002916:	4904      	ldr	r1, [pc, #16]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800291e:	e009      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002920:	7cfb      	ldrb	r3, [r7, #19]
 8002922:	74bb      	strb	r3, [r7, #18]
 8002924:	e006      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002934:	7c7b      	ldrb	r3, [r7, #17]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d105      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293a:	4b9e      	ldr	r3, [pc, #632]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	4a9d      	ldr	r2, [pc, #628]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002944:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002952:	4b98      	ldr	r3, [pc, #608]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002958:	f023 0203 	bic.w	r2, r3, #3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	4994      	ldr	r1, [pc, #592]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002974:	4b8f      	ldr	r3, [pc, #572]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	f023 020c 	bic.w	r2, r3, #12
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	498c      	ldr	r1, [pc, #560]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002996:	4b87      	ldr	r3, [pc, #540]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	4983      	ldr	r1, [pc, #524]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029b8:	4b7e      	ldr	r3, [pc, #504]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	497b      	ldr	r1, [pc, #492]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029da:	4b76      	ldr	r3, [pc, #472]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e8:	4972      	ldr	r1, [pc, #456]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029fc:	4b6d      	ldr	r3, [pc, #436]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	496a      	ldr	r1, [pc, #424]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a1e:	4b65      	ldr	r3, [pc, #404]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2c:	4961      	ldr	r1, [pc, #388]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a40:	4b5c      	ldr	r3, [pc, #368]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4e:	4959      	ldr	r1, [pc, #356]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a62:	4b54      	ldr	r3, [pc, #336]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a70:	4950      	ldr	r1, [pc, #320]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a84:	4b4b      	ldr	r3, [pc, #300]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a92:	4948      	ldr	r1, [pc, #288]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aa6:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	493f      	ldr	r1, [pc, #252]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d028      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ac8:	4b3a      	ldr	r3, [pc, #232]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad6:	4937      	ldr	r1, [pc, #220]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae8:	4b32      	ldr	r3, [pc, #200]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a31      	ldr	r2, [pc, #196]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af2:	60d3      	str	r3, [r2, #12]
 8002af4:	e011      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002afa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002afe:	d10c      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	2101      	movs	r1, #1
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f8c8 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b16:	7cfb      	ldrb	r3, [r7, #19]
 8002b18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d028      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b26:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	491f      	ldr	r1, [pc, #124]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b44:	d106      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4a1a      	ldr	r2, [pc, #104]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b50:	60d3      	str	r3, [r2, #12]
 8002b52:	e011      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3304      	adds	r3, #4
 8002b62:	2101      	movs	r1, #1
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 f899 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b6e:	7cfb      	ldrb	r3, [r7, #19]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d02b      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b92:	4908      	ldr	r1, [pc, #32]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ba2:	d109      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a02      	ldr	r2, [pc, #8]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bae:	60d3      	str	r3, [r2, #12]
 8002bb0:	e014      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 f867 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d02f      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002be8:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf6:	4928      	ldr	r1, [pc, #160]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c06:	d10d      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f844 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d014      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c1e:	7cfb      	ldrb	r3, [r7, #19]
 8002c20:	74bb      	strb	r3, [r7, #18]
 8002c22:	e011      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3320      	adds	r3, #32
 8002c32:	2102      	movs	r1, #2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 f925 	bl	8002e84 <RCCEx_PLLSAI2_Config>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c3e:	7cfb      	ldrb	r3, [r7, #19]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c44:	7cfb      	ldrb	r3, [r7, #19]
 8002c46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c62:	490d      	ldr	r1, [pc, #52]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c86:	4904      	ldr	r1, [pc, #16]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000

08002c9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002caa:	4b75      	ldr	r3, [pc, #468]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d018      	beq.n	8002ce8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cb6:	4b72      	ldr	r3, [pc, #456]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0203 	and.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d10d      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cce:	4b6c      	ldr	r3, [pc, #432]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
       ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d047      	beq.n	8002d72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	e044      	b.n	8002d72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d018      	beq.n	8002d22 <RCCEx_PLLSAI1_Config+0x86>
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d825      	bhi.n	8002d40 <RCCEx_PLLSAI1_Config+0xa4>
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d002      	beq.n	8002cfe <RCCEx_PLLSAI1_Config+0x62>
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d009      	beq.n	8002d10 <RCCEx_PLLSAI1_Config+0x74>
 8002cfc:	e020      	b.n	8002d40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cfe:	4b60      	ldr	r3, [pc, #384]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d11d      	bne.n	8002d46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0e:	e01a      	b.n	8002d46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d10:	4b5b      	ldr	r3, [pc, #364]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d116      	bne.n	8002d4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d20:	e013      	b.n	8002d4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d22:	4b57      	ldr	r3, [pc, #348]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10f      	bne.n	8002d4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d2e:	4b54      	ldr	r3, [pc, #336]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d3e:	e006      	b.n	8002d4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      break;
 8002d44:	e004      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d46:	bf00      	nop
 8002d48:	e002      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e000      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10d      	bne.n	8002d72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d56:	4b4a      	ldr	r3, [pc, #296]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	4944      	ldr	r1, [pc, #272]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d17d      	bne.n	8002e74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d78:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a40      	ldr	r2, [pc, #256]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d84:	f7fe fabc 	bl	8001300 <HAL_GetTick>
 8002d88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d8a:	e009      	b.n	8002da0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d8c:	f7fe fab8 	bl	8001300 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d902      	bls.n	8002da0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d9e:	e005      	b.n	8002dac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002da0:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1ef      	bne.n	8002d8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d160      	bne.n	8002e74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d111      	bne.n	8002ddc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db8:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6892      	ldr	r2, [r2, #8]
 8002dc8:	0211      	lsls	r1, r2, #8
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68d2      	ldr	r2, [r2, #12]
 8002dce:	0912      	lsrs	r2, r2, #4
 8002dd0:	0452      	lsls	r2, r2, #17
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	492a      	ldr	r1, [pc, #168]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	610b      	str	r3, [r1, #16]
 8002dda:	e027      	b.n	8002e2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d112      	bne.n	8002e08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de2:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6892      	ldr	r2, [r2, #8]
 8002df2:	0211      	lsls	r1, r2, #8
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6912      	ldr	r2, [r2, #16]
 8002df8:	0852      	lsrs	r2, r2, #1
 8002dfa:	3a01      	subs	r2, #1
 8002dfc:	0552      	lsls	r2, r2, #21
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	491f      	ldr	r1, [pc, #124]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	610b      	str	r3, [r1, #16]
 8002e06:	e011      	b.n	8002e2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e08:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6892      	ldr	r2, [r2, #8]
 8002e18:	0211      	lsls	r1, r2, #8
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6952      	ldr	r2, [r2, #20]
 8002e1e:	0852      	lsrs	r2, r2, #1
 8002e20:	3a01      	subs	r2, #1
 8002e22:	0652      	lsls	r2, r2, #25
 8002e24:	430a      	orrs	r2, r1
 8002e26:	4916      	ldr	r1, [pc, #88]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e2c:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e38:	f7fe fa62 	bl	8001300 <HAL_GetTick>
 8002e3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e3e:	e009      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e40:	f7fe fa5e 	bl	8001300 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d902      	bls.n	8002e54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	73fb      	strb	r3, [r7, #15]
          break;
 8002e52:	e005      	b.n	8002e60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ef      	beq.n	8002e40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	4904      	ldr	r1, [pc, #16]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000

08002e84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e92:	4b6a      	ldr	r3, [pc, #424]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d018      	beq.n	8002ed0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e9e:	4b67      	ldr	r3, [pc, #412]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 0203 	and.w	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d10d      	bne.n	8002eca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
       ||
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002eb6:	4b61      	ldr	r3, [pc, #388]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d047      	beq.n	8002f5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	e044      	b.n	8002f5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d018      	beq.n	8002f0a <RCCEx_PLLSAI2_Config+0x86>
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d825      	bhi.n	8002f28 <RCCEx_PLLSAI2_Config+0xa4>
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d002      	beq.n	8002ee6 <RCCEx_PLLSAI2_Config+0x62>
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d009      	beq.n	8002ef8 <RCCEx_PLLSAI2_Config+0x74>
 8002ee4:	e020      	b.n	8002f28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ee6:	4b55      	ldr	r3, [pc, #340]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11d      	bne.n	8002f2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef6:	e01a      	b.n	8002f2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ef8:	4b50      	ldr	r3, [pc, #320]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d116      	bne.n	8002f32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f08:	e013      	b.n	8002f32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f0a:	4b4c      	ldr	r3, [pc, #304]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10f      	bne.n	8002f36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f16:	4b49      	ldr	r3, [pc, #292]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f26:	e006      	b.n	8002f36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f2c:	e004      	b.n	8002f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e002      	b.n	8002f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f32:	bf00      	nop
 8002f34:	e000      	b.n	8002f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f36:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10d      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f3e:	4b3f      	ldr	r3, [pc, #252]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6819      	ldr	r1, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	430b      	orrs	r3, r1
 8002f54:	4939      	ldr	r1, [pc, #228]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d167      	bne.n	8003030 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a35      	ldr	r2, [pc, #212]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6c:	f7fe f9c8 	bl	8001300 <HAL_GetTick>
 8002f70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f72:	e009      	b.n	8002f88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f74:	f7fe f9c4 	bl	8001300 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d902      	bls.n	8002f88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	73fb      	strb	r3, [r7, #15]
        break;
 8002f86:	e005      	b.n	8002f94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f88:	4b2c      	ldr	r3, [pc, #176]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1ef      	bne.n	8002f74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d14a      	bne.n	8003030 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d111      	bne.n	8002fc4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fa0:	4b26      	ldr	r3, [pc, #152]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6892      	ldr	r2, [r2, #8]
 8002fb0:	0211      	lsls	r1, r2, #8
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68d2      	ldr	r2, [r2, #12]
 8002fb6:	0912      	lsrs	r2, r2, #4
 8002fb8:	0452      	lsls	r2, r2, #17
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	491f      	ldr	r1, [pc, #124]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	614b      	str	r3, [r1, #20]
 8002fc2:	e011      	b.n	8002fe8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6892      	ldr	r2, [r2, #8]
 8002fd4:	0211      	lsls	r1, r2, #8
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6912      	ldr	r2, [r2, #16]
 8002fda:	0852      	lsrs	r2, r2, #1
 8002fdc:	3a01      	subs	r2, #1
 8002fde:	0652      	lsls	r2, r2, #25
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	4916      	ldr	r1, [pc, #88]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a13      	ldr	r2, [pc, #76]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff4:	f7fe f984 	bl	8001300 <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ffa:	e009      	b.n	8003010 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ffc:	f7fe f980 	bl	8001300 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d902      	bls.n	8003010 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	73fb      	strb	r3, [r7, #15]
          break;
 800300e:	e005      	b.n	800301c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ef      	beq.n	8002ffc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003024:	695a      	ldr	r2, [r3, #20]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	4904      	ldr	r1, [pc, #16]	; (800303c <RCCEx_PLLSAI2_Config+0x1b8>)
 800302c:	4313      	orrs	r3, r2
 800302e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000

08003040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e049      	b.n	80030e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f841 	bl	80030ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f000 f9f8 	bl	8003474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d001      	beq.n	800311c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e04f      	b.n	80031bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01d      	beq.n	800317a <HAL_TIM_Base_Start_IT+0x76>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003146:	d018      	beq.n	800317a <HAL_TIM_Base_Start_IT+0x76>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <HAL_TIM_Base_Start_IT+0xc8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_TIM_Base_Start_IT+0x76>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00e      	beq.n	800317a <HAL_TIM_Base_Start_IT+0x76>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1c      	ldr	r2, [pc, #112]	; (80031d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d009      	beq.n	800317a <HAL_TIM_Base_Start_IT+0x76>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1b      	ldr	r2, [pc, #108]	; (80031d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d004      	beq.n	800317a <HAL_TIM_Base_Start_IT+0x76>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a19      	ldr	r2, [pc, #100]	; (80031dc <HAL_TIM_Base_Start_IT+0xd8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d115      	bne.n	80031a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003182:	4013      	ands	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b06      	cmp	r3, #6
 800318a:	d015      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0xb4>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003192:	d011      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a4:	e008      	b.n	80031b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e000      	b.n	80031ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40012c00 	.word	0x40012c00
 80031cc:	40000400 	.word	0x40000400
 80031d0:	40000800 	.word	0x40000800
 80031d4:	40000c00 	.word	0x40000c00
 80031d8:	40013400 	.word	0x40013400
 80031dc:	40014000 	.word	0x40014000
 80031e0:	00010007 	.word	0x00010007

080031e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d122      	bne.n	8003240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b02      	cmp	r3, #2
 8003206:	d11b      	bne.n	8003240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0202 	mvn.w	r2, #2
 8003210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f905 	bl	8003436 <HAL_TIM_IC_CaptureCallback>
 800322c:	e005      	b.n	800323a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f8f7 	bl	8003422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f908 	bl	800344a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b04      	cmp	r3, #4
 800324c:	d122      	bne.n	8003294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d11b      	bne.n	8003294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0204 	mvn.w	r2, #4
 8003264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f8db 	bl	8003436 <HAL_TIM_IC_CaptureCallback>
 8003280:	e005      	b.n	800328e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f8cd 	bl	8003422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f8de 	bl	800344a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d122      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d11b      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0208 	mvn.w	r2, #8
 80032b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2204      	movs	r2, #4
 80032be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f8b1 	bl	8003436 <HAL_TIM_IC_CaptureCallback>
 80032d4:	e005      	b.n	80032e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f8a3 	bl	8003422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f8b4 	bl	800344a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b10      	cmp	r3, #16
 80032f4:	d122      	bne.n	800333c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b10      	cmp	r3, #16
 8003302:	d11b      	bne.n	800333c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0210 	mvn.w	r2, #16
 800330c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2208      	movs	r2, #8
 8003312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f887 	bl	8003436 <HAL_TIM_IC_CaptureCallback>
 8003328:	e005      	b.n	8003336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f879 	bl	8003422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f88a 	bl	800344a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b01      	cmp	r3, #1
 8003348:	d10e      	bne.n	8003368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b01      	cmp	r3, #1
 8003356:	d107      	bne.n	8003368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0201 	mvn.w	r2, #1
 8003360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd fe18 	bl	8000f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b80      	cmp	r3, #128	; 0x80
 8003374:	d10e      	bne.n	8003394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003380:	2b80      	cmp	r3, #128	; 0x80
 8003382:	d107      	bne.n	8003394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800338c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f914 	bl	80035bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a2:	d10e      	bne.n	80033c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ae:	2b80      	cmp	r3, #128	; 0x80
 80033b0:	d107      	bne.n	80033c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f907 	bl	80035d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033cc:	2b40      	cmp	r3, #64	; 0x40
 80033ce:	d10e      	bne.n	80033ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d107      	bne.n	80033ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f838 	bl	800345e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	d10e      	bne.n	800341a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b20      	cmp	r3, #32
 8003408:	d107      	bne.n	800341a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f06f 0220 	mvn.w	r2, #32
 8003412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f8c7 	bl	80035a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a40      	ldr	r2, [pc, #256]	; (8003588 <TIM_Base_SetConfig+0x114>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d013      	beq.n	80034b4 <TIM_Base_SetConfig+0x40>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003492:	d00f      	beq.n	80034b4 <TIM_Base_SetConfig+0x40>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a3d      	ldr	r2, [pc, #244]	; (800358c <TIM_Base_SetConfig+0x118>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00b      	beq.n	80034b4 <TIM_Base_SetConfig+0x40>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a3c      	ldr	r2, [pc, #240]	; (8003590 <TIM_Base_SetConfig+0x11c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d007      	beq.n	80034b4 <TIM_Base_SetConfig+0x40>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a3b      	ldr	r2, [pc, #236]	; (8003594 <TIM_Base_SetConfig+0x120>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d003      	beq.n	80034b4 <TIM_Base_SetConfig+0x40>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a3a      	ldr	r2, [pc, #232]	; (8003598 <TIM_Base_SetConfig+0x124>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d108      	bne.n	80034c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a2f      	ldr	r2, [pc, #188]	; (8003588 <TIM_Base_SetConfig+0x114>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01f      	beq.n	800350e <TIM_Base_SetConfig+0x9a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d4:	d01b      	beq.n	800350e <TIM_Base_SetConfig+0x9a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a2c      	ldr	r2, [pc, #176]	; (800358c <TIM_Base_SetConfig+0x118>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d017      	beq.n	800350e <TIM_Base_SetConfig+0x9a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a2b      	ldr	r2, [pc, #172]	; (8003590 <TIM_Base_SetConfig+0x11c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <TIM_Base_SetConfig+0x9a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a2a      	ldr	r2, [pc, #168]	; (8003594 <TIM_Base_SetConfig+0x120>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00f      	beq.n	800350e <TIM_Base_SetConfig+0x9a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a29      	ldr	r2, [pc, #164]	; (8003598 <TIM_Base_SetConfig+0x124>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00b      	beq.n	800350e <TIM_Base_SetConfig+0x9a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a28      	ldr	r2, [pc, #160]	; (800359c <TIM_Base_SetConfig+0x128>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d007      	beq.n	800350e <TIM_Base_SetConfig+0x9a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a27      	ldr	r2, [pc, #156]	; (80035a0 <TIM_Base_SetConfig+0x12c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d003      	beq.n	800350e <TIM_Base_SetConfig+0x9a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a26      	ldr	r2, [pc, #152]	; (80035a4 <TIM_Base_SetConfig+0x130>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d108      	bne.n	8003520 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a10      	ldr	r2, [pc, #64]	; (8003588 <TIM_Base_SetConfig+0x114>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00f      	beq.n	800356c <TIM_Base_SetConfig+0xf8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <TIM_Base_SetConfig+0x124>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00b      	beq.n	800356c <TIM_Base_SetConfig+0xf8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a11      	ldr	r2, [pc, #68]	; (800359c <TIM_Base_SetConfig+0x128>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d007      	beq.n	800356c <TIM_Base_SetConfig+0xf8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a10      	ldr	r2, [pc, #64]	; (80035a0 <TIM_Base_SetConfig+0x12c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d003      	beq.n	800356c <TIM_Base_SetConfig+0xf8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a0f      	ldr	r2, [pc, #60]	; (80035a4 <TIM_Base_SetConfig+0x130>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d103      	bne.n	8003574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	615a      	str	r2, [r3, #20]
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40012c00 	.word	0x40012c00
 800358c:	40000400 	.word	0x40000400
 8003590:	40000800 	.word	0x40000800
 8003594:	40000c00 	.word	0x40000c00
 8003598:	40013400 	.word	0x40013400
 800359c:	40014000 	.word	0x40014000
 80035a0:	40014400 	.word	0x40014400
 80035a4:	40014800 	.word	0x40014800

080035a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e040      	b.n	8003678 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fd fd06 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2224      	movs	r2, #36	; 0x24
 8003610:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fae4 	bl	8003bf0 <UART_SetConfig>
 8003628:	4603      	mov	r3, r0
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e022      	b.n	8003678 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fd62 	bl	8004104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800364e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800365e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fde9 	bl	8004248 <UART_CheckIdleState>
 8003676:	4603      	mov	r3, r0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	4613      	mov	r3, r2
 800368c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003692:	2b20      	cmp	r3, #32
 8003694:	d145      	bne.n	8003722 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_UART_Transmit_IT+0x22>
 800369c:	88fb      	ldrh	r3, [r7, #6]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e03e      	b.n	8003724 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_UART_Transmit_IT+0x34>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e037      	b.n	8003724 <HAL_UART_Transmit_IT+0xa4>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	88fa      	ldrh	r2, [r7, #6]
 80036c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	88fa      	ldrh	r2, [r7, #6]
 80036ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2221      	movs	r2, #33	; 0x21
 80036e4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ee:	d107      	bne.n	8003700 <HAL_UART_Transmit_IT+0x80>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d103      	bne.n	8003700 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a0d      	ldr	r2, [pc, #52]	; (8003730 <HAL_UART_Transmit_IT+0xb0>)
 80036fc:	669a      	str	r2, [r3, #104]	; 0x68
 80036fe:	e002      	b.n	8003706 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a0c      	ldr	r2, [pc, #48]	; (8003734 <HAL_UART_Transmit_IT+0xb4>)
 8003704:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800371c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8003722:	2302      	movs	r3, #2
  }
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	080045e3 	.word	0x080045e3
 8003734:	0800456f 	.word	0x0800456f

08003738 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	4613      	mov	r3, r2
 8003744:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800374a:	2b20      	cmp	r3, #32
 800374c:	d131      	bne.n	80037b2 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_UART_Receive_IT+0x22>
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e02a      	b.n	80037b4 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_UART_Receive_IT+0x34>
 8003768:	2302      	movs	r3, #2
 800376a:	e023      	b.n	80037b4 <HAL_UART_Receive_IT+0x7c>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a0f      	ldr	r2, [pc, #60]	; (80037bc <HAL_UART_Receive_IT+0x84>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00e      	beq.n	80037a2 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80037a0:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	461a      	mov	r2, r3
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fe13 	bl	80043d4 <UART_Start_Receive_IT>
 80037ae:	4603      	mov	r3, r0
 80037b0:	e000      	b.n	80037b4 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
  }
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40008000 	.word	0x40008000

080037c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d113      	bne.n	8003818 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00e      	beq.n	8003818 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d009      	beq.n	8003818 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 81ce 	beq.w	8003baa <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	4798      	blx	r3
      }
      return;
 8003816:	e1c8      	b.n	8003baa <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80e3 	beq.w	80039e6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d105      	bne.n	8003836 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4ba6      	ldr	r3, [pc, #664]	; (8003ac8 <HAL_UART_IRQHandler+0x308>)
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80d8 	beq.w	80039e6 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d010      	beq.n	8003862 <HAL_UART_IRQHandler+0xa2>
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2201      	movs	r2, #1
 8003850:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003858:	f043 0201 	orr.w	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d010      	beq.n	800388e <HAL_UART_IRQHandler+0xce>
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2202      	movs	r2, #2
 800387c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003884:	f043 0204 	orr.w	r2, r3, #4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <HAL_UART_IRQHandler+0xfa>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2204      	movs	r2, #4
 80038a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b0:	f043 0202 	orr.w	r2, r3, #2
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d015      	beq.n	80038f0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d104      	bne.n	80038d8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2208      	movs	r2, #8
 80038de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e6:	f043 0208 	orr.w	r2, r3, #8
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d011      	beq.n	800391e <HAL_UART_IRQHandler+0x15e>
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00c      	beq.n	800391e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800390c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8142 	beq.w	8003bae <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00c      	beq.n	800394e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003954:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d004      	beq.n	800396e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800396a:	2b00      	cmp	r3, #0
 800396c:	d031      	beq.n	80039d2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fdb8 	bl	80044e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d123      	bne.n	80039ca <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003990:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	2b00      	cmp	r3, #0
 8003998:	d013      	beq.n	80039c2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	4a4b      	ldr	r2, [pc, #300]	; (8003acc <HAL_UART_IRQHandler+0x30c>)
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fd fdd6 	bl	8001558 <HAL_DMA_Abort_IT>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d017      	beq.n	80039e2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80039bc:	4610      	mov	r0, r2
 80039be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c0:	e00f      	b.n	80039e2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f8fe 	bl	8003bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c8:	e00b      	b.n	80039e2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f8fa 	bl	8003bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	e007      	b.n	80039e2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8f6 	bl	8003bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80039e0:	e0e5      	b.n	8003bae <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e2:	bf00      	nop
    return;
 80039e4:	e0e3      	b.n	8003bae <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	f040 80a9 	bne.w	8003b42 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80a3 	beq.w	8003b42 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 809d 	beq.w	8003b42 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2210      	movs	r2, #16
 8003a0e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b40      	cmp	r3, #64	; 0x40
 8003a1c:	d158      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003a28:	893b      	ldrh	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80c1 	beq.w	8003bb2 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a36:	893a      	ldrh	r2, [r7, #8]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	f080 80ba 	bcs.w	8003bb2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	893a      	ldrh	r2, [r7, #8]
 8003a42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d12a      	bne.n	8003aac <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a64:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0201 	bic.w	r2, r2, #1
 8003a74:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a84:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0210 	bic.w	r2, r2, #16
 8003aa0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd fd18 	bl	80014dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f889 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ac6:	e074      	b.n	8003bb2 <HAL_UART_IRQHandler+0x3f2>
 8003ac8:	04000120 	.word	0x04000120
 8003acc:	08004543 	.word	0x08004543
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d063      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003aee:	897b      	ldrh	r3, [r7, #10]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d060      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b02:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0210 	bic.w	r2, r2, #16
 8003b34:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b36:	897b      	ldrh	r3, [r7, #10]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f84c 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b40:	e039      	b.n	8003bb6 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00d      	beq.n	8003b68 <HAL_UART_IRQHandler+0x3a8>
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fe6d 	bl	8004840 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b66:	e029      	b.n	8003bbc <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00d      	beq.n	8003b8e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01a      	beq.n	8003bba <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
    }
    return;
 8003b8c:	e015      	b.n	8003bba <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d011      	beq.n	8003bbc <HAL_UART_IRQHandler+0x3fc>
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00c      	beq.n	8003bbc <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fd5b 	bl	800465e <UART_EndTransmit_IT>
    return;
 8003ba8:	e008      	b.n	8003bbc <HAL_UART_IRQHandler+0x3fc>
      return;
 8003baa:	bf00      	nop
 8003bac:	e006      	b.n	8003bbc <HAL_UART_IRQHandler+0x3fc>
    return;
 8003bae:	bf00      	nop
 8003bb0:	e004      	b.n	8003bbc <HAL_UART_IRQHandler+0x3fc>
      return;
 8003bb2:	bf00      	nop
 8003bb4:	e002      	b.n	8003bbc <HAL_UART_IRQHandler+0x3fc>
      return;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <HAL_UART_IRQHandler+0x3fc>
    return;
 8003bba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003bbc:	3720      	adds	r7, #32
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop

08003bc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf0:	b5b0      	push	{r4, r5, r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4bad      	ldr	r3, [pc, #692]	; (8003ed0 <UART_SetConfig+0x2e0>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	69f9      	ldr	r1, [r7, #28]
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4aa2      	ldr	r2, [pc, #648]	; (8003ed4 <UART_SetConfig+0x2e4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a99      	ldr	r2, [pc, #612]	; (8003ed8 <UART_SetConfig+0x2e8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d121      	bne.n	8003cba <UART_SetConfig+0xca>
 8003c76:	4b99      	ldr	r3, [pc, #612]	; (8003edc <UART_SetConfig+0x2ec>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d817      	bhi.n	8003cb4 <UART_SetConfig+0xc4>
 8003c84:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <UART_SetConfig+0x9c>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003ca9 	.word	0x08003ca9
 8003c94:	08003ca3 	.word	0x08003ca3
 8003c98:	08003caf 	.word	0x08003caf
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	76fb      	strb	r3, [r7, #27]
 8003ca0:	e0e7      	b.n	8003e72 <UART_SetConfig+0x282>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	76fb      	strb	r3, [r7, #27]
 8003ca6:	e0e4      	b.n	8003e72 <UART_SetConfig+0x282>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	76fb      	strb	r3, [r7, #27]
 8003cac:	e0e1      	b.n	8003e72 <UART_SetConfig+0x282>
 8003cae:	2308      	movs	r3, #8
 8003cb0:	76fb      	strb	r3, [r7, #27]
 8003cb2:	e0de      	b.n	8003e72 <UART_SetConfig+0x282>
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	76fb      	strb	r3, [r7, #27]
 8003cb8:	e0db      	b.n	8003e72 <UART_SetConfig+0x282>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a88      	ldr	r2, [pc, #544]	; (8003ee0 <UART_SetConfig+0x2f0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d132      	bne.n	8003d2a <UART_SetConfig+0x13a>
 8003cc4:	4b85      	ldr	r3, [pc, #532]	; (8003edc <UART_SetConfig+0x2ec>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d828      	bhi.n	8003d24 <UART_SetConfig+0x134>
 8003cd2:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <UART_SetConfig+0xe8>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003d0d 	.word	0x08003d0d
 8003cdc:	08003d25 	.word	0x08003d25
 8003ce0:	08003d25 	.word	0x08003d25
 8003ce4:	08003d25 	.word	0x08003d25
 8003ce8:	08003d19 	.word	0x08003d19
 8003cec:	08003d25 	.word	0x08003d25
 8003cf0:	08003d25 	.word	0x08003d25
 8003cf4:	08003d25 	.word	0x08003d25
 8003cf8:	08003d13 	.word	0x08003d13
 8003cfc:	08003d25 	.word	0x08003d25
 8003d00:	08003d25 	.word	0x08003d25
 8003d04:	08003d25 	.word	0x08003d25
 8003d08:	08003d1f 	.word	0x08003d1f
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	76fb      	strb	r3, [r7, #27]
 8003d10:	e0af      	b.n	8003e72 <UART_SetConfig+0x282>
 8003d12:	2302      	movs	r3, #2
 8003d14:	76fb      	strb	r3, [r7, #27]
 8003d16:	e0ac      	b.n	8003e72 <UART_SetConfig+0x282>
 8003d18:	2304      	movs	r3, #4
 8003d1a:	76fb      	strb	r3, [r7, #27]
 8003d1c:	e0a9      	b.n	8003e72 <UART_SetConfig+0x282>
 8003d1e:	2308      	movs	r3, #8
 8003d20:	76fb      	strb	r3, [r7, #27]
 8003d22:	e0a6      	b.n	8003e72 <UART_SetConfig+0x282>
 8003d24:	2310      	movs	r3, #16
 8003d26:	76fb      	strb	r3, [r7, #27]
 8003d28:	e0a3      	b.n	8003e72 <UART_SetConfig+0x282>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a6d      	ldr	r2, [pc, #436]	; (8003ee4 <UART_SetConfig+0x2f4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d120      	bne.n	8003d76 <UART_SetConfig+0x186>
 8003d34:	4b69      	ldr	r3, [pc, #420]	; (8003edc <UART_SetConfig+0x2ec>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d3e:	2b30      	cmp	r3, #48	; 0x30
 8003d40:	d013      	beq.n	8003d6a <UART_SetConfig+0x17a>
 8003d42:	2b30      	cmp	r3, #48	; 0x30
 8003d44:	d814      	bhi.n	8003d70 <UART_SetConfig+0x180>
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	d009      	beq.n	8003d5e <UART_SetConfig+0x16e>
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d810      	bhi.n	8003d70 <UART_SetConfig+0x180>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <UART_SetConfig+0x168>
 8003d52:	2b10      	cmp	r3, #16
 8003d54:	d006      	beq.n	8003d64 <UART_SetConfig+0x174>
 8003d56:	e00b      	b.n	8003d70 <UART_SetConfig+0x180>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	76fb      	strb	r3, [r7, #27]
 8003d5c:	e089      	b.n	8003e72 <UART_SetConfig+0x282>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	76fb      	strb	r3, [r7, #27]
 8003d62:	e086      	b.n	8003e72 <UART_SetConfig+0x282>
 8003d64:	2304      	movs	r3, #4
 8003d66:	76fb      	strb	r3, [r7, #27]
 8003d68:	e083      	b.n	8003e72 <UART_SetConfig+0x282>
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	76fb      	strb	r3, [r7, #27]
 8003d6e:	e080      	b.n	8003e72 <UART_SetConfig+0x282>
 8003d70:	2310      	movs	r3, #16
 8003d72:	76fb      	strb	r3, [r7, #27]
 8003d74:	e07d      	b.n	8003e72 <UART_SetConfig+0x282>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a5b      	ldr	r2, [pc, #364]	; (8003ee8 <UART_SetConfig+0x2f8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d120      	bne.n	8003dc2 <UART_SetConfig+0x1d2>
 8003d80:	4b56      	ldr	r3, [pc, #344]	; (8003edc <UART_SetConfig+0x2ec>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d8c:	d013      	beq.n	8003db6 <UART_SetConfig+0x1c6>
 8003d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d90:	d814      	bhi.n	8003dbc <UART_SetConfig+0x1cc>
 8003d92:	2b80      	cmp	r3, #128	; 0x80
 8003d94:	d009      	beq.n	8003daa <UART_SetConfig+0x1ba>
 8003d96:	2b80      	cmp	r3, #128	; 0x80
 8003d98:	d810      	bhi.n	8003dbc <UART_SetConfig+0x1cc>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <UART_SetConfig+0x1b4>
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d006      	beq.n	8003db0 <UART_SetConfig+0x1c0>
 8003da2:	e00b      	b.n	8003dbc <UART_SetConfig+0x1cc>
 8003da4:	2300      	movs	r3, #0
 8003da6:	76fb      	strb	r3, [r7, #27]
 8003da8:	e063      	b.n	8003e72 <UART_SetConfig+0x282>
 8003daa:	2302      	movs	r3, #2
 8003dac:	76fb      	strb	r3, [r7, #27]
 8003dae:	e060      	b.n	8003e72 <UART_SetConfig+0x282>
 8003db0:	2304      	movs	r3, #4
 8003db2:	76fb      	strb	r3, [r7, #27]
 8003db4:	e05d      	b.n	8003e72 <UART_SetConfig+0x282>
 8003db6:	2308      	movs	r3, #8
 8003db8:	76fb      	strb	r3, [r7, #27]
 8003dba:	e05a      	b.n	8003e72 <UART_SetConfig+0x282>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	76fb      	strb	r3, [r7, #27]
 8003dc0:	e057      	b.n	8003e72 <UART_SetConfig+0x282>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a49      	ldr	r2, [pc, #292]	; (8003eec <UART_SetConfig+0x2fc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d125      	bne.n	8003e18 <UART_SetConfig+0x228>
 8003dcc:	4b43      	ldr	r3, [pc, #268]	; (8003edc <UART_SetConfig+0x2ec>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dda:	d017      	beq.n	8003e0c <UART_SetConfig+0x21c>
 8003ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003de0:	d817      	bhi.n	8003e12 <UART_SetConfig+0x222>
 8003de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de6:	d00b      	beq.n	8003e00 <UART_SetConfig+0x210>
 8003de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dec:	d811      	bhi.n	8003e12 <UART_SetConfig+0x222>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <UART_SetConfig+0x20a>
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df6:	d006      	beq.n	8003e06 <UART_SetConfig+0x216>
 8003df8:	e00b      	b.n	8003e12 <UART_SetConfig+0x222>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	76fb      	strb	r3, [r7, #27]
 8003dfe:	e038      	b.n	8003e72 <UART_SetConfig+0x282>
 8003e00:	2302      	movs	r3, #2
 8003e02:	76fb      	strb	r3, [r7, #27]
 8003e04:	e035      	b.n	8003e72 <UART_SetConfig+0x282>
 8003e06:	2304      	movs	r3, #4
 8003e08:	76fb      	strb	r3, [r7, #27]
 8003e0a:	e032      	b.n	8003e72 <UART_SetConfig+0x282>
 8003e0c:	2308      	movs	r3, #8
 8003e0e:	76fb      	strb	r3, [r7, #27]
 8003e10:	e02f      	b.n	8003e72 <UART_SetConfig+0x282>
 8003e12:	2310      	movs	r3, #16
 8003e14:	76fb      	strb	r3, [r7, #27]
 8003e16:	e02c      	b.n	8003e72 <UART_SetConfig+0x282>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a2d      	ldr	r2, [pc, #180]	; (8003ed4 <UART_SetConfig+0x2e4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d125      	bne.n	8003e6e <UART_SetConfig+0x27e>
 8003e22:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <UART_SetConfig+0x2ec>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e30:	d017      	beq.n	8003e62 <UART_SetConfig+0x272>
 8003e32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e36:	d817      	bhi.n	8003e68 <UART_SetConfig+0x278>
 8003e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e3c:	d00b      	beq.n	8003e56 <UART_SetConfig+0x266>
 8003e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e42:	d811      	bhi.n	8003e68 <UART_SetConfig+0x278>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <UART_SetConfig+0x260>
 8003e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4c:	d006      	beq.n	8003e5c <UART_SetConfig+0x26c>
 8003e4e:	e00b      	b.n	8003e68 <UART_SetConfig+0x278>
 8003e50:	2300      	movs	r3, #0
 8003e52:	76fb      	strb	r3, [r7, #27]
 8003e54:	e00d      	b.n	8003e72 <UART_SetConfig+0x282>
 8003e56:	2302      	movs	r3, #2
 8003e58:	76fb      	strb	r3, [r7, #27]
 8003e5a:	e00a      	b.n	8003e72 <UART_SetConfig+0x282>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	76fb      	strb	r3, [r7, #27]
 8003e60:	e007      	b.n	8003e72 <UART_SetConfig+0x282>
 8003e62:	2308      	movs	r3, #8
 8003e64:	76fb      	strb	r3, [r7, #27]
 8003e66:	e004      	b.n	8003e72 <UART_SetConfig+0x282>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	76fb      	strb	r3, [r7, #27]
 8003e6c:	e001      	b.n	8003e72 <UART_SetConfig+0x282>
 8003e6e:	2310      	movs	r3, #16
 8003e70:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a17      	ldr	r2, [pc, #92]	; (8003ed4 <UART_SetConfig+0x2e4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	f040 8087 	bne.w	8003f8c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e7e:	7efb      	ldrb	r3, [r7, #27]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d837      	bhi.n	8003ef4 <UART_SetConfig+0x304>
 8003e84:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <UART_SetConfig+0x29c>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003eb1 	.word	0x08003eb1
 8003e90:	08003ef5 	.word	0x08003ef5
 8003e94:	08003eb9 	.word	0x08003eb9
 8003e98:	08003ef5 	.word	0x08003ef5
 8003e9c:	08003ebf 	.word	0x08003ebf
 8003ea0:	08003ef5 	.word	0x08003ef5
 8003ea4:	08003ef5 	.word	0x08003ef5
 8003ea8:	08003ef5 	.word	0x08003ef5
 8003eac:	08003ec7 	.word	0x08003ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb0:	f7fe fb4c 	bl	800254c <HAL_RCC_GetPCLK1Freq>
 8003eb4:	6178      	str	r0, [r7, #20]
        break;
 8003eb6:	e022      	b.n	8003efe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <UART_SetConfig+0x300>)
 8003eba:	617b      	str	r3, [r7, #20]
        break;
 8003ebc:	e01f      	b.n	8003efe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ebe:	f7fe faad 	bl	800241c <HAL_RCC_GetSysClockFreq>
 8003ec2:	6178      	str	r0, [r7, #20]
        break;
 8003ec4:	e01b      	b.n	8003efe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eca:	617b      	str	r3, [r7, #20]
        break;
 8003ecc:	e017      	b.n	8003efe <UART_SetConfig+0x30e>
 8003ece:	bf00      	nop
 8003ed0:	efff69f3 	.word	0xefff69f3
 8003ed4:	40008000 	.word	0x40008000
 8003ed8:	40013800 	.word	0x40013800
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40004400 	.word	0x40004400
 8003ee4:	40004800 	.word	0x40004800
 8003ee8:	40004c00 	.word	0x40004c00
 8003eec:	40005000 	.word	0x40005000
 8003ef0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	76bb      	strb	r3, [r7, #26]
        break;
 8003efc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80f1 	beq.w	80040e8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	4413      	add	r3, r2
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d305      	bcc.n	8003f22 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d902      	bls.n	8003f28 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	76bb      	strb	r3, [r7, #26]
 8003f26:	e0df      	b.n	80040e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f04f 0100 	mov.w	r1, #0
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	020b      	lsls	r3, r1, #8
 8003f3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f3e:	0202      	lsls	r2, r0, #8
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	6849      	ldr	r1, [r1, #4]
 8003f44:	0849      	lsrs	r1, r1, #1
 8003f46:	4608      	mov	r0, r1
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	1814      	adds	r4, r2, r0
 8003f4e:	eb43 0501 	adc.w	r5, r3, r1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	4629      	mov	r1, r5
 8003f60:	f7fc f93e 	bl	80001e0 <__aeabi_uldivmod>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4613      	mov	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f72:	d308      	bcc.n	8003f86 <UART_SetConfig+0x396>
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f7a:	d204      	bcs.n	8003f86 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	60da      	str	r2, [r3, #12]
 8003f84:	e0b0      	b.n	80040e8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	76bb      	strb	r3, [r7, #26]
 8003f8a:	e0ad      	b.n	80040e8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f94:	d15c      	bne.n	8004050 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003f96:	7efb      	ldrb	r3, [r7, #27]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d828      	bhi.n	8003fee <UART_SetConfig+0x3fe>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <UART_SetConfig+0x3b4>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003fd1 	.word	0x08003fd1
 8003fac:	08003fd9 	.word	0x08003fd9
 8003fb0:	08003fef 	.word	0x08003fef
 8003fb4:	08003fdf 	.word	0x08003fdf
 8003fb8:	08003fef 	.word	0x08003fef
 8003fbc:	08003fef 	.word	0x08003fef
 8003fc0:	08003fef 	.word	0x08003fef
 8003fc4:	08003fe7 	.word	0x08003fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc8:	f7fe fac0 	bl	800254c <HAL_RCC_GetPCLK1Freq>
 8003fcc:	6178      	str	r0, [r7, #20]
        break;
 8003fce:	e013      	b.n	8003ff8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fd0:	f7fe fad2 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 8003fd4:	6178      	str	r0, [r7, #20]
        break;
 8003fd6:	e00f      	b.n	8003ff8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd8:	4b49      	ldr	r3, [pc, #292]	; (8004100 <UART_SetConfig+0x510>)
 8003fda:	617b      	str	r3, [r7, #20]
        break;
 8003fdc:	e00c      	b.n	8003ff8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fde:	f7fe fa1d 	bl	800241c <HAL_RCC_GetSysClockFreq>
 8003fe2:	6178      	str	r0, [r7, #20]
        break;
 8003fe4:	e008      	b.n	8003ff8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fea:	617b      	str	r3, [r7, #20]
        break;
 8003fec:	e004      	b.n	8003ff8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	76bb      	strb	r3, [r7, #26]
        break;
 8003ff6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d074      	beq.n	80040e8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	005a      	lsls	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	441a      	add	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004012:	b29b      	uxth	r3, r3
 8004014:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b0f      	cmp	r3, #15
 800401a:	d916      	bls.n	800404a <UART_SetConfig+0x45a>
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004022:	d212      	bcs.n	800404a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	b29b      	uxth	r3, r3
 8004028:	f023 030f 	bic.w	r3, r3, #15
 800402c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	085b      	lsrs	r3, r3, #1
 8004032:	b29b      	uxth	r3, r3
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	b29a      	uxth	r2, r3
 800403a:	89fb      	ldrh	r3, [r7, #14]
 800403c:	4313      	orrs	r3, r2
 800403e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	89fa      	ldrh	r2, [r7, #14]
 8004046:	60da      	str	r2, [r3, #12]
 8004048:	e04e      	b.n	80040e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	76bb      	strb	r3, [r7, #26]
 800404e:	e04b      	b.n	80040e8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004050:	7efb      	ldrb	r3, [r7, #27]
 8004052:	2b08      	cmp	r3, #8
 8004054:	d827      	bhi.n	80040a6 <UART_SetConfig+0x4b6>
 8004056:	a201      	add	r2, pc, #4	; (adr r2, 800405c <UART_SetConfig+0x46c>)
 8004058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405c:	08004081 	.word	0x08004081
 8004060:	08004089 	.word	0x08004089
 8004064:	08004091 	.word	0x08004091
 8004068:	080040a7 	.word	0x080040a7
 800406c:	08004097 	.word	0x08004097
 8004070:	080040a7 	.word	0x080040a7
 8004074:	080040a7 	.word	0x080040a7
 8004078:	080040a7 	.word	0x080040a7
 800407c:	0800409f 	.word	0x0800409f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004080:	f7fe fa64 	bl	800254c <HAL_RCC_GetPCLK1Freq>
 8004084:	6178      	str	r0, [r7, #20]
        break;
 8004086:	e013      	b.n	80040b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004088:	f7fe fa76 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 800408c:	6178      	str	r0, [r7, #20]
        break;
 800408e:	e00f      	b.n	80040b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <UART_SetConfig+0x510>)
 8004092:	617b      	str	r3, [r7, #20]
        break;
 8004094:	e00c      	b.n	80040b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004096:	f7fe f9c1 	bl	800241c <HAL_RCC_GetSysClockFreq>
 800409a:	6178      	str	r0, [r7, #20]
        break;
 800409c:	e008      	b.n	80040b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800409e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a2:	617b      	str	r3, [r7, #20]
        break;
 80040a4:	e004      	b.n	80040b0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	76bb      	strb	r3, [r7, #26]
        break;
 80040ae:	bf00      	nop
    }

    if (pclk != 0U)
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d018      	beq.n	80040e8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	085a      	lsrs	r2, r3, #1
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	441a      	add	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b0f      	cmp	r3, #15
 80040d0:	d908      	bls.n	80040e4 <UART_SetConfig+0x4f4>
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d8:	d204      	bcs.n	80040e4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	e001      	b.n	80040e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80040f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bdb0      	pop	{r4, r5, r7, pc}
 80040fe:	bf00      	nop
 8004100:	00f42400 	.word	0x00f42400

08004104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01a      	beq.n	800421a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004202:	d10a      	bne.n	800421a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af02      	add	r7, sp, #8
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004258:	f7fd f852 	bl	8001300 <HAL_GetTick>
 800425c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d10e      	bne.n	800428a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800426c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f82d 	bl	80042da <UART_WaitOnFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e023      	b.n	80042d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b04      	cmp	r3, #4
 8004296:	d10e      	bne.n	80042b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f817 	bl	80042da <UART_WaitOnFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e00d      	b.n	80042d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b084      	sub	sp, #16
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	4613      	mov	r3, r2
 80042e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ea:	e05e      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042f2:	d05a      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f4:	f7fd f804 	bl	8001300 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	429a      	cmp	r2, r3
 8004302:	d302      	bcc.n	800430a <UART_WaitOnFlagUntilTimeout+0x30>
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d11b      	bne.n	8004342 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004318:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0201 	bic.w	r2, r2, #1
 8004328:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e043      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d02c      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800435a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435e:	d124      	bne.n	80043aa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004368:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004378:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0201 	bic.w	r2, r2, #1
 8004388:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e00f      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4013      	ands	r3, r2
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	bf0c      	ite	eq
 80043ba:	2301      	moveq	r3, #1
 80043bc:	2300      	movne	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d091      	beq.n	80042ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	4613      	mov	r3, r2
 80043e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	88fa      	ldrh	r2, [r7, #6]
 80043ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	88fa      	ldrh	r2, [r7, #6]
 80043f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004406:	d10e      	bne.n	8004426 <UART_Start_Receive_IT+0x52>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <UART_Start_Receive_IT+0x48>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004416:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800441a:	e02d      	b.n	8004478 <UART_Start_Receive_IT+0xa4>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	22ff      	movs	r2, #255	; 0xff
 8004420:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004424:	e028      	b.n	8004478 <UART_Start_Receive_IT+0xa4>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10d      	bne.n	800444a <UART_Start_Receive_IT+0x76>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d104      	bne.n	8004440 <UART_Start_Receive_IT+0x6c>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	22ff      	movs	r2, #255	; 0xff
 800443a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800443e:	e01b      	b.n	8004478 <UART_Start_Receive_IT+0xa4>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	227f      	movs	r2, #127	; 0x7f
 8004444:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004448:	e016      	b.n	8004478 <UART_Start_Receive_IT+0xa4>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004452:	d10d      	bne.n	8004470 <UART_Start_Receive_IT+0x9c>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <UART_Start_Receive_IT+0x92>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	227f      	movs	r2, #127	; 0x7f
 8004460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004464:	e008      	b.n	8004478 <UART_Start_Receive_IT+0xa4>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	223f      	movs	r2, #63	; 0x3f
 800446a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800446e:	e003      	b.n	8004478 <UART_Start_Receive_IT+0xa4>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2222      	movs	r2, #34	; 0x22
 8004484:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449e:	d107      	bne.n	80044b0 <UART_Start_Receive_IT+0xdc>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d103      	bne.n	80044b0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <UART_Start_Receive_IT+0x108>)
 80044ac:	665a      	str	r2, [r3, #100]	; 0x64
 80044ae:	e002      	b.n	80044b6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4a0b      	ldr	r2, [pc, #44]	; (80044e0 <UART_Start_Receive_IT+0x10c>)
 80044b4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80044cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	08004769 	.word	0x08004769
 80044e0:	08004691 	.word	0x08004691

080044e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0201 	bic.w	r2, r2, #1
 800450a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004510:	2b01      	cmp	r3, #1
 8004512:	d107      	bne.n	8004524 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0210 	bic.w	r2, r2, #16
 8004522:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7ff fb2f 	bl	8003bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800457a:	2b21      	cmp	r3, #33	; 0x21
 800457c:	d12b      	bne.n	80045d6 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d110      	bne.n	80045ac <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004598:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80045aa:	e014      	b.n	80045d6 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b0:	781a      	ldrb	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	b292      	uxth	r2, r2
 80045b8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b085      	sub	sp, #20
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ee:	2b21      	cmp	r3, #33	; 0x21
 80045f0:	d12f      	bne.n	8004652 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d110      	bne.n	8004620 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800460c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800461e:	e018      	b.n	8004652 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004624:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	881a      	ldrh	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004632:	b292      	uxth	r2, r2
 8004634:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	1c9a      	adds	r2, r3, #2
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004674:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fc f8d4 	bl	8000830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800469e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a4:	2b22      	cmp	r3, #34	; 0x22
 80046a6:	d151      	bne.n	800474c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046ae:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046b0:	89bb      	ldrh	r3, [r7, #12]
 80046b2:	b2d9      	uxtb	r1, r3
 80046b4:	89fb      	ldrh	r3, [r7, #14]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	400a      	ands	r2, r1
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d13a      	bne.n	8004760 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046f8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471a:	2b01      	cmp	r3, #1
 800471c:	d10f      	bne.n	800473e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0210 	bic.w	r2, r2, #16
 800472c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004734:	4619      	mov	r1, r3
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff fa4e 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
 800473c:	e002      	b.n	8004744 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc f854 	bl	80007ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800474a:	e009      	b.n	8004760 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	8b1b      	ldrh	r3, [r3, #24]
 8004752:	b29a      	uxth	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0208 	orr.w	r2, r2, #8
 800475c:	b292      	uxth	r2, r2
 800475e:	831a      	strh	r2, [r3, #24]
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004776:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800477c:	2b22      	cmp	r3, #34	; 0x22
 800477e:	d151      	bne.n	8004824 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004786:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800478e:	89ba      	ldrh	r2, [r7, #12]
 8004790:	89fb      	ldrh	r3, [r7, #14]
 8004792:	4013      	ands	r3, r2
 8004794:	b29a      	uxth	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479e:	1c9a      	adds	r2, r3, #2
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d13a      	bne.n	8004838 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047d0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0201 	bic.w	r2, r2, #1
 80047e0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d10f      	bne.n	8004816 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0210 	bic.w	r2, r2, #16
 8004804:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800480c:	4619      	mov	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff f9e2 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
 8004814:	e002      	b.n	800481c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fb ffe8 	bl	80007ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004822:	e009      	b.n	8004838 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	8b1b      	ldrh	r3, [r3, #24]
 800482a:	b29a      	uxth	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0208 	orr.w	r2, r2, #8
 8004834:	b292      	uxth	r2, r2
 8004836:	831a      	strh	r2, [r3, #24]
}
 8004838:	bf00      	nop
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <__NVIC_SetPriority>:
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	6039      	str	r1, [r7, #0]
 800485e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004864:	2b00      	cmp	r3, #0
 8004866:	db0a      	blt.n	800487e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	490c      	ldr	r1, [pc, #48]	; (80048a0 <__NVIC_SetPriority+0x4c>)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	0112      	lsls	r2, r2, #4
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	440b      	add	r3, r1
 8004878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800487c:	e00a      	b.n	8004894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	4908      	ldr	r1, [pc, #32]	; (80048a4 <__NVIC_SetPriority+0x50>)
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	3b04      	subs	r3, #4
 800488c:	0112      	lsls	r2, r2, #4
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	440b      	add	r3, r1
 8004892:	761a      	strb	r2, [r3, #24]
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	e000e100 	.word	0xe000e100
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <SysTick_Handler+0x1c>)
 80048ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80048b0:	f002 fffe 	bl	80078b0 <xTaskGetSchedulerState>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d001      	beq.n	80048be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80048ba:	f003 ff1d 	bl	80086f8 <xPortSysTickHandler>
  }
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	e000e010 	.word	0xe000e010

080048c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80048cc:	2100      	movs	r1, #0
 80048ce:	f06f 0004 	mvn.w	r0, #4
 80048d2:	f7ff ffbf 	bl	8004854 <__NVIC_SetPriority>
#endif
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048e2:	f3ef 8305 	mrs	r3, IPSR
 80048e6:	603b      	str	r3, [r7, #0]
  return(result);
 80048e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80048ee:	f06f 0305 	mvn.w	r3, #5
 80048f2:	607b      	str	r3, [r7, #4]
 80048f4:	e00c      	b.n	8004910 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048f6:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <osKernelInitialize+0x44>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d105      	bne.n	800490a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048fe:	4b08      	ldr	r3, [pc, #32]	; (8004920 <osKernelInitialize+0x44>)
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004904:	2300      	movs	r3, #0
 8004906:	607b      	str	r3, [r7, #4]
 8004908:	e002      	b.n	8004910 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800490e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004910:	687b      	ldr	r3, [r7, #4]
}
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000090 	.word	0x20000090

08004924 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800492a:	f3ef 8305 	mrs	r3, IPSR
 800492e:	603b      	str	r3, [r7, #0]
  return(result);
 8004930:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004936:	f06f 0305 	mvn.w	r3, #5
 800493a:	607b      	str	r3, [r7, #4]
 800493c:	e010      	b.n	8004960 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <osKernelStart+0x48>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d109      	bne.n	800495a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004946:	f7ff ffbf 	bl	80048c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <osKernelStart+0x48>)
 800494c:	2202      	movs	r2, #2
 800494e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004950:	f002 fac8 	bl	8006ee4 <vTaskStartScheduler>
      stat = osOK;
 8004954:	2300      	movs	r3, #0
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	e002      	b.n	8004960 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800495a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800495e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004960:	687b      	ldr	r3, [r7, #4]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000090 	.word	0x20000090

08004970 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004970:	b580      	push	{r7, lr}
 8004972:	b08e      	sub	sp, #56	; 0x38
 8004974:	af04      	add	r7, sp, #16
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004980:	f3ef 8305 	mrs	r3, IPSR
 8004984:	617b      	str	r3, [r7, #20]
  return(result);
 8004986:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004988:	2b00      	cmp	r3, #0
 800498a:	d17e      	bne.n	8004a8a <osThreadNew+0x11a>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d07b      	beq.n	8004a8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004992:	2380      	movs	r3, #128	; 0x80
 8004994:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004996:	2318      	movs	r3, #24
 8004998:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800499a:	2300      	movs	r3, #0
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800499e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d045      	beq.n	8004a36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <osThreadNew+0x48>
        name = attr->name;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <osThreadNew+0x6e>
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	2b38      	cmp	r3, #56	; 0x38
 80049d0:	d805      	bhi.n	80049de <osThreadNew+0x6e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <osThreadNew+0x72>
        return (NULL);
 80049de:	2300      	movs	r3, #0
 80049e0:	e054      	b.n	8004a8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	089b      	lsrs	r3, r3, #2
 80049f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00e      	beq.n	8004a18 <osThreadNew+0xa8>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b5b      	cmp	r3, #91	; 0x5b
 8004a00:	d90a      	bls.n	8004a18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d006      	beq.n	8004a18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <osThreadNew+0xa8>
        mem = 1;
 8004a12:	2301      	movs	r3, #1
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	e010      	b.n	8004a3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10c      	bne.n	8004a3a <osThreadNew+0xca>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d108      	bne.n	8004a3a <osThreadNew+0xca>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <osThreadNew+0xca>
          mem = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	e001      	b.n	8004a3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d110      	bne.n	8004a62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a48:	9202      	str	r2, [sp, #8]
 8004a4a:	9301      	str	r3, [sp, #4]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6a3a      	ldr	r2, [r7, #32]
 8004a54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f001 ff68 	bl	800692c <xTaskCreateStatic>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	e013      	b.n	8004a8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d110      	bne.n	8004a8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	f107 0310 	add.w	r3, r7, #16
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f001 ffb3 	bl	80069e6 <xTaskCreate>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d001      	beq.n	8004a8a <osThreadNew+0x11a>
            hTask = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a8a:	693b      	ldr	r3, [r7, #16]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3728      	adds	r7, #40	; 0x28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aa0:	f3ef 8305 	mrs	r3, IPSR
 8004aa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8004aac:	f06f 0305 	mvn.w	r3, #5
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e00b      	b.n	8004acc <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d103      	bne.n	8004ac2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8004aba:	f06f 0303 	mvn.w	r3, #3
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	e004      	b.n	8004acc <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8004ac6:	6938      	ldr	r0, [r7, #16]
 8004ac8:	f002 f906 	bl	8006cd8 <vTaskSuspend>
  }

  return (stat);
 8004acc:	697b      	ldr	r3, [r7, #20]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b086      	sub	sp, #24
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ae2:	f3ef 8305 	mrs	r3, IPSR
 8004ae6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <osThreadResume+0x20>
    stat = osErrorISR;
 8004aee:	f06f 0305 	mvn.w	r3, #5
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	e00b      	b.n	8004b0e <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d103      	bne.n	8004b04 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8004afc:	f06f 0303 	mvn.w	r3, #3
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	e004      	b.n	8004b0e <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8004b08:	6938      	ldr	r0, [r7, #16]
 8004b0a:	f002 f98d 	bl	8006e28 <vTaskResume>
  }

  return (stat);
 8004b0e:	697b      	ldr	r3, [r7, #20]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b20:	f3ef 8305 	mrs	r3, IPSR
 8004b24:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <osDelay+0x1c>
    stat = osErrorISR;
 8004b2c:	f06f 0305 	mvn.w	r3, #5
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	e007      	b.n	8004b44 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f002 f896 	bl	8006c70 <vTaskDelay>
    }
  }

  return (stat);
 8004b44:	68fb      	ldr	r3, [r7, #12]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b086      	sub	sp, #24
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b5a:	f3ef 8305 	mrs	r3, IPSR
 8004b5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b60:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d12d      	bne.n	8004bc2 <osEventFlagsNew+0x74>
    mem = -1;
 8004b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b6a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d015      	beq.n	8004b9e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d006      	beq.n	8004b88 <osEventFlagsNew+0x3a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b1f      	cmp	r3, #31
 8004b80:	d902      	bls.n	8004b88 <osEventFlagsNew+0x3a>
        mem = 1;
 8004b82:	2301      	movs	r3, #1
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	e00c      	b.n	8004ba2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d108      	bne.n	8004ba2 <osEventFlagsNew+0x54>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <osEventFlagsNew+0x54>
          mem = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	e001      	b.n	8004ba2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d106      	bne.n	8004bb6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fb8f 	bl	80052d0 <xEventGroupCreateStatic>
 8004bb2:	6178      	str	r0, [r7, #20]
 8004bb4:	e005      	b.n	8004bc2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d102      	bne.n	8004bc2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004bbc:	f000 fbbf 	bl	800533e <xEventGroupCreate>
 8004bc0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004bc2:	697b      	ldr	r3, [r7, #20]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d004      	beq.n	8004bea <osEventFlagsSet+0x1e>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004bea:	f06f 0303 	mvn.w	r3, #3
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e028      	b.n	8004c44 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bf2:	f3ef 8305 	mrs	r3, IPSR
 8004bf6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d01d      	beq.n	8004c3a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004c02:	f107 0308 	add.w	r3, r7, #8
 8004c06:	461a      	mov	r2, r3
 8004c08:	6839      	ldr	r1, [r7, #0]
 8004c0a:	6938      	ldr	r0, [r7, #16]
 8004c0c:	f000 fdb8 	bl	8005780 <xEventGroupSetBitsFromISR>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8004c16:	f06f 0302 	mvn.w	r3, #2
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e012      	b.n	8004c44 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00d      	beq.n	8004c44 <osEventFlagsSet+0x78>
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <osEventFlagsSet+0x84>)
 8004c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	e004      	b.n	8004c44 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004c3a:	6839      	ldr	r1, [r7, #0]
 8004c3c:	6938      	ldr	r0, [r7, #16]
 8004c3e:	f000 fcd7 	bl	80055f0 <xEventGroupSetBits>
 8004c42:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004c44:	697b      	ldr	r3, [r7, #20]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	e000ed04 	.word	0xe000ed04

08004c54 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d004      	beq.n	8004c72 <osEventFlagsClear+0x1e>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004c72:	f06f 0303 	mvn.w	r3, #3
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	e019      	b.n	8004cae <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c7a:	f3ef 8305 	mrs	r3, IPSR
 8004c7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c80:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00e      	beq.n	8004ca4 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004c86:	6938      	ldr	r0, [r7, #16]
 8004c88:	f000 fc8e 	bl	80055a8 <xEventGroupGetBitsFromISR>
 8004c8c:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8004c8e:	6839      	ldr	r1, [r7, #0]
 8004c90:	6938      	ldr	r0, [r7, #16]
 8004c92:	f000 fc75 	bl	8005580 <xEventGroupClearBitsFromISR>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d108      	bne.n	8004cae <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8004c9c:	f06f 0302 	mvn.w	r3, #2
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	e004      	b.n	8004cae <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8004ca4:	6839      	ldr	r1, [r7, #0]
 8004ca6:	6938      	ldr	r0, [r7, #16]
 8004ca8:	f000 fc32 	bl	8005510 <xEventGroupClearBits>
 8004cac:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004cae:	697b      	ldr	r3, [r7, #20]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d102      	bne.n	8004cd0 <osEventFlagsGet+0x18>
    rflags = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	e00f      	b.n	8004cf0 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cd0:	f3ef 8305 	mrs	r3, IPSR
 8004cd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d004      	beq.n	8004ce6 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004cdc:	6938      	ldr	r0, [r7, #16]
 8004cde:	f000 fc63 	bl	80055a8 <xEventGroupGetBitsFromISR>
 8004ce2:	6178      	str	r0, [r7, #20]
 8004ce4:	e004      	b.n	8004cf0 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	6938      	ldr	r0, [r7, #16]
 8004cea:	f000 fc11 	bl	8005510 <xEventGroupClearBits>
 8004cee:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004cf0:	697b      	ldr	r3, [r7, #20]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b08c      	sub	sp, #48	; 0x30
 8004cfe:	af02      	add	r7, sp, #8
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d004      	beq.n	8004d1c <osEventFlagsWait+0x22>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8004d1c:	f06f 0303 	mvn.w	r3, #3
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	e04b      	b.n	8004dbc <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d24:	f3ef 8305 	mrs	r3, IPSR
 8004d28:	617b      	str	r3, [r7, #20]
  return(result);
 8004d2a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8004d30:	f06f 0305 	mvn.w	r3, #5
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	e041      	b.n	8004dbc <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8004d42:	2301      	movs	r3, #1
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
 8004d46:	e001      	b.n	8004d4c <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	e001      	b.n	8004d60 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	6a3a      	ldr	r2, [r7, #32]
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	69b8      	ldr	r0, [r7, #24]
 8004d6c:	f000 fb02 	bl	8005374 <xEventGroupWaitBits>
 8004d70:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d010      	beq.n	8004d9e <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4013      	ands	r3, r2
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d019      	beq.n	8004dbc <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8004d8e:	f06f 0301 	mvn.w	r3, #1
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	e012      	b.n	8004dbc <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004d96:	f06f 0302 	mvn.w	r3, #2
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	e00e      	b.n	8004dbc <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	4013      	ands	r3, r2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d109      	bne.n	8004dbc <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8004dae:	f06f 0301 	mvn.w	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	e002      	b.n	8004dbc <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004db6:	f06f 0302 	mvn.w	r3, #2
 8004dba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8004dbc:	69fb      	ldr	r3, [r7, #28]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3728      	adds	r7, #40	; 0x28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b08a      	sub	sp, #40	; 0x28
 8004dca:	af02      	add	r7, sp, #8
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dd6:	f3ef 8305 	mrs	r3, IPSR
 8004dda:	613b      	str	r3, [r7, #16]
  return(result);
 8004ddc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d175      	bne.n	8004ece <osSemaphoreNew+0x108>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d072      	beq.n	8004ece <osSemaphoreNew+0x108>
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d86e      	bhi.n	8004ece <osSemaphoreNew+0x108>
    mem = -1;
 8004df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004df4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d015      	beq.n	8004e28 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d006      	beq.n	8004e12 <osSemaphoreNew+0x4c>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b4f      	cmp	r3, #79	; 0x4f
 8004e0a:	d902      	bls.n	8004e12 <osSemaphoreNew+0x4c>
        mem = 1;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	e00c      	b.n	8004e2c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d108      	bne.n	8004e2c <osSemaphoreNew+0x66>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d104      	bne.n	8004e2c <osSemaphoreNew+0x66>
          mem = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	e001      	b.n	8004e2c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e32:	d04c      	beq.n	8004ece <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d128      	bne.n	8004e8c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d10a      	bne.n	8004e56 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2203      	movs	r2, #3
 8004e46:	9200      	str	r2, [sp, #0]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f000 fdc7 	bl	80059e0 <xQueueGenericCreateStatic>
 8004e52:	61f8      	str	r0, [r7, #28]
 8004e54:	e005      	b.n	8004e62 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004e56:	2203      	movs	r2, #3
 8004e58:	2100      	movs	r1, #0
 8004e5a:	2001      	movs	r0, #1
 8004e5c:	f000 fe38 	bl	8005ad0 <xQueueGenericCreate>
 8004e60:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d022      	beq.n	8004eae <osSemaphoreNew+0xe8>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01f      	beq.n	8004eae <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2200      	movs	r2, #0
 8004e72:	2100      	movs	r1, #0
 8004e74:	69f8      	ldr	r0, [r7, #28]
 8004e76:	f000 fef3 	bl	8005c60 <xQueueGenericSend>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d016      	beq.n	8004eae <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004e80:	69f8      	ldr	r0, [r7, #28]
 8004e82:	f001 fb7f 	bl	8006584 <vQueueDelete>
            hSemaphore = NULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	e010      	b.n	8004eae <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d108      	bne.n	8004ea4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	461a      	mov	r2, r3
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fe75 	bl	8005b8a <xQueueCreateCountingSemaphoreStatic>
 8004ea0:	61f8      	str	r0, [r7, #28]
 8004ea2:	e004      	b.n	8004eae <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fea6 	bl	8005bf8 <xQueueCreateCountingSemaphore>
 8004eac:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00c      	beq.n	8004ece <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e001      	b.n	8004ec6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004ec6:	6979      	ldr	r1, [r7, #20]
 8004ec8:	69f8      	ldr	r0, [r7, #28]
 8004eca:	f001 fca7 	bl	800681c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004ece:	69fb      	ldr	r3, [r7, #28]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3720      	adds	r7, #32
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d103      	bne.n	8004ef8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004ef0:	f06f 0303 	mvn.w	r3, #3
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	e039      	b.n	8004f6c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ef8:	f3ef 8305 	mrs	r3, IPSR
 8004efc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004efe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d022      	beq.n	8004f4a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004f0a:	f06f 0303 	mvn.w	r3, #3
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e02c      	b.n	8004f6c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004f16:	f107 0308 	add.w	r3, r7, #8
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	6938      	ldr	r0, [r7, #16]
 8004f20:	f001 fab0 	bl	8006484 <xQueueReceiveFromISR>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d003      	beq.n	8004f32 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004f2a:	f06f 0302 	mvn.w	r3, #2
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	e01c      	b.n	8004f6c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d019      	beq.n	8004f6c <osSemaphoreAcquire+0x94>
 8004f38:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <osSemaphoreAcquire+0xa0>)
 8004f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	e010      	b.n	8004f6c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004f4a:	6839      	ldr	r1, [r7, #0]
 8004f4c:	6938      	ldr	r0, [r7, #16]
 8004f4e:	f001 f98d 	bl	800626c <xQueueSemaphoreTake>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d009      	beq.n	8004f6c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004f5e:	f06f 0301 	mvn.w	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	e002      	b.n	8004f6c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004f66:	f06f 0302 	mvn.w	r3, #2
 8004f6a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004f6c:	697b      	ldr	r3, [r7, #20]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	e000ed04 	.word	0xe000ed04

08004f7c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d103      	bne.n	8004f9a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004f92:	f06f 0303 	mvn.w	r3, #3
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	e02c      	b.n	8004ff4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f9a:	f3ef 8305 	mrs	r3, IPSR
 8004f9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01a      	beq.n	8004fdc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004faa:	f107 0308 	add.w	r3, r7, #8
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6938      	ldr	r0, [r7, #16]
 8004fb2:	f000 ffee 	bl	8005f92 <xQueueGiveFromISR>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d003      	beq.n	8004fc4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004fbc:	f06f 0302 	mvn.w	r3, #2
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	e017      	b.n	8004ff4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d014      	beq.n	8004ff4 <osSemaphoreRelease+0x78>
 8004fca:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <osSemaphoreRelease+0x84>)
 8004fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	e00b      	b.n	8004ff4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	6938      	ldr	r0, [r7, #16]
 8004fe4:	f000 fe3c 	bl	8005c60 <xQueueGenericSend>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d002      	beq.n	8004ff4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004fee:	f06f 0302 	mvn.w	r3, #2
 8004ff2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004ff4:	697b      	ldr	r3, [r7, #20]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	e000ed04 	.word	0xe000ed04

08005004 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	; 0x28
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005010:	2300      	movs	r3, #0
 8005012:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005014:	f3ef 8305 	mrs	r3, IPSR
 8005018:	613b      	str	r3, [r7, #16]
  return(result);
 800501a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800501c:	2b00      	cmp	r3, #0
 800501e:	d15f      	bne.n	80050e0 <osMessageQueueNew+0xdc>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d05c      	beq.n	80050e0 <osMessageQueueNew+0xdc>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d059      	beq.n	80050e0 <osMessageQueueNew+0xdc>
    mem = -1;
 800502c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005030:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d029      	beq.n	800508c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d012      	beq.n	8005066 <osMessageQueueNew+0x62>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	2b4f      	cmp	r3, #79	; 0x4f
 8005046:	d90e      	bls.n	8005066 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	695a      	ldr	r2, [r3, #20]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	429a      	cmp	r2, r3
 800505e:	d302      	bcc.n	8005066 <osMessageQueueNew+0x62>
        mem = 1;
 8005060:	2301      	movs	r3, #1
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	e014      	b.n	8005090 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d110      	bne.n	8005090 <osMessageQueueNew+0x8c>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10c      	bne.n	8005090 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800507a:	2b00      	cmp	r3, #0
 800507c:	d108      	bne.n	8005090 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <osMessageQueueNew+0x8c>
          mem = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	e001      	b.n	8005090 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d10b      	bne.n	80050ae <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2100      	movs	r1, #0
 80050a0:	9100      	str	r1, [sp, #0]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 fc9b 	bl	80059e0 <xQueueGenericCreateStatic>
 80050aa:	61f8      	str	r0, [r7, #28]
 80050ac:	e008      	b.n	80050c0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d105      	bne.n	80050c0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80050b4:	2200      	movs	r2, #0
 80050b6:	68b9      	ldr	r1, [r7, #8]
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 fd09 	bl	8005ad0 <xQueueGenericCreate>
 80050be:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00c      	beq.n	80050e0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	e001      	b.n	80050d8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80050d8:	6979      	ldr	r1, [r7, #20]
 80050da:	69f8      	ldr	r0, [r7, #28]
 80050dc:	f001 fb9e 	bl	800681c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80050e0:	69fb      	ldr	r3, [r7, #28]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005104:	f3ef 8305 	mrs	r3, IPSR
 8005108:	617b      	str	r3, [r7, #20]
  return(result);
 800510a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800510c:	2b00      	cmp	r3, #0
 800510e:	d028      	beq.n	8005162 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <osMessageQueuePut+0x36>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <osMessageQueuePut+0x36>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005122:	f06f 0303 	mvn.w	r3, #3
 8005126:	61fb      	str	r3, [r7, #28]
 8005128:	e038      	b.n	800519c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800512e:	f107 0210 	add.w	r2, r7, #16
 8005132:	2300      	movs	r3, #0
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	69b8      	ldr	r0, [r7, #24]
 8005138:	f000 fe90 	bl	8005e5c <xQueueGenericSendFromISR>
 800513c:	4603      	mov	r3, r0
 800513e:	2b01      	cmp	r3, #1
 8005140:	d003      	beq.n	800514a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005142:	f06f 0302 	mvn.w	r3, #2
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	e028      	b.n	800519c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d025      	beq.n	800519c <osMessageQueuePut+0xb0>
 8005150:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <osMessageQueuePut+0xbc>)
 8005152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	e01c      	b.n	800519c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <osMessageQueuePut+0x82>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800516e:	f06f 0303 	mvn.w	r3, #3
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	e012      	b.n	800519c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005176:	2300      	movs	r3, #0
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	69b8      	ldr	r0, [r7, #24]
 800517e:	f000 fd6f 	bl	8005c60 <xQueueGenericSend>
 8005182:	4603      	mov	r3, r0
 8005184:	2b01      	cmp	r3, #1
 8005186:	d009      	beq.n	800519c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800518e:	f06f 0301 	mvn.w	r3, #1
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	e002      	b.n	800519c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005196:	f06f 0302 	mvn.w	r3, #2
 800519a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800519c:	69fb      	ldr	r3, [r7, #28]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80051be:	2300      	movs	r3, #0
 80051c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051c2:	f3ef 8305 	mrs	r3, IPSR
 80051c6:	617b      	str	r3, [r7, #20]
  return(result);
 80051c8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d028      	beq.n	8005220 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d005      	beq.n	80051e0 <osMessageQueueGet+0x34>
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <osMessageQueueGet+0x34>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80051e0:	f06f 0303 	mvn.w	r3, #3
 80051e4:	61fb      	str	r3, [r7, #28]
 80051e6:	e037      	b.n	8005258 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80051ec:	f107 0310 	add.w	r3, r7, #16
 80051f0:	461a      	mov	r2, r3
 80051f2:	68b9      	ldr	r1, [r7, #8]
 80051f4:	69b8      	ldr	r0, [r7, #24]
 80051f6:	f001 f945 	bl	8006484 <xQueueReceiveFromISR>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d003      	beq.n	8005208 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005200:	f06f 0302 	mvn.w	r3, #2
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	e027      	b.n	8005258 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d024      	beq.n	8005258 <osMessageQueueGet+0xac>
 800520e:	4b15      	ldr	r3, [pc, #84]	; (8005264 <osMessageQueueGet+0xb8>)
 8005210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	e01b      	b.n	8005258 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <osMessageQueueGet+0x80>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d103      	bne.n	8005234 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800522c:	f06f 0303 	mvn.w	r3, #3
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	e011      	b.n	8005258 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	69b8      	ldr	r0, [r7, #24]
 800523a:	f000 ff37 	bl	80060ac <xQueueReceive>
 800523e:	4603      	mov	r3, r0
 8005240:	2b01      	cmp	r3, #1
 8005242:	d009      	beq.n	8005258 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800524a:	f06f 0301 	mvn.w	r3, #1
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	e002      	b.n	8005258 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005252:	f06f 0302 	mvn.w	r3, #2
 8005256:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005258:	69fb      	ldr	r3, [r7, #28]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3720      	adds	r7, #32
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4a07      	ldr	r2, [pc, #28]	; (8005294 <vApplicationGetIdleTaskMemory+0x2c>)
 8005278:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4a06      	ldr	r2, [pc, #24]	; (8005298 <vApplicationGetIdleTaskMemory+0x30>)
 800527e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2280      	movs	r2, #128	; 0x80
 8005284:	601a      	str	r2, [r3, #0]
}
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	20000094 	.word	0x20000094
 8005298:	200000f0 	.word	0x200000f0

0800529c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4a07      	ldr	r2, [pc, #28]	; (80052c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80052ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4a06      	ldr	r2, [pc, #24]	; (80052cc <vApplicationGetTimerTaskMemory+0x30>)
 80052b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052ba:	601a      	str	r2, [r3, #0]
}
 80052bc:	bf00      	nop
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	200002f0 	.word	0x200002f0
 80052cc:	2000034c 	.word	0x2000034c

080052d0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80052f4:	2320      	movs	r3, #32
 80052f6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d00a      	beq.n	8005314 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	60fb      	str	r3, [r7, #12]
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	3304      	adds	r3, #4
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fa3d 	bl	80057a8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2201      	movs	r2, #1
 8005332:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005334:	697b      	ldr	r3, [r7, #20]
	}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005344:	2020      	movs	r0, #32
 8005346:	f003 fa67 	bl	8008818 <pvPortMalloc>
 800534a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3304      	adds	r3, #4
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fa23 	bl	80057a8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005368:	687b      	ldr	r3, [r7, #4]
	}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b090      	sub	sp, #64	; 0x40
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800538a:	2300      	movs	r3, #0
 800538c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <xEventGroupWaitBits+0x36>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	623b      	str	r3, [r7, #32]
}
 80053a6:	bf00      	nop
 80053a8:	e7fe      	b.n	80053a8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <xEventGroupWaitBits+0x56>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	61fb      	str	r3, [r7, #28]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <xEventGroupWaitBits+0x72>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	61bb      	str	r3, [r7, #24]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053e6:	f002 fa63 	bl	80078b0 <xTaskGetSchedulerState>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <xEventGroupWaitBits+0x82>
 80053f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <xEventGroupWaitBits+0x86>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <xEventGroupWaitBits+0x88>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	617b      	str	r3, [r7, #20]
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8005416:	f001 fdcb 	bl	8006fb0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800541a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005426:	f000 f988 	bl	800573a <prvTestWaitCondition>
 800542a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00e      	beq.n	8005450 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005436:	2300      	movs	r3, #0
 8005438:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d028      	beq.n	8005492 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	43db      	mvns	r3, r3
 8005448:	401a      	ands	r2, r3
 800544a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e020      	b.n	8005492 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800545a:	2301      	movs	r3, #1
 800545c:	633b      	str	r3, [r7, #48]	; 0x30
 800545e:	e018      	b.n	8005492 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005468:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800546c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800547a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800547c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547e:	1d18      	adds	r0, r3, #4
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	4313      	orrs	r3, r2
 8005486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005488:	4619      	mov	r1, r3
 800548a:	f001 ff89 	bl	80073a0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005492:	f001 fd9b 	bl	8006fcc <xTaskResumeAll>
 8005496:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800549a:	2b00      	cmp	r3, #0
 800549c:	d031      	beq.n	8005502 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d107      	bne.n	80054b4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80054a4:	4b19      	ldr	r3, [pc, #100]	; (800550c <xEventGroupWaitBits+0x198>)
 80054a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80054b4:	f002 fb72 	bl	8007b9c <uxTaskResetEventItemValue>
 80054b8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80054ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d11a      	bne.n	80054fa <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80054c4:	f003 f886 	bl	80085d4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80054c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80054d4:	f000 f931 	bl	800573a <prvTestWaitCondition>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d006      	beq.n	80054f2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	43db      	mvns	r3, r3
 80054ec:	401a      	ands	r2, r3
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80054f2:	2301      	movs	r3, #1
 80054f4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80054f6:	f003 f89d 	bl	8008634 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80054fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005500:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005504:	4618      	mov	r0, r3
 8005506:	3740      	adds	r7, #64	; 0x40
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	e000ed04 	.word	0xe000ed04

08005510 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10a      	bne.n	800553a <xEventGroupClearBits+0x2a>
	__asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	60fb      	str	r3, [r7, #12]
}
 8005536:	bf00      	nop
 8005538:	e7fe      	b.n	8005538 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <xEventGroupClearBits+0x4a>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	60bb      	str	r3, [r7, #8]
}
 8005556:	bf00      	nop
 8005558:	e7fe      	b.n	8005558 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800555a:	f003 f83b 	bl	80085d4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	43db      	mvns	r3, r3
 800556c:	401a      	ands	r2, r3
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005572:	f003 f85f 	bl	8008634 <vPortExitCritical>

	return uxReturn;
 8005576:	693b      	ldr	r3, [r7, #16]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800558a:	2300      	movs	r3, #0
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	4804      	ldr	r0, [pc, #16]	; (80055a4 <xEventGroupClearBitsFromISR+0x24>)
 8005592:	f002 fed1 	bl	8008338 <xTimerPendFunctionCallFromISR>
 8005596:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8005598:	68fb      	ldr	r3, [r7, #12]
	}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	08005721 	.word	0x08005721

080055a8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b089      	sub	sp, #36	; 0x24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055b4:	f3ef 8211 	mrs	r2, BASEPRI
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	60fa      	str	r2, [r7, #12]
 80055ca:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055cc:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055ce:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055e0:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80055e2:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80055e4:	4618      	mov	r0, r3
 80055e6:	3724      	adds	r7, #36	; 0x24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08e      	sub	sp, #56	; 0x38
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80055fa:	2300      	movs	r3, #0
 80055fc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005602:	2300      	movs	r3, #0
 8005604:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <xEventGroupSetBits+0x32>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	613b      	str	r3, [r7, #16]
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <xEventGroupSetBits+0x52>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	60fb      	str	r3, [r7, #12]
}
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	3304      	adds	r3, #4
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	3308      	adds	r3, #8
 800564c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800564e:	f001 fcaf 	bl	8006fb0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	431a      	orrs	r2, r3
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005664:	e03c      	b.n	80056e0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800566c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005672:	2300      	movs	r3, #0
 8005674:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800567c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005684:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d108      	bne.n	80056a2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	4013      	ands	r3, r2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800569c:	2301      	movs	r3, #1
 800569e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a0:	e008      	b.n	80056b4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	4013      	ands	r3, r2
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d101      	bne.n	80056b4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80056b0:	2301      	movs	r3, #1
 80056b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d010      	beq.n	80056dc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80056c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056d4:	4619      	mov	r1, r3
 80056d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056d8:	f001 ff2e 	bl	8007538 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80056e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d1be      	bne.n	8005666 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	43db      	mvns	r3, r3
 80056f0:	401a      	ands	r2, r3
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80056f6:	f001 fc69 	bl	8006fcc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	681b      	ldr	r3, [r3, #0]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3738      	adds	r7, #56	; 0x38
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff ff6c 	bl	80055f0 <xEventGroupSetBits>
}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800572a:	6839      	ldr	r1, [r7, #0]
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff feef 	bl	8005510 <xEventGroupClearBits>
}
 8005732:	bf00      	nop
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800573a:	b480      	push	{r7}
 800573c:	b087      	sub	sp, #28
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d107      	bne.n	8005760 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4013      	ands	r3, r2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800575a:	2301      	movs	r3, #1
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	e007      	b.n	8005770 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	4013      	ands	r3, r2
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	429a      	cmp	r2, r3
 800576a:	d101      	bne.n	8005770 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005770:	697b      	ldr	r3, [r7, #20]
}
 8005772:	4618      	mov	r0, r3
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	68f9      	ldr	r1, [r7, #12]
 8005792:	4804      	ldr	r0, [pc, #16]	; (80057a4 <xEventGroupSetBitsFromISR+0x24>)
 8005794:	f002 fdd0 	bl	8008338 <xTimerPendFunctionCallFromISR>
 8005798:	6178      	str	r0, [r7, #20]

		return xReturn;
 800579a:	697b      	ldr	r3, [r7, #20]
	}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	08005707 	.word	0x08005707

080057a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f103 0208 	add.w	r2, r3, #8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f103 0208 	add.w	r2, r3, #8
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f103 0208 	add.w	r2, r3, #8
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	601a      	str	r2, [r3, #0]
}
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800584a:	b480      	push	{r7}
 800584c:	b085      	sub	sp, #20
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005860:	d103      	bne.n	800586a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	e00c      	b.n	8005884 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3308      	adds	r3, #8
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	e002      	b.n	8005878 <vListInsert+0x2e>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	429a      	cmp	r2, r3
 8005882:	d2f6      	bcs.n	8005872 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	601a      	str	r2, [r3, #0]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6892      	ldr	r2, [r2, #8]
 80058d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6852      	ldr	r2, [r2, #4]
 80058dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d103      	bne.n	80058f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	1e5a      	subs	r2, r3, #1
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <xQueueGenericReset+0x2a>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	60bb      	str	r3, [r7, #8]
}
 8005936:	bf00      	nop
 8005938:	e7fe      	b.n	8005938 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800593a:	f002 fe4b 	bl	80085d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	68f9      	ldr	r1, [r7, #12]
 8005948:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800594a:	fb01 f303 	mul.w	r3, r1, r3
 800594e:	441a      	add	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596a:	3b01      	subs	r3, #1
 800596c:	68f9      	ldr	r1, [r7, #12]
 800596e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005970:	fb01 f303 	mul.w	r3, r1, r3
 8005974:	441a      	add	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	22ff      	movs	r2, #255	; 0xff
 800597e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	22ff      	movs	r2, #255	; 0xff
 8005986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d114      	bne.n	80059ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01a      	beq.n	80059ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3310      	adds	r3, #16
 800599c:	4618      	mov	r0, r3
 800599e:	f001 fd67 	bl	8007470 <xTaskRemoveFromEventList>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d012      	beq.n	80059ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059a8:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <xQueueGenericReset+0xcc>)
 80059aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	e009      	b.n	80059ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3310      	adds	r3, #16
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff fef2 	bl	80057a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3324      	adds	r3, #36	; 0x24
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff feed 	bl	80057a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059ce:	f002 fe31 	bl	8008634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059d2:	2301      	movs	r3, #1
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	e000ed04 	.word	0xe000ed04

080059e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08e      	sub	sp, #56	; 0x38
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10a      	bne.n	8005a0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a22:	bf00      	nop
 8005a24:	e7fe      	b.n	8005a24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <xQueueGenericCreateStatic+0x52>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <xQueueGenericCreateStatic+0x56>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <xQueueGenericCreateStatic+0x58>
 8005a36:	2300      	movs	r3, #0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10a      	bne.n	8005a52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	623b      	str	r3, [r7, #32]
}
 8005a4e:	bf00      	nop
 8005a50:	e7fe      	b.n	8005a50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d102      	bne.n	8005a5e <xQueueGenericCreateStatic+0x7e>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <xQueueGenericCreateStatic+0x82>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <xQueueGenericCreateStatic+0x84>
 8005a62:	2300      	movs	r3, #0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	61fb      	str	r3, [r7, #28]
}
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a7e:	2350      	movs	r3, #80	; 0x50
 8005a80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b50      	cmp	r3, #80	; 0x50
 8005a86:	d00a      	beq.n	8005a9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	61bb      	str	r3, [r7, #24]
}
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00d      	beq.n	8005ac6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ab2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	4613      	mov	r3, r2
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f83f 	bl	8005b44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3730      	adds	r7, #48	; 0x30
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	; 0x28
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <xQueueGenericCreate+0x2a>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	613b      	str	r3, [r7, #16]
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
 8005b02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	3350      	adds	r3, #80	; 0x50
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f002 fe85 	bl	8008818 <pvPortMalloc>
 8005b0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d011      	beq.n	8005b3a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	3350      	adds	r3, #80	; 0x50
 8005b1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b28:	79fa      	ldrb	r2, [r7, #7]
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f805 	bl	8005b44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b3a:	69bb      	ldr	r3, [r7, #24]
	}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d103      	bne.n	8005b60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	e002      	b.n	8005b66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b72:	2101      	movs	r1, #1
 8005b74:	69b8      	ldr	r0, [r7, #24]
 8005b76:	f7ff fecb 	bl	8005910 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	78fa      	ldrb	r2, [r7, #3]
 8005b7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b82:	bf00      	nop
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b08a      	sub	sp, #40	; 0x28
 8005b8e:	af02      	add	r7, sp, #8
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10a      	bne.n	8005bb2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	61bb      	str	r3, [r7, #24]
}
 8005bae:	bf00      	nop
 8005bb0:	e7fe      	b.n	8005bb0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d90a      	bls.n	8005bd0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	617b      	str	r3, [r7, #20]
}
 8005bcc:	bf00      	nop
 8005bce:	e7fe      	b.n	8005bce <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2100      	movs	r1, #0
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f7ff ff00 	bl	80059e0 <xQueueGenericCreateStatic>
 8005be0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005bee:	69fb      	ldr	r3, [r7, #28]
	}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3720      	adds	r7, #32
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	613b      	str	r3, [r7, #16]
}
 8005c1a:	bf00      	nop
 8005c1c:	e7fe      	b.n	8005c1c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d90a      	bls.n	8005c3c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	60fb      	str	r3, [r7, #12]
}
 8005c38:	bf00      	nop
 8005c3a:	e7fe      	b.n	8005c3a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	2100      	movs	r1, #0
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7ff ff45 	bl	8005ad0 <xQueueGenericCreate>
 8005c46:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005c54:	697b      	ldr	r3, [r7, #20]
	}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08e      	sub	sp, #56	; 0x38
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <xQueueGenericSend+0x32>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d103      	bne.n	8005ca0 <xQueueGenericSend+0x40>
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <xQueueGenericSend+0x44>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <xQueueGenericSend+0x46>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10a      	bne.n	8005cc0 <xQueueGenericSend+0x60>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cbc:	bf00      	nop
 8005cbe:	e7fe      	b.n	8005cbe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d103      	bne.n	8005cce <xQueueGenericSend+0x6e>
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <xQueueGenericSend+0x72>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e000      	b.n	8005cd4 <xQueueGenericSend+0x74>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <xQueueGenericSend+0x8e>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	623b      	str	r3, [r7, #32]
}
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cee:	f001 fddf 	bl	80078b0 <xTaskGetSchedulerState>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d102      	bne.n	8005cfe <xQueueGenericSend+0x9e>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <xQueueGenericSend+0xa2>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e000      	b.n	8005d04 <xQueueGenericSend+0xa4>
 8005d02:	2300      	movs	r3, #0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <xQueueGenericSend+0xbe>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	61fb      	str	r3, [r7, #28]
}
 8005d1a:	bf00      	nop
 8005d1c:	e7fe      	b.n	8005d1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d1e:	f002 fc59 	bl	80085d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d302      	bcc.n	8005d34 <xQueueGenericSend+0xd4>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d129      	bne.n	8005d88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d3a:	f000 fc5e 	bl	80065fa <prvCopyDataToQueue>
 8005d3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d010      	beq.n	8005d6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	3324      	adds	r3, #36	; 0x24
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 fb8f 	bl	8007470 <xTaskRemoveFromEventList>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d013      	beq.n	8005d80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d58:	4b3f      	ldr	r3, [pc, #252]	; (8005e58 <xQueueGenericSend+0x1f8>)
 8005d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	e00a      	b.n	8005d80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d007      	beq.n	8005d80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d70:	4b39      	ldr	r3, [pc, #228]	; (8005e58 <xQueueGenericSend+0x1f8>)
 8005d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d80:	f002 fc58 	bl	8008634 <vPortExitCritical>
				return pdPASS;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e063      	b.n	8005e50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d103      	bne.n	8005d96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d8e:	f002 fc51 	bl	8008634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e05c      	b.n	8005e50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d106      	bne.n	8005daa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d9c:	f107 0314 	add.w	r3, r7, #20
 8005da0:	4618      	mov	r0, r3
 8005da2:	f001 fc2b 	bl	80075fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005da6:	2301      	movs	r3, #1
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005daa:	f002 fc43 	bl	8008634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dae:	f001 f8ff 	bl	8006fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005db2:	f002 fc0f 	bl	80085d4 <vPortEnterCritical>
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dbc:	b25b      	sxtb	r3, r3
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc2:	d103      	bne.n	8005dcc <xQueueGenericSend+0x16c>
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dd2:	b25b      	sxtb	r3, r3
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd8:	d103      	bne.n	8005de2 <xQueueGenericSend+0x182>
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005de2:	f002 fc27 	bl	8008634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005de6:	1d3a      	adds	r2, r7, #4
 8005de8:	f107 0314 	add.w	r3, r7, #20
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 fc1a 	bl	8007628 <xTaskCheckForTimeOut>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d124      	bne.n	8005e44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dfc:	f000 fcf5 	bl	80067ea <prvIsQueueFull>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d018      	beq.n	8005e38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	3310      	adds	r3, #16
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f001 faa2 	bl	8007358 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e16:	f000 fc80 	bl	800671a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e1a:	f001 f8d7 	bl	8006fcc <xTaskResumeAll>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f47f af7c 	bne.w	8005d1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005e26:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <xQueueGenericSend+0x1f8>)
 8005e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	e772      	b.n	8005d1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e3a:	f000 fc6e 	bl	800671a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e3e:	f001 f8c5 	bl	8006fcc <xTaskResumeAll>
 8005e42:	e76c      	b.n	8005d1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e46:	f000 fc68 	bl	800671a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e4a:	f001 f8bf 	bl	8006fcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3738      	adds	r7, #56	; 0x38
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	e000ed04 	.word	0xe000ed04

08005e5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b090      	sub	sp, #64	; 0x40
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d103      	bne.n	8005e98 <xQueueGenericSendFromISR+0x3c>
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <xQueueGenericSendFromISR+0x40>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e000      	b.n	8005e9e <xQueueGenericSendFromISR+0x42>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005eb4:	bf00      	nop
 8005eb6:	e7fe      	b.n	8005eb6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d103      	bne.n	8005ec6 <xQueueGenericSendFromISR+0x6a>
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <xQueueGenericSendFromISR+0x6e>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e000      	b.n	8005ecc <xQueueGenericSendFromISR+0x70>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	623b      	str	r3, [r7, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	e7fe      	b.n	8005ee4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ee6:	f002 fc57 	bl	8008798 <vPortValidateInterruptPriority>
	__asm volatile
 8005eea:	f3ef 8211 	mrs	r2, BASEPRI
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	61fa      	str	r2, [r7, #28]
 8005f00:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005f02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d302      	bcc.n	8005f18 <xQueueGenericSendFromISR+0xbc>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d12f      	bne.n	8005f78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f2e:	f000 fb64 	bl	80065fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f3a:	d112      	bne.n	8005f62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d016      	beq.n	8005f72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	3324      	adds	r3, #36	; 0x24
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 fa91 	bl	8007470 <xTaskRemoveFromEventList>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00e      	beq.n	8005f72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00b      	beq.n	8005f72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	e007      	b.n	8005f72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f66:	3301      	adds	r3, #1
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	b25a      	sxtb	r2, r3
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f72:	2301      	movs	r3, #1
 8005f74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f76:	e001      	b.n	8005f7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f383 8811 	msr	BASEPRI, r3
}
 8005f86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3740      	adds	r7, #64	; 0x40
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b08e      	sub	sp, #56	; 0x38
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	623b      	str	r3, [r7, #32]
}
 8005fb8:	bf00      	nop
 8005fba:	e7fe      	b.n	8005fba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <xQueueGiveFromISR+0x48>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	61fb      	str	r3, [r7, #28]
}
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d103      	bne.n	8005fea <xQueueGiveFromISR+0x58>
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <xQueueGiveFromISR+0x5c>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <xQueueGiveFromISR+0x5e>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10a      	bne.n	800600a <xQueueGiveFromISR+0x78>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	61bb      	str	r3, [r7, #24]
}
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800600a:	f002 fbc5 	bl	8008798 <vPortValidateInterruptPriority>
	__asm volatile
 800600e:	f3ef 8211 	mrs	r2, BASEPRI
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	617a      	str	r2, [r7, #20]
 8006024:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006026:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006036:	429a      	cmp	r2, r3
 8006038:	d22b      	bcs.n	8006092 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800604c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006054:	d112      	bne.n	800607c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	2b00      	cmp	r3, #0
 800605c:	d016      	beq.n	800608c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	3324      	adds	r3, #36	; 0x24
 8006062:	4618      	mov	r0, r3
 8006064:	f001 fa04 	bl	8007470 <xTaskRemoveFromEventList>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00e      	beq.n	800608c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00b      	beq.n	800608c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2201      	movs	r2, #1
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	e007      	b.n	800608c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800607c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006080:	3301      	adds	r3, #1
 8006082:	b2db      	uxtb	r3, r3
 8006084:	b25a      	sxtb	r2, r3
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800608c:	2301      	movs	r3, #1
 800608e:	637b      	str	r3, [r7, #52]	; 0x34
 8006090:	e001      	b.n	8006096 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006092:	2300      	movs	r3, #0
 8006094:	637b      	str	r3, [r7, #52]	; 0x34
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f383 8811 	msr	BASEPRI, r3
}
 80060a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3738      	adds	r7, #56	; 0x38
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08c      	sub	sp, #48	; 0x30
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80060b8:	2300      	movs	r3, #0
 80060ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <xQueueReceive+0x30>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	623b      	str	r3, [r7, #32]
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d103      	bne.n	80060ea <xQueueReceive+0x3e>
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <xQueueReceive+0x42>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <xQueueReceive+0x44>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <xQueueReceive+0x5e>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	61fb      	str	r3, [r7, #28]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800610a:	f001 fbd1 	bl	80078b0 <xTaskGetSchedulerState>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <xQueueReceive+0x6e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <xQueueReceive+0x72>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <xQueueReceive+0x74>
 800611e:	2300      	movs	r3, #0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <xQueueReceive+0x8e>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	61bb      	str	r3, [r7, #24]
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800613a:	f002 fa4b 	bl	80085d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01f      	beq.n	800618a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800614e:	f000 fabe 	bl	80066ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	1e5a      	subs	r2, r3, #1
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00f      	beq.n	8006182 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	3310      	adds	r3, #16
 8006166:	4618      	mov	r0, r3
 8006168:	f001 f982 	bl	8007470 <xTaskRemoveFromEventList>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006172:	4b3d      	ldr	r3, [pc, #244]	; (8006268 <xQueueReceive+0x1bc>)
 8006174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006182:	f002 fa57 	bl	8008634 <vPortExitCritical>
				return pdPASS;
 8006186:	2301      	movs	r3, #1
 8006188:	e069      	b.n	800625e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d103      	bne.n	8006198 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006190:	f002 fa50 	bl	8008634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006194:	2300      	movs	r3, #0
 8006196:	e062      	b.n	800625e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	2b00      	cmp	r3, #0
 800619c:	d106      	bne.n	80061ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800619e:	f107 0310 	add.w	r3, r7, #16
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 fa2a 	bl	80075fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061a8:	2301      	movs	r3, #1
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061ac:	f002 fa42 	bl	8008634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061b0:	f000 fefe 	bl	8006fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061b4:	f002 fa0e 	bl	80085d4 <vPortEnterCritical>
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061be:	b25b      	sxtb	r3, r3
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061c4:	d103      	bne.n	80061ce <xQueueReceive+0x122>
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061d4:	b25b      	sxtb	r3, r3
 80061d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061da:	d103      	bne.n	80061e4 <xQueueReceive+0x138>
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061e4:	f002 fa26 	bl	8008634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061e8:	1d3a      	adds	r2, r7, #4
 80061ea:	f107 0310 	add.w	r3, r7, #16
 80061ee:	4611      	mov	r1, r2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f001 fa19 	bl	8007628 <xTaskCheckForTimeOut>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d123      	bne.n	8006244 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061fe:	f000 fade 	bl	80067be <prvIsQueueEmpty>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d017      	beq.n	8006238 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	3324      	adds	r3, #36	; 0x24
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	4611      	mov	r1, r2
 8006210:	4618      	mov	r0, r3
 8006212:	f001 f8a1 	bl	8007358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006218:	f000 fa7f 	bl	800671a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800621c:	f000 fed6 	bl	8006fcc <xTaskResumeAll>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d189      	bne.n	800613a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006226:	4b10      	ldr	r3, [pc, #64]	; (8006268 <xQueueReceive+0x1bc>)
 8006228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	e780      	b.n	800613a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800623a:	f000 fa6e 	bl	800671a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800623e:	f000 fec5 	bl	8006fcc <xTaskResumeAll>
 8006242:	e77a      	b.n	800613a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006246:	f000 fa68 	bl	800671a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800624a:	f000 febf 	bl	8006fcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800624e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006250:	f000 fab5 	bl	80067be <prvIsQueueEmpty>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	f43f af6f 	beq.w	800613a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800625c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800625e:	4618      	mov	r0, r3
 8006260:	3730      	adds	r7, #48	; 0x30
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	e000ed04 	.word	0xe000ed04

0800626c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08e      	sub	sp, #56	; 0x38
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006276:	2300      	movs	r3, #0
 8006278:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800627e:	2300      	movs	r3, #0
 8006280:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	623b      	str	r3, [r7, #32]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	61fb      	str	r3, [r7, #28]
}
 80062b8:	bf00      	nop
 80062ba:	e7fe      	b.n	80062ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062bc:	f001 faf8 	bl	80078b0 <xTaskGetSchedulerState>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <xQueueSemaphoreTake+0x60>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <xQueueSemaphoreTake+0x64>
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <xQueueSemaphoreTake+0x66>
 80062d0:	2300      	movs	r3, #0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10a      	bne.n	80062ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	61bb      	str	r3, [r7, #24]
}
 80062e8:	bf00      	nop
 80062ea:	e7fe      	b.n	80062ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062ec:	f002 f972 	bl	80085d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80062f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d024      	beq.n	8006346 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	1e5a      	subs	r2, r3, #1
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d104      	bne.n	8006316 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800630c:	f001 fc5e 	bl	8007bcc <pvTaskIncrementMutexHeldCount>
 8006310:	4602      	mov	r2, r0
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006314:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00f      	beq.n	800633e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006320:	3310      	adds	r3, #16
 8006322:	4618      	mov	r0, r3
 8006324:	f001 f8a4 	bl	8007470 <xTaskRemoveFromEventList>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800632e:	4b54      	ldr	r3, [pc, #336]	; (8006480 <xQueueSemaphoreTake+0x214>)
 8006330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800633e:	f002 f979 	bl	8008634 <vPortExitCritical>
				return pdPASS;
 8006342:	2301      	movs	r3, #1
 8006344:	e097      	b.n	8006476 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d111      	bne.n	8006370 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	617b      	str	r3, [r7, #20]
}
 8006364:	bf00      	nop
 8006366:	e7fe      	b.n	8006366 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006368:	f002 f964 	bl	8008634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800636c:	2300      	movs	r3, #0
 800636e:	e082      	b.n	8006476 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006376:	f107 030c 	add.w	r3, r7, #12
 800637a:	4618      	mov	r0, r3
 800637c:	f001 f93e 	bl	80075fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006380:	2301      	movs	r3, #1
 8006382:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006384:	f002 f956 	bl	8008634 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006388:	f000 fe12 	bl	8006fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800638c:	f002 f922 	bl	80085d4 <vPortEnterCritical>
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006396:	b25b      	sxtb	r3, r3
 8006398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800639c:	d103      	bne.n	80063a6 <xQueueSemaphoreTake+0x13a>
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ac:	b25b      	sxtb	r3, r3
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063b2:	d103      	bne.n	80063bc <xQueueSemaphoreTake+0x150>
 80063b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063bc:	f002 f93a 	bl	8008634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063c0:	463a      	mov	r2, r7
 80063c2:	f107 030c 	add.w	r3, r7, #12
 80063c6:	4611      	mov	r1, r2
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 f92d 	bl	8007628 <xTaskCheckForTimeOut>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d132      	bne.n	800643a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063d6:	f000 f9f2 	bl	80067be <prvIsQueueEmpty>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d026      	beq.n	800642e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d109      	bne.n	80063fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80063e8:	f002 f8f4 	bl	80085d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f001 fa7b 	bl	80078ec <xTaskPriorityInherit>
 80063f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80063f8:	f002 f91c 	bl	8008634 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	3324      	adds	r3, #36	; 0x24
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	4611      	mov	r1, r2
 8006404:	4618      	mov	r0, r3
 8006406:	f000 ffa7 	bl	8007358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800640a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800640c:	f000 f985 	bl	800671a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006410:	f000 fddc 	bl	8006fcc <xTaskResumeAll>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	f47f af68 	bne.w	80062ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800641c:	4b18      	ldr	r3, [pc, #96]	; (8006480 <xQueueSemaphoreTake+0x214>)
 800641e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	e75e      	b.n	80062ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800642e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006430:	f000 f973 	bl	800671a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006434:	f000 fdca 	bl	8006fcc <xTaskResumeAll>
 8006438:	e758      	b.n	80062ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800643a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800643c:	f000 f96d 	bl	800671a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006440:	f000 fdc4 	bl	8006fcc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006446:	f000 f9ba 	bl	80067be <prvIsQueueEmpty>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	f43f af4d 	beq.w	80062ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00d      	beq.n	8006474 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006458:	f002 f8bc 	bl	80085d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800645c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800645e:	f000 f8b4 	bl	80065ca <prvGetDisinheritPriorityAfterTimeout>
 8006462:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800646a:	4618      	mov	r0, r3
 800646c:	f001 fb14 	bl	8007a98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006470:	f002 f8e0 	bl	8008634 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006474:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006476:	4618      	mov	r0, r3
 8006478:	3738      	adds	r7, #56	; 0x38
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	e000ed04 	.word	0xe000ed04

08006484 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b08e      	sub	sp, #56	; 0x38
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	623b      	str	r3, [r7, #32]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <xQueueReceiveFromISR+0x3a>
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <xQueueReceiveFromISR+0x3e>
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <xQueueReceiveFromISR+0x40>
 80064c2:	2300      	movs	r3, #0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	61fb      	str	r3, [r7, #28]
}
 80064da:	bf00      	nop
 80064dc:	e7fe      	b.n	80064dc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064de:	f002 f95b 	bl	8008798 <vPortValidateInterruptPriority>
	__asm volatile
 80064e2:	f3ef 8211 	mrs	r2, BASEPRI
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	61ba      	str	r2, [r7, #24]
 80064f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	2b00      	cmp	r3, #0
 8006508:	d02f      	beq.n	800656a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006518:	f000 f8d9 	bl	80066ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	1e5a      	subs	r2, r3, #1
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006524:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800652c:	d112      	bne.n	8006554 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d016      	beq.n	8006564 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	3310      	adds	r3, #16
 800653a:	4618      	mov	r0, r3
 800653c:	f000 ff98 	bl	8007470 <xTaskRemoveFromEventList>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00e      	beq.n	8006564 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	e007      	b.n	8006564 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006558:	3301      	adds	r3, #1
 800655a:	b2db      	uxtb	r3, r3
 800655c:	b25a      	sxtb	r2, r3
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006564:	2301      	movs	r3, #1
 8006566:	637b      	str	r3, [r7, #52]	; 0x34
 8006568:	e001      	b.n	800656e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800656a:	2300      	movs	r3, #0
 800656c:	637b      	str	r3, [r7, #52]	; 0x34
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f383 8811 	msr	BASEPRI, r3
}
 8006578:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800657a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800657c:	4618      	mov	r0, r3
 800657e:	3738      	adds	r7, #56	; 0x38
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <vQueueDelete+0x28>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60bb      	str	r3, [r7, #8]
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 f95f 	bl	8006870 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f002 f9f7 	bl	80089b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80065c2:	bf00      	nop
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d006      	beq.n	80065e8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	e001      	b.n	80065ec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80065ec:	68fb      	ldr	r3, [r7, #12]
	}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b086      	sub	sp, #24
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10d      	bne.n	8006634 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d14d      	bne.n	80066bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	4618      	mov	r0, r3
 8006626:	f001 f9c9 	bl	80079bc <xTaskPriorityDisinherit>
 800662a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	609a      	str	r2, [r3, #8]
 8006632:	e043      	b.n	80066bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d119      	bne.n	800666e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6858      	ldr	r0, [r3, #4]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	461a      	mov	r2, r3
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	f002 faff 	bl	8008c48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	441a      	add	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	429a      	cmp	r2, r3
 8006662:	d32b      	bcc.n	80066bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	605a      	str	r2, [r3, #4]
 800666c:	e026      	b.n	80066bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68d8      	ldr	r0, [r3, #12]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	461a      	mov	r2, r3
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	f002 fae5 	bl	8008c48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	425b      	negs	r3, r3
 8006688:	441a      	add	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d207      	bcs.n	80066aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	425b      	negs	r3, r3
 80066a4:	441a      	add	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d105      	bne.n	80066bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066c4:	697b      	ldr	r3, [r7, #20]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d018      	beq.n	8006712 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	441a      	add	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d303      	bcc.n	8006702 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68d9      	ldr	r1, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	461a      	mov	r2, r3
 800670c:	6838      	ldr	r0, [r7, #0]
 800670e:	f002 fa9b 	bl	8008c48 <memcpy>
	}
}
 8006712:	bf00      	nop
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006722:	f001 ff57 	bl	80085d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800672c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800672e:	e011      	b.n	8006754 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	2b00      	cmp	r3, #0
 8006736:	d012      	beq.n	800675e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3324      	adds	r3, #36	; 0x24
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fe97 	bl	8007470 <xTaskRemoveFromEventList>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006748:	f000 ffd0 	bl	80076ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	3b01      	subs	r3, #1
 8006750:	b2db      	uxtb	r3, r3
 8006752:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006758:	2b00      	cmp	r3, #0
 800675a:	dce9      	bgt.n	8006730 <prvUnlockQueue+0x16>
 800675c:	e000      	b.n	8006760 <prvUnlockQueue+0x46>
					break;
 800675e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	22ff      	movs	r2, #255	; 0xff
 8006764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006768:	f001 ff64 	bl	8008634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800676c:	f001 ff32 	bl	80085d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006776:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006778:	e011      	b.n	800679e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d012      	beq.n	80067a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3310      	adds	r3, #16
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fe72 	bl	8007470 <xTaskRemoveFromEventList>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006792:	f000 ffab 	bl	80076ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006796:	7bbb      	ldrb	r3, [r7, #14]
 8006798:	3b01      	subs	r3, #1
 800679a:	b2db      	uxtb	r3, r3
 800679c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800679e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	dce9      	bgt.n	800677a <prvUnlockQueue+0x60>
 80067a6:	e000      	b.n	80067aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	22ff      	movs	r2, #255	; 0xff
 80067ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067b2:	f001 ff3f 	bl	8008634 <vPortExitCritical>
}
 80067b6:	bf00      	nop
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067c6:	f001 ff05 	bl	80085d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d102      	bne.n	80067d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067d2:	2301      	movs	r3, #1
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	e001      	b.n	80067dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067d8:	2300      	movs	r3, #0
 80067da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067dc:	f001 ff2a 	bl	8008634 <vPortExitCritical>

	return xReturn;
 80067e0:	68fb      	ldr	r3, [r7, #12]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067f2:	f001 feef 	bl	80085d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fe:	429a      	cmp	r2, r3
 8006800:	d102      	bne.n	8006808 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006802:	2301      	movs	r3, #1
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	e001      	b.n	800680c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800680c:	f001 ff12 	bl	8008634 <vPortExitCritical>

	return xReturn;
 8006810:	68fb      	ldr	r3, [r7, #12]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006826:	2300      	movs	r3, #0
 8006828:	60fb      	str	r3, [r7, #12]
 800682a:	e014      	b.n	8006856 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800682c:	4a0f      	ldr	r2, [pc, #60]	; (800686c <vQueueAddToRegistry+0x50>)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10b      	bne.n	8006850 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006838:	490c      	ldr	r1, [pc, #48]	; (800686c <vQueueAddToRegistry+0x50>)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006842:	4a0a      	ldr	r2, [pc, #40]	; (800686c <vQueueAddToRegistry+0x50>)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	4413      	add	r3, r2
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800684e:	e006      	b.n	800685e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b07      	cmp	r3, #7
 800685a:	d9e7      	bls.n	800682c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800685c:	bf00      	nop
 800685e:	bf00      	nop
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	20001a54 	.word	0x20001a54

08006870 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	e016      	b.n	80068ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800687e:	4a10      	ldr	r2, [pc, #64]	; (80068c0 <vQueueUnregisterQueue+0x50>)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	4413      	add	r3, r2
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	429a      	cmp	r2, r3
 800688c:	d10b      	bne.n	80068a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800688e:	4a0c      	ldr	r2, [pc, #48]	; (80068c0 <vQueueUnregisterQueue+0x50>)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2100      	movs	r1, #0
 8006894:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006898:	4a09      	ldr	r2, [pc, #36]	; (80068c0 <vQueueUnregisterQueue+0x50>)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	4413      	add	r3, r2
 80068a0:	2200      	movs	r2, #0
 80068a2:	605a      	str	r2, [r3, #4]
				break;
 80068a4:	e006      	b.n	80068b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3301      	adds	r3, #1
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b07      	cmp	r3, #7
 80068b0:	d9e5      	bls.n	800687e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80068b2:	bf00      	nop
 80068b4:	bf00      	nop
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	20001a54 	.word	0x20001a54

080068c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068d4:	f001 fe7e 	bl	80085d4 <vPortEnterCritical>
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068de:	b25b      	sxtb	r3, r3
 80068e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068e4:	d103      	bne.n	80068ee <vQueueWaitForMessageRestricted+0x2a>
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068f4:	b25b      	sxtb	r3, r3
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068fa:	d103      	bne.n	8006904 <vQueueWaitForMessageRestricted+0x40>
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006904:	f001 fe96 	bl	8008634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	2b00      	cmp	r3, #0
 800690e:	d106      	bne.n	800691e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	3324      	adds	r3, #36	; 0x24
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fd7d 	bl	8007418 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800691e:	6978      	ldr	r0, [r7, #20]
 8006920:	f7ff fefb 	bl	800671a <prvUnlockQueue>
	}
 8006924:	bf00      	nop
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08e      	sub	sp, #56	; 0x38
 8006930:	af04      	add	r7, sp, #16
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800693a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	623b      	str	r3, [r7, #32]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <xTaskCreateStatic+0x46>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	61fb      	str	r3, [r7, #28]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006972:	235c      	movs	r3, #92	; 0x5c
 8006974:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b5c      	cmp	r3, #92	; 0x5c
 800697a:	d00a      	beq.n	8006992 <xTaskCreateStatic+0x66>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	61bb      	str	r3, [r7, #24]
}
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006992:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	2b00      	cmp	r3, #0
 8006998:	d01e      	beq.n	80069d8 <xTaskCreateStatic+0xac>
 800699a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01b      	beq.n	80069d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	2202      	movs	r2, #2
 80069ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069b2:	2300      	movs	r3, #0
 80069b4:	9303      	str	r3, [sp, #12]
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	9302      	str	r3, [sp, #8]
 80069ba:	f107 0314 	add.w	r3, r7, #20
 80069be:	9301      	str	r3, [sp, #4]
 80069c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	68b9      	ldr	r1, [r7, #8]
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 f850 	bl	8006a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069d2:	f000 f8dd 	bl	8006b90 <prvAddNewTaskToReadyList>
 80069d6:	e001      	b.n	80069dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80069d8:	2300      	movs	r3, #0
 80069da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069dc:	697b      	ldr	r3, [r7, #20]
	}
 80069de:	4618      	mov	r0, r3
 80069e0:	3728      	adds	r7, #40	; 0x28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b08c      	sub	sp, #48	; 0x30
 80069ea:	af04      	add	r7, sp, #16
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	603b      	str	r3, [r7, #0]
 80069f2:	4613      	mov	r3, r2
 80069f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4618      	mov	r0, r3
 80069fc:	f001 ff0c 	bl	8008818 <pvPortMalloc>
 8006a00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00e      	beq.n	8006a26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a08:	205c      	movs	r0, #92	; 0x5c
 8006a0a:	f001 ff05 	bl	8008818 <pvPortMalloc>
 8006a0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a1c:	e005      	b.n	8006a2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a1e:	6978      	ldr	r0, [r7, #20]
 8006a20:	f001 ffc6 	bl	80089b0 <vPortFree>
 8006a24:	e001      	b.n	8006a2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d017      	beq.n	8006a60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a38:	88fa      	ldrh	r2, [r7, #6]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9303      	str	r3, [sp, #12]
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	9302      	str	r3, [sp, #8]
 8006a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 f80e 	bl	8006a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a54:	69f8      	ldr	r0, [r7, #28]
 8006a56:	f000 f89b 	bl	8006b90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	e002      	b.n	8006a66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a66:	69bb      	ldr	r3, [r7, #24]
	}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3720      	adds	r7, #32
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	461a      	mov	r2, r3
 8006a88:	21a5      	movs	r1, #165	; 0xa5
 8006a8a:	f002 f8eb 	bl	8008c64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	f023 0307 	bic.w	r3, r3, #7
 8006aa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	617b      	str	r3, [r7, #20]
}
 8006ac4:	bf00      	nop
 8006ac6:	e7fe      	b.n	8006ac6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d01f      	beq.n	8006b0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	e012      	b.n	8006afa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	4413      	add	r3, r2
 8006ada:	7819      	ldrb	r1, [r3, #0]
 8006adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3334      	adds	r3, #52	; 0x34
 8006ae4:	460a      	mov	r2, r1
 8006ae6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	4413      	add	r3, r2
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d006      	beq.n	8006b02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	3301      	adds	r3, #1
 8006af8:	61fb      	str	r3, [r7, #28]
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	2b0f      	cmp	r3, #15
 8006afe:	d9e9      	bls.n	8006ad4 <prvInitialiseNewTask+0x64>
 8006b00:	e000      	b.n	8006b04 <prvInitialiseNewTask+0x94>
			{
				break;
 8006b02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b0c:	e003      	b.n	8006b16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	2b37      	cmp	r3, #55	; 0x37
 8006b1a:	d901      	bls.n	8006b20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b1c:	2337      	movs	r3, #55	; 0x37
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	2200      	movs	r2, #0
 8006b30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	3304      	adds	r3, #4
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fe fe56 	bl	80057e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	3318      	adds	r3, #24
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fe fe51 	bl	80057e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	2200      	movs	r2, #0
 8006b60:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	68f9      	ldr	r1, [r7, #12]
 8006b6e:	69b8      	ldr	r0, [r7, #24]
 8006b70:	f001 fc02 	bl	8008378 <pxPortInitialiseStack>
 8006b74:	4602      	mov	r2, r0
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b86:	bf00      	nop
 8006b88:	3720      	adds	r7, #32
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b98:	f001 fd1c 	bl	80085d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b9c:	4b2d      	ldr	r3, [pc, #180]	; (8006c54 <prvAddNewTaskToReadyList+0xc4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	4a2c      	ldr	r2, [pc, #176]	; (8006c54 <prvAddNewTaskToReadyList+0xc4>)
 8006ba4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ba6:	4b2c      	ldr	r3, [pc, #176]	; (8006c58 <prvAddNewTaskToReadyList+0xc8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bae:	4a2a      	ldr	r2, [pc, #168]	; (8006c58 <prvAddNewTaskToReadyList+0xc8>)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bb4:	4b27      	ldr	r3, [pc, #156]	; (8006c54 <prvAddNewTaskToReadyList+0xc4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d110      	bne.n	8006bde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bbc:	f000 fdba 	bl	8007734 <prvInitialiseTaskLists>
 8006bc0:	e00d      	b.n	8006bde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bc2:	4b26      	ldr	r3, [pc, #152]	; (8006c5c <prvAddNewTaskToReadyList+0xcc>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d109      	bne.n	8006bde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bca:	4b23      	ldr	r3, [pc, #140]	; (8006c58 <prvAddNewTaskToReadyList+0xc8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d802      	bhi.n	8006bde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bd8:	4a1f      	ldr	r2, [pc, #124]	; (8006c58 <prvAddNewTaskToReadyList+0xc8>)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bde:	4b20      	ldr	r3, [pc, #128]	; (8006c60 <prvAddNewTaskToReadyList+0xd0>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3301      	adds	r3, #1
 8006be4:	4a1e      	ldr	r2, [pc, #120]	; (8006c60 <prvAddNewTaskToReadyList+0xd0>)
 8006be6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006be8:	4b1d      	ldr	r3, [pc, #116]	; (8006c60 <prvAddNewTaskToReadyList+0xd0>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf4:	4b1b      	ldr	r3, [pc, #108]	; (8006c64 <prvAddNewTaskToReadyList+0xd4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d903      	bls.n	8006c04 <prvAddNewTaskToReadyList+0x74>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	4a18      	ldr	r2, [pc, #96]	; (8006c64 <prvAddNewTaskToReadyList+0xd4>)
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4a15      	ldr	r2, [pc, #84]	; (8006c68 <prvAddNewTaskToReadyList+0xd8>)
 8006c12:	441a      	add	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	f7fe fdf1 	bl	8005802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c20:	f001 fd08 	bl	8008634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c24:	4b0d      	ldr	r3, [pc, #52]	; (8006c5c <prvAddNewTaskToReadyList+0xcc>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00e      	beq.n	8006c4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <prvAddNewTaskToReadyList+0xc8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d207      	bcs.n	8006c4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c3a:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <prvAddNewTaskToReadyList+0xdc>)
 8006c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c4a:	bf00      	nop
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20000c20 	.word	0x20000c20
 8006c58:	2000074c 	.word	0x2000074c
 8006c5c:	20000c2c 	.word	0x20000c2c
 8006c60:	20000c3c 	.word	0x20000c3c
 8006c64:	20000c28 	.word	0x20000c28
 8006c68:	20000750 	.word	0x20000750
 8006c6c:	e000ed04 	.word	0xe000ed04

08006c70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d017      	beq.n	8006cb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c82:	4b13      	ldr	r3, [pc, #76]	; (8006cd0 <vTaskDelay+0x60>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <vTaskDelay+0x30>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	60bb      	str	r3, [r7, #8]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ca0:	f000 f986 	bl	8006fb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 ffa4 	bl	8007bf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cac:	f000 f98e 	bl	8006fcc <xTaskResumeAll>
 8006cb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d107      	bne.n	8006cc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006cb8:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <vTaskDelay+0x64>)
 8006cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cc8:	bf00      	nop
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20000c48 	.word	0x20000c48
 8006cd4:	e000ed04 	.word	0xe000ed04

08006cd8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006ce0:	f001 fc78 	bl	80085d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d102      	bne.n	8006cf0 <vTaskSuspend+0x18>
 8006cea:	4b30      	ldr	r3, [pc, #192]	; (8006dac <vTaskSuspend+0xd4>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	e000      	b.n	8006cf2 <vTaskSuspend+0x1a>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fe fddf 	bl	80058bc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d004      	beq.n	8006d10 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3318      	adds	r3, #24
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe fdd6 	bl	80058bc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4619      	mov	r1, r3
 8006d16:	4826      	ldr	r0, [pc, #152]	; (8006db0 <vTaskSuspend+0xd8>)
 8006d18:	f7fe fd73 	bl	8005802 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d103      	bne.n	8006d30 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006d30:	f001 fc80 	bl	8008634 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006d34:	4b1f      	ldr	r3, [pc, #124]	; (8006db4 <vTaskSuspend+0xdc>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006d3c:	f001 fc4a 	bl	80085d4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006d40:	f000 fd96 	bl	8007870 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006d44:	f001 fc76 	bl	8008634 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006d48:	4b18      	ldr	r3, [pc, #96]	; (8006dac <vTaskSuspend+0xd4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d127      	bne.n	8006da2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8006d52:	4b18      	ldr	r3, [pc, #96]	; (8006db4 <vTaskSuspend+0xdc>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d017      	beq.n	8006d8a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006d5a:	4b17      	ldr	r3, [pc, #92]	; (8006db8 <vTaskSuspend+0xe0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00a      	beq.n	8006d78 <vTaskSuspend+0xa0>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	60bb      	str	r3, [r7, #8]
}
 8006d74:	bf00      	nop
 8006d76:	e7fe      	b.n	8006d76 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8006d78:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <vTaskSuspend+0xe4>)
 8006d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d88:	e00b      	b.n	8006da2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006d8a:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <vTaskSuspend+0xd8>)
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	4b0c      	ldr	r3, [pc, #48]	; (8006dc0 <vTaskSuspend+0xe8>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d103      	bne.n	8006d9e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8006d96:	4b05      	ldr	r3, [pc, #20]	; (8006dac <vTaskSuspend+0xd4>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]
	}
 8006d9c:	e001      	b.n	8006da2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8006d9e:	f000 fa7d 	bl	800729c <vTaskSwitchContext>
	}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	2000074c 	.word	0x2000074c
 8006db0:	20000c0c 	.word	0x20000c0c
 8006db4:	20000c2c 	.word	0x20000c2c
 8006db8:	20000c48 	.word	0x20000c48
 8006dbc:	e000ed04 	.word	0xe000ed04
 8006dc0:	20000c20 	.word	0x20000c20

08006dc4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10a      	bne.n	8006df0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	60fb      	str	r3, [r7, #12]
}
 8006dec:	bf00      	nop
 8006dee:	e7fe      	b.n	8006dee <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	4a0a      	ldr	r2, [pc, #40]	; (8006e20 <prvTaskIsTaskSuspended+0x5c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d10a      	bne.n	8006e10 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	4a09      	ldr	r2, [pc, #36]	; (8006e24 <prvTaskIsTaskSuspended+0x60>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d005      	beq.n	8006e10 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e10:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006e12:	4618      	mov	r0, r3
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20000c0c 	.word	0x20000c0c
 8006e24:	20000be0 	.word	0x20000be0

08006e28 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <vTaskResume+0x28>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	60bb      	str	r3, [r7, #8]
}
 8006e4c:	bf00      	nop
 8006e4e:	e7fe      	b.n	8006e4e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006e50:	4b20      	ldr	r3, [pc, #128]	; (8006ed4 <vTaskResume+0xac>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d038      	beq.n	8006ecc <vTaskResume+0xa4>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d035      	beq.n	8006ecc <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8006e60:	f001 fbb8 	bl	80085d4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f7ff ffad 	bl	8006dc4 <prvTaskIsTaskSuspended>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d02b      	beq.n	8006ec8 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3304      	adds	r3, #4
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fe fd21 	bl	80058bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7e:	4b16      	ldr	r3, [pc, #88]	; (8006ed8 <vTaskResume+0xb0>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d903      	bls.n	8006e8e <vTaskResume+0x66>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	4a13      	ldr	r2, [pc, #76]	; (8006ed8 <vTaskResume+0xb0>)
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4a10      	ldr	r2, [pc, #64]	; (8006edc <vTaskResume+0xb4>)
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	f7fe fcac 	bl	8005802 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eae:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <vTaskResume+0xac>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d307      	bcc.n	8006ec8 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006eb8:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <vTaskResume+0xb8>)
 8006eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006ec8:	f001 fbb4 	bl	8008634 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	2000074c 	.word	0x2000074c
 8006ed8:	20000c28 	.word	0x20000c28
 8006edc:	20000750 	.word	0x20000750
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08a      	sub	sp, #40	; 0x28
 8006ee8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ef2:	463a      	mov	r2, r7
 8006ef4:	1d39      	adds	r1, r7, #4
 8006ef6:	f107 0308 	add.w	r3, r7, #8
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe f9b4 	bl	8005268 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	9202      	str	r2, [sp, #8]
 8006f08:	9301      	str	r3, [sp, #4]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	460a      	mov	r2, r1
 8006f12:	4921      	ldr	r1, [pc, #132]	; (8006f98 <vTaskStartScheduler+0xb4>)
 8006f14:	4821      	ldr	r0, [pc, #132]	; (8006f9c <vTaskStartScheduler+0xb8>)
 8006f16:	f7ff fd09 	bl	800692c <xTaskCreateStatic>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	4a20      	ldr	r2, [pc, #128]	; (8006fa0 <vTaskStartScheduler+0xbc>)
 8006f1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f20:	4b1f      	ldr	r3, [pc, #124]	; (8006fa0 <vTaskStartScheduler+0xbc>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	e001      	b.n	8006f32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d102      	bne.n	8006f3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f38:	f000 feb0 	bl	8007c9c <xTimerCreateTimerTask>
 8006f3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d116      	bne.n	8006f72 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	613b      	str	r3, [r7, #16]
}
 8006f56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f58:	4b12      	ldr	r3, [pc, #72]	; (8006fa4 <vTaskStartScheduler+0xc0>)
 8006f5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f60:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <vTaskStartScheduler+0xc4>)
 8006f62:	2201      	movs	r2, #1
 8006f64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f66:	4b11      	ldr	r3, [pc, #68]	; (8006fac <vTaskStartScheduler+0xc8>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f6c:	f001 fa90 	bl	8008490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f70:	e00e      	b.n	8006f90 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f78:	d10a      	bne.n	8006f90 <vTaskStartScheduler+0xac>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	60fb      	str	r3, [r7, #12]
}
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <vTaskStartScheduler+0xaa>
}
 8006f90:	bf00      	nop
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	08008fe8 	.word	0x08008fe8
 8006f9c:	08007705 	.word	0x08007705
 8006fa0:	20000c44 	.word	0x20000c44
 8006fa4:	20000c40 	.word	0x20000c40
 8006fa8:	20000c2c 	.word	0x20000c2c
 8006fac:	20000c24 	.word	0x20000c24

08006fb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fb4:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <vTaskSuspendAll+0x18>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	4a03      	ldr	r2, [pc, #12]	; (8006fc8 <vTaskSuspendAll+0x18>)
 8006fbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fbe:	bf00      	nop
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	20000c48 	.word	0x20000c48

08006fcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fda:	4b42      	ldr	r3, [pc, #264]	; (80070e4 <xTaskResumeAll+0x118>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10a      	bne.n	8006ff8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	603b      	str	r3, [r7, #0]
}
 8006ff4:	bf00      	nop
 8006ff6:	e7fe      	b.n	8006ff6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ff8:	f001 faec 	bl	80085d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ffc:	4b39      	ldr	r3, [pc, #228]	; (80070e4 <xTaskResumeAll+0x118>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3b01      	subs	r3, #1
 8007002:	4a38      	ldr	r2, [pc, #224]	; (80070e4 <xTaskResumeAll+0x118>)
 8007004:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007006:	4b37      	ldr	r3, [pc, #220]	; (80070e4 <xTaskResumeAll+0x118>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d162      	bne.n	80070d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800700e:	4b36      	ldr	r3, [pc, #216]	; (80070e8 <xTaskResumeAll+0x11c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d05e      	beq.n	80070d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007016:	e02f      	b.n	8007078 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007018:	4b34      	ldr	r3, [pc, #208]	; (80070ec <xTaskResumeAll+0x120>)
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3318      	adds	r3, #24
 8007024:	4618      	mov	r0, r3
 8007026:	f7fe fc49 	bl	80058bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3304      	adds	r3, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe fc44 	bl	80058bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007038:	4b2d      	ldr	r3, [pc, #180]	; (80070f0 <xTaskResumeAll+0x124>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d903      	bls.n	8007048 <xTaskResumeAll+0x7c>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	4a2a      	ldr	r2, [pc, #168]	; (80070f0 <xTaskResumeAll+0x124>)
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4a27      	ldr	r2, [pc, #156]	; (80070f4 <xTaskResumeAll+0x128>)
 8007056:	441a      	add	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3304      	adds	r3, #4
 800705c:	4619      	mov	r1, r3
 800705e:	4610      	mov	r0, r2
 8007060:	f7fe fbcf 	bl	8005802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007068:	4b23      	ldr	r3, [pc, #140]	; (80070f8 <xTaskResumeAll+0x12c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	429a      	cmp	r2, r3
 8007070:	d302      	bcc.n	8007078 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007072:	4b22      	ldr	r3, [pc, #136]	; (80070fc <xTaskResumeAll+0x130>)
 8007074:	2201      	movs	r2, #1
 8007076:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007078:	4b1c      	ldr	r3, [pc, #112]	; (80070ec <xTaskResumeAll+0x120>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1cb      	bne.n	8007018 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007086:	f000 fbf3 	bl	8007870 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800708a:	4b1d      	ldr	r3, [pc, #116]	; (8007100 <xTaskResumeAll+0x134>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d010      	beq.n	80070b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007096:	f000 f847 	bl	8007128 <xTaskIncrementTick>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80070a0:	4b16      	ldr	r3, [pc, #88]	; (80070fc <xTaskResumeAll+0x130>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1f1      	bne.n	8007096 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80070b2:	4b13      	ldr	r3, [pc, #76]	; (8007100 <xTaskResumeAll+0x134>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070b8:	4b10      	ldr	r3, [pc, #64]	; (80070fc <xTaskResumeAll+0x130>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d009      	beq.n	80070d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070c0:	2301      	movs	r3, #1
 80070c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070c4:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <xTaskResumeAll+0x138>)
 80070c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070d4:	f001 faae 	bl	8008634 <vPortExitCritical>

	return xAlreadyYielded;
 80070d8:	68bb      	ldr	r3, [r7, #8]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20000c48 	.word	0x20000c48
 80070e8:	20000c20 	.word	0x20000c20
 80070ec:	20000be0 	.word	0x20000be0
 80070f0:	20000c28 	.word	0x20000c28
 80070f4:	20000750 	.word	0x20000750
 80070f8:	2000074c 	.word	0x2000074c
 80070fc:	20000c34 	.word	0x20000c34
 8007100:	20000c30 	.word	0x20000c30
 8007104:	e000ed04 	.word	0xe000ed04

08007108 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <xTaskGetTickCount+0x1c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007114:	687b      	ldr	r3, [r7, #4]
}
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	20000c24 	.word	0x20000c24

08007128 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007132:	4b4f      	ldr	r3, [pc, #316]	; (8007270 <xTaskIncrementTick+0x148>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	f040 808f 	bne.w	800725a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800713c:	4b4d      	ldr	r3, [pc, #308]	; (8007274 <xTaskIncrementTick+0x14c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3301      	adds	r3, #1
 8007142:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007144:	4a4b      	ldr	r2, [pc, #300]	; (8007274 <xTaskIncrementTick+0x14c>)
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d120      	bne.n	8007192 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007150:	4b49      	ldr	r3, [pc, #292]	; (8007278 <xTaskIncrementTick+0x150>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <xTaskIncrementTick+0x48>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	603b      	str	r3, [r7, #0]
}
 800716c:	bf00      	nop
 800716e:	e7fe      	b.n	800716e <xTaskIncrementTick+0x46>
 8007170:	4b41      	ldr	r3, [pc, #260]	; (8007278 <xTaskIncrementTick+0x150>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	4b41      	ldr	r3, [pc, #260]	; (800727c <xTaskIncrementTick+0x154>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a3f      	ldr	r2, [pc, #252]	; (8007278 <xTaskIncrementTick+0x150>)
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	4a3f      	ldr	r2, [pc, #252]	; (800727c <xTaskIncrementTick+0x154>)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	4b3e      	ldr	r3, [pc, #248]	; (8007280 <xTaskIncrementTick+0x158>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	4a3d      	ldr	r2, [pc, #244]	; (8007280 <xTaskIncrementTick+0x158>)
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	f000 fb6f 	bl	8007870 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007192:	4b3c      	ldr	r3, [pc, #240]	; (8007284 <xTaskIncrementTick+0x15c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	429a      	cmp	r2, r3
 800719a:	d349      	bcc.n	8007230 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800719c:	4b36      	ldr	r3, [pc, #216]	; (8007278 <xTaskIncrementTick+0x150>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071a6:	4b37      	ldr	r3, [pc, #220]	; (8007284 <xTaskIncrementTick+0x15c>)
 80071a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071ac:	601a      	str	r2, [r3, #0]
					break;
 80071ae:	e03f      	b.n	8007230 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b0:	4b31      	ldr	r3, [pc, #196]	; (8007278 <xTaskIncrementTick+0x150>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d203      	bcs.n	80071d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071c8:	4a2e      	ldr	r2, [pc, #184]	; (8007284 <xTaskIncrementTick+0x15c>)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071ce:	e02f      	b.n	8007230 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	3304      	adds	r3, #4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fb71 	bl	80058bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	3318      	adds	r3, #24
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe fb68 	bl	80058bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f0:	4b25      	ldr	r3, [pc, #148]	; (8007288 <xTaskIncrementTick+0x160>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d903      	bls.n	8007200 <xTaskIncrementTick+0xd8>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	4a22      	ldr	r2, [pc, #136]	; (8007288 <xTaskIncrementTick+0x160>)
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007204:	4613      	mov	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4a1f      	ldr	r2, [pc, #124]	; (800728c <xTaskIncrementTick+0x164>)
 800720e:	441a      	add	r2, r3
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	3304      	adds	r3, #4
 8007214:	4619      	mov	r1, r3
 8007216:	4610      	mov	r0, r2
 8007218:	f7fe faf3 	bl	8005802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007220:	4b1b      	ldr	r3, [pc, #108]	; (8007290 <xTaskIncrementTick+0x168>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007226:	429a      	cmp	r2, r3
 8007228:	d3b8      	bcc.n	800719c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800722a:	2301      	movs	r3, #1
 800722c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800722e:	e7b5      	b.n	800719c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007230:	4b17      	ldr	r3, [pc, #92]	; (8007290 <xTaskIncrementTick+0x168>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007236:	4915      	ldr	r1, [pc, #84]	; (800728c <xTaskIncrementTick+0x164>)
 8007238:	4613      	mov	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	440b      	add	r3, r1
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d901      	bls.n	800724c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007248:	2301      	movs	r3, #1
 800724a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800724c:	4b11      	ldr	r3, [pc, #68]	; (8007294 <xTaskIncrementTick+0x16c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d007      	beq.n	8007264 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007254:	2301      	movs	r3, #1
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	e004      	b.n	8007264 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800725a:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <xTaskIncrementTick+0x170>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3301      	adds	r3, #1
 8007260:	4a0d      	ldr	r2, [pc, #52]	; (8007298 <xTaskIncrementTick+0x170>)
 8007262:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007264:	697b      	ldr	r3, [r7, #20]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20000c48 	.word	0x20000c48
 8007274:	20000c24 	.word	0x20000c24
 8007278:	20000bd8 	.word	0x20000bd8
 800727c:	20000bdc 	.word	0x20000bdc
 8007280:	20000c38 	.word	0x20000c38
 8007284:	20000c40 	.word	0x20000c40
 8007288:	20000c28 	.word	0x20000c28
 800728c:	20000750 	.word	0x20000750
 8007290:	2000074c 	.word	0x2000074c
 8007294:	20000c34 	.word	0x20000c34
 8007298:	20000c30 	.word	0x20000c30

0800729c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072a2:	4b28      	ldr	r3, [pc, #160]	; (8007344 <vTaskSwitchContext+0xa8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072aa:	4b27      	ldr	r3, [pc, #156]	; (8007348 <vTaskSwitchContext+0xac>)
 80072ac:	2201      	movs	r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072b0:	e041      	b.n	8007336 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80072b2:	4b25      	ldr	r3, [pc, #148]	; (8007348 <vTaskSwitchContext+0xac>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b8:	4b24      	ldr	r3, [pc, #144]	; (800734c <vTaskSwitchContext+0xb0>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	e010      	b.n	80072e2 <vTaskSwitchContext+0x46>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <vTaskSwitchContext+0x40>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	607b      	str	r3, [r7, #4]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <vTaskSwitchContext+0x3e>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3b01      	subs	r3, #1
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	491b      	ldr	r1, [pc, #108]	; (8007350 <vTaskSwitchContext+0xb4>)
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	440b      	add	r3, r1
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0e4      	beq.n	80072c0 <vTaskSwitchContext+0x24>
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4a13      	ldr	r2, [pc, #76]	; (8007350 <vTaskSwitchContext+0xb4>)
 8007302:	4413      	add	r3, r2
 8007304:	60bb      	str	r3, [r7, #8]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	605a      	str	r2, [r3, #4]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	3308      	adds	r3, #8
 8007318:	429a      	cmp	r2, r3
 800731a:	d104      	bne.n	8007326 <vTaskSwitchContext+0x8a>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	605a      	str	r2, [r3, #4]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	4a09      	ldr	r2, [pc, #36]	; (8007354 <vTaskSwitchContext+0xb8>)
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	4a06      	ldr	r2, [pc, #24]	; (800734c <vTaskSwitchContext+0xb0>)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6013      	str	r3, [r2, #0]
}
 8007336:	bf00      	nop
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20000c48 	.word	0x20000c48
 8007348:	20000c34 	.word	0x20000c34
 800734c:	20000c28 	.word	0x20000c28
 8007350:	20000750 	.word	0x20000750
 8007354:	2000074c 	.word	0x2000074c

08007358 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	60fb      	str	r3, [r7, #12]
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800737e:	4b07      	ldr	r3, [pc, #28]	; (800739c <vTaskPlaceOnEventList+0x44>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3318      	adds	r3, #24
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7fe fa5f 	bl	800584a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800738c:	2101      	movs	r1, #1
 800738e:	6838      	ldr	r0, [r7, #0]
 8007390:	f000 fc30 	bl	8007bf4 <prvAddCurrentTaskToDelayedList>
}
 8007394:	bf00      	nop
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	2000074c 	.word	0x2000074c

080073a0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10a      	bne.n	80073c8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	617b      	str	r3, [r7, #20]
}
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80073c8:	4b11      	ldr	r3, [pc, #68]	; (8007410 <vTaskPlaceOnUnorderedEventList+0x70>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	613b      	str	r3, [r7, #16]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80073e6:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <vTaskPlaceOnUnorderedEventList+0x74>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80073f0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073f2:	4b08      	ldr	r3, [pc, #32]	; (8007414 <vTaskPlaceOnUnorderedEventList+0x74>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3318      	adds	r3, #24
 80073f8:	4619      	mov	r1, r3
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f7fe fa01 	bl	8005802 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007400:	2101      	movs	r1, #1
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fbf6 	bl	8007bf4 <prvAddCurrentTaskToDelayedList>
}
 8007408:	bf00      	nop
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	20000c48 	.word	0x20000c48
 8007414:	2000074c 	.word	0x2000074c

08007418 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	617b      	str	r3, [r7, #20]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007440:	4b0a      	ldr	r3, [pc, #40]	; (800746c <vTaskPlaceOnEventListRestricted+0x54>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3318      	adds	r3, #24
 8007446:	4619      	mov	r1, r3
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f7fe f9da 	bl	8005802 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007458:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	68b8      	ldr	r0, [r7, #8]
 800745e:	f000 fbc9 	bl	8007bf4 <prvAddCurrentTaskToDelayedList>
	}
 8007462:	bf00      	nop
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	2000074c 	.word	0x2000074c

08007470 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10a      	bne.n	800749c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	60fb      	str	r3, [r7, #12]
}
 8007498:	bf00      	nop
 800749a:	e7fe      	b.n	800749a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	3318      	adds	r3, #24
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fe fa0b 	bl	80058bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074a6:	4b1e      	ldr	r3, [pc, #120]	; (8007520 <xTaskRemoveFromEventList+0xb0>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d11d      	bne.n	80074ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	3304      	adds	r3, #4
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fa02 	bl	80058bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	4b19      	ldr	r3, [pc, #100]	; (8007524 <xTaskRemoveFromEventList+0xb4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d903      	bls.n	80074cc <xTaskRemoveFromEventList+0x5c>
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	4a16      	ldr	r2, [pc, #88]	; (8007524 <xTaskRemoveFromEventList+0xb4>)
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4a13      	ldr	r2, [pc, #76]	; (8007528 <xTaskRemoveFromEventList+0xb8>)
 80074da:	441a      	add	r2, r3
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	3304      	adds	r3, #4
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f7fe f98d 	bl	8005802 <vListInsertEnd>
 80074e8:	e005      	b.n	80074f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	3318      	adds	r3, #24
 80074ee:	4619      	mov	r1, r3
 80074f0:	480e      	ldr	r0, [pc, #56]	; (800752c <xTaskRemoveFromEventList+0xbc>)
 80074f2:	f7fe f986 	bl	8005802 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fa:	4b0d      	ldr	r3, [pc, #52]	; (8007530 <xTaskRemoveFromEventList+0xc0>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	429a      	cmp	r2, r3
 8007502:	d905      	bls.n	8007510 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007504:	2301      	movs	r3, #1
 8007506:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007508:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <xTaskRemoveFromEventList+0xc4>)
 800750a:	2201      	movs	r2, #1
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	e001      	b.n	8007514 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007514:	697b      	ldr	r3, [r7, #20]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20000c48 	.word	0x20000c48
 8007524:	20000c28 	.word	0x20000c28
 8007528:	20000750 	.word	0x20000750
 800752c:	20000be0 	.word	0x20000be0
 8007530:	2000074c 	.word	0x2000074c
 8007534:	20000c34 	.word	0x20000c34

08007538 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007542:	4b29      	ldr	r3, [pc, #164]	; (80075e8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10a      	bne.n	8007560 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	613b      	str	r3, [r7, #16]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10a      	bne.n	800758c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	60fb      	str	r3, [r7, #12]
}
 8007588:	bf00      	nop
 800758a:	e7fe      	b.n	800758a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7fe f995 	bl	80058bc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	3304      	adds	r3, #4
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe f990 	bl	80058bc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a0:	4b12      	ldr	r3, [pc, #72]	; (80075ec <vTaskRemoveFromUnorderedEventList+0xb4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d903      	bls.n	80075b0 <vTaskRemoveFromUnorderedEventList+0x78>
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	4a0f      	ldr	r2, [pc, #60]	; (80075ec <vTaskRemoveFromUnorderedEventList+0xb4>)
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b4:	4613      	mov	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4a0c      	ldr	r2, [pc, #48]	; (80075f0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80075be:	441a      	add	r2, r3
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	f7fe f91b 	bl	8005802 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d902      	bls.n	80075e0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80075da:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80075dc:	2201      	movs	r2, #1
 80075de:	601a      	str	r2, [r3, #0]
	}
}
 80075e0:	bf00      	nop
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20000c48 	.word	0x20000c48
 80075ec:	20000c28 	.word	0x20000c28
 80075f0:	20000750 	.word	0x20000750
 80075f4:	2000074c 	.word	0x2000074c
 80075f8:	20000c34 	.word	0x20000c34

080075fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007604:	4b06      	ldr	r3, [pc, #24]	; (8007620 <vTaskInternalSetTimeOutState+0x24>)
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <vTaskInternalSetTimeOutState+0x28>)
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	605a      	str	r2, [r3, #4]
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	20000c38 	.word	0x20000c38
 8007624:	20000c24 	.word	0x20000c24

08007628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	613b      	str	r3, [r7, #16]
}
 800764a:	bf00      	nop
 800764c:	e7fe      	b.n	800764c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10a      	bne.n	800766a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	60fb      	str	r3, [r7, #12]
}
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800766a:	f000 ffb3 	bl	80085d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800766e:	4b1d      	ldr	r3, [pc, #116]	; (80076e4 <xTaskCheckForTimeOut+0xbc>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007686:	d102      	bne.n	800768e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007688:	2300      	movs	r3, #0
 800768a:	61fb      	str	r3, [r7, #28]
 800768c:	e023      	b.n	80076d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <xTaskCheckForTimeOut+0xc0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d007      	beq.n	80076aa <xTaskCheckForTimeOut+0x82>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d302      	bcc.n	80076aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076a4:	2301      	movs	r3, #1
 80076a6:	61fb      	str	r3, [r7, #28]
 80076a8:	e015      	b.n	80076d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d20b      	bcs.n	80076cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	1ad2      	subs	r2, r2, r3
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7ff ff9b 	bl	80075fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076c6:	2300      	movs	r3, #0
 80076c8:	61fb      	str	r3, [r7, #28]
 80076ca:	e004      	b.n	80076d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2200      	movs	r2, #0
 80076d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076d2:	2301      	movs	r3, #1
 80076d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076d6:	f000 ffad 	bl	8008634 <vPortExitCritical>

	return xReturn;
 80076da:	69fb      	ldr	r3, [r7, #28]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3720      	adds	r7, #32
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	20000c24 	.word	0x20000c24
 80076e8:	20000c38 	.word	0x20000c38

080076ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076f0:	4b03      	ldr	r3, [pc, #12]	; (8007700 <vTaskMissedYield+0x14>)
 80076f2:	2201      	movs	r2, #1
 80076f4:	601a      	str	r2, [r3, #0]
}
 80076f6:	bf00      	nop
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	20000c34 	.word	0x20000c34

08007704 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800770c:	f000 f852 	bl	80077b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007710:	4b06      	ldr	r3, [pc, #24]	; (800772c <prvIdleTask+0x28>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d9f9      	bls.n	800770c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007718:	4b05      	ldr	r3, [pc, #20]	; (8007730 <prvIdleTask+0x2c>)
 800771a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007728:	e7f0      	b.n	800770c <prvIdleTask+0x8>
 800772a:	bf00      	nop
 800772c:	20000750 	.word	0x20000750
 8007730:	e000ed04 	.word	0xe000ed04

08007734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800773a:	2300      	movs	r3, #0
 800773c:	607b      	str	r3, [r7, #4]
 800773e:	e00c      	b.n	800775a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4a12      	ldr	r2, [pc, #72]	; (8007794 <prvInitialiseTaskLists+0x60>)
 800774c:	4413      	add	r3, r2
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe f82a 	bl	80057a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3301      	adds	r3, #1
 8007758:	607b      	str	r3, [r7, #4]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b37      	cmp	r3, #55	; 0x37
 800775e:	d9ef      	bls.n	8007740 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007760:	480d      	ldr	r0, [pc, #52]	; (8007798 <prvInitialiseTaskLists+0x64>)
 8007762:	f7fe f821 	bl	80057a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007766:	480d      	ldr	r0, [pc, #52]	; (800779c <prvInitialiseTaskLists+0x68>)
 8007768:	f7fe f81e 	bl	80057a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800776c:	480c      	ldr	r0, [pc, #48]	; (80077a0 <prvInitialiseTaskLists+0x6c>)
 800776e:	f7fe f81b 	bl	80057a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007772:	480c      	ldr	r0, [pc, #48]	; (80077a4 <prvInitialiseTaskLists+0x70>)
 8007774:	f7fe f818 	bl	80057a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007778:	480b      	ldr	r0, [pc, #44]	; (80077a8 <prvInitialiseTaskLists+0x74>)
 800777a:	f7fe f815 	bl	80057a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800777e:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <prvInitialiseTaskLists+0x78>)
 8007780:	4a05      	ldr	r2, [pc, #20]	; (8007798 <prvInitialiseTaskLists+0x64>)
 8007782:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007784:	4b0a      	ldr	r3, [pc, #40]	; (80077b0 <prvInitialiseTaskLists+0x7c>)
 8007786:	4a05      	ldr	r2, [pc, #20]	; (800779c <prvInitialiseTaskLists+0x68>)
 8007788:	601a      	str	r2, [r3, #0]
}
 800778a:	bf00      	nop
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20000750 	.word	0x20000750
 8007798:	20000bb0 	.word	0x20000bb0
 800779c:	20000bc4 	.word	0x20000bc4
 80077a0:	20000be0 	.word	0x20000be0
 80077a4:	20000bf4 	.word	0x20000bf4
 80077a8:	20000c0c 	.word	0x20000c0c
 80077ac:	20000bd8 	.word	0x20000bd8
 80077b0:	20000bdc 	.word	0x20000bdc

080077b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077ba:	e019      	b.n	80077f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077bc:	f000 ff0a 	bl	80085d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c0:	4b10      	ldr	r3, [pc, #64]	; (8007804 <prvCheckTasksWaitingTermination+0x50>)
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3304      	adds	r3, #4
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fe f875 	bl	80058bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077d2:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <prvCheckTasksWaitingTermination+0x54>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	4a0b      	ldr	r2, [pc, #44]	; (8007808 <prvCheckTasksWaitingTermination+0x54>)
 80077da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077dc:	4b0b      	ldr	r3, [pc, #44]	; (800780c <prvCheckTasksWaitingTermination+0x58>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	4a0a      	ldr	r2, [pc, #40]	; (800780c <prvCheckTasksWaitingTermination+0x58>)
 80077e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077e6:	f000 ff25 	bl	8008634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f810 	bl	8007810 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077f0:	4b06      	ldr	r3, [pc, #24]	; (800780c <prvCheckTasksWaitingTermination+0x58>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1e1      	bne.n	80077bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077f8:	bf00      	nop
 80077fa:	bf00      	nop
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20000bf4 	.word	0x20000bf4
 8007808:	20000c20 	.word	0x20000c20
 800780c:	20000c08 	.word	0x20000c08

08007810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800781e:	2b00      	cmp	r3, #0
 8007820:	d108      	bne.n	8007834 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007826:	4618      	mov	r0, r3
 8007828:	f001 f8c2 	bl	80089b0 <vPortFree>
				vPortFree( pxTCB );
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 f8bf 	bl	80089b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007832:	e018      	b.n	8007866 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800783a:	2b01      	cmp	r3, #1
 800783c:	d103      	bne.n	8007846 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 f8b6 	bl	80089b0 <vPortFree>
	}
 8007844:	e00f      	b.n	8007866 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800784c:	2b02      	cmp	r3, #2
 800784e:	d00a      	beq.n	8007866 <prvDeleteTCB+0x56>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	60fb      	str	r3, [r7, #12]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <prvDeleteTCB+0x54>
	}
 8007866:	bf00      	nop
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007876:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <prvResetNextTaskUnblockTime+0x38>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d104      	bne.n	800788a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007880:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <prvResetNextTaskUnblockTime+0x3c>)
 8007882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007886:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007888:	e008      	b.n	800789c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800788a:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <prvResetNextTaskUnblockTime+0x38>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	4a04      	ldr	r2, [pc, #16]	; (80078ac <prvResetNextTaskUnblockTime+0x3c>)
 800789a:	6013      	str	r3, [r2, #0]
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	20000bd8 	.word	0x20000bd8
 80078ac:	20000c40 	.word	0x20000c40

080078b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078b6:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <xTaskGetSchedulerState+0x34>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d102      	bne.n	80078c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078be:	2301      	movs	r3, #1
 80078c0:	607b      	str	r3, [r7, #4]
 80078c2:	e008      	b.n	80078d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078c4:	4b08      	ldr	r3, [pc, #32]	; (80078e8 <xTaskGetSchedulerState+0x38>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d102      	bne.n	80078d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078cc:	2302      	movs	r3, #2
 80078ce:	607b      	str	r3, [r7, #4]
 80078d0:	e001      	b.n	80078d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078d2:	2300      	movs	r3, #0
 80078d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078d6:	687b      	ldr	r3, [r7, #4]
	}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	20000c2c 	.word	0x20000c2c
 80078e8:	20000c48 	.word	0x20000c48

080078ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80078f8:	2300      	movs	r3, #0
 80078fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d051      	beq.n	80079a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007906:	4b2a      	ldr	r3, [pc, #168]	; (80079b0 <xTaskPriorityInherit+0xc4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	429a      	cmp	r2, r3
 800790e:	d241      	bcs.n	8007994 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	2b00      	cmp	r3, #0
 8007916:	db06      	blt.n	8007926 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007918:	4b25      	ldr	r3, [pc, #148]	; (80079b0 <xTaskPriorityInherit+0xc4>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6959      	ldr	r1, [r3, #20]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4a1f      	ldr	r2, [pc, #124]	; (80079b4 <xTaskPriorityInherit+0xc8>)
 8007938:	4413      	add	r3, r2
 800793a:	4299      	cmp	r1, r3
 800793c:	d122      	bne.n	8007984 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	3304      	adds	r3, #4
 8007942:	4618      	mov	r0, r3
 8007944:	f7fd ffba 	bl	80058bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007948:	4b19      	ldr	r3, [pc, #100]	; (80079b0 <xTaskPriorityInherit+0xc4>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007956:	4b18      	ldr	r3, [pc, #96]	; (80079b8 <xTaskPriorityInherit+0xcc>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	d903      	bls.n	8007966 <xTaskPriorityInherit+0x7a>
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	4a15      	ldr	r2, [pc, #84]	; (80079b8 <xTaskPriorityInherit+0xcc>)
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796a:	4613      	mov	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4a10      	ldr	r2, [pc, #64]	; (80079b4 <xTaskPriorityInherit+0xc8>)
 8007974:	441a      	add	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	3304      	adds	r3, #4
 800797a:	4619      	mov	r1, r3
 800797c:	4610      	mov	r0, r2
 800797e:	f7fd ff40 	bl	8005802 <vListInsertEnd>
 8007982:	e004      	b.n	800798e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007984:	4b0a      	ldr	r3, [pc, #40]	; (80079b0 <xTaskPriorityInherit+0xc4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800798e:	2301      	movs	r3, #1
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	e008      	b.n	80079a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007998:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <xTaskPriorityInherit+0xc4>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	429a      	cmp	r2, r3
 80079a0:	d201      	bcs.n	80079a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079a2:	2301      	movs	r3, #1
 80079a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079a6:	68fb      	ldr	r3, [r7, #12]
	}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	2000074c 	.word	0x2000074c
 80079b4:	20000750 	.word	0x20000750
 80079b8:	20000c28 	.word	0x20000c28

080079bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d056      	beq.n	8007a80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079d2:	4b2e      	ldr	r3, [pc, #184]	; (8007a8c <xTaskPriorityDisinherit+0xd0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d00a      	beq.n	80079f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	60fb      	str	r3, [r7, #12]
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10a      	bne.n	8007a10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	60bb      	str	r3, [r7, #8]
}
 8007a0c:	bf00      	nop
 8007a0e:	e7fe      	b.n	8007a0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a14:	1e5a      	subs	r2, r3, #1
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d02c      	beq.n	8007a80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d128      	bne.n	8007a80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	3304      	adds	r3, #4
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fd ff42 	bl	80058bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a50:	4b0f      	ldr	r3, [pc, #60]	; (8007a90 <xTaskPriorityDisinherit+0xd4>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d903      	bls.n	8007a60 <xTaskPriorityDisinherit+0xa4>
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5c:	4a0c      	ldr	r2, [pc, #48]	; (8007a90 <xTaskPriorityDisinherit+0xd4>)
 8007a5e:	6013      	str	r3, [r2, #0]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a64:	4613      	mov	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4a09      	ldr	r2, [pc, #36]	; (8007a94 <xTaskPriorityDisinherit+0xd8>)
 8007a6e:	441a      	add	r2, r3
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	3304      	adds	r3, #4
 8007a74:	4619      	mov	r1, r3
 8007a76:	4610      	mov	r0, r2
 8007a78:	f7fd fec3 	bl	8005802 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a80:	697b      	ldr	r3, [r7, #20]
	}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3718      	adds	r7, #24
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	2000074c 	.word	0x2000074c
 8007a90:	20000c28 	.word	0x20000c28
 8007a94:	20000750 	.word	0x20000750

08007a98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b088      	sub	sp, #32
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d06a      	beq.n	8007b86 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10a      	bne.n	8007ace <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	60fb      	str	r3, [r7, #12]
}
 8007aca:	bf00      	nop
 8007acc:	e7fe      	b.n	8007acc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d902      	bls.n	8007ade <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	61fb      	str	r3, [r7, #28]
 8007adc:	e002      	b.n	8007ae4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae8:	69fa      	ldr	r2, [r7, #28]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d04b      	beq.n	8007b86 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d146      	bne.n	8007b86 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007af8:	4b25      	ldr	r3, [pc, #148]	; (8007b90 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d10a      	bne.n	8007b18 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	60bb      	str	r3, [r7, #8]
}
 8007b14:	bf00      	nop
 8007b16:	e7fe      	b.n	8007b16 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	db04      	blt.n	8007b36 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	6959      	ldr	r1, [r3, #20]
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4a13      	ldr	r2, [pc, #76]	; (8007b94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007b46:	4413      	add	r3, r2
 8007b48:	4299      	cmp	r1, r3
 8007b4a:	d11c      	bne.n	8007b86 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	3304      	adds	r3, #4
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fd feb3 	bl	80058bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5a:	4b0f      	ldr	r3, [pc, #60]	; (8007b98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d903      	bls.n	8007b6a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	4a0c      	ldr	r2, [pc, #48]	; (8007b98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6e:	4613      	mov	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4a07      	ldr	r2, [pc, #28]	; (8007b94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007b78:	441a      	add	r2, r3
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4610      	mov	r0, r2
 8007b82:	f7fd fe3e 	bl	8005802 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b86:	bf00      	nop
 8007b88:	3720      	adds	r7, #32
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	2000074c 	.word	0x2000074c
 8007b94:	20000750 	.word	0x20000750
 8007b98:	20000c28 	.word	0x20000c28

08007b9c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007ba2:	4b09      	ldr	r3, [pc, #36]	; (8007bc8 <uxTaskResetEventItemValue+0x2c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <uxTaskResetEventItemValue+0x2c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb0:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <uxTaskResetEventItemValue+0x2c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007bb8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007bba:	687b      	ldr	r3, [r7, #4]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	2000074c 	.word	0x2000074c

08007bcc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007bcc:	b480      	push	{r7}
 8007bce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007bd0:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d004      	beq.n	8007be2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007bd8:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bde:	3201      	adds	r2, #1
 8007be0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007be2:	4b03      	ldr	r3, [pc, #12]	; (8007bf0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007be4:	681b      	ldr	r3, [r3, #0]
	}
 8007be6:	4618      	mov	r0, r3
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	2000074c 	.word	0x2000074c

08007bf4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bfe:	4b21      	ldr	r3, [pc, #132]	; (8007c84 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c04:	4b20      	ldr	r3, [pc, #128]	; (8007c88 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3304      	adds	r3, #4
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fd fe56 	bl	80058bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c16:	d10a      	bne.n	8007c2e <prvAddCurrentTaskToDelayedList+0x3a>
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c1e:	4b1a      	ldr	r3, [pc, #104]	; (8007c88 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3304      	adds	r3, #4
 8007c24:	4619      	mov	r1, r3
 8007c26:	4819      	ldr	r0, [pc, #100]	; (8007c8c <prvAddCurrentTaskToDelayedList+0x98>)
 8007c28:	f7fd fdeb 	bl	8005802 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c2c:	e026      	b.n	8007c7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4413      	add	r3, r2
 8007c34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c36:	4b14      	ldr	r3, [pc, #80]	; (8007c88 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d209      	bcs.n	8007c5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c46:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f7fd fdf9 	bl	800584a <vListInsert>
}
 8007c58:	e010      	b.n	8007c7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c5a:	4b0e      	ldr	r3, [pc, #56]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	4b0a      	ldr	r3, [pc, #40]	; (8007c88 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3304      	adds	r3, #4
 8007c64:	4619      	mov	r1, r3
 8007c66:	4610      	mov	r0, r2
 8007c68:	f7fd fdef 	bl	800584a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	; (8007c98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d202      	bcs.n	8007c7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c76:	4a08      	ldr	r2, [pc, #32]	; (8007c98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	6013      	str	r3, [r2, #0]
}
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	20000c24 	.word	0x20000c24
 8007c88:	2000074c 	.word	0x2000074c
 8007c8c:	20000c0c 	.word	0x20000c0c
 8007c90:	20000bdc 	.word	0x20000bdc
 8007c94:	20000bd8 	.word	0x20000bd8
 8007c98:	20000c40 	.word	0x20000c40

08007c9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b08a      	sub	sp, #40	; 0x28
 8007ca0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ca6:	f000 fb07 	bl	80082b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007caa:	4b1c      	ldr	r3, [pc, #112]	; (8007d1c <xTimerCreateTimerTask+0x80>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d021      	beq.n	8007cf6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007cba:	1d3a      	adds	r2, r7, #4
 8007cbc:	f107 0108 	add.w	r1, r7, #8
 8007cc0:	f107 030c 	add.w	r3, r7, #12
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fd fae9 	bl	800529c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	9202      	str	r2, [sp, #8]
 8007cd2:	9301      	str	r3, [sp, #4]
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	460a      	mov	r2, r1
 8007cdc:	4910      	ldr	r1, [pc, #64]	; (8007d20 <xTimerCreateTimerTask+0x84>)
 8007cde:	4811      	ldr	r0, [pc, #68]	; (8007d24 <xTimerCreateTimerTask+0x88>)
 8007ce0:	f7fe fe24 	bl	800692c <xTaskCreateStatic>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	4a10      	ldr	r2, [pc, #64]	; (8007d28 <xTimerCreateTimerTask+0x8c>)
 8007ce8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007cea:	4b0f      	ldr	r3, [pc, #60]	; (8007d28 <xTimerCreateTimerTask+0x8c>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	613b      	str	r3, [r7, #16]
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d12:	697b      	ldr	r3, [r7, #20]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20000c7c 	.word	0x20000c7c
 8007d20:	08008ff0 	.word	0x08008ff0
 8007d24:	08007e61 	.word	0x08007e61
 8007d28:	20000c80 	.word	0x20000c80

08007d2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	; 0x28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	623b      	str	r3, [r7, #32]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d5a:	4b1a      	ldr	r3, [pc, #104]	; (8007dc4 <xTimerGenericCommand+0x98>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d02a      	beq.n	8007db8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b05      	cmp	r3, #5
 8007d72:	dc18      	bgt.n	8007da6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d74:	f7ff fd9c 	bl	80078b0 <xTaskGetSchedulerState>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d109      	bne.n	8007d92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d7e:	4b11      	ldr	r3, [pc, #68]	; (8007dc4 <xTimerGenericCommand+0x98>)
 8007d80:	6818      	ldr	r0, [r3, #0]
 8007d82:	f107 0110 	add.w	r1, r7, #16
 8007d86:	2300      	movs	r3, #0
 8007d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d8a:	f7fd ff69 	bl	8005c60 <xQueueGenericSend>
 8007d8e:	6278      	str	r0, [r7, #36]	; 0x24
 8007d90:	e012      	b.n	8007db8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d92:	4b0c      	ldr	r3, [pc, #48]	; (8007dc4 <xTimerGenericCommand+0x98>)
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	f107 0110 	add.w	r1, r7, #16
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f7fd ff5f 	bl	8005c60 <xQueueGenericSend>
 8007da2:	6278      	str	r0, [r7, #36]	; 0x24
 8007da4:	e008      	b.n	8007db8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007da6:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <xTimerGenericCommand+0x98>)
 8007da8:	6818      	ldr	r0, [r3, #0]
 8007daa:	f107 0110 	add.w	r1, r7, #16
 8007dae:	2300      	movs	r3, #0
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	f7fe f853 	bl	8005e5c <xQueueGenericSendFromISR>
 8007db6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3728      	adds	r7, #40	; 0x28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20000c7c 	.word	0x20000c7c

08007dc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b088      	sub	sp, #32
 8007dcc:	af02      	add	r7, sp, #8
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dd2:	4b22      	ldr	r3, [pc, #136]	; (8007e5c <prvProcessExpiredTimer+0x94>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fd fd6b 	bl	80058bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d022      	beq.n	8007e3a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	699a      	ldr	r2, [r3, #24]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	18d1      	adds	r1, r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	6978      	ldr	r0, [r7, #20]
 8007e02:	f000 f8d1 	bl	8007fa8 <prvInsertTimerInActiveList>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01f      	beq.n	8007e4c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	2300      	movs	r3, #0
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	2100      	movs	r1, #0
 8007e16:	6978      	ldr	r0, [r7, #20]
 8007e18:	f7ff ff88 	bl	8007d2c <xTimerGenericCommand>
 8007e1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d113      	bne.n	8007e4c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	60fb      	str	r3, [r7, #12]
}
 8007e36:	bf00      	nop
 8007e38:	e7fe      	b.n	8007e38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e40:	f023 0301 	bic.w	r3, r3, #1
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	6978      	ldr	r0, [r7, #20]
 8007e52:	4798      	blx	r3
}
 8007e54:	bf00      	nop
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	20000c74 	.word	0x20000c74

08007e60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e68:	f107 0308 	add.w	r3, r7, #8
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 f857 	bl	8007f20 <prvGetNextExpireTime>
 8007e72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	4619      	mov	r1, r3
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 f803 	bl	8007e84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e7e:	f000 f8d5 	bl	800802c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e82:	e7f1      	b.n	8007e68 <prvTimerTask+0x8>

08007e84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e8e:	f7ff f88f 	bl	8006fb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e92:	f107 0308 	add.w	r3, r7, #8
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 f866 	bl	8007f68 <prvSampleTimeNow>
 8007e9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d130      	bne.n	8007f06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10a      	bne.n	8007ec0 <prvProcessTimerOrBlockTask+0x3c>
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d806      	bhi.n	8007ec0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007eb2:	f7ff f88b 	bl	8006fcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007eb6:	68f9      	ldr	r1, [r7, #12]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7ff ff85 	bl	8007dc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ebe:	e024      	b.n	8007f0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d008      	beq.n	8007ed8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ec6:	4b13      	ldr	r3, [pc, #76]	; (8007f14 <prvProcessTimerOrBlockTask+0x90>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <prvProcessTimerOrBlockTask+0x50>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e000      	b.n	8007ed6 <prvProcessTimerOrBlockTask+0x52>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ed8:	4b0f      	ldr	r3, [pc, #60]	; (8007f18 <prvProcessTimerOrBlockTask+0x94>)
 8007eda:	6818      	ldr	r0, [r3, #0]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	f7fe fced 	bl	80068c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007eea:	f7ff f86f 	bl	8006fcc <xTaskResumeAll>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ef4:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <prvProcessTimerOrBlockTask+0x98>)
 8007ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	f3bf 8f6f 	isb	sy
}
 8007f04:	e001      	b.n	8007f0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f06:	f7ff f861 	bl	8006fcc <xTaskResumeAll>
}
 8007f0a:	bf00      	nop
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	20000c78 	.word	0x20000c78
 8007f18:	20000c7c 	.word	0x20000c7c
 8007f1c:	e000ed04 	.word	0xe000ed04

08007f20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f28:	4b0e      	ldr	r3, [pc, #56]	; (8007f64 <prvGetNextExpireTime+0x44>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <prvGetNextExpireTime+0x16>
 8007f32:	2201      	movs	r2, #1
 8007f34:	e000      	b.n	8007f38 <prvGetNextExpireTime+0x18>
 8007f36:	2200      	movs	r2, #0
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d105      	bne.n	8007f50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f44:	4b07      	ldr	r3, [pc, #28]	; (8007f64 <prvGetNextExpireTime+0x44>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	e001      	b.n	8007f54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f54:	68fb      	ldr	r3, [r7, #12]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000c74 	.word	0x20000c74

08007f68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f70:	f7ff f8ca 	bl	8007108 <xTaskGetTickCount>
 8007f74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f76:	4b0b      	ldr	r3, [pc, #44]	; (8007fa4 <prvSampleTimeNow+0x3c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d205      	bcs.n	8007f8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f80:	f000 f936 	bl	80081f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	e002      	b.n	8007f92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f92:	4a04      	ldr	r2, [pc, #16]	; (8007fa4 <prvSampleTimeNow+0x3c>)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f98:	68fb      	ldr	r3, [r7, #12]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000c84 	.word	0x20000c84

08007fa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d812      	bhi.n	8007ff4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	1ad2      	subs	r2, r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d302      	bcc.n	8007fe2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	617b      	str	r3, [r7, #20]
 8007fe0:	e01b      	b.n	800801a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007fe2:	4b10      	ldr	r3, [pc, #64]	; (8008024 <prvInsertTimerInActiveList+0x7c>)
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3304      	adds	r3, #4
 8007fea:	4619      	mov	r1, r3
 8007fec:	4610      	mov	r0, r2
 8007fee:	f7fd fc2c 	bl	800584a <vListInsert>
 8007ff2:	e012      	b.n	800801a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d206      	bcs.n	800800a <prvInsertTimerInActiveList+0x62>
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d302      	bcc.n	800800a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008004:	2301      	movs	r3, #1
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	e007      	b.n	800801a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800800a:	4b07      	ldr	r3, [pc, #28]	; (8008028 <prvInsertTimerInActiveList+0x80>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3304      	adds	r3, #4
 8008012:	4619      	mov	r1, r3
 8008014:	4610      	mov	r0, r2
 8008016:	f7fd fc18 	bl	800584a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800801a:	697b      	ldr	r3, [r7, #20]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20000c78 	.word	0x20000c78
 8008028:	20000c74 	.word	0x20000c74

0800802c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b08e      	sub	sp, #56	; 0x38
 8008030:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008032:	e0ca      	b.n	80081ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	da18      	bge.n	800806c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800803a:	1d3b      	adds	r3, r7, #4
 800803c:	3304      	adds	r3, #4
 800803e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	61fb      	str	r3, [r7, #28]
}
 8008058:	bf00      	nop
 800805a:	e7fe      	b.n	800805a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008062:	6850      	ldr	r0, [r2, #4]
 8008064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008066:	6892      	ldr	r2, [r2, #8]
 8008068:	4611      	mov	r1, r2
 800806a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	f2c0 80aa 	blt.w	80081c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d004      	beq.n	800808a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	3304      	adds	r3, #4
 8008084:	4618      	mov	r0, r3
 8008086:	f7fd fc19 	bl	80058bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800808a:	463b      	mov	r3, r7
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff ff6b 	bl	8007f68 <prvSampleTimeNow>
 8008092:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b09      	cmp	r3, #9
 8008098:	f200 8097 	bhi.w	80081ca <prvProcessReceivedCommands+0x19e>
 800809c:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <prvProcessReceivedCommands+0x78>)
 800809e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a2:	bf00      	nop
 80080a4:	080080cd 	.word	0x080080cd
 80080a8:	080080cd 	.word	0x080080cd
 80080ac:	080080cd 	.word	0x080080cd
 80080b0:	08008141 	.word	0x08008141
 80080b4:	08008155 	.word	0x08008155
 80080b8:	0800819f 	.word	0x0800819f
 80080bc:	080080cd 	.word	0x080080cd
 80080c0:	080080cd 	.word	0x080080cd
 80080c4:	08008141 	.word	0x08008141
 80080c8:	08008155 	.word	0x08008155
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080d2:	f043 0301 	orr.w	r3, r3, #1
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	18d1      	adds	r1, r2, r3
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ec:	f7ff ff5c 	bl	8007fa8 <prvInsertTimerInActiveList>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d069      	beq.n	80081ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008104:	f003 0304 	and.w	r3, r3, #4
 8008108:	2b00      	cmp	r3, #0
 800810a:	d05e      	beq.n	80081ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	441a      	add	r2, r3
 8008114:	2300      	movs	r3, #0
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	2300      	movs	r3, #0
 800811a:	2100      	movs	r1, #0
 800811c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800811e:	f7ff fe05 	bl	8007d2c <xTimerGenericCommand>
 8008122:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d14f      	bne.n	80081ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	61bb      	str	r3, [r7, #24]
}
 800813c:	bf00      	nop
 800813e:	e7fe      	b.n	800813e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008142:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008146:	f023 0301 	bic.w	r3, r3, #1
 800814a:	b2da      	uxtb	r2, r3
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008152:	e03a      	b.n	80081ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800815a:	f043 0301 	orr.w	r3, r3, #1
 800815e:	b2da      	uxtb	r2, r3
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10a      	bne.n	800818a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	617b      	str	r3, [r7, #20]
}
 8008186:	bf00      	nop
 8008188:	e7fe      	b.n	8008188 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	699a      	ldr	r2, [r3, #24]
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	18d1      	adds	r1, r2, r3
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008198:	f7ff ff06 	bl	8007fa8 <prvInsertTimerInActiveList>
					break;
 800819c:	e015      	b.n	80081ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800819e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d103      	bne.n	80081b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80081ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ae:	f000 fbff 	bl	80089b0 <vPortFree>
 80081b2:	e00a      	b.n	80081ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081ba:	f023 0301 	bic.w	r3, r3, #1
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081c6:	e000      	b.n	80081ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80081c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081ca:	4b08      	ldr	r3, [pc, #32]	; (80081ec <prvProcessReceivedCommands+0x1c0>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	1d39      	adds	r1, r7, #4
 80081d0:	2200      	movs	r2, #0
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fd ff6a 	bl	80060ac <xQueueReceive>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f47f af2a 	bne.w	8008034 <prvProcessReceivedCommands+0x8>
	}
}
 80081e0:	bf00      	nop
 80081e2:	bf00      	nop
 80081e4:	3730      	adds	r7, #48	; 0x30
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000c7c 	.word	0x20000c7c

080081f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081f6:	e048      	b.n	800828a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081f8:	4b2d      	ldr	r3, [pc, #180]	; (80082b0 <prvSwitchTimerLists+0xc0>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008202:	4b2b      	ldr	r3, [pc, #172]	; (80082b0 <prvSwitchTimerLists+0xc0>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3304      	adds	r3, #4
 8008210:	4618      	mov	r0, r3
 8008212:	f7fd fb53 	bl	80058bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008224:	f003 0304 	and.w	r3, r3, #4
 8008228:	2b00      	cmp	r3, #0
 800822a:	d02e      	beq.n	800828a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	4413      	add	r3, r2
 8008234:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	429a      	cmp	r2, r3
 800823c:	d90e      	bls.n	800825c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800824a:	4b19      	ldr	r3, [pc, #100]	; (80082b0 <prvSwitchTimerLists+0xc0>)
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3304      	adds	r3, #4
 8008252:	4619      	mov	r1, r3
 8008254:	4610      	mov	r0, r2
 8008256:	f7fd faf8 	bl	800584a <vListInsert>
 800825a:	e016      	b.n	800828a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800825c:	2300      	movs	r3, #0
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	2300      	movs	r3, #0
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	2100      	movs	r1, #0
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f7ff fd60 	bl	8007d2c <xTimerGenericCommand>
 800826c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10a      	bne.n	800828a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	603b      	str	r3, [r7, #0]
}
 8008286:	bf00      	nop
 8008288:	e7fe      	b.n	8008288 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800828a:	4b09      	ldr	r3, [pc, #36]	; (80082b0 <prvSwitchTimerLists+0xc0>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1b1      	bne.n	80081f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008294:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <prvSwitchTimerLists+0xc0>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800829a:	4b06      	ldr	r3, [pc, #24]	; (80082b4 <prvSwitchTimerLists+0xc4>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a04      	ldr	r2, [pc, #16]	; (80082b0 <prvSwitchTimerLists+0xc0>)
 80082a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80082a2:	4a04      	ldr	r2, [pc, #16]	; (80082b4 <prvSwitchTimerLists+0xc4>)
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	6013      	str	r3, [r2, #0]
}
 80082a8:	bf00      	nop
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20000c74 	.word	0x20000c74
 80082b4:	20000c78 	.word	0x20000c78

080082b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082be:	f000 f989 	bl	80085d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082c2:	4b15      	ldr	r3, [pc, #84]	; (8008318 <prvCheckForValidListAndQueue+0x60>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d120      	bne.n	800830c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80082ca:	4814      	ldr	r0, [pc, #80]	; (800831c <prvCheckForValidListAndQueue+0x64>)
 80082cc:	f7fd fa6c 	bl	80057a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80082d0:	4813      	ldr	r0, [pc, #76]	; (8008320 <prvCheckForValidListAndQueue+0x68>)
 80082d2:	f7fd fa69 	bl	80057a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082d6:	4b13      	ldr	r3, [pc, #76]	; (8008324 <prvCheckForValidListAndQueue+0x6c>)
 80082d8:	4a10      	ldr	r2, [pc, #64]	; (800831c <prvCheckForValidListAndQueue+0x64>)
 80082da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80082dc:	4b12      	ldr	r3, [pc, #72]	; (8008328 <prvCheckForValidListAndQueue+0x70>)
 80082de:	4a10      	ldr	r2, [pc, #64]	; (8008320 <prvCheckForValidListAndQueue+0x68>)
 80082e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80082e2:	2300      	movs	r3, #0
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	4b11      	ldr	r3, [pc, #68]	; (800832c <prvCheckForValidListAndQueue+0x74>)
 80082e8:	4a11      	ldr	r2, [pc, #68]	; (8008330 <prvCheckForValidListAndQueue+0x78>)
 80082ea:	2110      	movs	r1, #16
 80082ec:	200a      	movs	r0, #10
 80082ee:	f7fd fb77 	bl	80059e0 <xQueueGenericCreateStatic>
 80082f2:	4603      	mov	r3, r0
 80082f4:	4a08      	ldr	r2, [pc, #32]	; (8008318 <prvCheckForValidListAndQueue+0x60>)
 80082f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80082f8:	4b07      	ldr	r3, [pc, #28]	; (8008318 <prvCheckForValidListAndQueue+0x60>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008300:	4b05      	ldr	r3, [pc, #20]	; (8008318 <prvCheckForValidListAndQueue+0x60>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	490b      	ldr	r1, [pc, #44]	; (8008334 <prvCheckForValidListAndQueue+0x7c>)
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fa88 	bl	800681c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800830c:	f000 f992 	bl	8008634 <vPortExitCritical>
}
 8008310:	bf00      	nop
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20000c7c 	.word	0x20000c7c
 800831c:	20000c4c 	.word	0x20000c4c
 8008320:	20000c60 	.word	0x20000c60
 8008324:	20000c74 	.word	0x20000c74
 8008328:	20000c78 	.word	0x20000c78
 800832c:	20000d28 	.word	0x20000d28
 8008330:	20000c88 	.word	0x20000c88
 8008334:	08008ff8 	.word	0x08008ff8

08008338 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08a      	sub	sp, #40	; 0x28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008346:	f06f 0301 	mvn.w	r3, #1
 800834a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008358:	4b06      	ldr	r3, [pc, #24]	; (8008374 <xTimerPendFunctionCallFromISR+0x3c>)
 800835a:	6818      	ldr	r0, [r3, #0]
 800835c:	f107 0114 	add.w	r1, r7, #20
 8008360:	2300      	movs	r3, #0
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	f7fd fd7a 	bl	8005e5c <xQueueGenericSendFromISR>
 8008368:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800836c:	4618      	mov	r0, r3
 800836e:	3728      	adds	r7, #40	; 0x28
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	20000c7c 	.word	0x20000c7c

08008378 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3b04      	subs	r3, #4
 8008388:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	3b04      	subs	r3, #4
 8008396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f023 0201 	bic.w	r2, r3, #1
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3b04      	subs	r3, #4
 80083a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083a8:	4a0c      	ldr	r2, [pc, #48]	; (80083dc <pxPortInitialiseStack+0x64>)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3b14      	subs	r3, #20
 80083b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	3b04      	subs	r3, #4
 80083be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f06f 0202 	mvn.w	r2, #2
 80083c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	3b20      	subs	r3, #32
 80083cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083ce:	68fb      	ldr	r3, [r7, #12]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	080083e1 	.word	0x080083e1

080083e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083ea:	4b12      	ldr	r3, [pc, #72]	; (8008434 <prvTaskExitError+0x54>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083f2:	d00a      	beq.n	800840a <prvTaskExitError+0x2a>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	60fb      	str	r3, [r7, #12]
}
 8008406:	bf00      	nop
 8008408:	e7fe      	b.n	8008408 <prvTaskExitError+0x28>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	60bb      	str	r3, [r7, #8]
}
 800841c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800841e:	bf00      	nop
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d0fc      	beq.n	8008420 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008426:	bf00      	nop
 8008428:	bf00      	nop
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	2000000c 	.word	0x2000000c
	...

08008440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <pxCurrentTCBConst2>)
 8008442:	6819      	ldr	r1, [r3, #0]
 8008444:	6808      	ldr	r0, [r1, #0]
 8008446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844a:	f380 8809 	msr	PSP, r0
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f04f 0000 	mov.w	r0, #0
 8008456:	f380 8811 	msr	BASEPRI, r0
 800845a:	4770      	bx	lr
 800845c:	f3af 8000 	nop.w

08008460 <pxCurrentTCBConst2>:
 8008460:	2000074c 	.word	0x2000074c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008468:	4808      	ldr	r0, [pc, #32]	; (800848c <prvPortStartFirstTask+0x24>)
 800846a:	6800      	ldr	r0, [r0, #0]
 800846c:	6800      	ldr	r0, [r0, #0]
 800846e:	f380 8808 	msr	MSP, r0
 8008472:	f04f 0000 	mov.w	r0, #0
 8008476:	f380 8814 	msr	CONTROL, r0
 800847a:	b662      	cpsie	i
 800847c:	b661      	cpsie	f
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	df00      	svc	0
 8008488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800848a:	bf00      	nop
 800848c:	e000ed08 	.word	0xe000ed08

08008490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008496:	4b46      	ldr	r3, [pc, #280]	; (80085b0 <xPortStartScheduler+0x120>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a46      	ldr	r2, [pc, #280]	; (80085b4 <xPortStartScheduler+0x124>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d10a      	bne.n	80084b6 <xPortStartScheduler+0x26>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	613b      	str	r3, [r7, #16]
}
 80084b2:	bf00      	nop
 80084b4:	e7fe      	b.n	80084b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084b6:	4b3e      	ldr	r3, [pc, #248]	; (80085b0 <xPortStartScheduler+0x120>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a3f      	ldr	r2, [pc, #252]	; (80085b8 <xPortStartScheduler+0x128>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d10a      	bne.n	80084d6 <xPortStartScheduler+0x46>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	60fb      	str	r3, [r7, #12]
}
 80084d2:	bf00      	nop
 80084d4:	e7fe      	b.n	80084d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084d6:	4b39      	ldr	r3, [pc, #228]	; (80085bc <xPortStartScheduler+0x12c>)
 80084d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	22ff      	movs	r2, #255	; 0xff
 80084e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	4b31      	ldr	r3, [pc, #196]	; (80085c0 <xPortStartScheduler+0x130>)
 80084fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084fe:	4b31      	ldr	r3, [pc, #196]	; (80085c4 <xPortStartScheduler+0x134>)
 8008500:	2207      	movs	r2, #7
 8008502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008504:	e009      	b.n	800851a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008506:	4b2f      	ldr	r3, [pc, #188]	; (80085c4 <xPortStartScheduler+0x134>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3b01      	subs	r3, #1
 800850c:	4a2d      	ldr	r2, [pc, #180]	; (80085c4 <xPortStartScheduler+0x134>)
 800850e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	b2db      	uxtb	r3, r3
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	b2db      	uxtb	r3, r3
 8008518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	b2db      	uxtb	r3, r3
 800851e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008522:	2b80      	cmp	r3, #128	; 0x80
 8008524:	d0ef      	beq.n	8008506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008526:	4b27      	ldr	r3, [pc, #156]	; (80085c4 <xPortStartScheduler+0x134>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f1c3 0307 	rsb	r3, r3, #7
 800852e:	2b04      	cmp	r3, #4
 8008530:	d00a      	beq.n	8008548 <xPortStartScheduler+0xb8>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	60bb      	str	r3, [r7, #8]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008548:	4b1e      	ldr	r3, [pc, #120]	; (80085c4 <xPortStartScheduler+0x134>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	021b      	lsls	r3, r3, #8
 800854e:	4a1d      	ldr	r2, [pc, #116]	; (80085c4 <xPortStartScheduler+0x134>)
 8008550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008552:	4b1c      	ldr	r3, [pc, #112]	; (80085c4 <xPortStartScheduler+0x134>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800855a:	4a1a      	ldr	r2, [pc, #104]	; (80085c4 <xPortStartScheduler+0x134>)
 800855c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	b2da      	uxtb	r2, r3
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008566:	4b18      	ldr	r3, [pc, #96]	; (80085c8 <xPortStartScheduler+0x138>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a17      	ldr	r2, [pc, #92]	; (80085c8 <xPortStartScheduler+0x138>)
 800856c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008572:	4b15      	ldr	r3, [pc, #84]	; (80085c8 <xPortStartScheduler+0x138>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a14      	ldr	r2, [pc, #80]	; (80085c8 <xPortStartScheduler+0x138>)
 8008578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800857c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800857e:	f000 f8dd 	bl	800873c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008582:	4b12      	ldr	r3, [pc, #72]	; (80085cc <xPortStartScheduler+0x13c>)
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008588:	f000 f8fc 	bl	8008784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800858c:	4b10      	ldr	r3, [pc, #64]	; (80085d0 <xPortStartScheduler+0x140>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a0f      	ldr	r2, [pc, #60]	; (80085d0 <xPortStartScheduler+0x140>)
 8008592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008598:	f7ff ff66 	bl	8008468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800859c:	f7fe fe7e 	bl	800729c <vTaskSwitchContext>
	prvTaskExitError();
 80085a0:	f7ff ff1e 	bl	80083e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	e000ed00 	.word	0xe000ed00
 80085b4:	410fc271 	.word	0x410fc271
 80085b8:	410fc270 	.word	0x410fc270
 80085bc:	e000e400 	.word	0xe000e400
 80085c0:	20000d78 	.word	0x20000d78
 80085c4:	20000d7c 	.word	0x20000d7c
 80085c8:	e000ed20 	.word	0xe000ed20
 80085cc:	2000000c 	.word	0x2000000c
 80085d0:	e000ef34 	.word	0xe000ef34

080085d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	607b      	str	r3, [r7, #4]
}
 80085ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085ee:	4b0f      	ldr	r3, [pc, #60]	; (800862c <vPortEnterCritical+0x58>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	4a0d      	ldr	r2, [pc, #52]	; (800862c <vPortEnterCritical+0x58>)
 80085f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085f8:	4b0c      	ldr	r3, [pc, #48]	; (800862c <vPortEnterCritical+0x58>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d10f      	bne.n	8008620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008600:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <vPortEnterCritical+0x5c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <vPortEnterCritical+0x4c>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	603b      	str	r3, [r7, #0]
}
 800861c:	bf00      	nop
 800861e:	e7fe      	b.n	800861e <vPortEnterCritical+0x4a>
	}
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	2000000c 	.word	0x2000000c
 8008630:	e000ed04 	.word	0xe000ed04

08008634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800863a:	4b12      	ldr	r3, [pc, #72]	; (8008684 <vPortExitCritical+0x50>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <vPortExitCritical+0x24>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	607b      	str	r3, [r7, #4]
}
 8008654:	bf00      	nop
 8008656:	e7fe      	b.n	8008656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008658:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <vPortExitCritical+0x50>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3b01      	subs	r3, #1
 800865e:	4a09      	ldr	r2, [pc, #36]	; (8008684 <vPortExitCritical+0x50>)
 8008660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008662:	4b08      	ldr	r3, [pc, #32]	; (8008684 <vPortExitCritical+0x50>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d105      	bne.n	8008676 <vPortExitCritical+0x42>
 800866a:	2300      	movs	r3, #0
 800866c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	f383 8811 	msr	BASEPRI, r3
}
 8008674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	2000000c 	.word	0x2000000c
	...

08008690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008690:	f3ef 8009 	mrs	r0, PSP
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	4b15      	ldr	r3, [pc, #84]	; (80086f0 <pxCurrentTCBConst>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	f01e 0f10 	tst.w	lr, #16
 80086a0:	bf08      	it	eq
 80086a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086aa:	6010      	str	r0, [r2, #0]
 80086ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80086b4:	f380 8811 	msr	BASEPRI, r0
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f7fe fdec 	bl	800729c <vTaskSwitchContext>
 80086c4:	f04f 0000 	mov.w	r0, #0
 80086c8:	f380 8811 	msr	BASEPRI, r0
 80086cc:	bc09      	pop	{r0, r3}
 80086ce:	6819      	ldr	r1, [r3, #0]
 80086d0:	6808      	ldr	r0, [r1, #0]
 80086d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d6:	f01e 0f10 	tst.w	lr, #16
 80086da:	bf08      	it	eq
 80086dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086e0:	f380 8809 	msr	PSP, r0
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	f3af 8000 	nop.w

080086f0 <pxCurrentTCBConst>:
 80086f0:	2000074c 	.word	0x2000074c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop

080086f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	607b      	str	r3, [r7, #4]
}
 8008710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008712:	f7fe fd09 	bl	8007128 <xTaskIncrementTick>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800871c:	4b06      	ldr	r3, [pc, #24]	; (8008738 <xPortSysTickHandler+0x40>)
 800871e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	2300      	movs	r3, #0
 8008726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f383 8811 	msr	BASEPRI, r3
}
 800872e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	e000ed04 	.word	0xe000ed04

0800873c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008740:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <vPortSetupTimerInterrupt+0x34>)
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008746:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <vPortSetupTimerInterrupt+0x38>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <vPortSetupTimerInterrupt+0x3c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a0a      	ldr	r2, [pc, #40]	; (800877c <vPortSetupTimerInterrupt+0x40>)
 8008752:	fba2 2303 	umull	r2, r3, r2, r3
 8008756:	099b      	lsrs	r3, r3, #6
 8008758:	4a09      	ldr	r2, [pc, #36]	; (8008780 <vPortSetupTimerInterrupt+0x44>)
 800875a:	3b01      	subs	r3, #1
 800875c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800875e:	4b04      	ldr	r3, [pc, #16]	; (8008770 <vPortSetupTimerInterrupt+0x34>)
 8008760:	2207      	movs	r2, #7
 8008762:	601a      	str	r2, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	e000e010 	.word	0xe000e010
 8008774:	e000e018 	.word	0xe000e018
 8008778:	20000000 	.word	0x20000000
 800877c:	10624dd3 	.word	0x10624dd3
 8008780:	e000e014 	.word	0xe000e014

08008784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008794 <vPortEnableVFP+0x10>
 8008788:	6801      	ldr	r1, [r0, #0]
 800878a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800878e:	6001      	str	r1, [r0, #0]
 8008790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008792:	bf00      	nop
 8008794:	e000ed88 	.word	0xe000ed88

08008798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800879e:	f3ef 8305 	mrs	r3, IPSR
 80087a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b0f      	cmp	r3, #15
 80087a8:	d914      	bls.n	80087d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087aa:	4a17      	ldr	r2, [pc, #92]	; (8008808 <vPortValidateInterruptPriority+0x70>)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4413      	add	r3, r2
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087b4:	4b15      	ldr	r3, [pc, #84]	; (800880c <vPortValidateInterruptPriority+0x74>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	7afa      	ldrb	r2, [r7, #11]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d20a      	bcs.n	80087d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	607b      	str	r3, [r7, #4]
}
 80087d0:	bf00      	nop
 80087d2:	e7fe      	b.n	80087d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087d4:	4b0e      	ldr	r3, [pc, #56]	; (8008810 <vPortValidateInterruptPriority+0x78>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80087dc:	4b0d      	ldr	r3, [pc, #52]	; (8008814 <vPortValidateInterruptPriority+0x7c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d90a      	bls.n	80087fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	603b      	str	r3, [r7, #0]
}
 80087f6:	bf00      	nop
 80087f8:	e7fe      	b.n	80087f8 <vPortValidateInterruptPriority+0x60>
	}
 80087fa:	bf00      	nop
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	e000e3f0 	.word	0xe000e3f0
 800880c:	20000d78 	.word	0x20000d78
 8008810:	e000ed0c 	.word	0xe000ed0c
 8008814:	20000d7c 	.word	0x20000d7c

08008818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08a      	sub	sp, #40	; 0x28
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008820:	2300      	movs	r3, #0
 8008822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008824:	f7fe fbc4 	bl	8006fb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008828:	4b5b      	ldr	r3, [pc, #364]	; (8008998 <pvPortMalloc+0x180>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008830:	f000 f920 	bl	8008a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008834:	4b59      	ldr	r3, [pc, #356]	; (800899c <pvPortMalloc+0x184>)
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4013      	ands	r3, r2
 800883c:	2b00      	cmp	r3, #0
 800883e:	f040 8093 	bne.w	8008968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d01d      	beq.n	8008884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008848:	2208      	movs	r2, #8
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4413      	add	r3, r2
 800884e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f003 0307 	and.w	r3, r3, #7
 8008856:	2b00      	cmp	r3, #0
 8008858:	d014      	beq.n	8008884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f023 0307 	bic.w	r3, r3, #7
 8008860:	3308      	adds	r3, #8
 8008862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f003 0307 	and.w	r3, r3, #7
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00a      	beq.n	8008884 <pvPortMalloc+0x6c>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	617b      	str	r3, [r7, #20]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d06e      	beq.n	8008968 <pvPortMalloc+0x150>
 800888a:	4b45      	ldr	r3, [pc, #276]	; (80089a0 <pvPortMalloc+0x188>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	429a      	cmp	r2, r3
 8008892:	d869      	bhi.n	8008968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008894:	4b43      	ldr	r3, [pc, #268]	; (80089a4 <pvPortMalloc+0x18c>)
 8008896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008898:	4b42      	ldr	r3, [pc, #264]	; (80089a4 <pvPortMalloc+0x18c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800889e:	e004      	b.n	80088aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d903      	bls.n	80088bc <pvPortMalloc+0xa4>
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1f1      	bne.n	80088a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088bc:	4b36      	ldr	r3, [pc, #216]	; (8008998 <pvPortMalloc+0x180>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d050      	beq.n	8008968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2208      	movs	r2, #8
 80088cc:	4413      	add	r3, r2
 80088ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	6a3b      	ldr	r3, [r7, #32]
 80088d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	1ad2      	subs	r2, r2, r3
 80088e0:	2308      	movs	r3, #8
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d91f      	bls.n	8008928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4413      	add	r3, r2
 80088ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	f003 0307 	and.w	r3, r3, #7
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <pvPortMalloc+0xf8>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	613b      	str	r3, [r7, #16]
}
 800890c:	bf00      	nop
 800890e:	e7fe      	b.n	800890e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	1ad2      	subs	r2, r2, r3
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008922:	69b8      	ldr	r0, [r7, #24]
 8008924:	f000 f908 	bl	8008b38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008928:	4b1d      	ldr	r3, [pc, #116]	; (80089a0 <pvPortMalloc+0x188>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	4a1b      	ldr	r2, [pc, #108]	; (80089a0 <pvPortMalloc+0x188>)
 8008934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008936:	4b1a      	ldr	r3, [pc, #104]	; (80089a0 <pvPortMalloc+0x188>)
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	4b1b      	ldr	r3, [pc, #108]	; (80089a8 <pvPortMalloc+0x190>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	429a      	cmp	r2, r3
 8008940:	d203      	bcs.n	800894a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008942:	4b17      	ldr	r3, [pc, #92]	; (80089a0 <pvPortMalloc+0x188>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a18      	ldr	r2, [pc, #96]	; (80089a8 <pvPortMalloc+0x190>)
 8008948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	4b13      	ldr	r3, [pc, #76]	; (800899c <pvPortMalloc+0x184>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	431a      	orrs	r2, r3
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800895e:	4b13      	ldr	r3, [pc, #76]	; (80089ac <pvPortMalloc+0x194>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3301      	adds	r3, #1
 8008964:	4a11      	ldr	r2, [pc, #68]	; (80089ac <pvPortMalloc+0x194>)
 8008966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008968:	f7fe fb30 	bl	8006fcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	f003 0307 	and.w	r3, r3, #7
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00a      	beq.n	800898c <pvPortMalloc+0x174>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	60fb      	str	r3, [r7, #12]
}
 8008988:	bf00      	nop
 800898a:	e7fe      	b.n	800898a <pvPortMalloc+0x172>
	return pvReturn;
 800898c:	69fb      	ldr	r3, [r7, #28]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3728      	adds	r7, #40	; 0x28
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20001940 	.word	0x20001940
 800899c:	20001954 	.word	0x20001954
 80089a0:	20001944 	.word	0x20001944
 80089a4:	20001938 	.word	0x20001938
 80089a8:	20001948 	.word	0x20001948
 80089ac:	2000194c 	.word	0x2000194c

080089b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d04d      	beq.n	8008a5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089c2:	2308      	movs	r3, #8
 80089c4:	425b      	negs	r3, r3
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	4413      	add	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	4b24      	ldr	r3, [pc, #144]	; (8008a68 <vPortFree+0xb8>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4013      	ands	r3, r2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10a      	bne.n	80089f4 <vPortFree+0x44>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	60fb      	str	r3, [r7, #12]
}
 80089f0:	bf00      	nop
 80089f2:	e7fe      	b.n	80089f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00a      	beq.n	8008a12 <vPortFree+0x62>
	__asm volatile
 80089fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a00:	f383 8811 	msr	BASEPRI, r3
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	60bb      	str	r3, [r7, #8]
}
 8008a0e:	bf00      	nop
 8008a10:	e7fe      	b.n	8008a10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	4b14      	ldr	r3, [pc, #80]	; (8008a68 <vPortFree+0xb8>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d01e      	beq.n	8008a5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d11a      	bne.n	8008a5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	4b0e      	ldr	r3, [pc, #56]	; (8008a68 <vPortFree+0xb8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	43db      	mvns	r3, r3
 8008a32:	401a      	ands	r2, r3
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a38:	f7fe faba 	bl	8006fb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <vPortFree+0xbc>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4413      	add	r3, r2
 8008a46:	4a09      	ldr	r2, [pc, #36]	; (8008a6c <vPortFree+0xbc>)
 8008a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a4a:	6938      	ldr	r0, [r7, #16]
 8008a4c:	f000 f874 	bl	8008b38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a50:	4b07      	ldr	r3, [pc, #28]	; (8008a70 <vPortFree+0xc0>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	3301      	adds	r3, #1
 8008a56:	4a06      	ldr	r2, [pc, #24]	; (8008a70 <vPortFree+0xc0>)
 8008a58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a5a:	f7fe fab7 	bl	8006fcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a5e:	bf00      	nop
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20001954 	.word	0x20001954
 8008a6c:	20001944 	.word	0x20001944
 8008a70:	20001950 	.word	0x20001950

08008a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008a7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a80:	4b27      	ldr	r3, [pc, #156]	; (8008b20 <prvHeapInit+0xac>)
 8008a82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00c      	beq.n	8008aa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3307      	adds	r3, #7
 8008a92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 0307 	bic.w	r3, r3, #7
 8008a9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	4a1f      	ldr	r2, [pc, #124]	; (8008b20 <prvHeapInit+0xac>)
 8008aa4:	4413      	add	r3, r2
 8008aa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008aac:	4a1d      	ldr	r2, [pc, #116]	; (8008b24 <prvHeapInit+0xb0>)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ab2:	4b1c      	ldr	r3, [pc, #112]	; (8008b24 <prvHeapInit+0xb0>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	4413      	add	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ac0:	2208      	movs	r2, #8
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	1a9b      	subs	r3, r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 0307 	bic.w	r3, r3, #7
 8008ace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4a15      	ldr	r2, [pc, #84]	; (8008b28 <prvHeapInit+0xb4>)
 8008ad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ad6:	4b14      	ldr	r3, [pc, #80]	; (8008b28 <prvHeapInit+0xb4>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2200      	movs	r2, #0
 8008adc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ade:	4b12      	ldr	r3, [pc, #72]	; (8008b28 <prvHeapInit+0xb4>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	1ad2      	subs	r2, r2, r3
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008af4:	4b0c      	ldr	r3, [pc, #48]	; (8008b28 <prvHeapInit+0xb4>)
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	4a0a      	ldr	r2, [pc, #40]	; (8008b2c <prvHeapInit+0xb8>)
 8008b02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	4a09      	ldr	r2, [pc, #36]	; (8008b30 <prvHeapInit+0xbc>)
 8008b0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b0c:	4b09      	ldr	r3, [pc, #36]	; (8008b34 <prvHeapInit+0xc0>)
 8008b0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b12:	601a      	str	r2, [r3, #0]
}
 8008b14:	bf00      	nop
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	20000d80 	.word	0x20000d80
 8008b24:	20001938 	.word	0x20001938
 8008b28:	20001940 	.word	0x20001940
 8008b2c:	20001948 	.word	0x20001948
 8008b30:	20001944 	.word	0x20001944
 8008b34:	20001954 	.word	0x20001954

08008b38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b40:	4b28      	ldr	r3, [pc, #160]	; (8008be4 <prvInsertBlockIntoFreeList+0xac>)
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	e002      	b.n	8008b4c <prvInsertBlockIntoFreeList+0x14>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d8f7      	bhi.n	8008b46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	4413      	add	r3, r2
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d108      	bne.n	8008b7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	441a      	add	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	441a      	add	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d118      	bne.n	8008bc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4b15      	ldr	r3, [pc, #84]	; (8008be8 <prvInsertBlockIntoFreeList+0xb0>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d00d      	beq.n	8008bb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	441a      	add	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	e008      	b.n	8008bc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bb6:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <prvInsertBlockIntoFreeList+0xb0>)
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	e003      	b.n	8008bc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d002      	beq.n	8008bd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bd6:	bf00      	nop
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	20001938 	.word	0x20001938
 8008be8:	20001940 	.word	0x20001940

08008bec <atoi>:
 8008bec:	220a      	movs	r2, #10
 8008bee:	2100      	movs	r1, #0
 8008bf0:	f000 b8ea 	b.w	8008dc8 <strtol>

08008bf4 <__errno>:
 8008bf4:	4b01      	ldr	r3, [pc, #4]	; (8008bfc <__errno+0x8>)
 8008bf6:	6818      	ldr	r0, [r3, #0]
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	20000010 	.word	0x20000010

08008c00 <__libc_init_array>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	4d0d      	ldr	r5, [pc, #52]	; (8008c38 <__libc_init_array+0x38>)
 8008c04:	4c0d      	ldr	r4, [pc, #52]	; (8008c3c <__libc_init_array+0x3c>)
 8008c06:	1b64      	subs	r4, r4, r5
 8008c08:	10a4      	asrs	r4, r4, #2
 8008c0a:	2600      	movs	r6, #0
 8008c0c:	42a6      	cmp	r6, r4
 8008c0e:	d109      	bne.n	8008c24 <__libc_init_array+0x24>
 8008c10:	4d0b      	ldr	r5, [pc, #44]	; (8008c40 <__libc_init_array+0x40>)
 8008c12:	4c0c      	ldr	r4, [pc, #48]	; (8008c44 <__libc_init_array+0x44>)
 8008c14:	f000 f8e2 	bl	8008ddc <_init>
 8008c18:	1b64      	subs	r4, r4, r5
 8008c1a:	10a4      	asrs	r4, r4, #2
 8008c1c:	2600      	movs	r6, #0
 8008c1e:	42a6      	cmp	r6, r4
 8008c20:	d105      	bne.n	8008c2e <__libc_init_array+0x2e>
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c28:	4798      	blx	r3
 8008c2a:	3601      	adds	r6, #1
 8008c2c:	e7ee      	b.n	8008c0c <__libc_init_array+0xc>
 8008c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c32:	4798      	blx	r3
 8008c34:	3601      	adds	r6, #1
 8008c36:	e7f2      	b.n	8008c1e <__libc_init_array+0x1e>
 8008c38:	0800924c 	.word	0x0800924c
 8008c3c:	0800924c 	.word	0x0800924c
 8008c40:	0800924c 	.word	0x0800924c
 8008c44:	08009250 	.word	0x08009250

08008c48 <memcpy>:
 8008c48:	440a      	add	r2, r1
 8008c4a:	4291      	cmp	r1, r2
 8008c4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008c50:	d100      	bne.n	8008c54 <memcpy+0xc>
 8008c52:	4770      	bx	lr
 8008c54:	b510      	push	{r4, lr}
 8008c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c5e:	4291      	cmp	r1, r2
 8008c60:	d1f9      	bne.n	8008c56 <memcpy+0xe>
 8008c62:	bd10      	pop	{r4, pc}

08008c64 <memset>:
 8008c64:	4402      	add	r2, r0
 8008c66:	4603      	mov	r3, r0
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d100      	bne.n	8008c6e <memset+0xa>
 8008c6c:	4770      	bx	lr
 8008c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c72:	e7f9      	b.n	8008c68 <memset+0x4>

08008c74 <strncat>:
 8008c74:	b530      	push	{r4, r5, lr}
 8008c76:	4604      	mov	r4, r0
 8008c78:	7825      	ldrb	r5, [r4, #0]
 8008c7a:	4623      	mov	r3, r4
 8008c7c:	3401      	adds	r4, #1
 8008c7e:	2d00      	cmp	r5, #0
 8008c80:	d1fa      	bne.n	8008c78 <strncat+0x4>
 8008c82:	3a01      	subs	r2, #1
 8008c84:	d304      	bcc.n	8008c90 <strncat+0x1c>
 8008c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c8a:	f803 4b01 	strb.w	r4, [r3], #1
 8008c8e:	b904      	cbnz	r4, 8008c92 <strncat+0x1e>
 8008c90:	bd30      	pop	{r4, r5, pc}
 8008c92:	2a00      	cmp	r2, #0
 8008c94:	d1f5      	bne.n	8008c82 <strncat+0xe>
 8008c96:	701a      	strb	r2, [r3, #0]
 8008c98:	e7f3      	b.n	8008c82 <strncat+0xe>

08008c9a <strncmp>:
 8008c9a:	b510      	push	{r4, lr}
 8008c9c:	b16a      	cbz	r2, 8008cba <strncmp+0x20>
 8008c9e:	3901      	subs	r1, #1
 8008ca0:	1884      	adds	r4, r0, r2
 8008ca2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008ca6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d103      	bne.n	8008cb6 <strncmp+0x1c>
 8008cae:	42a0      	cmp	r0, r4
 8008cb0:	d001      	beq.n	8008cb6 <strncmp+0x1c>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1f5      	bne.n	8008ca2 <strncmp+0x8>
 8008cb6:	1a98      	subs	r0, r3, r2
 8008cb8:	bd10      	pop	{r4, pc}
 8008cba:	4610      	mov	r0, r2
 8008cbc:	e7fc      	b.n	8008cb8 <strncmp+0x1e>
	...

08008cc0 <_strtol_l.isra.0>:
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc6:	d001      	beq.n	8008ccc <_strtol_l.isra.0+0xc>
 8008cc8:	2b24      	cmp	r3, #36	; 0x24
 8008cca:	d906      	bls.n	8008cda <_strtol_l.isra.0+0x1a>
 8008ccc:	f7ff ff92 	bl	8008bf4 <__errno>
 8008cd0:	2316      	movs	r3, #22
 8008cd2:	6003      	str	r3, [r0, #0]
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cda:	4f3a      	ldr	r7, [pc, #232]	; (8008dc4 <_strtol_l.isra.0+0x104>)
 8008cdc:	468e      	mov	lr, r1
 8008cde:	4676      	mov	r6, lr
 8008ce0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008ce4:	5de5      	ldrb	r5, [r4, r7]
 8008ce6:	f015 0508 	ands.w	r5, r5, #8
 8008cea:	d1f8      	bne.n	8008cde <_strtol_l.isra.0+0x1e>
 8008cec:	2c2d      	cmp	r4, #45	; 0x2d
 8008cee:	d134      	bne.n	8008d5a <_strtol_l.isra.0+0x9a>
 8008cf0:	f89e 4000 	ldrb.w	r4, [lr]
 8008cf4:	f04f 0801 	mov.w	r8, #1
 8008cf8:	f106 0e02 	add.w	lr, r6, #2
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d05c      	beq.n	8008dba <_strtol_l.isra.0+0xfa>
 8008d00:	2b10      	cmp	r3, #16
 8008d02:	d10c      	bne.n	8008d1e <_strtol_l.isra.0+0x5e>
 8008d04:	2c30      	cmp	r4, #48	; 0x30
 8008d06:	d10a      	bne.n	8008d1e <_strtol_l.isra.0+0x5e>
 8008d08:	f89e 4000 	ldrb.w	r4, [lr]
 8008d0c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008d10:	2c58      	cmp	r4, #88	; 0x58
 8008d12:	d14d      	bne.n	8008db0 <_strtol_l.isra.0+0xf0>
 8008d14:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008d18:	2310      	movs	r3, #16
 8008d1a:	f10e 0e02 	add.w	lr, lr, #2
 8008d1e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008d22:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008d26:	2600      	movs	r6, #0
 8008d28:	fbbc f9f3 	udiv	r9, ip, r3
 8008d2c:	4635      	mov	r5, r6
 8008d2e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d32:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008d36:	2f09      	cmp	r7, #9
 8008d38:	d818      	bhi.n	8008d6c <_strtol_l.isra.0+0xac>
 8008d3a:	463c      	mov	r4, r7
 8008d3c:	42a3      	cmp	r3, r4
 8008d3e:	dd24      	ble.n	8008d8a <_strtol_l.isra.0+0xca>
 8008d40:	2e00      	cmp	r6, #0
 8008d42:	db1f      	blt.n	8008d84 <_strtol_l.isra.0+0xc4>
 8008d44:	45a9      	cmp	r9, r5
 8008d46:	d31d      	bcc.n	8008d84 <_strtol_l.isra.0+0xc4>
 8008d48:	d101      	bne.n	8008d4e <_strtol_l.isra.0+0x8e>
 8008d4a:	45a2      	cmp	sl, r4
 8008d4c:	db1a      	blt.n	8008d84 <_strtol_l.isra.0+0xc4>
 8008d4e:	fb05 4503 	mla	r5, r5, r3, r4
 8008d52:	2601      	movs	r6, #1
 8008d54:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008d58:	e7eb      	b.n	8008d32 <_strtol_l.isra.0+0x72>
 8008d5a:	2c2b      	cmp	r4, #43	; 0x2b
 8008d5c:	bf08      	it	eq
 8008d5e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008d62:	46a8      	mov	r8, r5
 8008d64:	bf08      	it	eq
 8008d66:	f106 0e02 	addeq.w	lr, r6, #2
 8008d6a:	e7c7      	b.n	8008cfc <_strtol_l.isra.0+0x3c>
 8008d6c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008d70:	2f19      	cmp	r7, #25
 8008d72:	d801      	bhi.n	8008d78 <_strtol_l.isra.0+0xb8>
 8008d74:	3c37      	subs	r4, #55	; 0x37
 8008d76:	e7e1      	b.n	8008d3c <_strtol_l.isra.0+0x7c>
 8008d78:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008d7c:	2f19      	cmp	r7, #25
 8008d7e:	d804      	bhi.n	8008d8a <_strtol_l.isra.0+0xca>
 8008d80:	3c57      	subs	r4, #87	; 0x57
 8008d82:	e7db      	b.n	8008d3c <_strtol_l.isra.0+0x7c>
 8008d84:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008d88:	e7e4      	b.n	8008d54 <_strtol_l.isra.0+0x94>
 8008d8a:	2e00      	cmp	r6, #0
 8008d8c:	da05      	bge.n	8008d9a <_strtol_l.isra.0+0xda>
 8008d8e:	2322      	movs	r3, #34	; 0x22
 8008d90:	6003      	str	r3, [r0, #0]
 8008d92:	4665      	mov	r5, ip
 8008d94:	b942      	cbnz	r2, 8008da8 <_strtol_l.isra.0+0xe8>
 8008d96:	4628      	mov	r0, r5
 8008d98:	e79d      	b.n	8008cd6 <_strtol_l.isra.0+0x16>
 8008d9a:	f1b8 0f00 	cmp.w	r8, #0
 8008d9e:	d000      	beq.n	8008da2 <_strtol_l.isra.0+0xe2>
 8008da0:	426d      	negs	r5, r5
 8008da2:	2a00      	cmp	r2, #0
 8008da4:	d0f7      	beq.n	8008d96 <_strtol_l.isra.0+0xd6>
 8008da6:	b10e      	cbz	r6, 8008dac <_strtol_l.isra.0+0xec>
 8008da8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008dac:	6011      	str	r1, [r2, #0]
 8008dae:	e7f2      	b.n	8008d96 <_strtol_l.isra.0+0xd6>
 8008db0:	2430      	movs	r4, #48	; 0x30
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1b3      	bne.n	8008d1e <_strtol_l.isra.0+0x5e>
 8008db6:	2308      	movs	r3, #8
 8008db8:	e7b1      	b.n	8008d1e <_strtol_l.isra.0+0x5e>
 8008dba:	2c30      	cmp	r4, #48	; 0x30
 8008dbc:	d0a4      	beq.n	8008d08 <_strtol_l.isra.0+0x48>
 8008dbe:	230a      	movs	r3, #10
 8008dc0:	e7ad      	b.n	8008d1e <_strtol_l.isra.0+0x5e>
 8008dc2:	bf00      	nop
 8008dc4:	08009141 	.word	0x08009141

08008dc8 <strtol>:
 8008dc8:	4613      	mov	r3, r2
 8008dca:	460a      	mov	r2, r1
 8008dcc:	4601      	mov	r1, r0
 8008dce:	4802      	ldr	r0, [pc, #8]	; (8008dd8 <strtol+0x10>)
 8008dd0:	6800      	ldr	r0, [r0, #0]
 8008dd2:	f7ff bf75 	b.w	8008cc0 <_strtol_l.isra.0>
 8008dd6:	bf00      	nop
 8008dd8:	20000010 	.word	0x20000010

08008ddc <_init>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	bf00      	nop
 8008de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de2:	bc08      	pop	{r3}
 8008de4:	469e      	mov	lr, r3
 8008de6:	4770      	bx	lr

08008de8 <_fini>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	bf00      	nop
 8008dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dee:	bc08      	pop	{r3}
 8008df0:	469e      	mov	lr, r3
 8008df2:	4770      	bx	lr
