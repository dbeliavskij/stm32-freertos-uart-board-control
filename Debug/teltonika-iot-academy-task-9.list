
teltonika-iot-academy-task-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008084  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  08008214  08008214  00018214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008588  08008588  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008590  08008590  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008590  08008590  00018590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008594  08008594  00018594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a1c  20000074  0800860c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a90  0800860c  00021a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e657  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003862  00000000  00000000  0003e6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00041f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  000436b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ef1  00000000  00000000  00044cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186df  00000000  00000000  00048bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdb83  00000000  00000000  00061298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015ee1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006368  00000000  00000000  0015ee70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081fc 	.word	0x080081fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080081fc 	.word	0x080081fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fd86 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f87c 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f908 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f8d6 	bl	8000698 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004ec:	f000 f8c7 	bl	800067e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	4924      	ldr	r1, [pc, #144]	; (8000584 <main+0xac>)
 80004f4:	4824      	ldr	r0, [pc, #144]	; (8000588 <main+0xb0>)
 80004f6:	f002 ffb1 	bl	800345c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fa:	f004 f881 	bl	8004600 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UARTTxSemaphore */
  UARTTxSemaphoreHandle = osSemaphoreNew(1, 1, &UARTTxSemaphore_attributes);
 80004fe:	4a23      	ldr	r2, [pc, #140]	; (800058c <main+0xb4>)
 8000500:	2101      	movs	r1, #1
 8000502:	2001      	movs	r0, #1
 8000504:	f004 f9b5 	bl	8004872 <osSemaphoreNew>
 8000508:	4603      	mov	r3, r0
 800050a:	4a21      	ldr	r2, [pc, #132]	; (8000590 <main+0xb8>)
 800050c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RxQueue */
  RxQueueHandle = osMessageQueueNew (12, sizeof(uint8_t), &RxQueue_attributes);
 800050e:	4a21      	ldr	r2, [pc, #132]	; (8000594 <main+0xbc>)
 8000510:	2101      	movs	r1, #1
 8000512:	200c      	movs	r0, #12
 8000514:	f004 facc 	bl	8004ab0 <osMessageQueueNew>
 8000518:	4603      	mov	r3, r0
 800051a:	4a1f      	ldr	r2, [pc, #124]	; (8000598 <main+0xc0>)
 800051c:	6013      	str	r3, [r2, #0]

  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (1, 13, &CommandQueue_attributes);
 800051e:	4a1f      	ldr	r2, [pc, #124]	; (800059c <main+0xc4>)
 8000520:	210d      	movs	r1, #13
 8000522:	2001      	movs	r0, #1
 8000524:	f004 fac4 	bl	8004ab0 <osMessageQueueNew>
 8000528:	4603      	mov	r3, r0
 800052a:	4a1d      	ldr	r2, [pc, #116]	; (80005a0 <main+0xc8>)
 800052c:	6013      	str	r3, [r2, #0]

  /* creation of b_rateQueue */
  b_rateQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &b_rateQueue_attributes);
 800052e:	4a1d      	ldr	r2, [pc, #116]	; (80005a4 <main+0xcc>)
 8000530:	2102      	movs	r1, #2
 8000532:	2001      	movs	r0, #1
 8000534:	f004 fabc 	bl	8004ab0 <osMessageQueueNew>
 8000538:	4603      	mov	r3, r0
 800053a:	4a1b      	ldr	r2, [pc, #108]	; (80005a8 <main+0xd0>)
 800053c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UARTRx */
  UARTRxHandle = osThreadNew(StartUARTRx, NULL, &UARTRx_attributes);
 800053e:	4a1b      	ldr	r2, [pc, #108]	; (80005ac <main+0xd4>)
 8000540:	2100      	movs	r1, #0
 8000542:	481b      	ldr	r0, [pc, #108]	; (80005b0 <main+0xd8>)
 8000544:	f004 f8a6 	bl	8004694 <osThreadNew>
 8000548:	4603      	mov	r3, r0
 800054a:	4a1a      	ldr	r2, [pc, #104]	; (80005b4 <main+0xdc>)
 800054c:	6013      	str	r3, [r2, #0]

  /* creation of TaskHandler */
  TaskHandlerHandle = osThreadNew(StartTTaskHandler, NULL, &TaskHandler_attributes);
 800054e:	4a1a      	ldr	r2, [pc, #104]	; (80005b8 <main+0xe0>)
 8000550:	2100      	movs	r1, #0
 8000552:	481a      	ldr	r0, [pc, #104]	; (80005bc <main+0xe4>)
 8000554:	f004 f89e 	bl	8004694 <osThreadNew>
 8000558:	4603      	mov	r3, r0
 800055a:	4a19      	ldr	r2, [pc, #100]	; (80005c0 <main+0xe8>)
 800055c:	6013      	str	r3, [r2, #0]

  /* creation of ButTask */
  ButTaskHandle = osThreadNew(StartButTask, NULL, &ButTask_attributes);
 800055e:	4a19      	ldr	r2, [pc, #100]	; (80005c4 <main+0xec>)
 8000560:	2100      	movs	r1, #0
 8000562:	4819      	ldr	r0, [pc, #100]	; (80005c8 <main+0xf0>)
 8000564:	f004 f896 	bl	8004694 <osThreadNew>
 8000568:	4603      	mov	r3, r0
 800056a:	4a18      	ldr	r2, [pc, #96]	; (80005cc <main+0xf4>)
 800056c:	6013      	str	r3, [r2, #0]

  /* creation of LedBlinkTask */
  LedBlinkTaskHandle = osThreadNew(StartLedBlinkTask, NULL, &LedBlinkTask_attributes);
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <main+0xf8>)
 8000570:	2100      	movs	r1, #0
 8000572:	4818      	ldr	r0, [pc, #96]	; (80005d4 <main+0xfc>)
 8000574:	f004 f88e 	bl	8004694 <osThreadNew>
 8000578:	4603      	mov	r3, r0
 800057a:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <main+0x100>)
 800057c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057e:	f004 f863 	bl	8004648 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000582:	e7fe      	b.n	8000582 <main+0xaa>
 8000584:	200019fc 	.word	0x200019fc
 8000588:	20001970 	.word	0x20001970
 800058c:	0800842c 	.word	0x0800842c
 8000590:	20001968 	.word	0x20001968
 8000594:	080083e4 	.word	0x080083e4
 8000598:	20001958 	.word	0x20001958
 800059c:	080083fc 	.word	0x080083fc
 80005a0:	200019f4 	.word	0x200019f4
 80005a4:	08008414 	.word	0x08008414
 80005a8:	2000195c 	.word	0x2000195c
 80005ac:	08008354 	.word	0x08008354
 80005b0:	08000839 	.word	0x08000839
 80005b4:	200019f8 	.word	0x200019f8
 80005b8:	08008378 	.word	0x08008378
 80005bc:	08000a89 	.word	0x08000a89
 80005c0:	20001964 	.word	0x20001964
 80005c4:	0800839c 	.word	0x0800839c
 80005c8:	08000cb9 	.word	0x08000cb9
 80005cc:	2000196c 	.word	0x2000196c
 80005d0:	080083c0 	.word	0x080083c0
 80005d4:	08000cc9 	.word	0x08000cc9
 80005d8:	20001960 	.word	0x20001960

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	; 0x58
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2244      	movs	r2, #68	; 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f007 fd4a 	bl	8008084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000602:	f001 f87f 	bl	8001704 <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 fb88 	bl	8000d20 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000618:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	2310      	movs	r3, #16
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800062a:	230a      	movs	r3, #10
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062e:	2307      	movs	r3, #7
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4618      	mov	r0, r3
 8000640:	f001 f8b6 	bl	80017b0 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800064a:	f000 fb69 	bl	8000d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2303      	movs	r3, #3
 8000654:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	2104      	movs	r1, #4
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fc88 	bl	8001f7c <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000672:	f000 fb55 	bl	8000d20 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3758      	adds	r7, #88	; 0x58
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2105      	movs	r1, #5
 8000686:	2026      	movs	r0, #38	; 0x26
 8000688:	f000 fda8 	bl	80011dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800068c:	2026      	movs	r0, #38	; 0x26
 800068e:	f000 fdc1 	bl	8001214 <HAL_NVIC_EnableIRQ>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 800069e:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <MX_USART2_UART_Init+0x5c>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_USART2_UART_Init+0x58>)
 80006dc:	f002 fe14 	bl	8003308 <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006e6:	f000 fb1b 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20001970 	.word	0x20001970
 80006f4:	40004400 	.word	0x40004400

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <MX_GPIO_Init+0xc4>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a24      	ldr	r2, [pc, #144]	; (80007bc <MX_GPIO_Init+0xc4>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <MX_GPIO_Init+0xc4>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_GPIO_Init+0xc4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <MX_GPIO_Init+0xc4>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_GPIO_Init+0xc4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2120      	movs	r1, #32
 8000772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000776:	f000 ff85 	bl	8001684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800077a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_GPIO_Init+0xc8>)
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_GPIO_Init+0xcc>)
 8000790:	f000 fdce 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000794:	2320      	movs	r3, #32
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f000 fdbf 	bl	8001330 <HAL_GPIO_Init>

}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	; 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000
 80007c0:	10210000 	.word	0x10210000
 80007c4:	48000800 	.word	0x48000800

080007c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a09      	ldr	r2, [pc, #36]	; (80007fc <HAL_UART_RxCpltCallback+0x34>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d10b      	bne.n	80007f2 <HAL_UART_RxCpltCallback+0x2a>
  {
    osMessageQueuePut(RxQueueHandle, &rx_char, 1, 0);
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_UART_RxCpltCallback+0x38>)
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	2300      	movs	r3, #0
 80007e0:	2201      	movs	r2, #1
 80007e2:	4908      	ldr	r1, [pc, #32]	; (8000804 <HAL_UART_RxCpltCallback+0x3c>)
 80007e4:	f004 f9d8 	bl	8004b98 <osMessageQueuePut>
	HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	4906      	ldr	r1, [pc, #24]	; (8000804 <HAL_UART_RxCpltCallback+0x3c>)
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <HAL_UART_RxCpltCallback+0x40>)
 80007ee:	f002 fe35 	bl	800345c <HAL_UART_Receive_IT>

  }
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40004400 	.word	0x40004400
 8000800:	20001958 	.word	0x20001958
 8000804:	200019fc 	.word	0x200019fc
 8000808:	20001970 	.word	0x20001970

0800080c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a05      	ldr	r2, [pc, #20]	; (8000830 <HAL_UART_TxCpltCallback+0x24>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d104      	bne.n	8000828 <HAL_UART_TxCpltCallback+0x1c>
	{
		osSemaphoreRelease(UARTTxSemaphoreHandle);
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_UART_TxCpltCallback+0x28>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f004 f900 	bl	8004a28 <osSemaphoreRelease>

	}
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40004400 	.word	0x40004400
 8000834:	20001968 	.word	0x20001968

08000838 <StartUARTRx>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTRx */
void StartUARTRx(void *argument)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t temp_rx[2] = { '\0' };
 8000840:	2300      	movs	r3, #0
 8000842:	833b      	strh	r3, [r7, #24]
  char rx_msg[13] = { '\0' };
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	721a      	strb	r2, [r3, #8]
  size_t str_sp = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  osStatus_t status;
  bool send = false;
 8000858:	2300      	movs	r3, #0
 800085a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Infinite loop */
  for(;;)
  {
    status = osMessageQueueGet(RxQueueHandle, temp_rx, NULL, 500);
 800085e:	4b83      	ldr	r3, [pc, #524]	; (8000a6c <StartUARTRx+0x234>)
 8000860:	6818      	ldr	r0, [r3, #0]
 8000862:	f107 0118 	add.w	r1, r7, #24
 8000866:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800086a:	2200      	movs	r2, #0
 800086c:	f004 f9f4 	bl	8004c58 <osMessageQueueGet>
 8000870:	61f8      	str	r0, [r7, #28]

    if (status == osOK)
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d110      	bne.n	800089a <StartUARTRx+0x62>
    {
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fca7 	bl	80001d0 <strlen>
 8000882:	4603      	mov	r3, r0
 8000884:	f1c3 030c 	rsb	r3, r3, #12
 8000888:	623b      	str	r3, [r7, #32]
    	strncat(rx_msg, (char *)temp_rx, str_sp);
 800088a:	f107 0118 	add.w	r1, r7, #24
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	6a3a      	ldr	r2, [r7, #32]
 8000894:	4618      	mov	r0, r3
 8000896:	f007 fbfd 	bl	8008094 <strncat>

    }

    str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fc96 	bl	80001d0 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	f1c3 030c 	rsb	r3, r3, #12
 80008aa:	623b      	str	r3, [r7, #32]

    if (str_sp == 0)
 80008ac:	6a3b      	ldr	r3, [r7, #32]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d11d      	bne.n	80008ee <StartUARTRx+0xb6>
    {
    	rx_msg[strlen(rx_msg)-1] = '\r';
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fc8a 	bl	80001d0 <strlen>
 80008bc:	4603      	mov	r3, r0
 80008be:	3b01      	subs	r3, #1
 80008c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008c4:	4413      	add	r3, r2
 80008c6:	220d      	movs	r2, #13
 80008c8:	f803 2c20 	strb.w	r2, [r3, #-32]
    	rx_msg[strlen(rx_msg)-2] = '\n';
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fc7d 	bl	80001d0 <strlen>
 80008d6:	4603      	mov	r3, r0
 80008d8:	3b02      	subs	r3, #2
 80008da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008de:	4413      	add	r3, r2
 80008e0:	220a      	movs	r2, #10
 80008e2:	f803 2c20 	strb.w	r2, [r3, #-32]
    	send = true;
 80008e6:	2301      	movs	r3, #1
 80008e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008ec:	e088      	b.n	8000a00 <StartUARTRx+0x1c8>

    }

    else if (status == osErrorTimeout && strlen(rx_msg) > 0 && str_sp >= 2)
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	f113 0f02 	cmn.w	r3, #2
 80008f4:	d11b      	bne.n	800092e <StartUARTRx+0xf6>
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d016      	beq.n	800092e <StartUARTRx+0xf6>
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d913      	bls.n	800092e <StartUARTRx+0xf6>
    {
    	strncat(rx_msg, "\n\r", str_sp);
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	6a3a      	ldr	r2, [r7, #32]
 800090c:	4958      	ldr	r1, [pc, #352]	; (8000a70 <StartUARTRx+0x238>)
 800090e:	4618      	mov	r0, r3
 8000910:	f007 fbc0 	bl	8008094 <strncat>
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fc59 	bl	80001d0 <strlen>
 800091e:	4603      	mov	r3, r0
 8000920:	f1c3 030c 	rsb	r3, r3, #12
 8000924:	623b      	str	r3, [r7, #32]
    	send = true;
 8000926:	2301      	movs	r3, #1
 8000928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800092c:	e068      	b.n	8000a00 <StartUARTRx+0x1c8>

    }

    else if (status == osErrorTimeout && strlen(rx_msg) > 0 && str_sp == 1)
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	f113 0f02 	cmn.w	r3, #2
 8000934:	d128      	bne.n	8000988 <StartUARTRx+0x150>
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d023      	beq.n	8000988 <StartUARTRx+0x150>
 8000940:	6a3b      	ldr	r3, [r7, #32]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d120      	bne.n	8000988 <StartUARTRx+0x150>
    {
    	strncat(rx_msg, "\r", str_sp);
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	6a3a      	ldr	r2, [r7, #32]
 800094c:	4949      	ldr	r1, [pc, #292]	; (8000a74 <StartUARTRx+0x23c>)
 800094e:	4618      	mov	r0, r3
 8000950:	f007 fba0 	bl	8008094 <strncat>
    	rx_msg[strlen(rx_msg)-2] = '\n';
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fc39 	bl	80001d0 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	3b02      	subs	r3, #2
 8000962:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000966:	4413      	add	r3, r2
 8000968:	220a      	movs	r2, #10
 800096a:	f803 2c20 	strb.w	r2, [r3, #-32]
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fc2c 	bl	80001d0 <strlen>
 8000978:	4603      	mov	r3, r0
 800097a:	f1c3 030c 	rsb	r3, r3, #12
 800097e:	623b      	str	r3, [r7, #32]
    	send = true;
 8000980:	2301      	movs	r3, #1
 8000982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000986:	e03b      	b.n	8000a00 <StartUARTRx+0x1c8>

    }

    else if (rx_msg[strlen(rx_msg)-1] == '\n' || rx_msg[strlen(rx_msg)-1] == '\r')
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc1f 	bl	80001d0 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	3b01      	subs	r3, #1
 8000996:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800099a:	4413      	add	r3, r2
 800099c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80009a0:	2b0a      	cmp	r3, #10
 80009a2:	d00d      	beq.n	80009c0 <StartUARTRx+0x188>
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fc11 	bl	80001d0 <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	3b01      	subs	r3, #1
 80009b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009b6:	4413      	add	r3, r2
 80009b8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80009bc:	2b0d      	cmp	r3, #13
 80009be:	d11f      	bne.n	8000a00 <StartUARTRx+0x1c8>
    {
    	rx_msg[strlen(rx_msg)-1] = '\n';
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fc03 	bl	80001d0 <strlen>
 80009ca:	4603      	mov	r3, r0
 80009cc:	3b01      	subs	r3, #1
 80009ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009d2:	4413      	add	r3, r2
 80009d4:	220a      	movs	r2, #10
 80009d6:	f803 2c20 	strb.w	r2, [r3, #-32]
    	strncat(rx_msg, "\r", str_sp);
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	6a3a      	ldr	r2, [r7, #32]
 80009e0:	4924      	ldr	r1, [pc, #144]	; (8000a74 <StartUARTRx+0x23c>)
 80009e2:	4618      	mov	r0, r3
 80009e4:	f007 fb56 	bl	8008094 <strncat>
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fbef 	bl	80001d0 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f1c3 030c 	rsb	r3, r3, #12
 80009f8:	623b      	str	r3, [r7, #32]
    	send = true;
 80009fa:	2301      	movs	r3, #1
 80009fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    }

    if (send)
 8000a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f43f af2a 	beq.w	800085e <StartUARTRx+0x26>
    {
    	osMessageQueuePut(CommandQueueHandle, rx_msg, 1, osWaitForever);
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <StartUARTRx+0x240>)
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	f107 0108 	add.w	r1, r7, #8
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a16:	2201      	movs	r2, #1
 8000a18:	f004 f8be 	bl	8004b98 <osMessageQueuePut>
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <StartUARTRx+0x244>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 ffad 	bl	8004984 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Received command:\n\r", 19);
 8000a2a:	2213      	movs	r2, #19
 8000a2c:	4914      	ldr	r1, [pc, #80]	; (8000a80 <StartUARTRx+0x248>)
 8000a2e:	4815      	ldr	r0, [pc, #84]	; (8000a84 <StartUARTRx+0x24c>)
 8000a30:	f002 fcb8 	bl	80033a4 <HAL_UART_Transmit_IT>

    	str_sp = strlen(rx_msg);
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fbc9 	bl	80001d0 <strlen>
 8000a3e:	6238      	str	r0, [r7, #32]
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <StartUARTRx+0x244>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 ff9b 	bl	8004984 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)rx_msg, str_sp);
 8000a4e:	6a3b      	ldr	r3, [r7, #32]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4619      	mov	r1, r3
 8000a58:	480a      	ldr	r0, [pc, #40]	; (8000a84 <StartUARTRx+0x24c>)
 8000a5a:	f002 fca3 	bl	80033a4 <HAL_UART_Transmit_IT>
    	rx_msg[0] = '\0';
 8000a5e:	2300      	movs	r3, #0
 8000a60:	723b      	strb	r3, [r7, #8]
    	send = false;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = osMessageQueueGet(RxQueueHandle, temp_rx, NULL, 500);
 8000a68:	e6f9      	b.n	800085e <StartUARTRx+0x26>
 8000a6a:	bf00      	nop
 8000a6c:	20001958 	.word	0x20001958
 8000a70:	08008274 	.word	0x08008274
 8000a74:	08008278 	.word	0x08008278
 8000a78:	200019f4 	.word	0x200019f4
 8000a7c:	20001968 	.word	0x20001968
 8000a80:	0800827c 	.word	0x0800827c
 8000a84:	20001970 	.word	0x20001970

08000a88 <StartTTaskHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTTaskHandler */
void StartTTaskHandler(void *argument)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTTaskHandler */
  osThreadSuspend(ButTaskHandle);
 8000a90:	4b79      	ldr	r3, [pc, #484]	; (8000c78 <StartTTaskHandler+0x1f0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 fe8f 	bl	80047b8 <osThreadSuspend>
  osThreadSuspend(LedBlinkTaskHandle);
 8000a9a:	4b78      	ldr	r3, [pc, #480]	; (8000c7c <StartTTaskHandler+0x1f4>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 fe8a 	bl	80047b8 <osThreadSuspend>

  char command[13] = { '\0' };
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	721a      	strb	r2, [r3, #8]
  bool led_b_sus = true;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	77fb      	strb	r3, [r7, #31]
  int temp_num;
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(CommandQueueHandle, command, NULL, osWaitForever);
 8000ab8:	4b71      	ldr	r3, [pc, #452]	; (8000c80 <StartTTaskHandler+0x1f8>)
 8000aba:	6818      	ldr	r0, [r3, #0]
 8000abc:	f107 0110 	add.w	r1, r7, #16
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f004 f8c7 	bl	8004c58 <osMessageQueueGet>

    if (!strncmp(command, "LED", 3) || !strncmp(command, "led", 3))
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	2203      	movs	r2, #3
 8000ad0:	496c      	ldr	r1, [pc, #432]	; (8000c84 <StartTTaskHandler+0x1fc>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f007 faf1 	bl	80080ba <strncmp>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d00a      	beq.n	8000af4 <StartTTaskHandler+0x6c>
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	4968      	ldr	r1, [pc, #416]	; (8000c88 <StartTTaskHandler+0x200>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f007 fae7 	bl	80080ba <strncmp>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f040 8094 	bne.w	8000c1c <StartTTaskHandler+0x194>
    {

    	if (command[4] == 'b' && atoi(command+6) > 0)
 8000af4:	7d3b      	ldrb	r3, [r7, #20]
 8000af6:	2b62      	cmp	r3, #98	; 0x62
 8000af8:	d149      	bne.n	8000b8e <StartTTaskHandler+0x106>
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	3306      	adds	r3, #6
 8000b00:	4618      	mov	r0, r3
 8000b02:	f007 fa83 	bl	800800c <atoi>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	dd40      	ble.n	8000b8e <StartTTaskHandler+0x106>
    	{
    		if (led_b_sus)
 8000b0c:	7ffb      	ldrb	r3, [r7, #31]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d01f      	beq.n	8000b52 <StartTTaskHandler+0xca>
    		{
    			osThreadResume(LedBlinkTaskHandle);
 8000b12:	4b5a      	ldr	r3, [pc, #360]	; (8000c7c <StartTTaskHandler+0x1f4>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 fe6f 	bl	80047fa <osThreadResume>
    			led_b_sus = !led_b_sus;
 8000b1c:	7ffb      	ldrb	r3, [r7, #31]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf14      	ite	ne
 8000b22:	2301      	movne	r3, #1
 8000b24:	2300      	moveq	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	f083 0301 	eor.w	r3, r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	77fb      	strb	r3, [r7, #31]
 8000b30:	7ffb      	ldrb	r3, [r7, #31]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	77fb      	strb	r3, [r7, #31]
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000b38:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <StartTTaskHandler+0x204>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 ff1f 	bl	8004984 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task started\n\r", 27);
 8000b46:	221b      	movs	r2, #27
 8000b48:	4951      	ldr	r1, [pc, #324]	; (8000c90 <StartTTaskHandler+0x208>)
 8000b4a:	4852      	ldr	r0, [pc, #328]	; (8000c94 <StartTTaskHandler+0x20c>)
 8000b4c:	f002 fc2a 	bl	80033a4 <HAL_UART_Transmit_IT>
    		if (led_b_sus)
 8000b50:	e063      	b.n	8000c1a <StartTTaskHandler+0x192>

    		}

    		else
    		{
    			temp_num = atoi(command+6);
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	3306      	adds	r3, #6
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f007 fa57 	bl	800800c <atoi>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	60fb      	str	r3, [r7, #12]
    			osMessageQueuePut(b_rateQueueHandle, &temp_num, 1, osWaitForever);
 8000b62:	4b4d      	ldr	r3, [pc, #308]	; (8000c98 <StartTTaskHandler+0x210>)
 8000b64:	6818      	ldr	r0, [r3, #0]
 8000b66:	f107 010c 	add.w	r1, r7, #12
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f004 f812 	bl	8004b98 <osMessageQueuePut>
    			osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000b74:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <StartTTaskHandler+0x204>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f003 ff01 	bl	8004984 <osSemaphoreAcquire>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking rate updated\n\r", 27);
 8000b82:	221b      	movs	r2, #27
 8000b84:	4945      	ldr	r1, [pc, #276]	; (8000c9c <StartTTaskHandler+0x214>)
 8000b86:	4843      	ldr	r0, [pc, #268]	; (8000c94 <StartTTaskHandler+0x20c>)
 8000b88:	f002 fc0c 	bl	80033a4 <HAL_UART_Transmit_IT>
    		if (led_b_sus)
 8000b8c:	e045      	b.n	8000c1a <StartTTaskHandler+0x192>

    		}
    	}

    	else if (command[4] == 'b' && command[6] == '0')
 8000b8e:	7d3b      	ldrb	r3, [r7, #20]
 8000b90:	2b62      	cmp	r3, #98	; 0x62
 8000b92:	d135      	bne.n	8000c00 <StartTTaskHandler+0x178>
 8000b94:	7dbb      	ldrb	r3, [r7, #22]
 8000b96:	2b30      	cmp	r3, #48	; 0x30
 8000b98:	d132      	bne.n	8000c00 <StartTTaskHandler+0x178>
    	{
    		if (!led_b_sus)
 8000b9a:	7ffb      	ldrb	r3, [r7, #31]
 8000b9c:	f083 0301 	eor.w	r3, r3, #1
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d01f      	beq.n	8000be6 <StartTTaskHandler+0x15e>
			{

				osThreadSuspend(LedBlinkTaskHandle);
 8000ba6:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <StartTTaskHandler+0x1f4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f003 fe04 	bl	80047b8 <osThreadSuspend>
				led_b_sus = !led_b_sus;
 8000bb0:	7ffb      	ldrb	r3, [r7, #31]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf14      	ite	ne
 8000bb6:	2301      	movne	r3, #1
 8000bb8:	2300      	moveq	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	f083 0301 	eor.w	r3, r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	77fb      	strb	r3, [r7, #31]
 8000bc4:	7ffb      	ldrb	r3, [r7, #31]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	77fb      	strb	r3, [r7, #31]
				osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000bcc:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <StartTTaskHandler+0x204>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 fed5 	bl	8004984 <osSemaphoreAcquire>
				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task stopped\n\r", 27);
 8000bda:	221b      	movs	r2, #27
 8000bdc:	4930      	ldr	r1, [pc, #192]	; (8000ca0 <StartTTaskHandler+0x218>)
 8000bde:	482d      	ldr	r0, [pc, #180]	; (8000c94 <StartTTaskHandler+0x20c>)
 8000be0:	f002 fbe0 	bl	80033a4 <HAL_UART_Transmit_IT>
    		if (!led_b_sus)
 8000be4:	e019      	b.n	8000c1a <StartTTaskHandler+0x192>

			}

			else
			{
				osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000be6:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <StartTTaskHandler+0x204>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 fec8 	bl	8004984 <osSemaphoreAcquire>
				HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED blinking task already stopped\n\r", 35);
 8000bf4:	2223      	movs	r2, #35	; 0x23
 8000bf6:	492b      	ldr	r1, [pc, #172]	; (8000ca4 <StartTTaskHandler+0x21c>)
 8000bf8:	4826      	ldr	r0, [pc, #152]	; (8000c94 <StartTTaskHandler+0x20c>)
 8000bfa:	f002 fbd3 	bl	80033a4 <HAL_UART_Transmit_IT>
    		if (!led_b_sus)
 8000bfe:	e00c      	b.n	8000c1a <StartTTaskHandler+0x192>

    	}

    	else
    	{
    		osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <StartTTaskHandler+0x204>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 febb 	bl	8004984 <osSemaphoreAcquire>
    		HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Invalid command\n\r", 17);
 8000c0e:	2211      	movs	r2, #17
 8000c10:	4925      	ldr	r1, [pc, #148]	; (8000ca8 <StartTTaskHandler+0x220>)
 8000c12:	4820      	ldr	r0, [pc, #128]	; (8000c94 <StartTTaskHandler+0x20c>)
 8000c14:	f002 fbc6 	bl	80033a4 <HAL_UART_Transmit_IT>
    	if (command[4] == 'b' && atoi(command+6) > 0)
 8000c18:	e02d      	b.n	8000c76 <StartTTaskHandler+0x1ee>
 8000c1a:	e02c      	b.n	8000c76 <StartTTaskHandler+0x1ee>
    	}


    }

    else if (!strncmp(command, "BUT", 3) || !strncmp(command, "but", 3))
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	2203      	movs	r2, #3
 8000c22:	4922      	ldr	r1, [pc, #136]	; (8000cac <StartTTaskHandler+0x224>)
 8000c24:	4618      	mov	r0, r3
 8000c26:	f007 fa48 	bl	80080ba <strncmp>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d009      	beq.n	8000c44 <StartTTaskHandler+0x1bc>
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	2203      	movs	r2, #3
 8000c36:	491e      	ldr	r1, [pc, #120]	; (8000cb0 <StartTTaskHandler+0x228>)
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f007 fa3e 	bl	80080ba <strncmp>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d10c      	bne.n	8000c5e <StartTTaskHandler+0x1d6>
    {
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <StartTTaskHandler+0x204>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fe99 	bl	8004984 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"BUT command\n\r", 15);
 8000c52:	220f      	movs	r2, #15
 8000c54:	4917      	ldr	r1, [pc, #92]	; (8000cb4 <StartTTaskHandler+0x22c>)
 8000c56:	480f      	ldr	r0, [pc, #60]	; (8000c94 <StartTTaskHandler+0x20c>)
 8000c58:	f002 fba4 	bl	80033a4 <HAL_UART_Transmit_IT>
 8000c5c:	e00b      	b.n	8000c76 <StartTTaskHandler+0x1ee>

    }

    else
    {
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <StartTTaskHandler+0x204>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c66:	4618      	mov	r0, r3
 8000c68:	f003 fe8c 	bl	8004984 <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Invalid command\n\r", 17);
 8000c6c:	2211      	movs	r2, #17
 8000c6e:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <StartTTaskHandler+0x220>)
 8000c70:	4808      	ldr	r0, [pc, #32]	; (8000c94 <StartTTaskHandler+0x20c>)
 8000c72:	f002 fb97 	bl	80033a4 <HAL_UART_Transmit_IT>
    osMessageQueueGet(CommandQueueHandle, command, NULL, osWaitForever);
 8000c76:	e71f      	b.n	8000ab8 <StartTTaskHandler+0x30>
 8000c78:	2000196c 	.word	0x2000196c
 8000c7c:	20001960 	.word	0x20001960
 8000c80:	200019f4 	.word	0x200019f4
 8000c84:	08008290 	.word	0x08008290
 8000c88:	08008294 	.word	0x08008294
 8000c8c:	20001968 	.word	0x20001968
 8000c90:	08008298 	.word	0x08008298
 8000c94:	20001970 	.word	0x20001970
 8000c98:	2000195c 	.word	0x2000195c
 8000c9c:	080082b4 	.word	0x080082b4
 8000ca0:	080082d0 	.word	0x080082d0
 8000ca4:	080082ec 	.word	0x080082ec
 8000ca8:	08008310 	.word	0x08008310
 8000cac:	08008324 	.word	0x08008324
 8000cb0:	08008328 	.word	0x08008328
 8000cb4:	0800832c 	.word	0x0800832c

08000cb8 <StartButTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButTask */
void StartButTask(void *argument)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f003 fdbb 	bl	800483c <osDelay>
 8000cc6:	e7fb      	b.n	8000cc0 <StartButTask+0x8>

08000cc8 <StartLedBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedBlinkTask */
void StartLedBlinkTask(void *argument)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedBlinkTask */
  int rate = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(b_rateQueueHandle, &rate, NULL, 0);
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <StartLedBlinkTask+0x30>)
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	f107 010c 	add.w	r1, r7, #12
 8000cdc:	2300      	movs	r3, #0
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f003 ffba 	bl	8004c58 <osMessageQueueGet>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ce4:	2120      	movs	r1, #32
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cea:	f000 fce3 	bl	80016b4 <HAL_GPIO_TogglePin>
    osDelay(rate);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fda3 	bl	800483c <osDelay>
    osMessageQueueGet(b_rateQueueHandle, &rate, NULL, 0);
 8000cf6:	e7ed      	b.n	8000cd4 <StartLedBlinkTask+0xc>
 8000cf8:	2000195c 	.word	0x2000195c

08000cfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d101      	bne.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d0e:	f000 f98d 	bl	800102c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40001000 	.word	0x40001000

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>
	...

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	6593      	str	r3, [r2, #88]	; 0x58
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	210f      	movs	r1, #15
 8000d66:	f06f 0001 	mvn.w	r0, #1
 8000d6a:	f000 fa37 	bl	80011dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0ac      	sub	sp, #176	; 0xb0
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2288      	movs	r2, #136	; 0x88
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f007 f971 	bl	8008084 <memset>
  if(huart->Instance==USART2)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <HAL_UART_MspInit+0xb0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d13b      	bne.n	8000e24 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fb17 	bl	80023ec <HAL_RCCEx_PeriphCLKConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dc4:	f7ff ffac 	bl	8000d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_UART_MspInit+0xb4>)
 8000dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dcc:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <HAL_UART_MspInit+0xb4>)
 8000dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_UART_MspInit+0xb4>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_UART_MspInit+0xb4>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <HAL_UART_MspInit+0xb4>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_UART_MspInit+0xb4>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000df8:	230c      	movs	r3, #12
 8000dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e10:	2307      	movs	r3, #7
 8000e12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f000 fa86 	bl	8001330 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e24:	bf00      	nop
 8000e26:	37b0      	adds	r7, #176	; 0xb0
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40004400 	.word	0x40004400
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	2036      	movs	r0, #54	; 0x36
 8000e4a:	f000 f9c7 	bl	80011dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e4e:	2036      	movs	r0, #54	; 0x36
 8000e50:	f000 f9e0 	bl	8001214 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <HAL_InitTick+0x9c>)
 8000e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_InitTick+0x9c>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_InitTick+0x9c>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e6c:	f107 0210 	add.w	r2, r7, #16
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fa26 	bl	80022c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e7c:	f001 f9f8 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8000e80:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e84:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <HAL_InitTick+0xa0>)
 8000e86:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8a:	0c9b      	lsrs	r3, r3, #18
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_InitTick+0xa4>)
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <HAL_InitTick+0xa8>)
 8000e94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <HAL_InitTick+0xa4>)
 8000e98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e9c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_InitTick+0xa4>)
 8000ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_InitTick+0xa4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_InitTick+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <HAL_InitTick+0xa4>)
 8000eb2:	f001 ff57 	bl	8002d64 <HAL_TIM_Base_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d104      	bne.n	8000ec6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ebc:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <HAL_InitTick+0xa4>)
 8000ebe:	f001 ffb3 	bl	8002e28 <HAL_TIM_Base_Start_IT>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3730      	adds	r7, #48	; 0x30
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	431bde83 	.word	0x431bde83
 8000ed8:	20001a00 	.word	0x20001a00
 8000edc:	40001000 	.word	0x40001000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <USART2_IRQHandler+0x10>)
 8000f12:	f002 fae7 	bl	80034e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20001970 	.word	0x20001970

08000f20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <TIM6_DAC_IRQHandler+0x10>)
 8000f26:	f001 ffef 	bl	8002f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20001a00 	.word	0x20001a00

08000f34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <SystemInit+0x5c>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3e:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <SystemInit+0x5c>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <SystemInit+0x60>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <SystemInit+0x60>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <SystemInit+0x60>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <SystemInit+0x60>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <SystemInit+0x60>)
 8000f60:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f64:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <SystemInit+0x60>)
 8000f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f70:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <SystemInit+0x60>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <SystemInit+0x60>)
 8000f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SystemInit+0x60>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00
 8000f94:	40021000 	.word	0x40021000

08000f98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f9c:	f7ff ffca 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fa0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fa2:	e003      	b.n	8000fac <LoopCopyDataInit>

08000fa4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fa6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fa8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000faa:	3104      	adds	r1, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fac:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fb4:	d3f6      	bcc.n	8000fa4 <CopyDataInit>
	ldr	r2, =_sbss
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fb8:	e002      	b.n	8000fc0 <LoopFillZerobss>

08000fba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fbc:	f842 3b04 	str.w	r3, [r2], #4

08000fc0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <LoopForever+0x16>)
	cmp	r2, r3
 8000fc2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fc4:	d3f9      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f007 f82b 	bl	8008020 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fca:	f7ff fa85 	bl	80004d8 <main>

08000fce <LoopForever>:

LoopForever:
    b LoopForever
 8000fce:	e7fe      	b.n	8000fce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fd0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000fd4:	08008598 	.word	0x08008598
	ldr	r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fdc:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000fe0:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000fe4:	20001a90 	.word	0x20001a90

08000fe8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC1_2_IRQHandler>
	...

08000fec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_Init+0x3c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_Init+0x3c>)
 8000ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001000:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001002:	2003      	movs	r0, #3
 8001004:	f000 f8df 	bl	80011c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001008:	200f      	movs	r0, #15
 800100a:	f7ff ff13 	bl	8000e34 <HAL_InitTick>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d002      	beq.n	800101a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	e001      	b.n	800101e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101a:	f7ff fe87 	bl	8000d2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800101e:	79fb      	ldrb	r3, [r7, #7]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40022000 	.word	0x40022000

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	20001a4c 	.word	0x20001a4c

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20001a4c 	.word	0x20001a4c

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4907      	ldr	r1, [pc, #28]	; (8001108 <__NVIC_EnableIRQ+0x38>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	; (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ff4c 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ee:	f7ff ff61 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 80011f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	6978      	ldr	r0, [r7, #20]
 80011fa:	f7ff ffb1 	bl	8001160 <NVIC_EncodePriority>
 80011fe:	4602      	mov	r2, r0
 8001200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff80 	bl	800110c <__NVIC_SetPriority>
}
 800120c:	bf00      	nop
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff54 	bl	80010d0 <__NVIC_EnableIRQ>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d008      	beq.n	800125a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2204      	movs	r2, #4
 800124c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e022      	b.n	80012a0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 020e 	bic.w	r2, r2, #14
 8001268:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0201 	bic.w	r2, r2, #1
 8001278:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f003 021c 	and.w	r2, r3, #28
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	2101      	movs	r1, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d005      	beq.n	80012d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2204      	movs	r2, #4
 80012c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e029      	b.n	8001324 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 020e 	bic.w	r2, r2, #14
 80012de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0201 	bic.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f4:	f003 021c 	and.w	r2, r3, #28
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	2101      	movs	r1, #1
 80012fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001302:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	4798      	blx	r3
    }
  }
  return status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133e:	e17f      	b.n	8001640 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2101      	movs	r1, #1
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8171 	beq.w	800163a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d00b      	beq.n	8001378 <HAL_GPIO_Init+0x48>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d007      	beq.n	8001378 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800136c:	2b11      	cmp	r3, #17
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b12      	cmp	r3, #18
 8001376:	d130      	bne.n	80013da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ae:	2201      	movs	r2, #1
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	f003 0201 	and.w	r2, r3, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d118      	bne.n	8001418 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013ec:	2201      	movs	r2, #1
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	08db      	lsrs	r3, r3, #3
 8001402:	f003 0201 	and.w	r2, r3, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x128>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b12      	cmp	r3, #18
 8001456:	d123      	bne.n	80014a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	6939      	ldr	r1, [r7, #16]
 800149c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80ac 	beq.w	800163a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	4b5f      	ldr	r3, [pc, #380]	; (8001660 <HAL_GPIO_Init+0x330>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e6:	4a5e      	ldr	r2, [pc, #376]	; (8001660 <HAL_GPIO_Init+0x330>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6613      	str	r3, [r2, #96]	; 0x60
 80014ee:	4b5c      	ldr	r3, [pc, #368]	; (8001660 <HAL_GPIO_Init+0x330>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014fa:	4a5a      	ldr	r2, [pc, #360]	; (8001664 <HAL_GPIO_Init+0x334>)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001524:	d025      	beq.n	8001572 <HAL_GPIO_Init+0x242>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4f      	ldr	r2, [pc, #316]	; (8001668 <HAL_GPIO_Init+0x338>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d01f      	beq.n	800156e <HAL_GPIO_Init+0x23e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4e      	ldr	r2, [pc, #312]	; (800166c <HAL_GPIO_Init+0x33c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d019      	beq.n	800156a <HAL_GPIO_Init+0x23a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4d      	ldr	r2, [pc, #308]	; (8001670 <HAL_GPIO_Init+0x340>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x236>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4c      	ldr	r2, [pc, #304]	; (8001674 <HAL_GPIO_Init+0x344>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x232>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4b      	ldr	r2, [pc, #300]	; (8001678 <HAL_GPIO_Init+0x348>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x22e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4a      	ldr	r2, [pc, #296]	; (800167c <HAL_GPIO_Init+0x34c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x22a>
 8001556:	2306      	movs	r3, #6
 8001558:	e00c      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800155a:	2307      	movs	r3, #7
 800155c:	e00a      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800155e:	2305      	movs	r3, #5
 8001560:	e008      	b.n	8001574 <HAL_GPIO_Init+0x244>
 8001562:	2304      	movs	r3, #4
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x244>
 8001566:	2303      	movs	r3, #3
 8001568:	e004      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800156a:	2302      	movs	r3, #2
 800156c:	e002      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x244>
 8001572:	2300      	movs	r3, #0
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	f002 0203 	and.w	r2, r2, #3
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	4093      	lsls	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001584:	4937      	ldr	r1, [pc, #220]	; (8001664 <HAL_GPIO_Init+0x334>)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_GPIO_Init+0x350>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015b6:	4a32      	ldr	r2, [pc, #200]	; (8001680 <HAL_GPIO_Init+0x350>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015bc:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_GPIO_Init+0x350>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015e0:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_GPIO_Init+0x350>)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_GPIO_Init+0x350>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800160a:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <HAL_GPIO_Init+0x350>)
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_GPIO_Init+0x350>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001634:	4a12      	ldr	r2, [pc, #72]	; (8001680 <HAL_GPIO_Init+0x350>)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa22 f303 	lsr.w	r3, r2, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	f47f ae78 	bne.w	8001340 <HAL_GPIO_Init+0x10>
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000
 8001668:	48000400 	.word	0x48000400
 800166c:	48000800 	.word	0x48000800
 8001670:	48000c00 	.word	0x48000c00
 8001674:	48001000 	.word	0x48001000
 8001678:	48001400 	.word	0x48001400
 800167c:	48001800 	.word	0x48001800
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
 8001690:	4613      	mov	r3, r2
 8001692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001694:	787b      	ldrb	r3, [r7, #1]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	041a      	lsls	r2, r3, #16
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43d9      	mvns	r1, r3
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	400b      	ands	r3, r1
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <HAL_PWREx_GetVoltageRange+0x18>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40007000 	.word	0x40007000

08001704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001712:	d130      	bne.n	8001776 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800171c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001720:	d038      	beq.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800172a:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001730:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2232      	movs	r2, #50	; 0x32
 8001738:	fb02 f303 	mul.w	r3, r2, r3
 800173c:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	0c9b      	lsrs	r3, r3, #18
 8001744:	3301      	adds	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001748:	e002      	b.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3b01      	subs	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175c:	d102      	bne.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x60>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f2      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001770:	d110      	bne.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e00f      	b.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800177e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001782:	d007      	beq.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800178c:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001792:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40007000 	.word	0x40007000
 80017a8:	20000000 	.word	0x20000000
 80017ac:	431bde83 	.word	0x431bde83

080017b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e3d4      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c2:	4ba1      	ldr	r3, [pc, #644]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017cc:	4b9e      	ldr	r3, [pc, #632]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80e4 	beq.w	80019ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <HAL_RCC_OscConfig+0x4a>
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	f040 808b 	bne.w	8001908 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	f040 8087 	bne.w	8001908 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017fa:	4b93      	ldr	r3, [pc, #588]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_RCC_OscConfig+0x62>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e3ac      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1a      	ldr	r2, [r3, #32]
 8001816:	4b8c      	ldr	r3, [pc, #560]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <HAL_RCC_OscConfig+0x7c>
 8001822:	4b89      	ldr	r3, [pc, #548]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800182a:	e005      	b.n	8001838 <HAL_RCC_OscConfig+0x88>
 800182c:	4b86      	ldr	r3, [pc, #536]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800182e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001838:	4293      	cmp	r3, r2
 800183a:	d223      	bcs.n	8001884 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4618      	mov	r0, r3
 8001842:	f000 fd73 	bl	800232c <RCC_SetFlashLatencyFromMSIRange>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e38d      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001850:	4b7d      	ldr	r3, [pc, #500]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a7c      	ldr	r2, [pc, #496]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b7a      	ldr	r3, [pc, #488]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4977      	ldr	r1, [pc, #476]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800186e:	4b76      	ldr	r3, [pc, #472]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	4972      	ldr	r1, [pc, #456]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
 8001882:	e025      	b.n	80018d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001884:	4b70      	ldr	r3, [pc, #448]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a6f      	ldr	r2, [pc, #444]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b6d      	ldr	r3, [pc, #436]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	496a      	ldr	r1, [pc, #424]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a2:	4b69      	ldr	r3, [pc, #420]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	4965      	ldr	r1, [pc, #404]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d109      	bne.n	80018d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fd33 	bl	800232c <RCC_SetFlashLatencyFromMSIRange>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e34d      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018d0:	f000 fc36 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b5c      	ldr	r3, [pc, #368]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	495a      	ldr	r1, [pc, #360]	; (8001a4c <HAL_RCC_OscConfig+0x29c>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ec:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <HAL_RCC_OscConfig+0x2a0>)
 80018ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018f0:	4b58      	ldr	r3, [pc, #352]	; (8001a54 <HAL_RCC_OscConfig+0x2a4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fa9d 	bl	8000e34 <HAL_InitTick>
 80018fa:	4603      	mov	r3, r0
 80018fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d052      	beq.n	80019aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	e331      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d032      	beq.n	8001976 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001910:	4b4d      	ldr	r3, [pc, #308]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a4c      	ldr	r2, [pc, #304]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800191c:	f7ff fb9a 	bl	8001054 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001924:	f7ff fb96 	bl	8001054 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e31a      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001936:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a40      	ldr	r2, [pc, #256]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	493b      	ldr	r1, [pc, #236]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001960:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	4936      	ldr	r1, [pc, #216]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
 8001974:	e01a      	b.n	80019ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001976:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a33      	ldr	r2, [pc, #204]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001982:	f7ff fb67 	bl	8001054 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800198a:	f7ff fb63 	bl	8001054 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e2e7      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f0      	bne.n	800198a <HAL_RCC_OscConfig+0x1da>
 80019a8:	e000      	b.n	80019ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d074      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x21a>
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2b0c      	cmp	r3, #12
 80019c2:	d10e      	bne.n	80019e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d10b      	bne.n	80019e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d064      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x2f0>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d160      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e2c4      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x24a>
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80019f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	e01d      	b.n	8001a36 <HAL_RCC_OscConfig+0x286>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a02:	d10c      	bne.n	8001a1e <HAL_RCC_OscConfig+0x26e>
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e00b      	b.n	8001a36 <HAL_RCC_OscConfig+0x286>
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d01c      	beq.n	8001a78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fb09 	bl	8001054 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a44:	e011      	b.n	8001a6a <HAL_RCC_OscConfig+0x2ba>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	0800843c 	.word	0x0800843c
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff fafc 	bl	8001054 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e280      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6a:	4baf      	ldr	r3, [pc, #700]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x2a8>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff faec 	bl	8001054 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fae8 	bl	8001054 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e26c      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a92:	4ba5      	ldr	r3, [pc, #660]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x2d0>
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d060      	beq.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x310>
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2b0c      	cmp	r3, #12
 8001ab8:	d119      	bne.n	8001aee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d116      	bne.n	8001aee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac0:	4b99      	ldr	r3, [pc, #612]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x328>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e249      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad8:	4b93      	ldr	r3, [pc, #588]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	061b      	lsls	r3, r3, #24
 8001ae6:	4990      	ldr	r1, [pc, #576]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aec:	e040      	b.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d023      	beq.n	8001b3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af6:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a8b      	ldr	r2, [pc, #556]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7ff faa7 	bl	8001054 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff faa3 	bl	8001054 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e227      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1c:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b7f      	ldr	r3, [pc, #508]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	497c      	ldr	r1, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
 8001b3c:	e018      	b.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	4b7a      	ldr	r3, [pc, #488]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a79      	ldr	r2, [pc, #484]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fa83 	bl	8001054 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b52:	f7ff fa7f 	bl	8001054 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e203      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b64:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d03c      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01c      	beq.n	8001bbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b84:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8a:	4a67      	ldr	r2, [pc, #412]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff fa5e 	bl	8001054 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7ff fa5a 	bl	8001054 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1de      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bae:	4b5e      	ldr	r3, [pc, #376]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0ef      	beq.n	8001b9c <HAL_RCC_OscConfig+0x3ec>
 8001bbc:	e01b      	b.n	8001bf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bbe:	4b5a      	ldr	r3, [pc, #360]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc4:	4a58      	ldr	r2, [pc, #352]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bce:	f7ff fa41 	bl	8001054 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd6:	f7ff fa3d 	bl	8001054 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e1c1      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be8:	4b4f      	ldr	r3, [pc, #316]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1ef      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80a6 	beq.w	8001d50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c08:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10d      	bne.n	8001c30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	4b44      	ldr	r3, [pc, #272]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	4a43      	ldr	r2, [pc, #268]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c20:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c30:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <HAL_RCC_OscConfig+0x57c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d118      	bne.n	8001c6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c3c:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_RCC_OscConfig+0x57c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a3a      	ldr	r2, [pc, #232]	; (8001d2c <HAL_RCC_OscConfig+0x57c>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c48:	f7ff fa04 	bl	8001054 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c50:	f7ff fa00 	bl	8001054 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e184      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c62:	4b32      	ldr	r3, [pc, #200]	; (8001d2c <HAL_RCC_OscConfig+0x57c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d108      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4d8>
 8001c76:	4b2c      	ldr	r3, [pc, #176]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7c:	4a2a      	ldr	r2, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c86:	e024      	b.n	8001cd2 <HAL_RCC_OscConfig+0x522>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d110      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x502>
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c96:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	4a20      	ldr	r2, [pc, #128]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb0:	e00f      	b.n	8001cd2 <HAL_RCC_OscConfig+0x522>
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb8:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc8:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001cca:	f023 0304 	bic.w	r3, r3, #4
 8001cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d016      	beq.n	8001d08 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cda:	f7ff f9bb 	bl	8001054 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7ff f9b7 	bl	8001054 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e139      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0ed      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x532>
 8001d06:	e01a      	b.n	8001d3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7ff f9a4 	bl	8001054 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d0e:	e00f      	b.n	8001d30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d10:	f7ff f9a0 	bl	8001054 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d906      	bls.n	8001d30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e122      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d30:	4b90      	ldr	r3, [pc, #576]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1e8      	bne.n	8001d10 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d3e:	7ffb      	ldrb	r3, [r7, #31]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d44:	4b8b      	ldr	r3, [pc, #556]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	4a8a      	ldr	r2, [pc, #552]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8108 	beq.w	8001f6a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	f040 80d0 	bne.w	8001f04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d64:	4b83      	ldr	r3, [pc, #524]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d130      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	3b01      	subs	r3, #1
 8001d84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d127      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d11f      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001da4:	2a07      	cmp	r2, #7
 8001da6:	bf14      	ite	ne
 8001da8:	2201      	movne	r2, #1
 8001daa:	2200      	moveq	r2, #0
 8001dac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d113      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d109      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d06e      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	d069      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001de0:	4b64      	ldr	r3, [pc, #400]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dec:	4b61      	ldr	r3, [pc, #388]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b7      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dfc:	4b5d      	ldr	r3, [pc, #372]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a5c      	ldr	r2, [pc, #368]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e08:	f7ff f924 	bl	8001054 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff f920 	bl	8001054 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e0a4      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e22:	4b54      	ldr	r3, [pc, #336]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2e:	4b51      	ldr	r3, [pc, #324]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <HAL_RCC_OscConfig+0x7c8>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e3e:	3a01      	subs	r2, #1
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	4311      	orrs	r1, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e48:	0212      	lsls	r2, r2, #8
 8001e4a:	4311      	orrs	r1, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e50:	0852      	lsrs	r2, r2, #1
 8001e52:	3a01      	subs	r2, #1
 8001e54:	0552      	lsls	r2, r2, #21
 8001e56:	4311      	orrs	r1, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e5c:	0852      	lsrs	r2, r2, #1
 8001e5e:	3a01      	subs	r2, #1
 8001e60:	0652      	lsls	r2, r2, #25
 8001e62:	4311      	orrs	r1, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e68:	0912      	lsrs	r2, r2, #4
 8001e6a:	0452      	lsls	r2, r2, #17
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	4941      	ldr	r1, [pc, #260]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e74:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a3e      	ldr	r2, [pc, #248]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e80:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4a3b      	ldr	r2, [pc, #236]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e8c:	f7ff f8e2 	bl	8001054 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff f8de 	bl	8001054 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e062      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea6:	4b33      	ldr	r3, [pc, #204]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb2:	e05a      	b.n	8001f6a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e059      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb8:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d152      	bne.n	8001f6a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a2a      	ldr	r2, [pc, #168]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ece:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ed0:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a27      	ldr	r2, [pc, #156]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001edc:	f7ff f8ba 	bl	8001054 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f8b6 	bl	8001054 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e03a      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x734>
 8001f02:	e032      	b.n	8001f6a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b0c      	cmp	r3, #12
 8001f08:	d02d      	beq.n	8001f66 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f14:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d105      	bne.n	8001f2e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f28:	f023 0303 	bic.w	r3, r3, #3
 8001f2c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7ff f889 	bl	8001054 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff f885 	bl	8001054 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e009      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x796>
 8001f64:	e001      	b.n	8001f6a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	f99d808c 	.word	0xf99d808c

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0c8      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b66      	ldr	r3, [pc, #408]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d910      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b63      	ldr	r3, [pc, #396]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 0207 	bic.w	r2, r3, #7
 8001fa6:	4961      	ldr	r1, [pc, #388]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b5f      	ldr	r3, [pc, #380]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0b0      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d04c      	beq.n	8002066 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd4:	4b56      	ldr	r3, [pc, #344]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d121      	bne.n	8002024 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e09e      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d115      	bne.n	8002024 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e092      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d107      	bne.n	8002014 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002004:	4b4a      	ldr	r3, [pc, #296]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e086      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002014:	4b46      	ldr	r3, [pc, #280]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e07e      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002024:	4b42      	ldr	r3, [pc, #264]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 0203 	bic.w	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	493f      	ldr	r1, [pc, #252]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002036:	f7ff f80d 	bl	8001054 <HAL_GetTick>
 800203a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203c:	e00a      	b.n	8002054 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203e:	f7ff f809 	bl	8001054 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e066      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002054:	4b36      	ldr	r3, [pc, #216]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 020c 	and.w	r2, r3, #12
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	429a      	cmp	r2, r3
 8002064:	d1eb      	bne.n	800203e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d008      	beq.n	8002084 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002072:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	492c      	ldr	r1, [pc, #176]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d210      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b26      	ldr	r3, [pc, #152]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4924      	ldr	r1, [pc, #144]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e036      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4918      	ldr	r1, [pc, #96]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4910      	ldr	r1, [pc, #64]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020f2:	f000 f825 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	490c      	ldr	r1, [pc, #48]	; (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	5ccb      	ldrb	r3, [r1, r3]
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fe8c 	bl	8000e34 <HAL_InitTick>
 800211c:	4603      	mov	r3, r0
 800211e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002120:	7afb      	ldrb	r3, [r7, #11]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40022000 	.word	0x40022000
 8002130:	40021000 	.word	0x40021000
 8002134:	0800843c 	.word	0x0800843c
 8002138:	20000000 	.word	0x20000000
 800213c:	20000004 	.word	0x20000004

08002140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800214e:	4b3e      	ldr	r3, [pc, #248]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002158:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x34>
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b0c      	cmp	r3, #12
 800216c:	d121      	bne.n	80021b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d11e      	bne.n	80021b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002174:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002180:	4b31      	ldr	r3, [pc, #196]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 8002182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	e005      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800219c:	4a2b      	ldr	r2, [pc, #172]	; (800224c <HAL_RCC_GetSysClockFreq+0x10c>)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10d      	bne.n	80021c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d102      	bne.n	80021be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	e004      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <HAL_RCC_GetSysClockFreq+0x114>)
 80021c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	2b0c      	cmp	r3, #12
 80021cc:	d134      	bne.n	8002238 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d003      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d003      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0xac>
 80021e4:	e005      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_RCC_GetSysClockFreq+0x110>)
 80021e8:	617b      	str	r3, [r7, #20]
      break;
 80021ea:	e005      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ee:	617b      	str	r3, [r7, #20]
      break;
 80021f0:	e002      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	617b      	str	r3, [r7, #20]
      break;
 80021f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	3301      	adds	r3, #1
 8002204:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	fb02 f203 	mul.w	r2, r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	0e5b      	lsrs	r3, r3, #25
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	3301      	adds	r3, #1
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002238:	69bb      	ldr	r3, [r7, #24]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3724      	adds	r7, #36	; 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	08008454 	.word	0x08008454
 8002250:	00f42400 	.word	0x00f42400
 8002254:	007a1200 	.word	0x007a1200

08002258 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_RCC_GetHCLKFreq+0x14>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000000 	.word	0x20000000

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002274:	f7ff fff0 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4904      	ldr	r1, [pc, #16]	; (8002298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	0800844c 	.word	0x0800844c

0800229c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022a0:	f7ff ffda 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	0adb      	lsrs	r3, r3, #11
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	4904      	ldr	r1, [pc, #16]	; (80022c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022b2:	5ccb      	ldrb	r3, [r1, r3]
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022bc:	4618      	mov	r0, r3
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	0800844c 	.word	0x0800844c

080022c8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	220f      	movs	r2, #15
 80022d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_RCC_GetClockConfig+0x5c>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0203 	and.w	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_RCC_GetClockConfig+0x5c>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_RCC_GetClockConfig+0x5c>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_RCC_GetClockConfig+0x5c>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	08db      	lsrs	r3, r3, #3
 8002302:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <HAL_RCC_GetClockConfig+0x60>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0207 	and.w	r2, r3, #7
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	601a      	str	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	40022000 	.word	0x40022000

0800232c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002344:	f7ff f9d0 	bl	80016e8 <HAL_PWREx_GetVoltageRange>
 8002348:	6178      	str	r0, [r7, #20]
 800234a:	e014      	b.n	8002376 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002356:	6593      	str	r3, [r2, #88]	; 0x58
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002364:	f7ff f9c0 	bl	80016e8 <HAL_PWREx_GetVoltageRange>
 8002368:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002374:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237c:	d10b      	bne.n	8002396 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b80      	cmp	r3, #128	; 0x80
 8002382:	d919      	bls.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2ba0      	cmp	r3, #160	; 0xa0
 8002388:	d902      	bls.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800238a:	2302      	movs	r3, #2
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	e013      	b.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002390:	2301      	movs	r3, #1
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	e010      	b.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b80      	cmp	r3, #128	; 0x80
 800239a:	d902      	bls.n	80023a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800239c:	2303      	movs	r3, #3
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	e00a      	b.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b80      	cmp	r3, #128	; 0x80
 80023a6:	d102      	bne.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023a8:	2302      	movs	r3, #2
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	e004      	b.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b70      	cmp	r3, #112	; 0x70
 80023b2:	d101      	bne.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023b4:	2301      	movs	r3, #1
 80023b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 0207 	bic.w	r2, r3, #7
 80023c0:	4909      	ldr	r1, [pc, #36]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40022000 	.word	0x40022000

080023ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023f4:	2300      	movs	r3, #0
 80023f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023f8:	2300      	movs	r3, #0
 80023fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002404:	2b00      	cmp	r3, #0
 8002406:	d041      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800240c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002410:	d02a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002412:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002416:	d824      	bhi.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002418:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800241c:	d008      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800241e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002422:	d81e      	bhi.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800242c:	d010      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800242e:	e018      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002430:	4b86      	ldr	r3, [pc, #536]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a85      	ldr	r2, [pc, #532]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800243c:	e015      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3304      	adds	r3, #4
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fabb 	bl	80029c0 <RCCEx_PLLSAI1_Config>
 800244a:	4603      	mov	r3, r0
 800244c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800244e:	e00c      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3320      	adds	r3, #32
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fba6 	bl	8002ba8 <RCCEx_PLLSAI2_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002460:	e003      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	74fb      	strb	r3, [r7, #19]
      break;
 8002466:	e000      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800246a:	7cfb      	ldrb	r3, [r7, #19]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10b      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002470:	4b76      	ldr	r3, [pc, #472]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800247e:	4973      	ldr	r1, [pc, #460]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002486:	e001      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d041      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800249c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024a0:	d02a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024a6:	d824      	bhi.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024ac:	d008      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024b2:	d81e      	bhi.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024bc:	d010      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024be:	e018      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024c0:	4b62      	ldr	r3, [pc, #392]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4a61      	ldr	r2, [pc, #388]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024cc:	e015      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fa73 	bl	80029c0 <RCCEx_PLLSAI1_Config>
 80024da:	4603      	mov	r3, r0
 80024dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024de:	e00c      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3320      	adds	r3, #32
 80024e4:	2100      	movs	r1, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fb5e 	bl	8002ba8 <RCCEx_PLLSAI2_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024f0:	e003      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	74fb      	strb	r3, [r7, #19]
      break;
 80024f6:	e000      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002500:	4b52      	ldr	r3, [pc, #328]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800250e:	494f      	ldr	r1, [pc, #316]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002516:	e001      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80a0 	beq.w	800266a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800253e:	2300      	movs	r3, #0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00d      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	4b41      	ldr	r3, [pc, #260]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	4a40      	ldr	r2, [pc, #256]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254e:	6593      	str	r3, [r2, #88]	; 0x58
 8002550:	4b3e      	ldr	r3, [pc, #248]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255c:	2301      	movs	r3, #1
 800255e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002560:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a3a      	ldr	r2, [pc, #232]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800256c:	f7fe fd72 	bl	8001054 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002572:	e009      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002574:	f7fe fd6e 	bl	8001054 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d902      	bls.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	74fb      	strb	r3, [r7, #19]
        break;
 8002586:	e005      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002588:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ef      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d15c      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01f      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d019      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025b8:	4b24      	ldr	r3, [pc, #144]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025c4:	4b21      	ldr	r3, [pc, #132]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	4a20      	ldr	r2, [pc, #128]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025da:	4a1c      	ldr	r2, [pc, #112]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025e4:	4a19      	ldr	r2, [pc, #100]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d016      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe fd2d 	bl	8001054 <HAL_GetTick>
 80025fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fc:	e00b      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7fe fd29 	bl	8001054 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d902      	bls.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	74fb      	strb	r3, [r7, #19]
            break;
 8002614:	e006      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ec      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263a:	4904      	ldr	r1, [pc, #16]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002642:	e009      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	74bb      	strb	r3, [r7, #18]
 8002648:	e006      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002658:	7c7b      	ldrb	r3, [r7, #17]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d105      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265e:	4b9e      	ldr	r3, [pc, #632]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	4a9d      	ldr	r2, [pc, #628]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002676:	4b98      	ldr	r3, [pc, #608]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267c:	f023 0203 	bic.w	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	4994      	ldr	r1, [pc, #592]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002698:	4b8f      	ldr	r3, [pc, #572]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	f023 020c 	bic.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a6:	498c      	ldr	r1, [pc, #560]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ba:	4b87      	ldr	r3, [pc, #540]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	4983      	ldr	r1, [pc, #524]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026dc:	4b7e      	ldr	r3, [pc, #504]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	497b      	ldr	r1, [pc, #492]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026fe:	4b76      	ldr	r3, [pc, #472]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270c:	4972      	ldr	r1, [pc, #456]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002720:	4b6d      	ldr	r3, [pc, #436]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	496a      	ldr	r1, [pc, #424]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002742:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002748:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	4961      	ldr	r1, [pc, #388]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002764:	4b5c      	ldr	r3, [pc, #368]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002772:	4959      	ldr	r1, [pc, #356]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002786:	4b54      	ldr	r3, [pc, #336]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002794:	4950      	ldr	r1, [pc, #320]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027a8:	4b4b      	ldr	r3, [pc, #300]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	4948      	ldr	r1, [pc, #288]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027ca:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	493f      	ldr	r1, [pc, #252]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d028      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027ec:	4b3a      	ldr	r3, [pc, #232]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fa:	4937      	ldr	r1, [pc, #220]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800280a:	d106      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800280c:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a31      	ldr	r2, [pc, #196]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002816:	60d3      	str	r3, [r2, #12]
 8002818:	e011      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800281e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002822:	d10c      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3304      	adds	r3, #4
 8002828:	2101      	movs	r1, #1
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f8c8 	bl	80029c0 <RCCEx_PLLSAI1_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800283a:	7cfb      	ldrb	r3, [r7, #19]
 800283c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d028      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800284a:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	491f      	ldr	r1, [pc, #124]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002868:	d106      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800286a:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002874:	60d3      	str	r3, [r2, #12]
 8002876:	e011      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002880:	d10c      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3304      	adds	r3, #4
 8002886:	2101      	movs	r1, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f000 f899 	bl	80029c0 <RCCEx_PLLSAI1_Config>
 800288e:	4603      	mov	r3, r0
 8002890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d02b      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b6:	4908      	ldr	r1, [pc, #32]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028c6:	d109      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a02      	ldr	r2, [pc, #8]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028d2:	60d3      	str	r3, [r2, #12]
 80028d4:	e014      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3304      	adds	r3, #4
 80028ea:	2101      	movs	r1, #1
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 f867 	bl	80029c0 <RCCEx_PLLSAI1_Config>
 80028f2:	4603      	mov	r3, r0
 80028f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028f6:	7cfb      	ldrb	r3, [r7, #19]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d02f      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800291a:	4928      	ldr	r1, [pc, #160]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800292a:	d10d      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	2102      	movs	r1, #2
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f844 	bl	80029c0 <RCCEx_PLLSAI1_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d014      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002942:	7cfb      	ldrb	r3, [r7, #19]
 8002944:	74bb      	strb	r3, [r7, #18]
 8002946:	e011      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800294c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002950:	d10c      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3320      	adds	r3, #32
 8002956:	2102      	movs	r1, #2
 8002958:	4618      	mov	r0, r3
 800295a:	f000 f925 	bl	8002ba8 <RCCEx_PLLSAI2_Config>
 800295e:	4603      	mov	r3, r0
 8002960:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002962:	7cfb      	ldrb	r3, [r7, #19]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002978:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002986:	490d      	ldr	r1, [pc, #52]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029aa:	4904      	ldr	r1, [pc, #16]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000

080029c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029ce:	4b75      	ldr	r3, [pc, #468]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d018      	beq.n	8002a0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029da:	4b72      	ldr	r3, [pc, #456]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0203 	and.w	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d10d      	bne.n	8002a06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
       ||
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029f2:	4b6c      	ldr	r3, [pc, #432]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
       ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d047      	beq.n	8002a96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
 8002a0a:	e044      	b.n	8002a96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d018      	beq.n	8002a46 <RCCEx_PLLSAI1_Config+0x86>
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d825      	bhi.n	8002a64 <RCCEx_PLLSAI1_Config+0xa4>
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d002      	beq.n	8002a22 <RCCEx_PLLSAI1_Config+0x62>
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d009      	beq.n	8002a34 <RCCEx_PLLSAI1_Config+0x74>
 8002a20:	e020      	b.n	8002a64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a22:	4b60      	ldr	r3, [pc, #384]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d11d      	bne.n	8002a6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a32:	e01a      	b.n	8002a6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a34:	4b5b      	ldr	r3, [pc, #364]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d116      	bne.n	8002a6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a44:	e013      	b.n	8002a6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a46:	4b57      	ldr	r3, [pc, #348]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a52:	4b54      	ldr	r3, [pc, #336]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a62:	e006      	b.n	8002a72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
      break;
 8002a68:	e004      	b.n	8002a74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e002      	b.n	8002a74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e000      	b.n	8002a74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a72:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10d      	bne.n	8002a96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a7a:	4b4a      	ldr	r3, [pc, #296]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6819      	ldr	r1, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	4944      	ldr	r1, [pc, #272]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d17d      	bne.n	8002b98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a9c:	4b41      	ldr	r3, [pc, #260]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a40      	ldr	r2, [pc, #256]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002aa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa8:	f7fe fad4 	bl	8001054 <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aae:	e009      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ab0:	f7fe fad0 	bl	8001054 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d902      	bls.n	8002ac4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ac2:	e005      	b.n	8002ad0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ac4:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ef      	bne.n	8002ab0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d160      	bne.n	8002b98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d111      	bne.n	8002b00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002adc:	4b31      	ldr	r3, [pc, #196]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6892      	ldr	r2, [r2, #8]
 8002aec:	0211      	lsls	r1, r2, #8
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68d2      	ldr	r2, [r2, #12]
 8002af2:	0912      	lsrs	r2, r2, #4
 8002af4:	0452      	lsls	r2, r2, #17
 8002af6:	430a      	orrs	r2, r1
 8002af8:	492a      	ldr	r1, [pc, #168]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	610b      	str	r3, [r1, #16]
 8002afe:	e027      	b.n	8002b50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d112      	bne.n	8002b2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b06:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6892      	ldr	r2, [r2, #8]
 8002b16:	0211      	lsls	r1, r2, #8
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6912      	ldr	r2, [r2, #16]
 8002b1c:	0852      	lsrs	r2, r2, #1
 8002b1e:	3a01      	subs	r2, #1
 8002b20:	0552      	lsls	r2, r2, #21
 8002b22:	430a      	orrs	r2, r1
 8002b24:	491f      	ldr	r1, [pc, #124]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	610b      	str	r3, [r1, #16]
 8002b2a:	e011      	b.n	8002b50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6892      	ldr	r2, [r2, #8]
 8002b3c:	0211      	lsls	r1, r2, #8
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6952      	ldr	r2, [r2, #20]
 8002b42:	0852      	lsrs	r2, r2, #1
 8002b44:	3a01      	subs	r2, #1
 8002b46:	0652      	lsls	r2, r2, #25
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	4916      	ldr	r1, [pc, #88]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a13      	ldr	r2, [pc, #76]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fe fa7a 	bl	8001054 <HAL_GetTick>
 8002b60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b62:	e009      	b.n	8002b78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b64:	f7fe fa76 	bl	8001054 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d902      	bls.n	8002b78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	73fb      	strb	r3, [r7, #15]
          break;
 8002b76:	e005      	b.n	8002b84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ef      	beq.n	8002b64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	4904      	ldr	r1, [pc, #16]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bb6:	4b6a      	ldr	r3, [pc, #424]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d018      	beq.n	8002bf4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bc2:	4b67      	ldr	r3, [pc, #412]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0203 	and.w	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d10d      	bne.n	8002bee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
       ||
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bda:	4b61      	ldr	r3, [pc, #388]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
       ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d047      	beq.n	8002c7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
 8002bf2:	e044      	b.n	8002c7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d018      	beq.n	8002c2e <RCCEx_PLLSAI2_Config+0x86>
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d825      	bhi.n	8002c4c <RCCEx_PLLSAI2_Config+0xa4>
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d002      	beq.n	8002c0a <RCCEx_PLLSAI2_Config+0x62>
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d009      	beq.n	8002c1c <RCCEx_PLLSAI2_Config+0x74>
 8002c08:	e020      	b.n	8002c4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c0a:	4b55      	ldr	r3, [pc, #340]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d11d      	bne.n	8002c52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1a:	e01a      	b.n	8002c52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c1c:	4b50      	ldr	r3, [pc, #320]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d116      	bne.n	8002c56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2c:	e013      	b.n	8002c56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c2e:	4b4c      	ldr	r3, [pc, #304]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10f      	bne.n	8002c5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c3a:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c4a:	e006      	b.n	8002c5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c50:	e004      	b.n	8002c5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c52:	bf00      	nop
 8002c54:	e002      	b.n	8002c5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c56:	bf00      	nop
 8002c58:	e000      	b.n	8002c5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c62:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	430b      	orrs	r3, r1
 8002c78:	4939      	ldr	r1, [pc, #228]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d167      	bne.n	8002d54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c84:	4b36      	ldr	r3, [pc, #216]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a35      	ldr	r2, [pc, #212]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c90:	f7fe f9e0 	bl	8001054 <HAL_GetTick>
 8002c94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c96:	e009      	b.n	8002cac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c98:	f7fe f9dc 	bl	8001054 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d902      	bls.n	8002cac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	73fb      	strb	r3, [r7, #15]
        break;
 8002caa:	e005      	b.n	8002cb8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cac:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ef      	bne.n	8002c98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d14a      	bne.n	8002d54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d111      	bne.n	8002ce8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cc4:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6892      	ldr	r2, [r2, #8]
 8002cd4:	0211      	lsls	r1, r2, #8
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68d2      	ldr	r2, [r2, #12]
 8002cda:	0912      	lsrs	r2, r2, #4
 8002cdc:	0452      	lsls	r2, r2, #17
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	491f      	ldr	r1, [pc, #124]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	614b      	str	r3, [r1, #20]
 8002ce6:	e011      	b.n	8002d0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6892      	ldr	r2, [r2, #8]
 8002cf8:	0211      	lsls	r1, r2, #8
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6912      	ldr	r2, [r2, #16]
 8002cfe:	0852      	lsrs	r2, r2, #1
 8002d00:	3a01      	subs	r2, #1
 8002d02:	0652      	lsls	r2, r2, #25
 8002d04:	430a      	orrs	r2, r1
 8002d06:	4916      	ldr	r1, [pc, #88]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fe f99c 	bl	8001054 <HAL_GetTick>
 8002d1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d1e:	e009      	b.n	8002d34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d20:	f7fe f998 	bl	8001054 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d902      	bls.n	8002d34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	73fb      	strb	r3, [r7, #15]
          break;
 8002d32:	e005      	b.n	8002d40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ef      	beq.n	8002d20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	4904      	ldr	r1, [pc, #16]	; (8002d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000

08002d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e049      	b.n	8002e0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f841 	bl	8002e12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f000 f9f8 	bl	8003198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d001      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e04f      	b.n	8002ee0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a23      	ldr	r2, [pc, #140]	; (8002eec <HAL_TIM_Base_Start_IT+0xc4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01d      	beq.n	8002e9e <HAL_TIM_Base_Start_IT+0x76>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6a:	d018      	beq.n	8002e9e <HAL_TIM_Base_Start_IT+0x76>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_TIM_Base_Start_IT+0x76>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_TIM_Base_Start_IT+0x76>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_TIM_Base_Start_IT+0x76>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <HAL_TIM_Base_Start_IT+0xd4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_TIM_Base_Start_IT+0x76>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d115      	bne.n	8002eca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	4b17      	ldr	r3, [pc, #92]	; (8002f04 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b06      	cmp	r3, #6
 8002eae:	d015      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0xb4>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb6:	d011      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec8:	e008      	b.n	8002edc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0201 	orr.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e000      	b.n	8002ede <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002edc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000800 	.word	0x40000800
 8002ef8:	40000c00 	.word	0x40000c00
 8002efc:	40013400 	.word	0x40013400
 8002f00:	40014000 	.word	0x40014000
 8002f04:	00010007 	.word	0x00010007

08002f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d122      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d11b      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0202 	mvn.w	r2, #2
 8002f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f905 	bl	800315a <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f8f7 	bl	8003146 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f908 	bl	800316e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d122      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0204 	mvn.w	r2, #4
 8002f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f8db 	bl	800315a <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e005      	b.n	8002fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f8cd 	bl	8003146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f8de 	bl	800316e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d122      	bne.n	800300c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d11b      	bne.n	800300c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0208 	mvn.w	r2, #8
 8002fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f8b1 	bl	800315a <HAL_TIM_IC_CaptureCallback>
 8002ff8:	e005      	b.n	8003006 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f8a3 	bl	8003146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f8b4 	bl	800316e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b10      	cmp	r3, #16
 8003018:	d122      	bne.n	8003060 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b10      	cmp	r3, #16
 8003026:	d11b      	bne.n	8003060 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0210 	mvn.w	r2, #16
 8003030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2208      	movs	r2, #8
 8003036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f887 	bl	800315a <HAL_TIM_IC_CaptureCallback>
 800304c:	e005      	b.n	800305a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f879 	bl	8003146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f88a 	bl	800316e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b01      	cmp	r3, #1
 800306c:	d10e      	bne.n	800308c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b01      	cmp	r3, #1
 800307a:	d107      	bne.n	800308c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0201 	mvn.w	r2, #1
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fe38 	bl	8000cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b80      	cmp	r3, #128	; 0x80
 8003098:	d10e      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a4:	2b80      	cmp	r3, #128	; 0x80
 80030a6:	d107      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f914 	bl	80032e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c6:	d10e      	bne.n	80030e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	2b80      	cmp	r3, #128	; 0x80
 80030d4:	d107      	bne.n	80030e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f907 	bl	80032f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d10e      	bne.n	8003112 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d107      	bne.n	8003112 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800310a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f838 	bl	8003182 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b20      	cmp	r3, #32
 800311e:	d10e      	bne.n	800313e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b20      	cmp	r3, #32
 800312c:	d107      	bne.n	800313e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f06f 0220 	mvn.w	r2, #32
 8003136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f8c7 	bl	80032cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a40      	ldr	r2, [pc, #256]	; (80032ac <TIM_Base_SetConfig+0x114>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d013      	beq.n	80031d8 <TIM_Base_SetConfig+0x40>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b6:	d00f      	beq.n	80031d8 <TIM_Base_SetConfig+0x40>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a3d      	ldr	r2, [pc, #244]	; (80032b0 <TIM_Base_SetConfig+0x118>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00b      	beq.n	80031d8 <TIM_Base_SetConfig+0x40>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a3c      	ldr	r2, [pc, #240]	; (80032b4 <TIM_Base_SetConfig+0x11c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d007      	beq.n	80031d8 <TIM_Base_SetConfig+0x40>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a3b      	ldr	r2, [pc, #236]	; (80032b8 <TIM_Base_SetConfig+0x120>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d003      	beq.n	80031d8 <TIM_Base_SetConfig+0x40>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a3a      	ldr	r2, [pc, #232]	; (80032bc <TIM_Base_SetConfig+0x124>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d108      	bne.n	80031ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2f      	ldr	r2, [pc, #188]	; (80032ac <TIM_Base_SetConfig+0x114>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01f      	beq.n	8003232 <TIM_Base_SetConfig+0x9a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f8:	d01b      	beq.n	8003232 <TIM_Base_SetConfig+0x9a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a2c      	ldr	r2, [pc, #176]	; (80032b0 <TIM_Base_SetConfig+0x118>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d017      	beq.n	8003232 <TIM_Base_SetConfig+0x9a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a2b      	ldr	r2, [pc, #172]	; (80032b4 <TIM_Base_SetConfig+0x11c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d013      	beq.n	8003232 <TIM_Base_SetConfig+0x9a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a2a      	ldr	r2, [pc, #168]	; (80032b8 <TIM_Base_SetConfig+0x120>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00f      	beq.n	8003232 <TIM_Base_SetConfig+0x9a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a29      	ldr	r2, [pc, #164]	; (80032bc <TIM_Base_SetConfig+0x124>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00b      	beq.n	8003232 <TIM_Base_SetConfig+0x9a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a28      	ldr	r2, [pc, #160]	; (80032c0 <TIM_Base_SetConfig+0x128>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <TIM_Base_SetConfig+0x9a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a27      	ldr	r2, [pc, #156]	; (80032c4 <TIM_Base_SetConfig+0x12c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d003      	beq.n	8003232 <TIM_Base_SetConfig+0x9a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a26      	ldr	r2, [pc, #152]	; (80032c8 <TIM_Base_SetConfig+0x130>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d108      	bne.n	8003244 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a10      	ldr	r2, [pc, #64]	; (80032ac <TIM_Base_SetConfig+0x114>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00f      	beq.n	8003290 <TIM_Base_SetConfig+0xf8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a12      	ldr	r2, [pc, #72]	; (80032bc <TIM_Base_SetConfig+0x124>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00b      	beq.n	8003290 <TIM_Base_SetConfig+0xf8>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a11      	ldr	r2, [pc, #68]	; (80032c0 <TIM_Base_SetConfig+0x128>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d007      	beq.n	8003290 <TIM_Base_SetConfig+0xf8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <TIM_Base_SetConfig+0x12c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_Base_SetConfig+0xf8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a0f      	ldr	r2, [pc, #60]	; (80032c8 <TIM_Base_SetConfig+0x130>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d103      	bne.n	8003298 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	615a      	str	r2, [r3, #20]
}
 800329e:	bf00      	nop
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800
 80032b8:	40000c00 	.word	0x40000c00
 80032bc:	40013400 	.word	0x40013400
 80032c0:	40014000 	.word	0x40014000
 80032c4:	40014400 	.word	0x40014400
 80032c8:	40014800 	.word	0x40014800

080032cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e040      	b.n	800339c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fd fd26 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2224      	movs	r2, #36	; 0x24
 8003334:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0201 	bic.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fae4 	bl	8003914 <UART_SetConfig>
 800334c:	4603      	mov	r3, r0
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e022      	b.n	800339c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fd62 	bl	8003e28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fde9 	bl	8003f6c <UART_CheckIdleState>
 800339a:	4603      	mov	r3, r0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d145      	bne.n	8003446 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_UART_Transmit_IT+0x22>
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e03e      	b.n	8003448 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_UART_Transmit_IT+0x34>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e037      	b.n	8003448 <HAL_UART_Transmit_IT+0xa4>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	88fa      	ldrh	r2, [r7, #6]
 80033ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	88fa      	ldrh	r2, [r7, #6]
 80033f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2221      	movs	r2, #33	; 0x21
 8003408:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003412:	d107      	bne.n	8003424 <HAL_UART_Transmit_IT+0x80>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d103      	bne.n	8003424 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a0d      	ldr	r2, [pc, #52]	; (8003454 <HAL_UART_Transmit_IT+0xb0>)
 8003420:	669a      	str	r2, [r3, #104]	; 0x68
 8003422:	e002      	b.n	800342a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <HAL_UART_Transmit_IT+0xb4>)
 8003428:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003440:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	e000      	b.n	8003448 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8003446:	2302      	movs	r3, #2
  }
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	08004307 	.word	0x08004307
 8003458:	08004293 	.word	0x08004293

0800345c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800346e:	2b20      	cmp	r3, #32
 8003470:	d131      	bne.n	80034d6 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_UART_Receive_IT+0x22>
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e02a      	b.n	80034d8 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_UART_Receive_IT+0x34>
 800348c:	2302      	movs	r3, #2
 800348e:	e023      	b.n	80034d8 <HAL_UART_Receive_IT+0x7c>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <HAL_UART_Receive_IT+0x84>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00e      	beq.n	80034c6 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80034c4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	461a      	mov	r2, r3
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 fe13 	bl	80040f8 <UART_Start_Receive_IT>
 80034d2:	4603      	mov	r3, r0
 80034d4:	e000      	b.n	80034d8 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40008000 	.word	0x40008000

080034e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	f640 030f 	movw	r3, #2063	; 0x80f
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d113      	bne.n	800353c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00e      	beq.n	800353c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d009      	beq.n	800353c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 81ce 	beq.w	80038ce <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4798      	blx	r3
      }
      return;
 800353a:	e1c8      	b.n	80038ce <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80e3 	beq.w	800370a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d105      	bne.n	800355a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4ba6      	ldr	r3, [pc, #664]	; (80037ec <HAL_UART_IRQHandler+0x308>)
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80d8 	beq.w	800370a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d010      	beq.n	8003586 <HAL_UART_IRQHandler+0xa2>
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2201      	movs	r2, #1
 8003574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357c:	f043 0201 	orr.w	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d010      	beq.n	80035b2 <HAL_UART_IRQHandler+0xce>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00b      	beq.n	80035b2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2202      	movs	r2, #2
 80035a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a8:	f043 0204 	orr.w	r2, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d010      	beq.n	80035de <HAL_UART_IRQHandler+0xfa>
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2204      	movs	r2, #4
 80035cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d4:	f043 0202 	orr.w	r2, r3, #2
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d015      	beq.n	8003614 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d104      	bne.n	80035fc <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00b      	beq.n	8003614 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2208      	movs	r2, #8
 8003602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360a:	f043 0208 	orr.w	r2, r3, #8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800361a:	2b00      	cmp	r3, #0
 800361c:	d011      	beq.n	8003642 <HAL_UART_IRQHandler+0x15e>
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00c      	beq.n	8003642 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003630:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8142 	beq.w	80038d2 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00c      	beq.n	8003672 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003678:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	d004      	beq.n	8003692 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800368e:	2b00      	cmp	r3, #0
 8003690:	d031      	beq.n	80036f6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fdb8 	bl	8004208 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b40      	cmp	r3, #64	; 0x40
 80036a4:	d123      	bne.n	80036ee <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d013      	beq.n	80036e6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	4a4b      	ldr	r2, [pc, #300]	; (80037f0 <HAL_UART_IRQHandler+0x30c>)
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fd fdee 	bl	80012ac <HAL_DMA_Abort_IT>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d017      	beq.n	8003706 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80036e0:	4610      	mov	r0, r2
 80036e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e4:	e00f      	b.n	8003706 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8fe 	bl	80038e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	e00b      	b.n	8003706 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8fa 	bl	80038e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f4:	e007      	b.n	8003706 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f8f6 	bl	80038e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003704:	e0e5      	b.n	80038d2 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003706:	bf00      	nop
    return;
 8003708:	e0e3      	b.n	80038d2 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370e:	2b01      	cmp	r3, #1
 8003710:	f040 80a9 	bne.w	8003866 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80a3 	beq.w	8003866 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f003 0310 	and.w	r3, r3, #16
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 809d 	beq.w	8003866 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2210      	movs	r2, #16
 8003732:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d158      	bne.n	80037f4 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800374c:	893b      	ldrh	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80c1 	beq.w	80038d6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800375a:	893a      	ldrh	r2, [r7, #8]
 800375c:	429a      	cmp	r2, r3
 800375e:	f080 80ba 	bcs.w	80038d6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	893a      	ldrh	r2, [r7, #8]
 8003766:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b00      	cmp	r3, #0
 8003778:	d12a      	bne.n	80037d0 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003788:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0210 	bic.w	r2, r2, #16
 80037c4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fd fd30 	bl	8001230 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f889 	bl	80038fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037ea:	e074      	b.n	80038d6 <HAL_UART_IRQHandler+0x3f2>
 80037ec:	04000120 	.word	0x04000120
 80037f0:	08004267 	.word	0x08004267
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003800:	b29b      	uxth	r3, r3
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d063      	beq.n	80038da <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003812:	897b      	ldrh	r3, [r7, #10]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d060      	beq.n	80038da <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003826:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0210 	bic.w	r2, r2, #16
 8003858:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800385a:	897b      	ldrh	r3, [r7, #10]
 800385c:	4619      	mov	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f84c 	bl	80038fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003864:	e039      	b.n	80038da <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00d      	beq.n	800388c <HAL_UART_IRQHandler+0x3a8>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003882:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fe6d 	bl	8004564 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800388a:	e029      	b.n	80038e0 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01a      	beq.n	80038de <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
    }
    return;
 80038b0:	e015      	b.n	80038de <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d011      	beq.n	80038e0 <HAL_UART_IRQHandler+0x3fc>
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00c      	beq.n	80038e0 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fd5b 	bl	8004382 <UART_EndTransmit_IT>
    return;
 80038cc:	e008      	b.n	80038e0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80038ce:	bf00      	nop
 80038d0:	e006      	b.n	80038e0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80038d2:	bf00      	nop
 80038d4:	e004      	b.n	80038e0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80038d6:	bf00      	nop
 80038d8:	e002      	b.n	80038e0 <HAL_UART_IRQHandler+0x3fc>
      return;
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <HAL_UART_IRQHandler+0x3fc>
    return;
 80038de:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop

080038e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003914:	b5b0      	push	{r4, r5, r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	4313      	orrs	r3, r2
 8003936:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4bad      	ldr	r3, [pc, #692]	; (8003bf4 <UART_SetConfig+0x2e0>)
 8003940:	4013      	ands	r3, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	69f9      	ldr	r1, [r7, #28]
 8003948:	430b      	orrs	r3, r1
 800394a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4aa2      	ldr	r2, [pc, #648]	; (8003bf8 <UART_SetConfig+0x2e4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	4313      	orrs	r3, r2
 800397a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	430a      	orrs	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a99      	ldr	r2, [pc, #612]	; (8003bfc <UART_SetConfig+0x2e8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d121      	bne.n	80039de <UART_SetConfig+0xca>
 800399a:	4b99      	ldr	r3, [pc, #612]	; (8003c00 <UART_SetConfig+0x2ec>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d817      	bhi.n	80039d8 <UART_SetConfig+0xc4>
 80039a8:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <UART_SetConfig+0x9c>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039c1 	.word	0x080039c1
 80039b4:	080039cd 	.word	0x080039cd
 80039b8:	080039c7 	.word	0x080039c7
 80039bc:	080039d3 	.word	0x080039d3
 80039c0:	2301      	movs	r3, #1
 80039c2:	76fb      	strb	r3, [r7, #27]
 80039c4:	e0e7      	b.n	8003b96 <UART_SetConfig+0x282>
 80039c6:	2302      	movs	r3, #2
 80039c8:	76fb      	strb	r3, [r7, #27]
 80039ca:	e0e4      	b.n	8003b96 <UART_SetConfig+0x282>
 80039cc:	2304      	movs	r3, #4
 80039ce:	76fb      	strb	r3, [r7, #27]
 80039d0:	e0e1      	b.n	8003b96 <UART_SetConfig+0x282>
 80039d2:	2308      	movs	r3, #8
 80039d4:	76fb      	strb	r3, [r7, #27]
 80039d6:	e0de      	b.n	8003b96 <UART_SetConfig+0x282>
 80039d8:	2310      	movs	r3, #16
 80039da:	76fb      	strb	r3, [r7, #27]
 80039dc:	e0db      	b.n	8003b96 <UART_SetConfig+0x282>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a88      	ldr	r2, [pc, #544]	; (8003c04 <UART_SetConfig+0x2f0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d132      	bne.n	8003a4e <UART_SetConfig+0x13a>
 80039e8:	4b85      	ldr	r3, [pc, #532]	; (8003c00 <UART_SetConfig+0x2ec>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d828      	bhi.n	8003a48 <UART_SetConfig+0x134>
 80039f6:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <UART_SetConfig+0xe8>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a31 	.word	0x08003a31
 8003a00:	08003a49 	.word	0x08003a49
 8003a04:	08003a49 	.word	0x08003a49
 8003a08:	08003a49 	.word	0x08003a49
 8003a0c:	08003a3d 	.word	0x08003a3d
 8003a10:	08003a49 	.word	0x08003a49
 8003a14:	08003a49 	.word	0x08003a49
 8003a18:	08003a49 	.word	0x08003a49
 8003a1c:	08003a37 	.word	0x08003a37
 8003a20:	08003a49 	.word	0x08003a49
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003a49 	.word	0x08003a49
 8003a2c:	08003a43 	.word	0x08003a43
 8003a30:	2300      	movs	r3, #0
 8003a32:	76fb      	strb	r3, [r7, #27]
 8003a34:	e0af      	b.n	8003b96 <UART_SetConfig+0x282>
 8003a36:	2302      	movs	r3, #2
 8003a38:	76fb      	strb	r3, [r7, #27]
 8003a3a:	e0ac      	b.n	8003b96 <UART_SetConfig+0x282>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	76fb      	strb	r3, [r7, #27]
 8003a40:	e0a9      	b.n	8003b96 <UART_SetConfig+0x282>
 8003a42:	2308      	movs	r3, #8
 8003a44:	76fb      	strb	r3, [r7, #27]
 8003a46:	e0a6      	b.n	8003b96 <UART_SetConfig+0x282>
 8003a48:	2310      	movs	r3, #16
 8003a4a:	76fb      	strb	r3, [r7, #27]
 8003a4c:	e0a3      	b.n	8003b96 <UART_SetConfig+0x282>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a6d      	ldr	r2, [pc, #436]	; (8003c08 <UART_SetConfig+0x2f4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d120      	bne.n	8003a9a <UART_SetConfig+0x186>
 8003a58:	4b69      	ldr	r3, [pc, #420]	; (8003c00 <UART_SetConfig+0x2ec>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a62:	2b30      	cmp	r3, #48	; 0x30
 8003a64:	d013      	beq.n	8003a8e <UART_SetConfig+0x17a>
 8003a66:	2b30      	cmp	r3, #48	; 0x30
 8003a68:	d814      	bhi.n	8003a94 <UART_SetConfig+0x180>
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d009      	beq.n	8003a82 <UART_SetConfig+0x16e>
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d810      	bhi.n	8003a94 <UART_SetConfig+0x180>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <UART_SetConfig+0x168>
 8003a76:	2b10      	cmp	r3, #16
 8003a78:	d006      	beq.n	8003a88 <UART_SetConfig+0x174>
 8003a7a:	e00b      	b.n	8003a94 <UART_SetConfig+0x180>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	76fb      	strb	r3, [r7, #27]
 8003a80:	e089      	b.n	8003b96 <UART_SetConfig+0x282>
 8003a82:	2302      	movs	r3, #2
 8003a84:	76fb      	strb	r3, [r7, #27]
 8003a86:	e086      	b.n	8003b96 <UART_SetConfig+0x282>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	76fb      	strb	r3, [r7, #27]
 8003a8c:	e083      	b.n	8003b96 <UART_SetConfig+0x282>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	76fb      	strb	r3, [r7, #27]
 8003a92:	e080      	b.n	8003b96 <UART_SetConfig+0x282>
 8003a94:	2310      	movs	r3, #16
 8003a96:	76fb      	strb	r3, [r7, #27]
 8003a98:	e07d      	b.n	8003b96 <UART_SetConfig+0x282>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a5b      	ldr	r2, [pc, #364]	; (8003c0c <UART_SetConfig+0x2f8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d120      	bne.n	8003ae6 <UART_SetConfig+0x1d2>
 8003aa4:	4b56      	ldr	r3, [pc, #344]	; (8003c00 <UART_SetConfig+0x2ec>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003aae:	2bc0      	cmp	r3, #192	; 0xc0
 8003ab0:	d013      	beq.n	8003ada <UART_SetConfig+0x1c6>
 8003ab2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ab4:	d814      	bhi.n	8003ae0 <UART_SetConfig+0x1cc>
 8003ab6:	2b80      	cmp	r3, #128	; 0x80
 8003ab8:	d009      	beq.n	8003ace <UART_SetConfig+0x1ba>
 8003aba:	2b80      	cmp	r3, #128	; 0x80
 8003abc:	d810      	bhi.n	8003ae0 <UART_SetConfig+0x1cc>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <UART_SetConfig+0x1b4>
 8003ac2:	2b40      	cmp	r3, #64	; 0x40
 8003ac4:	d006      	beq.n	8003ad4 <UART_SetConfig+0x1c0>
 8003ac6:	e00b      	b.n	8003ae0 <UART_SetConfig+0x1cc>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	76fb      	strb	r3, [r7, #27]
 8003acc:	e063      	b.n	8003b96 <UART_SetConfig+0x282>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	76fb      	strb	r3, [r7, #27]
 8003ad2:	e060      	b.n	8003b96 <UART_SetConfig+0x282>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	76fb      	strb	r3, [r7, #27]
 8003ad8:	e05d      	b.n	8003b96 <UART_SetConfig+0x282>
 8003ada:	2308      	movs	r3, #8
 8003adc:	76fb      	strb	r3, [r7, #27]
 8003ade:	e05a      	b.n	8003b96 <UART_SetConfig+0x282>
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	76fb      	strb	r3, [r7, #27]
 8003ae4:	e057      	b.n	8003b96 <UART_SetConfig+0x282>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a49      	ldr	r2, [pc, #292]	; (8003c10 <UART_SetConfig+0x2fc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d125      	bne.n	8003b3c <UART_SetConfig+0x228>
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <UART_SetConfig+0x2ec>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003afe:	d017      	beq.n	8003b30 <UART_SetConfig+0x21c>
 8003b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b04:	d817      	bhi.n	8003b36 <UART_SetConfig+0x222>
 8003b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b0a:	d00b      	beq.n	8003b24 <UART_SetConfig+0x210>
 8003b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b10:	d811      	bhi.n	8003b36 <UART_SetConfig+0x222>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <UART_SetConfig+0x20a>
 8003b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1a:	d006      	beq.n	8003b2a <UART_SetConfig+0x216>
 8003b1c:	e00b      	b.n	8003b36 <UART_SetConfig+0x222>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	76fb      	strb	r3, [r7, #27]
 8003b22:	e038      	b.n	8003b96 <UART_SetConfig+0x282>
 8003b24:	2302      	movs	r3, #2
 8003b26:	76fb      	strb	r3, [r7, #27]
 8003b28:	e035      	b.n	8003b96 <UART_SetConfig+0x282>
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	76fb      	strb	r3, [r7, #27]
 8003b2e:	e032      	b.n	8003b96 <UART_SetConfig+0x282>
 8003b30:	2308      	movs	r3, #8
 8003b32:	76fb      	strb	r3, [r7, #27]
 8003b34:	e02f      	b.n	8003b96 <UART_SetConfig+0x282>
 8003b36:	2310      	movs	r3, #16
 8003b38:	76fb      	strb	r3, [r7, #27]
 8003b3a:	e02c      	b.n	8003b96 <UART_SetConfig+0x282>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a2d      	ldr	r2, [pc, #180]	; (8003bf8 <UART_SetConfig+0x2e4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d125      	bne.n	8003b92 <UART_SetConfig+0x27e>
 8003b46:	4b2e      	ldr	r3, [pc, #184]	; (8003c00 <UART_SetConfig+0x2ec>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b54:	d017      	beq.n	8003b86 <UART_SetConfig+0x272>
 8003b56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b5a:	d817      	bhi.n	8003b8c <UART_SetConfig+0x278>
 8003b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b60:	d00b      	beq.n	8003b7a <UART_SetConfig+0x266>
 8003b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b66:	d811      	bhi.n	8003b8c <UART_SetConfig+0x278>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <UART_SetConfig+0x260>
 8003b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b70:	d006      	beq.n	8003b80 <UART_SetConfig+0x26c>
 8003b72:	e00b      	b.n	8003b8c <UART_SetConfig+0x278>
 8003b74:	2300      	movs	r3, #0
 8003b76:	76fb      	strb	r3, [r7, #27]
 8003b78:	e00d      	b.n	8003b96 <UART_SetConfig+0x282>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	76fb      	strb	r3, [r7, #27]
 8003b7e:	e00a      	b.n	8003b96 <UART_SetConfig+0x282>
 8003b80:	2304      	movs	r3, #4
 8003b82:	76fb      	strb	r3, [r7, #27]
 8003b84:	e007      	b.n	8003b96 <UART_SetConfig+0x282>
 8003b86:	2308      	movs	r3, #8
 8003b88:	76fb      	strb	r3, [r7, #27]
 8003b8a:	e004      	b.n	8003b96 <UART_SetConfig+0x282>
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	76fb      	strb	r3, [r7, #27]
 8003b90:	e001      	b.n	8003b96 <UART_SetConfig+0x282>
 8003b92:	2310      	movs	r3, #16
 8003b94:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <UART_SetConfig+0x2e4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	f040 8087 	bne.w	8003cb0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ba2:	7efb      	ldrb	r3, [r7, #27]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d837      	bhi.n	8003c18 <UART_SetConfig+0x304>
 8003ba8:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <UART_SetConfig+0x29c>)
 8003baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bae:	bf00      	nop
 8003bb0:	08003bd5 	.word	0x08003bd5
 8003bb4:	08003c19 	.word	0x08003c19
 8003bb8:	08003bdd 	.word	0x08003bdd
 8003bbc:	08003c19 	.word	0x08003c19
 8003bc0:	08003be3 	.word	0x08003be3
 8003bc4:	08003c19 	.word	0x08003c19
 8003bc8:	08003c19 	.word	0x08003c19
 8003bcc:	08003c19 	.word	0x08003c19
 8003bd0:	08003beb 	.word	0x08003beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd4:	f7fe fb4c 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8003bd8:	6178      	str	r0, [r7, #20]
        break;
 8003bda:	e022      	b.n	8003c22 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <UART_SetConfig+0x300>)
 8003bde:	617b      	str	r3, [r7, #20]
        break;
 8003be0:	e01f      	b.n	8003c22 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003be2:	f7fe faad 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8003be6:	6178      	str	r0, [r7, #20]
        break;
 8003be8:	e01b      	b.n	8003c22 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bee:	617b      	str	r3, [r7, #20]
        break;
 8003bf0:	e017      	b.n	8003c22 <UART_SetConfig+0x30e>
 8003bf2:	bf00      	nop
 8003bf4:	efff69f3 	.word	0xefff69f3
 8003bf8:	40008000 	.word	0x40008000
 8003bfc:	40013800 	.word	0x40013800
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40004400 	.word	0x40004400
 8003c08:	40004800 	.word	0x40004800
 8003c0c:	40004c00 	.word	0x40004c00
 8003c10:	40005000 	.word	0x40005000
 8003c14:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	76bb      	strb	r3, [r7, #26]
        break;
 8003c20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80f1 	beq.w	8003e0c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4413      	add	r3, r2
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d305      	bcc.n	8003c46 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d902      	bls.n	8003c4c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	76bb      	strb	r3, [r7, #26]
 8003c4a:	e0df      	b.n	8003e0c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f04f 0100 	mov.w	r1, #0
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	020b      	lsls	r3, r1, #8
 8003c5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c62:	0202      	lsls	r2, r0, #8
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	6849      	ldr	r1, [r1, #4]
 8003c68:	0849      	lsrs	r1, r1, #1
 8003c6a:	4608      	mov	r0, r1
 8003c6c:	f04f 0100 	mov.w	r1, #0
 8003c70:	1814      	adds	r4, r2, r0
 8003c72:	eb43 0501 	adc.w	r5, r3, r1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	4620      	mov	r0, r4
 8003c82:	4629      	mov	r1, r5
 8003c84:	f7fc faac 	bl	80001e0 <__aeabi_uldivmod>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c96:	d308      	bcc.n	8003caa <UART_SetConfig+0x396>
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c9e:	d204      	bcs.n	8003caa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	60da      	str	r2, [r3, #12]
 8003ca8:	e0b0      	b.n	8003e0c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	76bb      	strb	r3, [r7, #26]
 8003cae:	e0ad      	b.n	8003e0c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb8:	d15c      	bne.n	8003d74 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003cba:	7efb      	ldrb	r3, [r7, #27]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d828      	bhi.n	8003d12 <UART_SetConfig+0x3fe>
 8003cc0:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <UART_SetConfig+0x3b4>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003ced 	.word	0x08003ced
 8003ccc:	08003cf5 	.word	0x08003cf5
 8003cd0:	08003cfd 	.word	0x08003cfd
 8003cd4:	08003d13 	.word	0x08003d13
 8003cd8:	08003d03 	.word	0x08003d03
 8003cdc:	08003d13 	.word	0x08003d13
 8003ce0:	08003d13 	.word	0x08003d13
 8003ce4:	08003d13 	.word	0x08003d13
 8003ce8:	08003d0b 	.word	0x08003d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cec:	f7fe fac0 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8003cf0:	6178      	str	r0, [r7, #20]
        break;
 8003cf2:	e013      	b.n	8003d1c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cf4:	f7fe fad2 	bl	800229c <HAL_RCC_GetPCLK2Freq>
 8003cf8:	6178      	str	r0, [r7, #20]
        break;
 8003cfa:	e00f      	b.n	8003d1c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cfc:	4b49      	ldr	r3, [pc, #292]	; (8003e24 <UART_SetConfig+0x510>)
 8003cfe:	617b      	str	r3, [r7, #20]
        break;
 8003d00:	e00c      	b.n	8003d1c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d02:	f7fe fa1d 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8003d06:	6178      	str	r0, [r7, #20]
        break;
 8003d08:	e008      	b.n	8003d1c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d0e:	617b      	str	r3, [r7, #20]
        break;
 8003d10:	e004      	b.n	8003d1c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	76bb      	strb	r3, [r7, #26]
        break;
 8003d1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d074      	beq.n	8003e0c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	005a      	lsls	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	441a      	add	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b0f      	cmp	r3, #15
 8003d3e:	d916      	bls.n	8003d6e <UART_SetConfig+0x45a>
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d46:	d212      	bcs.n	8003d6e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f023 030f 	bic.w	r3, r3, #15
 8003d50:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	89fb      	ldrh	r3, [r7, #14]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	89fa      	ldrh	r2, [r7, #14]
 8003d6a:	60da      	str	r2, [r3, #12]
 8003d6c:	e04e      	b.n	8003e0c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	76bb      	strb	r3, [r7, #26]
 8003d72:	e04b      	b.n	8003e0c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d74:	7efb      	ldrb	r3, [r7, #27]
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d827      	bhi.n	8003dca <UART_SetConfig+0x4b6>
 8003d7a:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <UART_SetConfig+0x46c>)
 8003d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d80:	08003da5 	.word	0x08003da5
 8003d84:	08003dad 	.word	0x08003dad
 8003d88:	08003db5 	.word	0x08003db5
 8003d8c:	08003dcb 	.word	0x08003dcb
 8003d90:	08003dbb 	.word	0x08003dbb
 8003d94:	08003dcb 	.word	0x08003dcb
 8003d98:	08003dcb 	.word	0x08003dcb
 8003d9c:	08003dcb 	.word	0x08003dcb
 8003da0:	08003dc3 	.word	0x08003dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da4:	f7fe fa64 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8003da8:	6178      	str	r0, [r7, #20]
        break;
 8003daa:	e013      	b.n	8003dd4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dac:	f7fe fa76 	bl	800229c <HAL_RCC_GetPCLK2Freq>
 8003db0:	6178      	str	r0, [r7, #20]
        break;
 8003db2:	e00f      	b.n	8003dd4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db4:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <UART_SetConfig+0x510>)
 8003db6:	617b      	str	r3, [r7, #20]
        break;
 8003db8:	e00c      	b.n	8003dd4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dba:	f7fe f9c1 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8003dbe:	6178      	str	r0, [r7, #20]
        break;
 8003dc0:	e008      	b.n	8003dd4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dc6:	617b      	str	r3, [r7, #20]
        break;
 8003dc8:	e004      	b.n	8003dd4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	76bb      	strb	r3, [r7, #26]
        break;
 8003dd2:	bf00      	nop
    }

    if (pclk != 0U)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d018      	beq.n	8003e0c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	085a      	lsrs	r2, r3, #1
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	441a      	add	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b0f      	cmp	r3, #15
 8003df4:	d908      	bls.n	8003e08 <UART_SetConfig+0x4f4>
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfc:	d204      	bcs.n	8003e08 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	e001      	b.n	8003e0c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e18:	7ebb      	ldrb	r3, [r7, #26]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bdb0      	pop	{r4, r5, r7, pc}
 8003e22:	bf00      	nop
 8003e24:	00f42400 	.word	0x00f42400

08003e28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01a      	beq.n	8003f3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f26:	d10a      	bne.n	8003f3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	605a      	str	r2, [r3, #4]
  }
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f7c:	f7fd f86a 	bl	8001054 <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d10e      	bne.n	8003fae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f82d 	bl	8003ffe <UART_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e023      	b.n	8003ff6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d10e      	bne.n	8003fda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f817 	bl	8003ffe <UART_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e00d      	b.n	8003ff6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b084      	sub	sp, #16
 8004002:	af00      	add	r7, sp, #0
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	4613      	mov	r3, r2
 800400c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400e:	e05e      	b.n	80040ce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004016:	d05a      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004018:	f7fd f81c 	bl	8001054 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	429a      	cmp	r2, r3
 8004026:	d302      	bcc.n	800402e <UART_WaitOnFlagUntilTimeout+0x30>
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d11b      	bne.n	8004066 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800403c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e043      	b.n	80040ee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d02c      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004082:	d124      	bne.n	80040ce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800408c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800409c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0201 	bic.w	r2, r2, #1
 80040ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e00f      	b.n	80040ee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4013      	ands	r3, r2
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	bf0c      	ite	eq
 80040de:	2301      	moveq	r3, #1
 80040e0:	2300      	movne	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d091      	beq.n	8004010 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	88fa      	ldrh	r2, [r7, #6]
 8004110:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412a:	d10e      	bne.n	800414a <UART_Start_Receive_IT+0x52>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <UART_Start_Receive_IT+0x48>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f240 12ff 	movw	r2, #511	; 0x1ff
 800413a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800413e:	e02d      	b.n	800419c <UART_Start_Receive_IT+0xa4>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	22ff      	movs	r2, #255	; 0xff
 8004144:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004148:	e028      	b.n	800419c <UART_Start_Receive_IT+0xa4>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10d      	bne.n	800416e <UART_Start_Receive_IT+0x76>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d104      	bne.n	8004164 <UART_Start_Receive_IT+0x6c>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	22ff      	movs	r2, #255	; 0xff
 800415e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004162:	e01b      	b.n	800419c <UART_Start_Receive_IT+0xa4>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	227f      	movs	r2, #127	; 0x7f
 8004168:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800416c:	e016      	b.n	800419c <UART_Start_Receive_IT+0xa4>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004176:	d10d      	bne.n	8004194 <UART_Start_Receive_IT+0x9c>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d104      	bne.n	800418a <UART_Start_Receive_IT+0x92>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	227f      	movs	r2, #127	; 0x7f
 8004184:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004188:	e008      	b.n	800419c <UART_Start_Receive_IT+0xa4>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	223f      	movs	r2, #63	; 0x3f
 800418e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004192:	e003      	b.n	800419c <UART_Start_Receive_IT+0xa4>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2222      	movs	r2, #34	; 0x22
 80041a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0201 	orr.w	r2, r2, #1
 80041b8:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c2:	d107      	bne.n	80041d4 <UART_Start_Receive_IT+0xdc>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d103      	bne.n	80041d4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4a0c      	ldr	r2, [pc, #48]	; (8004200 <UART_Start_Receive_IT+0x108>)
 80041d0:	665a      	str	r2, [r3, #100]	; 0x64
 80041d2:	e002      	b.n	80041da <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4a0b      	ldr	r2, [pc, #44]	; (8004204 <UART_Start_Receive_IT+0x10c>)
 80041d8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80041f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	0800448d 	.word	0x0800448d
 8004204:	080043b5 	.word	0x080043b5

08004208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800421e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004234:	2b01      	cmp	r3, #1
 8004236:	d107      	bne.n	8004248 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0210 	bic.w	r2, r2, #16
 8004246:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	665a      	str	r2, [r3, #100]	; 0x64
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7ff fb2f 	bl	80038e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800429e:	2b21      	cmp	r3, #33	; 0x21
 80042a0:	d12b      	bne.n	80042fa <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d110      	bne.n	80042d0 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042cc:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80042ce:	e014      	b.n	80042fa <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	b292      	uxth	r2, r2
 80042dc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004312:	2b21      	cmp	r3, #33	; 0x21
 8004314:	d12f      	bne.n	8004376 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d110      	bne.n	8004344 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004330:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004340:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004342:	e018      	b.n	8004376 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004348:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	881a      	ldrh	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004356:	b292      	uxth	r2, r2
 8004358:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	1c9a      	adds	r2, r3, #2
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004376:	bf00      	nop
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004398:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fc fa30 	bl	800080c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ac:	bf00      	nop
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043c2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c8:	2b22      	cmp	r3, #34	; 0x22
 80043ca:	d151      	bne.n	8004470 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80043d2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80043d4:	89bb      	ldrh	r3, [r7, #12]
 80043d6:	b2d9      	uxtb	r1, r3
 80043d8:	89fb      	ldrh	r3, [r7, #14]
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	400a      	ands	r2, r1
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d13a      	bne.n	8004484 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800441c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0201 	bic.w	r2, r2, #1
 800442c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443e:	2b01      	cmp	r3, #1
 8004440:	d10f      	bne.n	8004462 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0210 	bic.w	r2, r2, #16
 8004450:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004458:	4619      	mov	r1, r3
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff fa4e 	bl	80038fc <HAL_UARTEx_RxEventCallback>
 8004460:	e002      	b.n	8004468 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fc f9b0 	bl	80007c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800446e:	e009      	b.n	8004484 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	8b1b      	ldrh	r3, [r3, #24]
 8004476:	b29a      	uxth	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0208 	orr.w	r2, r2, #8
 8004480:	b292      	uxth	r2, r2
 8004482:	831a      	strh	r2, [r3, #24]
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800449a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a0:	2b22      	cmp	r3, #34	; 0x22
 80044a2:	d151      	bne.n	8004548 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044aa:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80044b2:	89ba      	ldrh	r2, [r7, #12]
 80044b4:	89fb      	ldrh	r3, [r7, #14]
 80044b6:	4013      	ands	r3, r2
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	1c9a      	adds	r2, r3, #2
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d13a      	bne.n	800455c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044f4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004516:	2b01      	cmp	r3, #1
 8004518:	d10f      	bne.n	800453a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0210 	bic.w	r2, r2, #16
 8004528:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004530:	4619      	mov	r1, r3
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff f9e2 	bl	80038fc <HAL_UARTEx_RxEventCallback>
 8004538:	e002      	b.n	8004540 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fc f944 	bl	80007c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004546:	e009      	b.n	800455c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	8b1b      	ldrh	r3, [r3, #24]
 800454e:	b29a      	uxth	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0208 	orr.w	r2, r2, #8
 8004558:	b292      	uxth	r2, r2
 800455a:	831a      	strh	r2, [r3, #24]
}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <__NVIC_SetPriority>:
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	6039      	str	r1, [r7, #0]
 8004582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004588:	2b00      	cmp	r3, #0
 800458a:	db0a      	blt.n	80045a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	490c      	ldr	r1, [pc, #48]	; (80045c4 <__NVIC_SetPriority+0x4c>)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	0112      	lsls	r2, r2, #4
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	440b      	add	r3, r1
 800459c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80045a0:	e00a      	b.n	80045b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4908      	ldr	r1, [pc, #32]	; (80045c8 <__NVIC_SetPriority+0x50>)
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	3b04      	subs	r3, #4
 80045b0:	0112      	lsls	r2, r2, #4
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	440b      	add	r3, r1
 80045b6:	761a      	strb	r2, [r3, #24]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	e000e100 	.word	0xe000e100
 80045c8:	e000ed00 	.word	0xe000ed00

080045cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <SysTick_Handler+0x1c>)
 80045d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045d4:	f002 fbb8 	bl	8006d48 <xTaskGetSchedulerState>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d001      	beq.n	80045e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045de:	f003 fa9b 	bl	8007b18 <xPortSysTickHandler>
  }
}
 80045e2:	bf00      	nop
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	e000e010 	.word	0xe000e010

080045ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045f0:	2100      	movs	r1, #0
 80045f2:	f06f 0004 	mvn.w	r0, #4
 80045f6:	f7ff ffbf 	bl	8004578 <__NVIC_SetPriority>
#endif
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004606:	f3ef 8305 	mrs	r3, IPSR
 800460a:	603b      	str	r3, [r7, #0]
  return(result);
 800460c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004612:	f06f 0305 	mvn.w	r3, #5
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	e00c      	b.n	8004634 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800461a:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <osKernelInitialize+0x44>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d105      	bne.n	800462e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <osKernelInitialize+0x44>)
 8004624:	2201      	movs	r2, #1
 8004626:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004628:	2300      	movs	r3, #0
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	e002      	b.n	8004634 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004632:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004634:	687b      	ldr	r3, [r7, #4]
}
 8004636:	4618      	mov	r0, r3
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000090 	.word	0x20000090

08004648 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800464e:	f3ef 8305 	mrs	r3, IPSR
 8004652:	603b      	str	r3, [r7, #0]
  return(result);
 8004654:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <osKernelStart+0x1a>
    stat = osErrorISR;
 800465a:	f06f 0305 	mvn.w	r3, #5
 800465e:	607b      	str	r3, [r7, #4]
 8004660:	e010      	b.n	8004684 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <osKernelStart+0x48>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d109      	bne.n	800467e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800466a:	f7ff ffbf 	bl	80045ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800466e:	4b08      	ldr	r3, [pc, #32]	; (8004690 <osKernelStart+0x48>)
 8004670:	2202      	movs	r2, #2
 8004672:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004674:	f001 ff20 	bl	80064b8 <vTaskStartScheduler>
      stat = osOK;
 8004678:	2300      	movs	r3, #0
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	e002      	b.n	8004684 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800467e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004682:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004684:	687b      	ldr	r3, [r7, #4]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000090 	.word	0x20000090

08004694 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004694:	b580      	push	{r7, lr}
 8004696:	b08e      	sub	sp, #56	; 0x38
 8004698:	af04      	add	r7, sp, #16
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a4:	f3ef 8305 	mrs	r3, IPSR
 80046a8:	617b      	str	r3, [r7, #20]
  return(result);
 80046aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d17e      	bne.n	80047ae <osThreadNew+0x11a>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d07b      	beq.n	80047ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046ba:	2318      	movs	r3, #24
 80046bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d045      	beq.n	800475a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <osThreadNew+0x48>
        name = attr->name;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <osThreadNew+0x6e>
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b38      	cmp	r3, #56	; 0x38
 80046f4:	d805      	bhi.n	8004702 <osThreadNew+0x6e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <osThreadNew+0x72>
        return (NULL);
 8004702:	2300      	movs	r3, #0
 8004704:	e054      	b.n	80047b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	089b      	lsrs	r3, r3, #2
 8004714:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00e      	beq.n	800473c <osThreadNew+0xa8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	2b5b      	cmp	r3, #91	; 0x5b
 8004724:	d90a      	bls.n	800473c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800472a:	2b00      	cmp	r3, #0
 800472c:	d006      	beq.n	800473c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <osThreadNew+0xa8>
        mem = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	e010      	b.n	800475e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10c      	bne.n	800475e <osThreadNew+0xca>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d108      	bne.n	800475e <osThreadNew+0xca>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <osThreadNew+0xca>
          mem = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	e001      	b.n	800475e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d110      	bne.n	8004786 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800476c:	9202      	str	r2, [sp, #8]
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	6a3a      	ldr	r2, [r7, #32]
 8004778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f001 fbc0 	bl	8005f00 <xTaskCreateStatic>
 8004780:	4603      	mov	r3, r0
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	e013      	b.n	80047ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d110      	bne.n	80047ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	b29a      	uxth	r2, r3
 8004790:	f107 0310 	add.w	r3, r7, #16
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f001 fc0b 	bl	8005fba <xTaskCreate>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d001      	beq.n	80047ae <osThreadNew+0x11a>
            hTask = NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047ae:	693b      	ldr	r3, [r7, #16]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3728      	adds	r7, #40	; 0x28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047c4:	f3ef 8305 	mrs	r3, IPSR
 80047c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80047ca:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80047d0:	f06f 0305 	mvn.w	r3, #5
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	e00b      	b.n	80047f0 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d103      	bne.n	80047e6 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80047de:	f06f 0303 	mvn.w	r3, #3
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	e004      	b.n	80047f0 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80047ea:	6938      	ldr	r0, [r7, #16]
 80047ec:	f001 fd5e 	bl	80062ac <vTaskSuspend>
  }

  return (stat);
 80047f0:	697b      	ldr	r3, [r7, #20]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b086      	sub	sp, #24
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004806:	f3ef 8305 	mrs	r3, IPSR
 800480a:	60fb      	str	r3, [r7, #12]
  return(result);
 800480c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <osThreadResume+0x20>
    stat = osErrorISR;
 8004812:	f06f 0305 	mvn.w	r3, #5
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e00b      	b.n	8004832 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d103      	bne.n	8004828 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8004820:	f06f 0303 	mvn.w	r3, #3
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e004      	b.n	8004832 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800482c:	6938      	ldr	r0, [r7, #16]
 800482e:	f001 fde5 	bl	80063fc <vTaskResume>
  }

  return (stat);
 8004832:	697b      	ldr	r3, [r7, #20]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004844:	f3ef 8305 	mrs	r3, IPSR
 8004848:	60bb      	str	r3, [r7, #8]
  return(result);
 800484a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <osDelay+0x1c>
    stat = osErrorISR;
 8004850:	f06f 0305 	mvn.w	r3, #5
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e007      	b.n	8004868 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f001 fcee 	bl	8006244 <vTaskDelay>
    }
  }

  return (stat);
 8004868:	68fb      	ldr	r3, [r7, #12]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004872:	b580      	push	{r7, lr}
 8004874:	b08a      	sub	sp, #40	; 0x28
 8004876:	af02      	add	r7, sp, #8
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800487e:	2300      	movs	r3, #0
 8004880:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004882:	f3ef 8305 	mrs	r3, IPSR
 8004886:	613b      	str	r3, [r7, #16]
  return(result);
 8004888:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800488a:	2b00      	cmp	r3, #0
 800488c:	d175      	bne.n	800497a <osSemaphoreNew+0x108>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d072      	beq.n	800497a <osSemaphoreNew+0x108>
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	429a      	cmp	r2, r3
 800489a:	d86e      	bhi.n	800497a <osSemaphoreNew+0x108>
    mem = -1;
 800489c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d015      	beq.n	80048d4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d006      	beq.n	80048be <osSemaphoreNew+0x4c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	2b4f      	cmp	r3, #79	; 0x4f
 80048b6:	d902      	bls.n	80048be <osSemaphoreNew+0x4c>
        mem = 1;
 80048b8:	2301      	movs	r3, #1
 80048ba:	61bb      	str	r3, [r7, #24]
 80048bc:	e00c      	b.n	80048d8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d108      	bne.n	80048d8 <osSemaphoreNew+0x66>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d104      	bne.n	80048d8 <osSemaphoreNew+0x66>
          mem = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	e001      	b.n	80048d8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048de:	d04c      	beq.n	800497a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d128      	bne.n	8004938 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d10a      	bne.n	8004902 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2203      	movs	r2, #3
 80048f2:	9200      	str	r2, [sp, #0]
 80048f4:	2200      	movs	r2, #0
 80048f6:	2100      	movs	r1, #0
 80048f8:	2001      	movs	r0, #1
 80048fa:	f000 fb5b 	bl	8004fb4 <xQueueGenericCreateStatic>
 80048fe:	61f8      	str	r0, [r7, #28]
 8004900:	e005      	b.n	800490e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004902:	2203      	movs	r2, #3
 8004904:	2100      	movs	r1, #0
 8004906:	2001      	movs	r0, #1
 8004908:	f000 fbcc 	bl	80050a4 <xQueueGenericCreate>
 800490c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d022      	beq.n	800495a <osSemaphoreNew+0xe8>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d01f      	beq.n	800495a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800491a:	2300      	movs	r3, #0
 800491c:	2200      	movs	r2, #0
 800491e:	2100      	movs	r1, #0
 8004920:	69f8      	ldr	r0, [r7, #28]
 8004922:	f000 fc87 	bl	8005234 <xQueueGenericSend>
 8004926:	4603      	mov	r3, r0
 8004928:	2b01      	cmp	r3, #1
 800492a:	d016      	beq.n	800495a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800492c:	69f8      	ldr	r0, [r7, #28]
 800492e:	f001 f913 	bl	8005b58 <vQueueDelete>
            hSemaphore = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	e010      	b.n	800495a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d108      	bne.n	8004950 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	461a      	mov	r2, r3
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fc09 	bl	800515e <xQueueCreateCountingSemaphoreStatic>
 800494c:	61f8      	str	r0, [r7, #28]
 800494e:	e004      	b.n	800495a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 fc3a 	bl	80051cc <xQueueCreateCountingSemaphore>
 8004958:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00c      	beq.n	800497a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <osSemaphoreNew+0xfc>
          name = attr->name;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	e001      	b.n	8004972 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004972:	6979      	ldr	r1, [r7, #20]
 8004974:	69f8      	ldr	r0, [r7, #28]
 8004976:	f001 fa3b 	bl	8005df0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800497a:	69fb      	ldr	r3, [r7, #28]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3720      	adds	r7, #32
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d103      	bne.n	80049a4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800499c:	f06f 0303 	mvn.w	r3, #3
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e039      	b.n	8004a18 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049a4:	f3ef 8305 	mrs	r3, IPSR
 80049a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80049aa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d022      	beq.n	80049f6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80049b6:	f06f 0303 	mvn.w	r3, #3
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	e02c      	b.n	8004a18 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80049be:	2300      	movs	r3, #0
 80049c0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80049c2:	f107 0308 	add.w	r3, r7, #8
 80049c6:	461a      	mov	r2, r3
 80049c8:	2100      	movs	r1, #0
 80049ca:	6938      	ldr	r0, [r7, #16]
 80049cc:	f001 f844 	bl	8005a58 <xQueueReceiveFromISR>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d003      	beq.n	80049de <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80049d6:	f06f 0302 	mvn.w	r3, #2
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e01c      	b.n	8004a18 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d019      	beq.n	8004a18 <osSemaphoreAcquire+0x94>
 80049e4:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <osSemaphoreAcquire+0xa0>)
 80049e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	e010      	b.n	8004a18 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80049f6:	6839      	ldr	r1, [r7, #0]
 80049f8:	6938      	ldr	r0, [r7, #16]
 80049fa:	f000 ff21 	bl	8005840 <xQueueSemaphoreTake>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d009      	beq.n	8004a18 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004a0a:	f06f 0301 	mvn.w	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e002      	b.n	8004a18 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004a12:	f06f 0302 	mvn.w	r3, #2
 8004a16:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004a18:	697b      	ldr	r3, [r7, #20]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	e000ed04 	.word	0xe000ed04

08004a28 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d103      	bne.n	8004a46 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004a3e:	f06f 0303 	mvn.w	r3, #3
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	e02c      	b.n	8004aa0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a46:	f3ef 8305 	mrs	r3, IPSR
 8004a4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01a      	beq.n	8004a88 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004a56:	f107 0308 	add.w	r3, r7, #8
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6938      	ldr	r0, [r7, #16]
 8004a5e:	f000 fd82 	bl	8005566 <xQueueGiveFromISR>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d003      	beq.n	8004a70 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004a68:	f06f 0302 	mvn.w	r3, #2
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e017      	b.n	8004aa0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d014      	beq.n	8004aa0 <osSemaphoreRelease+0x78>
 8004a76:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <osSemaphoreRelease+0x84>)
 8004a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	e00b      	b.n	8004aa0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004a88:	2300      	movs	r3, #0
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	6938      	ldr	r0, [r7, #16]
 8004a90:	f000 fbd0 	bl	8005234 <xQueueGenericSend>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d002      	beq.n	8004aa0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004a9a:	f06f 0302 	mvn.w	r3, #2
 8004a9e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004aa0:	697b      	ldr	r3, [r7, #20]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	; 0x28
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ac0:	f3ef 8305 	mrs	r3, IPSR
 8004ac4:	613b      	str	r3, [r7, #16]
  return(result);
 8004ac6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d15f      	bne.n	8004b8c <osMessageQueueNew+0xdc>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d05c      	beq.n	8004b8c <osMessageQueueNew+0xdc>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d059      	beq.n	8004b8c <osMessageQueueNew+0xdc>
    mem = -1;
 8004ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004adc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d029      	beq.n	8004b38 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d012      	beq.n	8004b12 <osMessageQueueNew+0x62>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b4f      	cmp	r3, #79	; 0x4f
 8004af2:	d90e      	bls.n	8004b12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695a      	ldr	r2, [r3, #20]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d302      	bcc.n	8004b12 <osMessageQueueNew+0x62>
        mem = 1;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	61bb      	str	r3, [r7, #24]
 8004b10:	e014      	b.n	8004b3c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d110      	bne.n	8004b3c <osMessageQueueNew+0x8c>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10c      	bne.n	8004b3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d108      	bne.n	8004b3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d104      	bne.n	8004b3c <osMessageQueueNew+0x8c>
          mem = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	e001      	b.n	8004b3c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d10b      	bne.n	8004b5a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	9100      	str	r1, [sp, #0]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fa2f 	bl	8004fb4 <xQueueGenericCreateStatic>
 8004b56:	61f8      	str	r0, [r7, #28]
 8004b58:	e008      	b.n	8004b6c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d105      	bne.n	8004b6c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004b60:	2200      	movs	r2, #0
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 fa9d 	bl	80050a4 <xQueueGenericCreate>
 8004b6a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00c      	beq.n	8004b8c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	e001      	b.n	8004b84 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004b84:	6979      	ldr	r1, [r7, #20]
 8004b86:	69f8      	ldr	r0, [r7, #28]
 8004b88:	f001 f932 	bl	8005df0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004b8c:	69fb      	ldr	r3, [r7, #28]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bb0:	f3ef 8305 	mrs	r3, IPSR
 8004bb4:	617b      	str	r3, [r7, #20]
  return(result);
 8004bb6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d028      	beq.n	8004c0e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <osMessageQueuePut+0x36>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <osMessageQueuePut+0x36>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004bce:	f06f 0303 	mvn.w	r3, #3
 8004bd2:	61fb      	str	r3, [r7, #28]
 8004bd4:	e038      	b.n	8004c48 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004bda:	f107 0210 	add.w	r2, r7, #16
 8004bde:	2300      	movs	r3, #0
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	69b8      	ldr	r0, [r7, #24]
 8004be4:	f000 fc24 	bl	8005430 <xQueueGenericSendFromISR>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d003      	beq.n	8004bf6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004bee:	f06f 0302 	mvn.w	r3, #2
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	e028      	b.n	8004c48 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d025      	beq.n	8004c48 <osMessageQueuePut+0xb0>
 8004bfc:	4b15      	ldr	r3, [pc, #84]	; (8004c54 <osMessageQueuePut+0xbc>)
 8004bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	e01c      	b.n	8004c48 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <osMessageQueuePut+0x82>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d103      	bne.n	8004c22 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004c1a:	f06f 0303 	mvn.w	r3, #3
 8004c1e:	61fb      	str	r3, [r7, #28]
 8004c20:	e012      	b.n	8004c48 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004c22:	2300      	movs	r3, #0
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	69b8      	ldr	r0, [r7, #24]
 8004c2a:	f000 fb03 	bl	8005234 <xQueueGenericSend>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d009      	beq.n	8004c48 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004c3a:	f06f 0301 	mvn.w	r3, #1
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e002      	b.n	8004c48 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004c42:	f06f 0302 	mvn.w	r3, #2
 8004c46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004c48:	69fb      	ldr	r3, [r7, #28]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c6e:	f3ef 8305 	mrs	r3, IPSR
 8004c72:	617b      	str	r3, [r7, #20]
  return(result);
 8004c74:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d028      	beq.n	8004ccc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <osMessageQueueGet+0x34>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <osMessageQueueGet+0x34>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004c8c:	f06f 0303 	mvn.w	r3, #3
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	e037      	b.n	8004d04 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004c94:	2300      	movs	r3, #0
 8004c96:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004c98:	f107 0310 	add.w	r3, r7, #16
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	69b8      	ldr	r0, [r7, #24]
 8004ca2:	f000 fed9 	bl	8005a58 <xQueueReceiveFromISR>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d003      	beq.n	8004cb4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004cac:	f06f 0302 	mvn.w	r3, #2
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	e027      	b.n	8004d04 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d024      	beq.n	8004d04 <osMessageQueueGet+0xac>
 8004cba:	4b15      	ldr	r3, [pc, #84]	; (8004d10 <osMessageQueueGet+0xb8>)
 8004cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	e01b      	b.n	8004d04 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <osMessageQueueGet+0x80>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d103      	bne.n	8004ce0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004cd8:	f06f 0303 	mvn.w	r3, #3
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	e011      	b.n	8004d04 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	69b8      	ldr	r0, [r7, #24]
 8004ce6:	f000 fccb 	bl	8005680 <xQueueReceive>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d009      	beq.n	8004d04 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004cf6:	f06f 0301 	mvn.w	r3, #1
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	e002      	b.n	8004d04 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004cfe:	f06f 0302 	mvn.w	r3, #2
 8004d02:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004d04:	69fb      	ldr	r3, [r7, #28]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3720      	adds	r7, #32
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	e000ed04 	.word	0xe000ed04

08004d14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4a07      	ldr	r2, [pc, #28]	; (8004d40 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4a06      	ldr	r2, [pc, #24]	; (8004d44 <vApplicationGetIdleTaskMemory+0x30>)
 8004d2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2280      	movs	r2, #128	; 0x80
 8004d30:	601a      	str	r2, [r3, #0]
}
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20000094 	.word	0x20000094
 8004d44:	200000f0 	.word	0x200000f0

08004d48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <vApplicationGetTimerTaskMemory+0x2c>)
 8004d58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	4a06      	ldr	r2, [pc, #24]	; (8004d78 <vApplicationGetTimerTaskMemory+0x30>)
 8004d5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d66:	601a      	str	r2, [r3, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	200002f0 	.word	0x200002f0
 8004d78:	2000034c 	.word	0x2000034c

08004d7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f103 0208 	add.w	r2, r3, #8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f103 0208 	add.w	r2, r3, #8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f103 0208 	add.w	r2, r3, #8
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	601a      	str	r2, [r3, #0]
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e34:	d103      	bne.n	8004e3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e00c      	b.n	8004e58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3308      	adds	r3, #8
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	e002      	b.n	8004e4c <vListInsert+0x2e>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d2f6      	bcs.n	8004e46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	601a      	str	r2, [r3, #0]
}
 8004e84:	bf00      	nop
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6892      	ldr	r2, [r2, #8]
 8004ea6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6852      	ldr	r2, [r2, #4]
 8004eb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d103      	bne.n	8004ec4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	1e5a      	subs	r2, r3, #1
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f0a:	bf00      	nop
 8004f0c:	e7fe      	b.n	8004f0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004f0e:	f002 fd71 	bl	80079f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f1e:	fb01 f303 	mul.w	r3, r1, r3
 8004f22:	441a      	add	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	68f9      	ldr	r1, [r7, #12]
 8004f42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	441a      	add	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	22ff      	movs	r2, #255	; 0xff
 8004f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	22ff      	movs	r2, #255	; 0xff
 8004f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d114      	bne.n	8004f8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01a      	beq.n	8004fa2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3310      	adds	r3, #16
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 fd2b 	bl	80069cc <xTaskRemoveFromEventList>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d012      	beq.n	8004fa2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <xQueueGenericReset+0xcc>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	e009      	b.n	8004fa2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3310      	adds	r3, #16
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fef2 	bl	8004d7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3324      	adds	r3, #36	; 0x24
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff feed 	bl	8004d7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004fa2:	f002 fd57 	bl	8007a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004fa6:	2301      	movs	r3, #1
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	e000ed04 	.word	0xe000ed04

08004fb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08e      	sub	sp, #56	; 0x38
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <xQueueGenericCreateStatic+0x52>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <xQueueGenericCreateStatic+0x56>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <xQueueGenericCreateStatic+0x58>
 800500a:	2300      	movs	r3, #0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	623b      	str	r3, [r7, #32]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d102      	bne.n	8005032 <xQueueGenericCreateStatic+0x7e>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <xQueueGenericCreateStatic+0x82>
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <xQueueGenericCreateStatic+0x84>
 8005036:	2300      	movs	r3, #0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	61fb      	str	r3, [r7, #28]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005052:	2350      	movs	r3, #80	; 0x50
 8005054:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b50      	cmp	r3, #80	; 0x50
 800505a:	d00a      	beq.n	8005072 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	61bb      	str	r3, [r7, #24]
}
 800506e:	bf00      	nop
 8005070:	e7fe      	b.n	8005070 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005072:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00d      	beq.n	800509a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005086:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	4613      	mov	r3, r2
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f83f 	bl	8005118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800509c:	4618      	mov	r0, r3
 800509e:	3730      	adds	r7, #48	; 0x30
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08a      	sub	sp, #40	; 0x28
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	613b      	str	r3, [r7, #16]
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	fb02 f303 	mul.w	r3, r2, r3
 80050d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	3350      	adds	r3, #80	; 0x50
 80050dc:	4618      	mov	r0, r3
 80050de:	f002 fdab 	bl	8007c38 <pvPortMalloc>
 80050e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d011      	beq.n	800510e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	3350      	adds	r3, #80	; 0x50
 80050f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050fc:	79fa      	ldrb	r2, [r7, #7]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	4613      	mov	r3, r2
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f805 	bl	8005118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800510e:	69bb      	ldr	r3, [r7, #24]
	}
 8005110:	4618      	mov	r0, r3
 8005112:	3720      	adds	r7, #32
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d103      	bne.n	8005134 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	e002      	b.n	800513a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005146:	2101      	movs	r1, #1
 8005148:	69b8      	ldr	r0, [r7, #24]
 800514a:	f7ff fecb 	bl	8004ee4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	78fa      	ldrb	r2, [r7, #3]
 8005152:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005156:	bf00      	nop
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800515e:	b580      	push	{r7, lr}
 8005160:	b08a      	sub	sp, #40	; 0x28
 8005162:	af02      	add	r7, sp, #8
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	61bb      	str	r3, [r7, #24]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	429a      	cmp	r2, r3
 800518c:	d90a      	bls.n	80051a4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	617b      	str	r3, [r7, #20]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80051a4:	2302      	movs	r3, #2
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	2100      	movs	r1, #0
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff ff00 	bl	8004fb4 <xQueueGenericCreateStatic>
 80051b4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80051c2:	69fb      	ldr	r3, [r7, #28]
	}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3720      	adds	r7, #32
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	613b      	str	r3, [r7, #16]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d90a      	bls.n	8005210 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	60fb      	str	r3, [r7, #12]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005210:	2202      	movs	r2, #2
 8005212:	2100      	movs	r1, #0
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff ff45 	bl	80050a4 <xQueueGenericCreate>
 800521a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005228:	697b      	ldr	r3, [r7, #20]
	}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08e      	sub	sp, #56	; 0x38
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005242:	2300      	movs	r3, #0
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <xQueueGenericSend+0x32>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d103      	bne.n	8005274 <xQueueGenericSend+0x40>
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <xQueueGenericSend+0x44>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <xQueueGenericSend+0x46>
 8005278:	2300      	movs	r3, #0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <xQueueGenericSend+0x60>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d103      	bne.n	80052a2 <xQueueGenericSend+0x6e>
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <xQueueGenericSend+0x72>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <xQueueGenericSend+0x74>
 80052a6:	2300      	movs	r3, #0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	623b      	str	r3, [r7, #32]
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052c2:	f001 fd41 	bl	8006d48 <xTaskGetSchedulerState>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <xQueueGenericSend+0x9e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <xQueueGenericSend+0xa2>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <xQueueGenericSend+0xa4>
 80052d6:	2300      	movs	r3, #0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	61fb      	str	r3, [r7, #28]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052f2:	f002 fb7f 	bl	80079f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <xQueueGenericSend+0xd4>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b02      	cmp	r3, #2
 8005306:	d129      	bne.n	800535c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800530e:	f000 fc5e 	bl	8005bce <prvCopyDataToQueue>
 8005312:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	d010      	beq.n	800533e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	3324      	adds	r3, #36	; 0x24
 8005320:	4618      	mov	r0, r3
 8005322:	f001 fb53 	bl	80069cc <xTaskRemoveFromEventList>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d013      	beq.n	8005354 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800532c:	4b3f      	ldr	r3, [pc, #252]	; (800542c <xQueueGenericSend+0x1f8>)
 800532e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	e00a      	b.n	8005354 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005344:	4b39      	ldr	r3, [pc, #228]	; (800542c <xQueueGenericSend+0x1f8>)
 8005346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005354:	f002 fb7e 	bl	8007a54 <vPortExitCritical>
				return pdPASS;
 8005358:	2301      	movs	r3, #1
 800535a:	e063      	b.n	8005424 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d103      	bne.n	800536a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005362:	f002 fb77 	bl	8007a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005366:	2300      	movs	r3, #0
 8005368:	e05c      	b.n	8005424 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005370:	f107 0314 	add.w	r3, r7, #20
 8005374:	4618      	mov	r0, r3
 8005376:	f001 fb8d 	bl	8006a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800537a:	2301      	movs	r3, #1
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800537e:	f002 fb69 	bl	8007a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005382:	f001 f8ff 	bl	8006584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005386:	f002 fb35 	bl	80079f4 <vPortEnterCritical>
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005390:	b25b      	sxtb	r3, r3
 8005392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005396:	d103      	bne.n	80053a0 <xQueueGenericSend+0x16c>
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053a6:	b25b      	sxtb	r3, r3
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ac:	d103      	bne.n	80053b6 <xQueueGenericSend+0x182>
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053b6:	f002 fb4d 	bl	8007a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053ba:	1d3a      	adds	r2, r7, #4
 80053bc:	f107 0314 	add.w	r3, r7, #20
 80053c0:	4611      	mov	r1, r2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f001 fb7c 	bl	8006ac0 <xTaskCheckForTimeOut>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d124      	bne.n	8005418 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053d0:	f000 fcf5 	bl	8005dbe <prvIsQueueFull>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d018      	beq.n	800540c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	3310      	adds	r3, #16
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	4611      	mov	r1, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 faa2 	bl	800692c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053ea:	f000 fc80 	bl	8005cee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053ee:	f001 f8d7 	bl	80065a0 <xTaskResumeAll>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f47f af7c 	bne.w	80052f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80053fa:	4b0c      	ldr	r3, [pc, #48]	; (800542c <xQueueGenericSend+0x1f8>)
 80053fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	e772      	b.n	80052f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800540c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800540e:	f000 fc6e 	bl	8005cee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005412:	f001 f8c5 	bl	80065a0 <xTaskResumeAll>
 8005416:	e76c      	b.n	80052f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800541a:	f000 fc68 	bl	8005cee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800541e:	f001 f8bf 	bl	80065a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005422:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005424:	4618      	mov	r0, r3
 8005426:	3738      	adds	r7, #56	; 0x38
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	e000ed04 	.word	0xe000ed04

08005430 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b090      	sub	sp, #64	; 0x40
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d103      	bne.n	800546c <xQueueGenericSendFromISR+0x3c>
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <xQueueGenericSendFromISR+0x40>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <xQueueGenericSendFromISR+0x42>
 8005470:	2300      	movs	r3, #0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d103      	bne.n	800549a <xQueueGenericSendFromISR+0x6a>
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <xQueueGenericSendFromISR+0x6e>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <xQueueGenericSendFromISR+0x70>
 800549e:	2300      	movs	r3, #0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	623b      	str	r3, [r7, #32]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054ba:	f002 fb7d 	bl	8007bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054be:	f3ef 8211 	mrs	r2, BASEPRI
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	61fa      	str	r2, [r7, #28]
 80054d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80054d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d302      	bcc.n	80054ec <xQueueGenericSendFromISR+0xbc>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d12f      	bne.n	800554c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005502:	f000 fb64 	bl	8005bce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005506:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800550e:	d112      	bne.n	8005536 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	d016      	beq.n	8005546 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	3324      	adds	r3, #36	; 0x24
 800551c:	4618      	mov	r0, r3
 800551e:	f001 fa55 	bl	80069cc <xTaskRemoveFromEventList>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00e      	beq.n	8005546 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00b      	beq.n	8005546 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e007      	b.n	8005546 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005536:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800553a:	3301      	adds	r3, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	b25a      	sxtb	r2, r3
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005546:	2301      	movs	r3, #1
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800554a:	e001      	b.n	8005550 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800554c:	2300      	movs	r3, #0
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005552:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800555a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800555c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800555e:	4618      	mov	r0, r3
 8005560:	3740      	adds	r7, #64	; 0x40
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b08e      	sub	sp, #56	; 0x38
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	623b      	str	r3, [r7, #32]
}
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <xQueueGiveFromISR+0x48>
	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	61fb      	str	r3, [r7, #28]
}
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d103      	bne.n	80055be <xQueueGiveFromISR+0x58>
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <xQueueGiveFromISR+0x5c>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <xQueueGiveFromISR+0x5e>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <xQueueGiveFromISR+0x78>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	61bb      	str	r3, [r7, #24]
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055de:	f002 faeb 	bl	8007bb8 <vPortValidateInterruptPriority>
	__asm volatile
 80055e2:	f3ef 8211 	mrs	r2, BASEPRI
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	617a      	str	r2, [r7, #20]
 80055f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80055fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800560a:	429a      	cmp	r2, r3
 800560c:	d22b      	bcs.n	8005666 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005620:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005628:	d112      	bne.n	8005650 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	2b00      	cmp	r3, #0
 8005630:	d016      	beq.n	8005660 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	3324      	adds	r3, #36	; 0x24
 8005636:	4618      	mov	r0, r3
 8005638:	f001 f9c8 	bl	80069cc <xTaskRemoveFromEventList>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00e      	beq.n	8005660 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00b      	beq.n	8005660 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2201      	movs	r2, #1
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e007      	b.n	8005660 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005654:	3301      	adds	r3, #1
 8005656:	b2db      	uxtb	r3, r3
 8005658:	b25a      	sxtb	r2, r3
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005660:	2301      	movs	r3, #1
 8005662:	637b      	str	r3, [r7, #52]	; 0x34
 8005664:	e001      	b.n	800566a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005666:	2300      	movs	r3, #0
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f383 8811 	msr	BASEPRI, r3
}
 8005674:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005678:	4618      	mov	r0, r3
 800567a:	3738      	adds	r7, #56	; 0x38
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08c      	sub	sp, #48	; 0x30
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800568c:	2300      	movs	r3, #0
 800568e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <xQueueReceive+0x30>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	623b      	str	r3, [r7, #32]
}
 80056ac:	bf00      	nop
 80056ae:	e7fe      	b.n	80056ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d103      	bne.n	80056be <xQueueReceive+0x3e>
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <xQueueReceive+0x42>
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <xQueueReceive+0x44>
 80056c2:	2300      	movs	r3, #0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10a      	bne.n	80056de <xQueueReceive+0x5e>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	61fb      	str	r3, [r7, #28]
}
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056de:	f001 fb33 	bl	8006d48 <xTaskGetSchedulerState>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <xQueueReceive+0x6e>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <xQueueReceive+0x72>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <xQueueReceive+0x74>
 80056f2:	2300      	movs	r3, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <xQueueReceive+0x8e>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	61bb      	str	r3, [r7, #24]
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800570e:	f002 f971 	bl	80079f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	2b00      	cmp	r3, #0
 800571c:	d01f      	beq.n	800575e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005722:	f000 fabe 	bl	8005ca2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	1e5a      	subs	r2, r3, #1
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00f      	beq.n	8005756 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	3310      	adds	r3, #16
 800573a:	4618      	mov	r0, r3
 800573c:	f001 f946 	bl	80069cc <xTaskRemoveFromEventList>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005746:	4b3d      	ldr	r3, [pc, #244]	; (800583c <xQueueReceive+0x1bc>)
 8005748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005756:	f002 f97d 	bl	8007a54 <vPortExitCritical>
				return pdPASS;
 800575a:	2301      	movs	r3, #1
 800575c:	e069      	b.n	8005832 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d103      	bne.n	800576c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005764:	f002 f976 	bl	8007a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005768:	2300      	movs	r3, #0
 800576a:	e062      	b.n	8005832 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005772:	f107 0310 	add.w	r3, r7, #16
 8005776:	4618      	mov	r0, r3
 8005778:	f001 f98c 	bl	8006a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800577c:	2301      	movs	r3, #1
 800577e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005780:	f002 f968 	bl	8007a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005784:	f000 fefe 	bl	8006584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005788:	f002 f934 	bl	80079f4 <vPortEnterCritical>
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005792:	b25b      	sxtb	r3, r3
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005798:	d103      	bne.n	80057a2 <xQueueReceive+0x122>
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057a8:	b25b      	sxtb	r3, r3
 80057aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ae:	d103      	bne.n	80057b8 <xQueueReceive+0x138>
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b8:	f002 f94c 	bl	8007a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057bc:	1d3a      	adds	r2, r7, #4
 80057be:	f107 0310 	add.w	r3, r7, #16
 80057c2:	4611      	mov	r1, r2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 f97b 	bl	8006ac0 <xTaskCheckForTimeOut>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d123      	bne.n	8005818 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d2:	f000 fade 	bl	8005d92 <prvIsQueueEmpty>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d017      	beq.n	800580c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	3324      	adds	r3, #36	; 0x24
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	4611      	mov	r1, r2
 80057e4:	4618      	mov	r0, r3
 80057e6:	f001 f8a1 	bl	800692c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ec:	f000 fa7f 	bl	8005cee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057f0:	f000 fed6 	bl	80065a0 <xTaskResumeAll>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d189      	bne.n	800570e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80057fa:	4b10      	ldr	r3, [pc, #64]	; (800583c <xQueueReceive+0x1bc>)
 80057fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	e780      	b.n	800570e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800580c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580e:	f000 fa6e 	bl	8005cee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005812:	f000 fec5 	bl	80065a0 <xTaskResumeAll>
 8005816:	e77a      	b.n	800570e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800581a:	f000 fa68 	bl	8005cee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800581e:	f000 febf 	bl	80065a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005824:	f000 fab5 	bl	8005d92 <prvIsQueueEmpty>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	f43f af6f 	beq.w	800570e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005830:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005832:	4618      	mov	r0, r3
 8005834:	3730      	adds	r7, #48	; 0x30
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	e000ed04 	.word	0xe000ed04

08005840 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08e      	sub	sp, #56	; 0x38
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800584a:	2300      	movs	r3, #0
 800584c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005852:	2300      	movs	r3, #0
 8005854:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	623b      	str	r3, [r7, #32]
}
 800586e:	bf00      	nop
 8005870:	e7fe      	b.n	8005870 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	61fb      	str	r3, [r7, #28]
}
 800588c:	bf00      	nop
 800588e:	e7fe      	b.n	800588e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005890:	f001 fa5a 	bl	8006d48 <xTaskGetSchedulerState>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <xQueueSemaphoreTake+0x60>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <xQueueSemaphoreTake+0x64>
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <xQueueSemaphoreTake+0x66>
 80058a4:	2300      	movs	r3, #0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10a      	bne.n	80058c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	61bb      	str	r3, [r7, #24]
}
 80058bc:	bf00      	nop
 80058be:	e7fe      	b.n	80058be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058c0:	f002 f898 	bl	80079f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d024      	beq.n	800591a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	1e5a      	subs	r2, r3, #1
 80058d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80058e0:	f001 fba8 	bl	8007034 <pvTaskIncrementMutexHeldCount>
 80058e4:	4602      	mov	r2, r0
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00f      	beq.n	8005912 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	3310      	adds	r3, #16
 80058f6:	4618      	mov	r0, r3
 80058f8:	f001 f868 	bl	80069cc <xTaskRemoveFromEventList>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005902:	4b54      	ldr	r3, [pc, #336]	; (8005a54 <xQueueSemaphoreTake+0x214>)
 8005904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005912:	f002 f89f 	bl	8007a54 <vPortExitCritical>
				return pdPASS;
 8005916:	2301      	movs	r3, #1
 8005918:	e097      	b.n	8005a4a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d111      	bne.n	8005944 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	617b      	str	r3, [r7, #20]
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800593c:	f002 f88a 	bl	8007a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005940:	2300      	movs	r3, #0
 8005942:	e082      	b.n	8005a4a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800594a:	f107 030c 	add.w	r3, r7, #12
 800594e:	4618      	mov	r0, r3
 8005950:	f001 f8a0 	bl	8006a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005954:	2301      	movs	r3, #1
 8005956:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005958:	f002 f87c 	bl	8007a54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800595c:	f000 fe12 	bl	8006584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005960:	f002 f848 	bl	80079f4 <vPortEnterCritical>
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800596a:	b25b      	sxtb	r3, r3
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005970:	d103      	bne.n	800597a <xQueueSemaphoreTake+0x13a>
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005980:	b25b      	sxtb	r3, r3
 8005982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005986:	d103      	bne.n	8005990 <xQueueSemaphoreTake+0x150>
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005990:	f002 f860 	bl	8007a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005994:	463a      	mov	r2, r7
 8005996:	f107 030c 	add.w	r3, r7, #12
 800599a:	4611      	mov	r1, r2
 800599c:	4618      	mov	r0, r3
 800599e:	f001 f88f 	bl	8006ac0 <xTaskCheckForTimeOut>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d132      	bne.n	8005a0e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059aa:	f000 f9f2 	bl	8005d92 <prvIsQueueEmpty>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d026      	beq.n	8005a02 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d109      	bne.n	80059d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80059bc:	f002 f81a 	bl	80079f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f001 f9dd 	bl	8006d84 <xTaskPriorityInherit>
 80059ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80059cc:	f002 f842 	bl	8007a54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	3324      	adds	r3, #36	; 0x24
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	4611      	mov	r1, r2
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 ffa7 	bl	800692c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059e0:	f000 f985 	bl	8005cee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059e4:	f000 fddc 	bl	80065a0 <xTaskResumeAll>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f47f af68 	bne.w	80058c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80059f0:	4b18      	ldr	r3, [pc, #96]	; (8005a54 <xQueueSemaphoreTake+0x214>)
 80059f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	e75e      	b.n	80058c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a04:	f000 f973 	bl	8005cee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a08:	f000 fdca 	bl	80065a0 <xTaskResumeAll>
 8005a0c:	e758      	b.n	80058c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005a0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a10:	f000 f96d 	bl	8005cee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a14:	f000 fdc4 	bl	80065a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a1a:	f000 f9ba 	bl	8005d92 <prvIsQueueEmpty>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f43f af4d 	beq.w	80058c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00d      	beq.n	8005a48 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005a2c:	f001 ffe2 	bl	80079f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005a30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a32:	f000 f8b4 	bl	8005b9e <prvGetDisinheritPriorityAfterTimeout>
 8005a36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f001 fa76 	bl	8006f30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a44:	f002 f806 	bl	8007a54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3738      	adds	r7, #56	; 0x38
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	e000ed04 	.word	0xe000ed04

08005a58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08e      	sub	sp, #56	; 0x38
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10a      	bne.n	8005a84 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	623b      	str	r3, [r7, #32]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <xQueueReceiveFromISR+0x3a>
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <xQueueReceiveFromISR+0x3e>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <xQueueReceiveFromISR+0x40>
 8005a96:	2300      	movs	r3, #0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	61fb      	str	r3, [r7, #28]
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ab2:	f002 f881 	bl	8007bb8 <vPortValidateInterruptPriority>
	__asm volatile
 8005ab6:	f3ef 8211 	mrs	r2, BASEPRI
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	61ba      	str	r2, [r7, #24]
 8005acc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005ace:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d02f      	beq.n	8005b3e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aec:	f000 f8d9 	bl	8005ca2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	1e5a      	subs	r2, r3, #1
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005af8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b00:	d112      	bne.n	8005b28 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d016      	beq.n	8005b38 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	3310      	adds	r3, #16
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 ff5c 	bl	80069cc <xTaskRemoveFromEventList>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00e      	beq.n	8005b38 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00b      	beq.n	8005b38 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	e007      	b.n	8005b38 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	b25a      	sxtb	r2, r3
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b3c:	e001      	b.n	8005b42 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	637b      	str	r3, [r7, #52]	; 0x34
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f383 8811 	msr	BASEPRI, r3
}
 8005b4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3738      	adds	r7, #56	; 0x38
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <vQueueDelete+0x28>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	60bb      	str	r3, [r7, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	e7fe      	b.n	8005b7e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f95f 	bl	8005e44 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f002 f91d 	bl	8007dd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d006      	beq.n	8005bbc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e001      	b.n	8005bc0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
	}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b086      	sub	sp, #24
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10d      	bne.n	8005c08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d14d      	bne.n	8005c90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 f92b 	bl	8006e54 <xTaskPriorityDisinherit>
 8005bfe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	609a      	str	r2, [r3, #8]
 8005c06:	e043      	b.n	8005c90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d119      	bne.n	8005c42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6858      	ldr	r0, [r3, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	461a      	mov	r2, r3
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	f002 fa25 	bl	8008068 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	441a      	add	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d32b      	bcc.n	8005c90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	605a      	str	r2, [r3, #4]
 8005c40:	e026      	b.n	8005c90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	68d8      	ldr	r0, [r3, #12]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	f002 fa0b 	bl	8008068 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	425b      	negs	r3, r3
 8005c5c:	441a      	add	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d207      	bcs.n	8005c7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	425b      	negs	r3, r3
 8005c78:	441a      	add	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d105      	bne.n	8005c90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c98:	697b      	ldr	r3, [r7, #20]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d018      	beq.n	8005ce6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbc:	441a      	add	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d303      	bcc.n	8005cd6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68d9      	ldr	r1, [r3, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	461a      	mov	r2, r3
 8005ce0:	6838      	ldr	r0, [r7, #0]
 8005ce2:	f002 f9c1 	bl	8008068 <memcpy>
	}
}
 8005ce6:	bf00      	nop
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cf6:	f001 fe7d 	bl	80079f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d00:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d02:	e011      	b.n	8005d28 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d012      	beq.n	8005d32 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3324      	adds	r3, #36	; 0x24
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 fe5b 	bl	80069cc <xTaskRemoveFromEventList>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d1c:	f000 ff32 	bl	8006b84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	dce9      	bgt.n	8005d04 <prvUnlockQueue+0x16>
 8005d30:	e000      	b.n	8005d34 <prvUnlockQueue+0x46>
					break;
 8005d32:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	22ff      	movs	r2, #255	; 0xff
 8005d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d3c:	f001 fe8a 	bl	8007a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d40:	f001 fe58 	bl	80079f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d4a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d4c:	e011      	b.n	8005d72 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d012      	beq.n	8005d7c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3310      	adds	r3, #16
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fe36 	bl	80069cc <xTaskRemoveFromEventList>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d66:	f000 ff0d 	bl	8006b84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d6a:	7bbb      	ldrb	r3, [r7, #14]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	dce9      	bgt.n	8005d4e <prvUnlockQueue+0x60>
 8005d7a:	e000      	b.n	8005d7e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d7c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	22ff      	movs	r2, #255	; 0xff
 8005d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d86:	f001 fe65 	bl	8007a54 <vPortExitCritical>
}
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d9a:	f001 fe2b 	bl	80079f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005da6:	2301      	movs	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	e001      	b.n	8005db0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005db0:	f001 fe50 	bl	8007a54 <vPortExitCritical>

	return xReturn;
 8005db4:	68fb      	ldr	r3, [r7, #12]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dc6:	f001 fe15 	bl	80079f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d102      	bne.n	8005ddc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	e001      	b.n	8005de0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005de0:	f001 fe38 	bl	8007a54 <vPortExitCritical>

	return xReturn;
 8005de4:	68fb      	ldr	r3, [r7, #12]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	e014      	b.n	8005e2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e00:	4a0f      	ldr	r2, [pc, #60]	; (8005e40 <vQueueAddToRegistry+0x50>)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10b      	bne.n	8005e24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e0c:	490c      	ldr	r1, [pc, #48]	; (8005e40 <vQueueAddToRegistry+0x50>)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e16:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <vQueueAddToRegistry+0x50>)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e22:	e006      	b.n	8005e32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3301      	adds	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b07      	cmp	r3, #7
 8005e2e:	d9e7      	bls.n	8005e00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	20001a50 	.word	0x20001a50

08005e44 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	e016      	b.n	8005e80 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005e52:	4a10      	ldr	r2, [pc, #64]	; (8005e94 <vQueueUnregisterQueue+0x50>)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	4413      	add	r3, r2
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d10b      	bne.n	8005e7a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005e62:	4a0c      	ldr	r2, [pc, #48]	; (8005e94 <vQueueUnregisterQueue+0x50>)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2100      	movs	r1, #0
 8005e68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005e6c:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <vQueueUnregisterQueue+0x50>)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	4413      	add	r3, r2
 8005e74:	2200      	movs	r2, #0
 8005e76:	605a      	str	r2, [r3, #4]
				break;
 8005e78:	e006      	b.n	8005e88 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b07      	cmp	r3, #7
 8005e84:	d9e5      	bls.n	8005e52 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005e86:	bf00      	nop
 8005e88:	bf00      	nop
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	20001a50 	.word	0x20001a50

08005e98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ea8:	f001 fda4 	bl	80079f4 <vPortEnterCritical>
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eb2:	b25b      	sxtb	r3, r3
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb8:	d103      	bne.n	8005ec2 <vQueueWaitForMessageRestricted+0x2a>
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ec8:	b25b      	sxtb	r3, r3
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ece:	d103      	bne.n	8005ed8 <vQueueWaitForMessageRestricted+0x40>
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ed8:	f001 fdbc 	bl	8007a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	3324      	adds	r3, #36	; 0x24
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fd41 	bl	8006974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005ef2:	6978      	ldr	r0, [r7, #20]
 8005ef4:	f7ff fefb 	bl	8005cee <prvUnlockQueue>
	}
 8005ef8:	bf00      	nop
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08e      	sub	sp, #56	; 0x38
 8005f04:	af04      	add	r7, sp, #16
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	623b      	str	r3, [r7, #32]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <xTaskCreateStatic+0x46>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	61fb      	str	r3, [r7, #28]
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f46:	235c      	movs	r3, #92	; 0x5c
 8005f48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b5c      	cmp	r3, #92	; 0x5c
 8005f4e:	d00a      	beq.n	8005f66 <xTaskCreateStatic+0x66>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	61bb      	str	r3, [r7, #24]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d01e      	beq.n	8005fac <xTaskCreateStatic+0xac>
 8005f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01b      	beq.n	8005fac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	2202      	movs	r2, #2
 8005f82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f86:	2300      	movs	r3, #0
 8005f88:	9303      	str	r3, [sp, #12]
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	9302      	str	r3, [sp, #8]
 8005f8e:	f107 0314 	add.w	r3, r7, #20
 8005f92:	9301      	str	r3, [sp, #4]
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f850 	bl	8006044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fa6:	f000 f8dd 	bl	8006164 <prvAddNewTaskToReadyList>
 8005faa:	e001      	b.n	8005fb0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fb0:	697b      	ldr	r3, [r7, #20]
	}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3728      	adds	r7, #40	; 0x28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b08c      	sub	sp, #48	; 0x30
 8005fbe:	af04      	add	r7, sp, #16
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	603b      	str	r3, [r7, #0]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 fe32 	bl	8007c38 <pvPortMalloc>
 8005fd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00e      	beq.n	8005ffa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fdc:	205c      	movs	r0, #92	; 0x5c
 8005fde:	f001 fe2b 	bl	8007c38 <pvPortMalloc>
 8005fe2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
 8005ff0:	e005      	b.n	8005ffe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ff2:	6978      	ldr	r0, [r7, #20]
 8005ff4:	f001 feec 	bl	8007dd0 <vPortFree>
 8005ff8:	e001      	b.n	8005ffe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d017      	beq.n	8006034 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800600c:	88fa      	ldrh	r2, [r7, #6]
 800600e:	2300      	movs	r3, #0
 8006010:	9303      	str	r3, [sp, #12]
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	9302      	str	r3, [sp, #8]
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68b9      	ldr	r1, [r7, #8]
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 f80e 	bl	8006044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006028:	69f8      	ldr	r0, [r7, #28]
 800602a:	f000 f89b 	bl	8006164 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800602e:	2301      	movs	r3, #1
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	e002      	b.n	800603a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006038:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800603a:	69bb      	ldr	r3, [r7, #24]
	}
 800603c:	4618      	mov	r0, r3
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	461a      	mov	r2, r3
 800605c:	21a5      	movs	r1, #165	; 0xa5
 800605e:	f002 f811 	bl	8008084 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800606c:	3b01      	subs	r3, #1
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f023 0307 	bic.w	r3, r3, #7
 800607a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	617b      	str	r3, [r7, #20]
}
 8006098:	bf00      	nop
 800609a:	e7fe      	b.n	800609a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01f      	beq.n	80060e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060a2:	2300      	movs	r3, #0
 80060a4:	61fb      	str	r3, [r7, #28]
 80060a6:	e012      	b.n	80060ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	4413      	add	r3, r2
 80060ae:	7819      	ldrb	r1, [r3, #0]
 80060b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	3334      	adds	r3, #52	; 0x34
 80060b8:	460a      	mov	r2, r1
 80060ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d006      	beq.n	80060d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	3301      	adds	r3, #1
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	2b0f      	cmp	r3, #15
 80060d2:	d9e9      	bls.n	80060a8 <prvInitialiseNewTask+0x64>
 80060d4:	e000      	b.n	80060d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80060d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060e0:	e003      	b.n	80060ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	2b37      	cmp	r3, #55	; 0x37
 80060ee:	d901      	bls.n	80060f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060f0:	2337      	movs	r3, #55	; 0x37
 80060f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006102:	2200      	movs	r2, #0
 8006104:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	3304      	adds	r3, #4
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fe56 	bl	8004dbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	3318      	adds	r3, #24
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe fe51 	bl	8004dbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006122:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006128:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800612e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	2200      	movs	r2, #0
 8006134:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	68f9      	ldr	r1, [r7, #12]
 8006142:	69b8      	ldr	r0, [r7, #24]
 8006144:	f001 fb2c 	bl	80077a0 <pxPortInitialiseStack>
 8006148:	4602      	mov	r2, r0
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006158:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800615a:	bf00      	nop
 800615c:	3720      	adds	r7, #32
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800616c:	f001 fc42 	bl	80079f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006170:	4b2d      	ldr	r3, [pc, #180]	; (8006228 <prvAddNewTaskToReadyList+0xc4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3301      	adds	r3, #1
 8006176:	4a2c      	ldr	r2, [pc, #176]	; (8006228 <prvAddNewTaskToReadyList+0xc4>)
 8006178:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800617a:	4b2c      	ldr	r3, [pc, #176]	; (800622c <prvAddNewTaskToReadyList+0xc8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d109      	bne.n	8006196 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006182:	4a2a      	ldr	r2, [pc, #168]	; (800622c <prvAddNewTaskToReadyList+0xc8>)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006188:	4b27      	ldr	r3, [pc, #156]	; (8006228 <prvAddNewTaskToReadyList+0xc4>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d110      	bne.n	80061b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006190:	f000 fd1c 	bl	8006bcc <prvInitialiseTaskLists>
 8006194:	e00d      	b.n	80061b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006196:	4b26      	ldr	r3, [pc, #152]	; (8006230 <prvAddNewTaskToReadyList+0xcc>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d109      	bne.n	80061b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800619e:	4b23      	ldr	r3, [pc, #140]	; (800622c <prvAddNewTaskToReadyList+0xc8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d802      	bhi.n	80061b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061ac:	4a1f      	ldr	r2, [pc, #124]	; (800622c <prvAddNewTaskToReadyList+0xc8>)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061b2:	4b20      	ldr	r3, [pc, #128]	; (8006234 <prvAddNewTaskToReadyList+0xd0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3301      	adds	r3, #1
 80061b8:	4a1e      	ldr	r2, [pc, #120]	; (8006234 <prvAddNewTaskToReadyList+0xd0>)
 80061ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061bc:	4b1d      	ldr	r3, [pc, #116]	; (8006234 <prvAddNewTaskToReadyList+0xd0>)
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c8:	4b1b      	ldr	r3, [pc, #108]	; (8006238 <prvAddNewTaskToReadyList+0xd4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d903      	bls.n	80061d8 <prvAddNewTaskToReadyList+0x74>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	4a18      	ldr	r2, [pc, #96]	; (8006238 <prvAddNewTaskToReadyList+0xd4>)
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4a15      	ldr	r2, [pc, #84]	; (800623c <prvAddNewTaskToReadyList+0xd8>)
 80061e6:	441a      	add	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f7fe fdf1 	bl	8004dd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061f4:	f001 fc2e 	bl	8007a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061f8:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <prvAddNewTaskToReadyList+0xcc>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00e      	beq.n	800621e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006200:	4b0a      	ldr	r3, [pc, #40]	; (800622c <prvAddNewTaskToReadyList+0xc8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	429a      	cmp	r2, r3
 800620c:	d207      	bcs.n	800621e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800620e:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <prvAddNewTaskToReadyList+0xdc>)
 8006210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000c20 	.word	0x20000c20
 800622c:	2000074c 	.word	0x2000074c
 8006230:	20000c2c 	.word	0x20000c2c
 8006234:	20000c3c 	.word	0x20000c3c
 8006238:	20000c28 	.word	0x20000c28
 800623c:	20000750 	.word	0x20000750
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800624c:	2300      	movs	r3, #0
 800624e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d017      	beq.n	8006286 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006256:	4b13      	ldr	r3, [pc, #76]	; (80062a4 <vTaskDelay+0x60>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <vTaskDelay+0x30>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	60bb      	str	r3, [r7, #8]
}
 8006270:	bf00      	nop
 8006272:	e7fe      	b.n	8006272 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006274:	f000 f986 	bl	8006584 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006278:	2100      	movs	r1, #0
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 feee 	bl	800705c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006280:	f000 f98e 	bl	80065a0 <xTaskResumeAll>
 8006284:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d107      	bne.n	800629c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800628c:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <vTaskDelay+0x64>)
 800628e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800629c:	bf00      	nop
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20000c48 	.word	0x20000c48
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80062b4:	f001 fb9e 	bl	80079f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d102      	bne.n	80062c4 <vTaskSuspend+0x18>
 80062be:	4b30      	ldr	r3, [pc, #192]	; (8006380 <vTaskSuspend+0xd4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	e000      	b.n	80062c6 <vTaskSuspend+0x1a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fe fddf 	bl	8004e90 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d004      	beq.n	80062e4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3318      	adds	r3, #24
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fdd6 	bl	8004e90 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3304      	adds	r3, #4
 80062e8:	4619      	mov	r1, r3
 80062ea:	4826      	ldr	r0, [pc, #152]	; (8006384 <vTaskSuspend+0xd8>)
 80062ec:	f7fe fd73 	bl	8004dd6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d103      	bne.n	8006304 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006304:	f001 fba6 	bl	8007a54 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006308:	4b1f      	ldr	r3, [pc, #124]	; (8006388 <vTaskSuspend+0xdc>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006310:	f001 fb70 	bl	80079f4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006314:	f000 fcf8 	bl	8006d08 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006318:	f001 fb9c 	bl	8007a54 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800631c:	4b18      	ldr	r3, [pc, #96]	; (8006380 <vTaskSuspend+0xd4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	429a      	cmp	r2, r3
 8006324:	d127      	bne.n	8006376 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8006326:	4b18      	ldr	r3, [pc, #96]	; (8006388 <vTaskSuspend+0xdc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d017      	beq.n	800635e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800632e:	4b17      	ldr	r3, [pc, #92]	; (800638c <vTaskSuspend+0xe0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <vTaskSuspend+0xa0>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60bb      	str	r3, [r7, #8]
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800634c:	4b10      	ldr	r3, [pc, #64]	; (8006390 <vTaskSuspend+0xe4>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800635c:	e00b      	b.n	8006376 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800635e:	4b09      	ldr	r3, [pc, #36]	; (8006384 <vTaskSuspend+0xd8>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <vTaskSuspend+0xe8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d103      	bne.n	8006372 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800636a:	4b05      	ldr	r3, [pc, #20]	; (8006380 <vTaskSuspend+0xd4>)
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
	}
 8006370:	e001      	b.n	8006376 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8006372:	f000 fa7d 	bl	8006870 <vTaskSwitchContext>
	}
 8006376:	bf00      	nop
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	2000074c 	.word	0x2000074c
 8006384:	20000c0c 	.word	0x20000c0c
 8006388:	20000c2c 	.word	0x20000c2c
 800638c:	20000c48 	.word	0x20000c48
 8006390:	e000ed04 	.word	0xe000ed04
 8006394:	20000c20 	.word	0x20000c20

08006398 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60fb      	str	r3, [r7, #12]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	4a0a      	ldr	r2, [pc, #40]	; (80063f4 <prvTaskIsTaskSuspended+0x5c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d10a      	bne.n	80063e4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	4a09      	ldr	r2, [pc, #36]	; (80063f8 <prvTaskIsTaskSuspended+0x60>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d005      	beq.n	80063e4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80063e0:	2301      	movs	r3, #1
 80063e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063e4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80063e6:	4618      	mov	r0, r3
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000c0c 	.word	0x20000c0c
 80063f8:	20000be0 	.word	0x20000be0

080063fc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <vTaskResume+0x28>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	60bb      	str	r3, [r7, #8]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006424:	4b20      	ldr	r3, [pc, #128]	; (80064a8 <vTaskResume+0xac>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	429a      	cmp	r2, r3
 800642c:	d038      	beq.n	80064a0 <vTaskResume+0xa4>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d035      	beq.n	80064a0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8006434:	f001 fade 	bl	80079f4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7ff ffad 	bl	8006398 <prvTaskIsTaskSuspended>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d02b      	beq.n	800649c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3304      	adds	r3, #4
 8006448:	4618      	mov	r0, r3
 800644a:	f7fe fd21 	bl	8004e90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006452:	4b16      	ldr	r3, [pc, #88]	; (80064ac <vTaskResume+0xb0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d903      	bls.n	8006462 <vTaskResume+0x66>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645e:	4a13      	ldr	r2, [pc, #76]	; (80064ac <vTaskResume+0xb0>)
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4a10      	ldr	r2, [pc, #64]	; (80064b0 <vTaskResume+0xb4>)
 8006470:	441a      	add	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3304      	adds	r3, #4
 8006476:	4619      	mov	r1, r3
 8006478:	4610      	mov	r0, r2
 800647a:	f7fe fcac 	bl	8004dd6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006482:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <vTaskResume+0xac>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	429a      	cmp	r2, r3
 800648a:	d307      	bcc.n	800649c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800648c:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <vTaskResume+0xb8>)
 800648e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800649c:	f001 fada 	bl	8007a54 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064a0:	bf00      	nop
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	2000074c 	.word	0x2000074c
 80064ac:	20000c28 	.word	0x20000c28
 80064b0:	20000750 	.word	0x20000750
 80064b4:	e000ed04 	.word	0xe000ed04

080064b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08a      	sub	sp, #40	; 0x28
 80064bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064c6:	463a      	mov	r2, r7
 80064c8:	1d39      	adds	r1, r7, #4
 80064ca:	f107 0308 	add.w	r3, r7, #8
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe fc20 	bl	8004d14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	9202      	str	r2, [sp, #8]
 80064dc:	9301      	str	r3, [sp, #4]
 80064de:	2300      	movs	r3, #0
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	2300      	movs	r3, #0
 80064e4:	460a      	mov	r2, r1
 80064e6:	4921      	ldr	r1, [pc, #132]	; (800656c <vTaskStartScheduler+0xb4>)
 80064e8:	4821      	ldr	r0, [pc, #132]	; (8006570 <vTaskStartScheduler+0xb8>)
 80064ea:	f7ff fd09 	bl	8005f00 <xTaskCreateStatic>
 80064ee:	4603      	mov	r3, r0
 80064f0:	4a20      	ldr	r2, [pc, #128]	; (8006574 <vTaskStartScheduler+0xbc>)
 80064f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064f4:	4b1f      	ldr	r3, [pc, #124]	; (8006574 <vTaskStartScheduler+0xbc>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064fc:	2301      	movs	r3, #1
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	e001      	b.n	8006506 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d102      	bne.n	8006512 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800650c:	f000 fdfa 	bl	8007104 <xTimerCreateTimerTask>
 8006510:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d116      	bne.n	8006546 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	613b      	str	r3, [r7, #16]
}
 800652a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800652c:	4b12      	ldr	r3, [pc, #72]	; (8006578 <vTaskStartScheduler+0xc0>)
 800652e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006532:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006534:	4b11      	ldr	r3, [pc, #68]	; (800657c <vTaskStartScheduler+0xc4>)
 8006536:	2201      	movs	r2, #1
 8006538:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800653a:	4b11      	ldr	r3, [pc, #68]	; (8006580 <vTaskStartScheduler+0xc8>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006540:	f001 f9b6 	bl	80078b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006544:	e00e      	b.n	8006564 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800654c:	d10a      	bne.n	8006564 <vTaskStartScheduler+0xac>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	60fb      	str	r3, [r7, #12]
}
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <vTaskStartScheduler+0xaa>
}
 8006564:	bf00      	nop
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	0800833c 	.word	0x0800833c
 8006570:	08006b9d 	.word	0x08006b9d
 8006574:	20000c44 	.word	0x20000c44
 8006578:	20000c40 	.word	0x20000c40
 800657c:	20000c2c 	.word	0x20000c2c
 8006580:	20000c24 	.word	0x20000c24

08006584 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006588:	4b04      	ldr	r3, [pc, #16]	; (800659c <vTaskSuspendAll+0x18>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3301      	adds	r3, #1
 800658e:	4a03      	ldr	r2, [pc, #12]	; (800659c <vTaskSuspendAll+0x18>)
 8006590:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006592:	bf00      	nop
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	20000c48 	.word	0x20000c48

080065a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065ae:	4b42      	ldr	r3, [pc, #264]	; (80066b8 <xTaskResumeAll+0x118>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10a      	bne.n	80065cc <xTaskResumeAll+0x2c>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	603b      	str	r3, [r7, #0]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065cc:	f001 fa12 	bl	80079f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065d0:	4b39      	ldr	r3, [pc, #228]	; (80066b8 <xTaskResumeAll+0x118>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	4a38      	ldr	r2, [pc, #224]	; (80066b8 <xTaskResumeAll+0x118>)
 80065d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065da:	4b37      	ldr	r3, [pc, #220]	; (80066b8 <xTaskResumeAll+0x118>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d162      	bne.n	80066a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065e2:	4b36      	ldr	r3, [pc, #216]	; (80066bc <xTaskResumeAll+0x11c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d05e      	beq.n	80066a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065ea:	e02f      	b.n	800664c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ec:	4b34      	ldr	r3, [pc, #208]	; (80066c0 <xTaskResumeAll+0x120>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3318      	adds	r3, #24
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe fc49 	bl	8004e90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3304      	adds	r3, #4
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fc44 	bl	8004e90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	4b2d      	ldr	r3, [pc, #180]	; (80066c4 <xTaskResumeAll+0x124>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d903      	bls.n	800661c <xTaskResumeAll+0x7c>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	4a2a      	ldr	r2, [pc, #168]	; (80066c4 <xTaskResumeAll+0x124>)
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4a27      	ldr	r2, [pc, #156]	; (80066c8 <xTaskResumeAll+0x128>)
 800662a:	441a      	add	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3304      	adds	r3, #4
 8006630:	4619      	mov	r1, r3
 8006632:	4610      	mov	r0, r2
 8006634:	f7fe fbcf 	bl	8004dd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663c:	4b23      	ldr	r3, [pc, #140]	; (80066cc <xTaskResumeAll+0x12c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006642:	429a      	cmp	r2, r3
 8006644:	d302      	bcc.n	800664c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006646:	4b22      	ldr	r3, [pc, #136]	; (80066d0 <xTaskResumeAll+0x130>)
 8006648:	2201      	movs	r2, #1
 800664a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800664c:	4b1c      	ldr	r3, [pc, #112]	; (80066c0 <xTaskResumeAll+0x120>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1cb      	bne.n	80065ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800665a:	f000 fb55 	bl	8006d08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800665e:	4b1d      	ldr	r3, [pc, #116]	; (80066d4 <xTaskResumeAll+0x134>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d010      	beq.n	800668c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800666a:	f000 f847 	bl	80066fc <xTaskIncrementTick>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006674:	4b16      	ldr	r3, [pc, #88]	; (80066d0 <xTaskResumeAll+0x130>)
 8006676:	2201      	movs	r2, #1
 8006678:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3b01      	subs	r3, #1
 800667e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f1      	bne.n	800666a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006686:	4b13      	ldr	r3, [pc, #76]	; (80066d4 <xTaskResumeAll+0x134>)
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800668c:	4b10      	ldr	r3, [pc, #64]	; (80066d0 <xTaskResumeAll+0x130>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d009      	beq.n	80066a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006694:	2301      	movs	r3, #1
 8006696:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006698:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <xTaskResumeAll+0x138>)
 800669a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066a8:	f001 f9d4 	bl	8007a54 <vPortExitCritical>

	return xAlreadyYielded;
 80066ac:	68bb      	ldr	r3, [r7, #8]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000c48 	.word	0x20000c48
 80066bc:	20000c20 	.word	0x20000c20
 80066c0:	20000be0 	.word	0x20000be0
 80066c4:	20000c28 	.word	0x20000c28
 80066c8:	20000750 	.word	0x20000750
 80066cc:	2000074c 	.word	0x2000074c
 80066d0:	20000c34 	.word	0x20000c34
 80066d4:	20000c30 	.word	0x20000c30
 80066d8:	e000ed04 	.word	0xe000ed04

080066dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066e2:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <xTaskGetTickCount+0x1c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066e8:	687b      	ldr	r3, [r7, #4]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	20000c24 	.word	0x20000c24

080066fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006702:	2300      	movs	r3, #0
 8006704:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006706:	4b4f      	ldr	r3, [pc, #316]	; (8006844 <xTaskIncrementTick+0x148>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	f040 808f 	bne.w	800682e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006710:	4b4d      	ldr	r3, [pc, #308]	; (8006848 <xTaskIncrementTick+0x14c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3301      	adds	r3, #1
 8006716:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006718:	4a4b      	ldr	r2, [pc, #300]	; (8006848 <xTaskIncrementTick+0x14c>)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d120      	bne.n	8006766 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006724:	4b49      	ldr	r3, [pc, #292]	; (800684c <xTaskIncrementTick+0x150>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <xTaskIncrementTick+0x48>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	603b      	str	r3, [r7, #0]
}
 8006740:	bf00      	nop
 8006742:	e7fe      	b.n	8006742 <xTaskIncrementTick+0x46>
 8006744:	4b41      	ldr	r3, [pc, #260]	; (800684c <xTaskIncrementTick+0x150>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	4b41      	ldr	r3, [pc, #260]	; (8006850 <xTaskIncrementTick+0x154>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a3f      	ldr	r2, [pc, #252]	; (800684c <xTaskIncrementTick+0x150>)
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	4a3f      	ldr	r2, [pc, #252]	; (8006850 <xTaskIncrementTick+0x154>)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	4b3e      	ldr	r3, [pc, #248]	; (8006854 <xTaskIncrementTick+0x158>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	4a3d      	ldr	r2, [pc, #244]	; (8006854 <xTaskIncrementTick+0x158>)
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	f000 fad1 	bl	8006d08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006766:	4b3c      	ldr	r3, [pc, #240]	; (8006858 <xTaskIncrementTick+0x15c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	429a      	cmp	r2, r3
 800676e:	d349      	bcc.n	8006804 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006770:	4b36      	ldr	r3, [pc, #216]	; (800684c <xTaskIncrementTick+0x150>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d104      	bne.n	8006784 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800677a:	4b37      	ldr	r3, [pc, #220]	; (8006858 <xTaskIncrementTick+0x15c>)
 800677c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006780:	601a      	str	r2, [r3, #0]
					break;
 8006782:	e03f      	b.n	8006804 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006784:	4b31      	ldr	r3, [pc, #196]	; (800684c <xTaskIncrementTick+0x150>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	429a      	cmp	r2, r3
 800679a:	d203      	bcs.n	80067a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800679c:	4a2e      	ldr	r2, [pc, #184]	; (8006858 <xTaskIncrementTick+0x15c>)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067a2:	e02f      	b.n	8006804 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	3304      	adds	r3, #4
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fe fb71 	bl	8004e90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d004      	beq.n	80067c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	3318      	adds	r3, #24
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fb68 	bl	8004e90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c4:	4b25      	ldr	r3, [pc, #148]	; (800685c <xTaskIncrementTick+0x160>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d903      	bls.n	80067d4 <xTaskIncrementTick+0xd8>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	4a22      	ldr	r2, [pc, #136]	; (800685c <xTaskIncrementTick+0x160>)
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <xTaskIncrementTick+0x164>)
 80067e2:	441a      	add	r2, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	3304      	adds	r3, #4
 80067e8:	4619      	mov	r1, r3
 80067ea:	4610      	mov	r0, r2
 80067ec:	f7fe faf3 	bl	8004dd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f4:	4b1b      	ldr	r3, [pc, #108]	; (8006864 <xTaskIncrementTick+0x168>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d3b8      	bcc.n	8006770 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80067fe:	2301      	movs	r3, #1
 8006800:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006802:	e7b5      	b.n	8006770 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006804:	4b17      	ldr	r3, [pc, #92]	; (8006864 <xTaskIncrementTick+0x168>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680a:	4915      	ldr	r1, [pc, #84]	; (8006860 <xTaskIncrementTick+0x164>)
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d901      	bls.n	8006820 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800681c:	2301      	movs	r3, #1
 800681e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006820:	4b11      	ldr	r3, [pc, #68]	; (8006868 <xTaskIncrementTick+0x16c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006828:	2301      	movs	r3, #1
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	e004      	b.n	8006838 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800682e:	4b0f      	ldr	r3, [pc, #60]	; (800686c <xTaskIncrementTick+0x170>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3301      	adds	r3, #1
 8006834:	4a0d      	ldr	r2, [pc, #52]	; (800686c <xTaskIncrementTick+0x170>)
 8006836:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006838:	697b      	ldr	r3, [r7, #20]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20000c48 	.word	0x20000c48
 8006848:	20000c24 	.word	0x20000c24
 800684c:	20000bd8 	.word	0x20000bd8
 8006850:	20000bdc 	.word	0x20000bdc
 8006854:	20000c38 	.word	0x20000c38
 8006858:	20000c40 	.word	0x20000c40
 800685c:	20000c28 	.word	0x20000c28
 8006860:	20000750 	.word	0x20000750
 8006864:	2000074c 	.word	0x2000074c
 8006868:	20000c34 	.word	0x20000c34
 800686c:	20000c30 	.word	0x20000c30

08006870 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006876:	4b28      	ldr	r3, [pc, #160]	; (8006918 <vTaskSwitchContext+0xa8>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800687e:	4b27      	ldr	r3, [pc, #156]	; (800691c <vTaskSwitchContext+0xac>)
 8006880:	2201      	movs	r2, #1
 8006882:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006884:	e041      	b.n	800690a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006886:	4b25      	ldr	r3, [pc, #148]	; (800691c <vTaskSwitchContext+0xac>)
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800688c:	4b24      	ldr	r3, [pc, #144]	; (8006920 <vTaskSwitchContext+0xb0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e010      	b.n	80068b6 <vTaskSwitchContext+0x46>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10a      	bne.n	80068b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	607b      	str	r3, [r7, #4]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <vTaskSwitchContext+0x3e>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	491b      	ldr	r1, [pc, #108]	; (8006924 <vTaskSwitchContext+0xb4>)
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0e4      	beq.n	8006894 <vTaskSwitchContext+0x24>
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4613      	mov	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4a13      	ldr	r2, [pc, #76]	; (8006924 <vTaskSwitchContext+0xb4>)
 80068d6:	4413      	add	r3, r2
 80068d8:	60bb      	str	r3, [r7, #8]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	605a      	str	r2, [r3, #4]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	3308      	adds	r3, #8
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d104      	bne.n	80068fa <vTaskSwitchContext+0x8a>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	605a      	str	r2, [r3, #4]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	4a09      	ldr	r2, [pc, #36]	; (8006928 <vTaskSwitchContext+0xb8>)
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	4a06      	ldr	r2, [pc, #24]	; (8006920 <vTaskSwitchContext+0xb0>)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6013      	str	r3, [r2, #0]
}
 800690a:	bf00      	nop
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	20000c48 	.word	0x20000c48
 800691c:	20000c34 	.word	0x20000c34
 8006920:	20000c28 	.word	0x20000c28
 8006924:	20000750 	.word	0x20000750
 8006928:	2000074c 	.word	0x2000074c

0800692c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	60fb      	str	r3, [r7, #12]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006952:	4b07      	ldr	r3, [pc, #28]	; (8006970 <vTaskPlaceOnEventList+0x44>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3318      	adds	r3, #24
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7fe fa5f 	bl	8004e1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006960:	2101      	movs	r1, #1
 8006962:	6838      	ldr	r0, [r7, #0]
 8006964:	f000 fb7a 	bl	800705c <prvAddCurrentTaskToDelayedList>
}
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	2000074c 	.word	0x2000074c

08006974 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10a      	bne.n	800699c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	617b      	str	r3, [r7, #20]
}
 8006998:	bf00      	nop
 800699a:	e7fe      	b.n	800699a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800699c:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3318      	adds	r3, #24
 80069a2:	4619      	mov	r1, r3
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f7fe fa16 	bl	8004dd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80069b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	68b8      	ldr	r0, [r7, #8]
 80069ba:	f000 fb4f 	bl	800705c <prvAddCurrentTaskToDelayedList>
	}
 80069be:	bf00      	nop
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	2000074c 	.word	0x2000074c

080069cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	60fb      	str	r3, [r7, #12]
}
 80069f4:	bf00      	nop
 80069f6:	e7fe      	b.n	80069f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	3318      	adds	r3, #24
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fe fa47 	bl	8004e90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a02:	4b1e      	ldr	r3, [pc, #120]	; (8006a7c <xTaskRemoveFromEventList+0xb0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d11d      	bne.n	8006a46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe fa3e 	bl	8004e90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a18:	4b19      	ldr	r3, [pc, #100]	; (8006a80 <xTaskRemoveFromEventList+0xb4>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d903      	bls.n	8006a28 <xTaskRemoveFromEventList+0x5c>
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	4a16      	ldr	r2, [pc, #88]	; (8006a80 <xTaskRemoveFromEventList+0xb4>)
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4a13      	ldr	r2, [pc, #76]	; (8006a84 <xTaskRemoveFromEventList+0xb8>)
 8006a36:	441a      	add	r2, r3
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4610      	mov	r0, r2
 8006a40:	f7fe f9c9 	bl	8004dd6 <vListInsertEnd>
 8006a44:	e005      	b.n	8006a52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	3318      	adds	r3, #24
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	480e      	ldr	r0, [pc, #56]	; (8006a88 <xTaskRemoveFromEventList+0xbc>)
 8006a4e:	f7fe f9c2 	bl	8004dd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a56:	4b0d      	ldr	r3, [pc, #52]	; (8006a8c <xTaskRemoveFromEventList+0xc0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d905      	bls.n	8006a6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a60:	2301      	movs	r3, #1
 8006a62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <xTaskRemoveFromEventList+0xc4>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	e001      	b.n	8006a70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a70:	697b      	ldr	r3, [r7, #20]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000c48 	.word	0x20000c48
 8006a80:	20000c28 	.word	0x20000c28
 8006a84:	20000750 	.word	0x20000750
 8006a88:	20000be0 	.word	0x20000be0
 8006a8c:	2000074c 	.word	0x2000074c
 8006a90:	20000c34 	.word	0x20000c34

08006a94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a9c:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <vTaskInternalSetTimeOutState+0x24>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006aa4:	4b05      	ldr	r3, [pc, #20]	; (8006abc <vTaskInternalSetTimeOutState+0x28>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	605a      	str	r2, [r3, #4]
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	20000c38 	.word	0x20000c38
 8006abc:	20000c24 	.word	0x20000c24

08006ac0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	613b      	str	r3, [r7, #16]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	60fb      	str	r3, [r7, #12]
}
 8006afe:	bf00      	nop
 8006b00:	e7fe      	b.n	8006b00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b02:	f000 ff77 	bl	80079f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b06:	4b1d      	ldr	r3, [pc, #116]	; (8006b7c <xTaskCheckForTimeOut+0xbc>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b1e:	d102      	bne.n	8006b26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	e023      	b.n	8006b6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <xTaskCheckForTimeOut+0xc0>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d007      	beq.n	8006b42 <xTaskCheckForTimeOut+0x82>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d302      	bcc.n	8006b42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	61fb      	str	r3, [r7, #28]
 8006b40:	e015      	b.n	8006b6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d20b      	bcs.n	8006b64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	1ad2      	subs	r2, r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff ff9b 	bl	8006a94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	e004      	b.n	8006b6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b6e:	f000 ff71 	bl	8007a54 <vPortExitCritical>

	return xReturn;
 8006b72:	69fb      	ldr	r3, [r7, #28]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3720      	adds	r7, #32
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20000c24 	.word	0x20000c24
 8006b80:	20000c38 	.word	0x20000c38

08006b84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b88:	4b03      	ldr	r3, [pc, #12]	; (8006b98 <vTaskMissedYield+0x14>)
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]
}
 8006b8e:	bf00      	nop
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	20000c34 	.word	0x20000c34

08006b9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ba4:	f000 f852 	bl	8006c4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ba8:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <prvIdleTask+0x28>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d9f9      	bls.n	8006ba4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <prvIdleTask+0x2c>)
 8006bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bc0:	e7f0      	b.n	8006ba4 <prvIdleTask+0x8>
 8006bc2:	bf00      	nop
 8006bc4:	20000750 	.word	0x20000750
 8006bc8:	e000ed04 	.word	0xe000ed04

08006bcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	607b      	str	r3, [r7, #4]
 8006bd6:	e00c      	b.n	8006bf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4a12      	ldr	r2, [pc, #72]	; (8006c2c <prvInitialiseTaskLists+0x60>)
 8006be4:	4413      	add	r3, r2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe f8c8 	bl	8004d7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b37      	cmp	r3, #55	; 0x37
 8006bf6:	d9ef      	bls.n	8006bd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bf8:	480d      	ldr	r0, [pc, #52]	; (8006c30 <prvInitialiseTaskLists+0x64>)
 8006bfa:	f7fe f8bf 	bl	8004d7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bfe:	480d      	ldr	r0, [pc, #52]	; (8006c34 <prvInitialiseTaskLists+0x68>)
 8006c00:	f7fe f8bc 	bl	8004d7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c04:	480c      	ldr	r0, [pc, #48]	; (8006c38 <prvInitialiseTaskLists+0x6c>)
 8006c06:	f7fe f8b9 	bl	8004d7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c0a:	480c      	ldr	r0, [pc, #48]	; (8006c3c <prvInitialiseTaskLists+0x70>)
 8006c0c:	f7fe f8b6 	bl	8004d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c10:	480b      	ldr	r0, [pc, #44]	; (8006c40 <prvInitialiseTaskLists+0x74>)
 8006c12:	f7fe f8b3 	bl	8004d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c16:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <prvInitialiseTaskLists+0x78>)
 8006c18:	4a05      	ldr	r2, [pc, #20]	; (8006c30 <prvInitialiseTaskLists+0x64>)
 8006c1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c1c:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <prvInitialiseTaskLists+0x7c>)
 8006c1e:	4a05      	ldr	r2, [pc, #20]	; (8006c34 <prvInitialiseTaskLists+0x68>)
 8006c20:	601a      	str	r2, [r3, #0]
}
 8006c22:	bf00      	nop
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000750 	.word	0x20000750
 8006c30:	20000bb0 	.word	0x20000bb0
 8006c34:	20000bc4 	.word	0x20000bc4
 8006c38:	20000be0 	.word	0x20000be0
 8006c3c:	20000bf4 	.word	0x20000bf4
 8006c40:	20000c0c 	.word	0x20000c0c
 8006c44:	20000bd8 	.word	0x20000bd8
 8006c48:	20000bdc 	.word	0x20000bdc

08006c4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c52:	e019      	b.n	8006c88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c54:	f000 fece 	bl	80079f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c58:	4b10      	ldr	r3, [pc, #64]	; (8006c9c <prvCheckTasksWaitingTermination+0x50>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3304      	adds	r3, #4
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fe f913 	bl	8004e90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ca0 <prvCheckTasksWaitingTermination+0x54>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	4a0b      	ldr	r2, [pc, #44]	; (8006ca0 <prvCheckTasksWaitingTermination+0x54>)
 8006c72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c74:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <prvCheckTasksWaitingTermination+0x58>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	4a0a      	ldr	r2, [pc, #40]	; (8006ca4 <prvCheckTasksWaitingTermination+0x58>)
 8006c7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c7e:	f000 fee9 	bl	8007a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f810 	bl	8006ca8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c88:	4b06      	ldr	r3, [pc, #24]	; (8006ca4 <prvCheckTasksWaitingTermination+0x58>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e1      	bne.n	8006c54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c90:	bf00      	nop
 8006c92:	bf00      	nop
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000bf4 	.word	0x20000bf4
 8006ca0:	20000c20 	.word	0x20000c20
 8006ca4:	20000c08 	.word	0x20000c08

08006ca8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d108      	bne.n	8006ccc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 f886 	bl	8007dd0 <vPortFree>
				vPortFree( pxTCB );
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 f883 	bl	8007dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cca:	e018      	b.n	8006cfe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d103      	bne.n	8006cde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 f87a 	bl	8007dd0 <vPortFree>
	}
 8006cdc:	e00f      	b.n	8006cfe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d00a      	beq.n	8006cfe <prvDeleteTCB+0x56>
	__asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	60fb      	str	r3, [r7, #12]
}
 8006cfa:	bf00      	nop
 8006cfc:	e7fe      	b.n	8006cfc <prvDeleteTCB+0x54>
	}
 8006cfe:	bf00      	nop
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <prvResetNextTaskUnblockTime+0x38>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d104      	bne.n	8006d22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d18:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <prvResetNextTaskUnblockTime+0x3c>)
 8006d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d20:	e008      	b.n	8006d34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d22:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <prvResetNextTaskUnblockTime+0x38>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	4a04      	ldr	r2, [pc, #16]	; (8006d44 <prvResetNextTaskUnblockTime+0x3c>)
 8006d32:	6013      	str	r3, [r2, #0]
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	20000bd8 	.word	0x20000bd8
 8006d44:	20000c40 	.word	0x20000c40

08006d48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d4e:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <xTaskGetSchedulerState+0x34>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d102      	bne.n	8006d5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d56:	2301      	movs	r3, #1
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	e008      	b.n	8006d6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d5c:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <xTaskGetSchedulerState+0x38>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d102      	bne.n	8006d6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d64:	2302      	movs	r3, #2
 8006d66:	607b      	str	r3, [r7, #4]
 8006d68:	e001      	b.n	8006d6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d6e:	687b      	ldr	r3, [r7, #4]
	}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	20000c2c 	.word	0x20000c2c
 8006d80:	20000c48 	.word	0x20000c48

08006d84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d051      	beq.n	8006e3e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9e:	4b2a      	ldr	r3, [pc, #168]	; (8006e48 <xTaskPriorityInherit+0xc4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d241      	bcs.n	8006e2c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	db06      	blt.n	8006dbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db0:	4b25      	ldr	r3, [pc, #148]	; (8006e48 <xTaskPriorityInherit+0xc4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6959      	ldr	r1, [r3, #20]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4a1f      	ldr	r2, [pc, #124]	; (8006e4c <xTaskPriorityInherit+0xc8>)
 8006dd0:	4413      	add	r3, r2
 8006dd2:	4299      	cmp	r1, r3
 8006dd4:	d122      	bne.n	8006e1c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe f858 	bl	8004e90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006de0:	4b19      	ldr	r3, [pc, #100]	; (8006e48 <xTaskPriorityInherit+0xc4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dee:	4b18      	ldr	r3, [pc, #96]	; (8006e50 <xTaskPriorityInherit+0xcc>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d903      	bls.n	8006dfe <xTaskPriorityInherit+0x7a>
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfa:	4a15      	ldr	r2, [pc, #84]	; (8006e50 <xTaskPriorityInherit+0xcc>)
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4a10      	ldr	r2, [pc, #64]	; (8006e4c <xTaskPriorityInherit+0xc8>)
 8006e0c:	441a      	add	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4619      	mov	r1, r3
 8006e14:	4610      	mov	r0, r2
 8006e16:	f7fd ffde 	bl	8004dd6 <vListInsertEnd>
 8006e1a:	e004      	b.n	8006e26 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e1c:	4b0a      	ldr	r3, [pc, #40]	; (8006e48 <xTaskPriorityInherit+0xc4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006e26:	2301      	movs	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	e008      	b.n	8006e3e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e30:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <xTaskPriorityInherit+0xc4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d201      	bcs.n	8006e3e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
	}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	2000074c 	.word	0x2000074c
 8006e4c:	20000750 	.word	0x20000750
 8006e50:	20000c28 	.word	0x20000c28

08006e54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d056      	beq.n	8006f18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e6a:	4b2e      	ldr	r3, [pc, #184]	; (8006f24 <xTaskPriorityDisinherit+0xd0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d00a      	beq.n	8006e8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	60fb      	str	r3, [r7, #12]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	60bb      	str	r3, [r7, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eac:	1e5a      	subs	r2, r3, #1
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d02c      	beq.n	8006f18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d128      	bne.n	8006f18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fd ffe0 	bl	8004e90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <xTaskPriorityDisinherit+0xd4>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d903      	bls.n	8006ef8 <xTaskPriorityDisinherit+0xa4>
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	4a0c      	ldr	r2, [pc, #48]	; (8006f28 <xTaskPriorityDisinherit+0xd4>)
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4a09      	ldr	r2, [pc, #36]	; (8006f2c <xTaskPriorityDisinherit+0xd8>)
 8006f06:	441a      	add	r2, r3
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f7fd ff61 	bl	8004dd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f14:	2301      	movs	r3, #1
 8006f16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f18:	697b      	ldr	r3, [r7, #20]
	}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	2000074c 	.word	0x2000074c
 8006f28:	20000c28 	.word	0x20000c28
 8006f2c:	20000750 	.word	0x20000750

08006f30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d06a      	beq.n	800701e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10a      	bne.n	8006f66 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	60fb      	str	r3, [r7, #12]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d902      	bls.n	8006f76 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	61fb      	str	r3, [r7, #28]
 8006f74:	e002      	b.n	8006f7c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f7a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	69fa      	ldr	r2, [r7, #28]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d04b      	beq.n	800701e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d146      	bne.n	800701e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f90:	4b25      	ldr	r3, [pc, #148]	; (8007028 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d10a      	bne.n	8006fb0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	60bb      	str	r3, [r7, #8]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	69fa      	ldr	r2, [r7, #28]
 8006fba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	db04      	blt.n	8006fce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	6959      	ldr	r1, [r3, #20]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4a13      	ldr	r2, [pc, #76]	; (800702c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006fde:	4413      	add	r3, r2
 8006fe0:	4299      	cmp	r1, r3
 8006fe2:	d11c      	bne.n	800701e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fd ff51 	bl	8004e90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff2:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d903      	bls.n	8007002 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffe:	4a0c      	ldr	r2, [pc, #48]	; (8007030 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007006:	4613      	mov	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4a07      	ldr	r2, [pc, #28]	; (800702c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007010:	441a      	add	r2, r3
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	3304      	adds	r3, #4
 8007016:	4619      	mov	r1, r3
 8007018:	4610      	mov	r0, r2
 800701a:	f7fd fedc 	bl	8004dd6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800701e:	bf00      	nop
 8007020:	3720      	adds	r7, #32
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	2000074c 	.word	0x2000074c
 800702c:	20000750 	.word	0x20000750
 8007030:	20000c28 	.word	0x20000c28

08007034 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007038:	4b07      	ldr	r3, [pc, #28]	; (8007058 <pvTaskIncrementMutexHeldCount+0x24>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <pvTaskIncrementMutexHeldCount+0x24>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007046:	3201      	adds	r2, #1
 8007048:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800704a:	4b03      	ldr	r3, [pc, #12]	; (8007058 <pvTaskIncrementMutexHeldCount+0x24>)
 800704c:	681b      	ldr	r3, [r3, #0]
	}
 800704e:	4618      	mov	r0, r3
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	2000074c 	.word	0x2000074c

0800705c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007066:	4b21      	ldr	r3, [pc, #132]	; (80070ec <prvAddCurrentTaskToDelayedList+0x90>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800706c:	4b20      	ldr	r3, [pc, #128]	; (80070f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3304      	adds	r3, #4
 8007072:	4618      	mov	r0, r3
 8007074:	f7fd ff0c 	bl	8004e90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800707e:	d10a      	bne.n	8007096 <prvAddCurrentTaskToDelayedList+0x3a>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d007      	beq.n	8007096 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007086:	4b1a      	ldr	r3, [pc, #104]	; (80070f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4819      	ldr	r0, [pc, #100]	; (80070f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007090:	f7fd fea1 	bl	8004dd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007094:	e026      	b.n	80070e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4413      	add	r3, r2
 800709c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800709e:	4b14      	ldr	r3, [pc, #80]	; (80070f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d209      	bcs.n	80070c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070ae:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4b0f      	ldr	r3, [pc, #60]	; (80070f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3304      	adds	r3, #4
 80070b8:	4619      	mov	r1, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	f7fd feaf 	bl	8004e1e <vListInsert>
}
 80070c0:	e010      	b.n	80070e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070c2:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4b0a      	ldr	r3, [pc, #40]	; (80070f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3304      	adds	r3, #4
 80070cc:	4619      	mov	r1, r3
 80070ce:	4610      	mov	r0, r2
 80070d0:	f7fd fea5 	bl	8004e1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070d4:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d202      	bcs.n	80070e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070de:	4a08      	ldr	r2, [pc, #32]	; (8007100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	6013      	str	r3, [r2, #0]
}
 80070e4:	bf00      	nop
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20000c24 	.word	0x20000c24
 80070f0:	2000074c 	.word	0x2000074c
 80070f4:	20000c0c 	.word	0x20000c0c
 80070f8:	20000bdc 	.word	0x20000bdc
 80070fc:	20000bd8 	.word	0x20000bd8
 8007100:	20000c40 	.word	0x20000c40

08007104 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08a      	sub	sp, #40	; 0x28
 8007108:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800710e:	f000 fb07 	bl	8007720 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007112:	4b1c      	ldr	r3, [pc, #112]	; (8007184 <xTimerCreateTimerTask+0x80>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d021      	beq.n	800715e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800711a:	2300      	movs	r3, #0
 800711c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800711e:	2300      	movs	r3, #0
 8007120:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007122:	1d3a      	adds	r2, r7, #4
 8007124:	f107 0108 	add.w	r1, r7, #8
 8007128:	f107 030c 	add.w	r3, r7, #12
 800712c:	4618      	mov	r0, r3
 800712e:	f7fd fe0b 	bl	8004d48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007132:	6879      	ldr	r1, [r7, #4]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	9202      	str	r2, [sp, #8]
 800713a:	9301      	str	r3, [sp, #4]
 800713c:	2302      	movs	r3, #2
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	2300      	movs	r3, #0
 8007142:	460a      	mov	r2, r1
 8007144:	4910      	ldr	r1, [pc, #64]	; (8007188 <xTimerCreateTimerTask+0x84>)
 8007146:	4811      	ldr	r0, [pc, #68]	; (800718c <xTimerCreateTimerTask+0x88>)
 8007148:	f7fe feda 	bl	8005f00 <xTaskCreateStatic>
 800714c:	4603      	mov	r3, r0
 800714e:	4a10      	ldr	r2, [pc, #64]	; (8007190 <xTimerCreateTimerTask+0x8c>)
 8007150:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007152:	4b0f      	ldr	r3, [pc, #60]	; (8007190 <xTimerCreateTimerTask+0x8c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800715a:	2301      	movs	r3, #1
 800715c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	613b      	str	r3, [r7, #16]
}
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800717a:	697b      	ldr	r3, [r7, #20]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20000c7c 	.word	0x20000c7c
 8007188:	08008344 	.word	0x08008344
 800718c:	080072c9 	.word	0x080072c9
 8007190:	20000c80 	.word	0x20000c80

08007194 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08a      	sub	sp, #40	; 0x28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	623b      	str	r3, [r7, #32]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071c2:	4b1a      	ldr	r3, [pc, #104]	; (800722c <xTimerGenericCommand+0x98>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d02a      	beq.n	8007220 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b05      	cmp	r3, #5
 80071da:	dc18      	bgt.n	800720e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071dc:	f7ff fdb4 	bl	8006d48 <xTaskGetSchedulerState>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d109      	bne.n	80071fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071e6:	4b11      	ldr	r3, [pc, #68]	; (800722c <xTimerGenericCommand+0x98>)
 80071e8:	6818      	ldr	r0, [r3, #0]
 80071ea:	f107 0110 	add.w	r1, r7, #16
 80071ee:	2300      	movs	r3, #0
 80071f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071f2:	f7fe f81f 	bl	8005234 <xQueueGenericSend>
 80071f6:	6278      	str	r0, [r7, #36]	; 0x24
 80071f8:	e012      	b.n	8007220 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071fa:	4b0c      	ldr	r3, [pc, #48]	; (800722c <xTimerGenericCommand+0x98>)
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	f107 0110 	add.w	r1, r7, #16
 8007202:	2300      	movs	r3, #0
 8007204:	2200      	movs	r2, #0
 8007206:	f7fe f815 	bl	8005234 <xQueueGenericSend>
 800720a:	6278      	str	r0, [r7, #36]	; 0x24
 800720c:	e008      	b.n	8007220 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800720e:	4b07      	ldr	r3, [pc, #28]	; (800722c <xTimerGenericCommand+0x98>)
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	f107 0110 	add.w	r1, r7, #16
 8007216:	2300      	movs	r3, #0
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	f7fe f909 	bl	8005430 <xQueueGenericSendFromISR>
 800721e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007222:	4618      	mov	r0, r3
 8007224:	3728      	adds	r7, #40	; 0x28
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000c7c 	.word	0x20000c7c

08007230 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af02      	add	r7, sp, #8
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800723a:	4b22      	ldr	r3, [pc, #136]	; (80072c4 <prvProcessExpiredTimer+0x94>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	3304      	adds	r3, #4
 8007248:	4618      	mov	r0, r3
 800724a:	f7fd fe21 	bl	8004e90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d022      	beq.n	80072a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	699a      	ldr	r2, [r3, #24]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	18d1      	adds	r1, r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	6978      	ldr	r0, [r7, #20]
 800726a:	f000 f8d1 	bl	8007410 <prvInsertTimerInActiveList>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d01f      	beq.n	80072b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007274:	2300      	movs	r3, #0
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	2300      	movs	r3, #0
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	2100      	movs	r1, #0
 800727e:	6978      	ldr	r0, [r7, #20]
 8007280:	f7ff ff88 	bl	8007194 <xTimerGenericCommand>
 8007284:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d113      	bne.n	80072b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	60fb      	str	r3, [r7, #12]
}
 800729e:	bf00      	nop
 80072a0:	e7fe      	b.n	80072a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072a8:	f023 0301 	bic.w	r3, r3, #1
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	6978      	ldr	r0, [r7, #20]
 80072ba:	4798      	blx	r3
}
 80072bc:	bf00      	nop
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	20000c74 	.word	0x20000c74

080072c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072d0:	f107 0308 	add.w	r3, r7, #8
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 f857 	bl	8007388 <prvGetNextExpireTime>
 80072da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	4619      	mov	r1, r3
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 f803 	bl	80072ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072e6:	f000 f8d5 	bl	8007494 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072ea:	e7f1      	b.n	80072d0 <prvTimerTask+0x8>

080072ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072f6:	f7ff f945 	bl	8006584 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072fa:	f107 0308 	add.w	r3, r7, #8
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 f866 	bl	80073d0 <prvSampleTimeNow>
 8007304:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d130      	bne.n	800736e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10a      	bne.n	8007328 <prvProcessTimerOrBlockTask+0x3c>
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	429a      	cmp	r2, r3
 8007318:	d806      	bhi.n	8007328 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800731a:	f7ff f941 	bl	80065a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800731e:	68f9      	ldr	r1, [r7, #12]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff ff85 	bl	8007230 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007326:	e024      	b.n	8007372 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d008      	beq.n	8007340 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800732e:	4b13      	ldr	r3, [pc, #76]	; (800737c <prvProcessTimerOrBlockTask+0x90>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <prvProcessTimerOrBlockTask+0x50>
 8007338:	2301      	movs	r3, #1
 800733a:	e000      	b.n	800733e <prvProcessTimerOrBlockTask+0x52>
 800733c:	2300      	movs	r3, #0
 800733e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007340:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <prvProcessTimerOrBlockTask+0x94>)
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	4619      	mov	r1, r3
 800734e:	f7fe fda3 	bl	8005e98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007352:	f7ff f925 	bl	80065a0 <xTaskResumeAll>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800735c:	4b09      	ldr	r3, [pc, #36]	; (8007384 <prvProcessTimerOrBlockTask+0x98>)
 800735e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	f3bf 8f6f 	isb	sy
}
 800736c:	e001      	b.n	8007372 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800736e:	f7ff f917 	bl	80065a0 <xTaskResumeAll>
}
 8007372:	bf00      	nop
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20000c78 	.word	0x20000c78
 8007380:	20000c7c 	.word	0x20000c7c
 8007384:	e000ed04 	.word	0xe000ed04

08007388 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007390:	4b0e      	ldr	r3, [pc, #56]	; (80073cc <prvGetNextExpireTime+0x44>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <prvGetNextExpireTime+0x16>
 800739a:	2201      	movs	r2, #1
 800739c:	e000      	b.n	80073a0 <prvGetNextExpireTime+0x18>
 800739e:	2200      	movs	r2, #0
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d105      	bne.n	80073b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073ac:	4b07      	ldr	r3, [pc, #28]	; (80073cc <prvGetNextExpireTime+0x44>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	e001      	b.n	80073bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073bc:	68fb      	ldr	r3, [r7, #12]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	20000c74 	.word	0x20000c74

080073d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073d8:	f7ff f980 	bl	80066dc <xTaskGetTickCount>
 80073dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073de:	4b0b      	ldr	r3, [pc, #44]	; (800740c <prvSampleTimeNow+0x3c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d205      	bcs.n	80073f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073e8:	f000 f936 	bl	8007658 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	e002      	b.n	80073fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073fa:	4a04      	ldr	r2, [pc, #16]	; (800740c <prvSampleTimeNow+0x3c>)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007400:	68fb      	ldr	r3, [r7, #12]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20000c84 	.word	0x20000c84

08007410 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800741e:	2300      	movs	r3, #0
 8007420:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	429a      	cmp	r2, r3
 8007434:	d812      	bhi.n	800745c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	1ad2      	subs	r2, r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	429a      	cmp	r2, r3
 8007442:	d302      	bcc.n	800744a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007444:	2301      	movs	r3, #1
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	e01b      	b.n	8007482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800744a:	4b10      	ldr	r3, [pc, #64]	; (800748c <prvInsertTimerInActiveList+0x7c>)
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3304      	adds	r3, #4
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f7fd fce2 	bl	8004e1e <vListInsert>
 800745a:	e012      	b.n	8007482 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d206      	bcs.n	8007472 <prvInsertTimerInActiveList+0x62>
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	429a      	cmp	r2, r3
 800746a:	d302      	bcc.n	8007472 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800746c:	2301      	movs	r3, #1
 800746e:	617b      	str	r3, [r7, #20]
 8007470:	e007      	b.n	8007482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007472:	4b07      	ldr	r3, [pc, #28]	; (8007490 <prvInsertTimerInActiveList+0x80>)
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3304      	adds	r3, #4
 800747a:	4619      	mov	r1, r3
 800747c:	4610      	mov	r0, r2
 800747e:	f7fd fcce 	bl	8004e1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007482:	697b      	ldr	r3, [r7, #20]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20000c78 	.word	0x20000c78
 8007490:	20000c74 	.word	0x20000c74

08007494 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b08e      	sub	sp, #56	; 0x38
 8007498:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800749a:	e0ca      	b.n	8007632 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	da18      	bge.n	80074d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	3304      	adds	r3, #4
 80074a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10a      	bne.n	80074c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	61fb      	str	r3, [r7, #28]
}
 80074c0:	bf00      	nop
 80074c2:	e7fe      	b.n	80074c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074ca:	6850      	ldr	r0, [r2, #4]
 80074cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074ce:	6892      	ldr	r2, [r2, #8]
 80074d0:	4611      	mov	r1, r2
 80074d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f2c0 80aa 	blt.w	8007630 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d004      	beq.n	80074f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	3304      	adds	r3, #4
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fd fccf 	bl	8004e90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074f2:	463b      	mov	r3, r7
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff ff6b 	bl	80073d0 <prvSampleTimeNow>
 80074fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b09      	cmp	r3, #9
 8007500:	f200 8097 	bhi.w	8007632 <prvProcessReceivedCommands+0x19e>
 8007504:	a201      	add	r2, pc, #4	; (adr r2, 800750c <prvProcessReceivedCommands+0x78>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	08007535 	.word	0x08007535
 8007510:	08007535 	.word	0x08007535
 8007514:	08007535 	.word	0x08007535
 8007518:	080075a9 	.word	0x080075a9
 800751c:	080075bd 	.word	0x080075bd
 8007520:	08007607 	.word	0x08007607
 8007524:	08007535 	.word	0x08007535
 8007528:	08007535 	.word	0x08007535
 800752c:	080075a9 	.word	0x080075a9
 8007530:	080075bd 	.word	0x080075bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800753a:	f043 0301 	orr.w	r3, r3, #1
 800753e:	b2da      	uxtb	r2, r3
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	18d1      	adds	r1, r2, r3
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007554:	f7ff ff5c 	bl	8007410 <prvInsertTimerInActiveList>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d069      	beq.n	8007632 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007564:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d05e      	beq.n	8007632 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	441a      	add	r2, r3
 800757c:	2300      	movs	r3, #0
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	2300      	movs	r3, #0
 8007582:	2100      	movs	r1, #0
 8007584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007586:	f7ff fe05 	bl	8007194 <xTimerGenericCommand>
 800758a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d14f      	bne.n	8007632 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	61bb      	str	r3, [r7, #24]
}
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075ae:	f023 0301 	bic.w	r3, r3, #1
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80075ba:	e03a      	b.n	8007632 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075c2:	f043 0301 	orr.w	r3, r3, #1
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	617b      	str	r3, [r7, #20]
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	18d1      	adds	r1, r2, r3
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007600:	f7ff ff06 	bl	8007410 <prvInsertTimerInActiveList>
					break;
 8007604:	e015      	b.n	8007632 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d103      	bne.n	800761c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007616:	f000 fbdb 	bl	8007dd0 <vPortFree>
 800761a:	e00a      	b.n	8007632 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007622:	f023 0301 	bic.w	r3, r3, #1
 8007626:	b2da      	uxtb	r2, r3
 8007628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800762e:	e000      	b.n	8007632 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007630:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007632:	4b08      	ldr	r3, [pc, #32]	; (8007654 <prvProcessReceivedCommands+0x1c0>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	1d39      	adds	r1, r7, #4
 8007638:	2200      	movs	r2, #0
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe f820 	bl	8005680 <xQueueReceive>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	f47f af2a 	bne.w	800749c <prvProcessReceivedCommands+0x8>
	}
}
 8007648:	bf00      	nop
 800764a:	bf00      	nop
 800764c:	3730      	adds	r7, #48	; 0x30
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20000c7c 	.word	0x20000c7c

08007658 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800765e:	e048      	b.n	80076f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007660:	4b2d      	ldr	r3, [pc, #180]	; (8007718 <prvSwitchTimerLists+0xc0>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766a:	4b2b      	ldr	r3, [pc, #172]	; (8007718 <prvSwitchTimerLists+0xc0>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3304      	adds	r3, #4
 8007678:	4618      	mov	r0, r3
 800767a:	f7fd fc09 	bl	8004e90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b00      	cmp	r3, #0
 8007692:	d02e      	beq.n	80076f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4413      	add	r3, r2
 800769c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d90e      	bls.n	80076c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076b2:	4b19      	ldr	r3, [pc, #100]	; (8007718 <prvSwitchTimerLists+0xc0>)
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3304      	adds	r3, #4
 80076ba:	4619      	mov	r1, r3
 80076bc:	4610      	mov	r0, r2
 80076be:	f7fd fbae 	bl	8004e1e <vListInsert>
 80076c2:	e016      	b.n	80076f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076c4:	2300      	movs	r3, #0
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	2300      	movs	r3, #0
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	2100      	movs	r1, #0
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7ff fd60 	bl	8007194 <xTimerGenericCommand>
 80076d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10a      	bne.n	80076f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	603b      	str	r3, [r7, #0]
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076f2:	4b09      	ldr	r3, [pc, #36]	; (8007718 <prvSwitchTimerLists+0xc0>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1b1      	bne.n	8007660 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076fc:	4b06      	ldr	r3, [pc, #24]	; (8007718 <prvSwitchTimerLists+0xc0>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007702:	4b06      	ldr	r3, [pc, #24]	; (800771c <prvSwitchTimerLists+0xc4>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a04      	ldr	r2, [pc, #16]	; (8007718 <prvSwitchTimerLists+0xc0>)
 8007708:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800770a:	4a04      	ldr	r2, [pc, #16]	; (800771c <prvSwitchTimerLists+0xc4>)
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	6013      	str	r3, [r2, #0]
}
 8007710:	bf00      	nop
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	20000c74 	.word	0x20000c74
 800771c:	20000c78 	.word	0x20000c78

08007720 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007726:	f000 f965 	bl	80079f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800772a:	4b15      	ldr	r3, [pc, #84]	; (8007780 <prvCheckForValidListAndQueue+0x60>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d120      	bne.n	8007774 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007732:	4814      	ldr	r0, [pc, #80]	; (8007784 <prvCheckForValidListAndQueue+0x64>)
 8007734:	f7fd fb22 	bl	8004d7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007738:	4813      	ldr	r0, [pc, #76]	; (8007788 <prvCheckForValidListAndQueue+0x68>)
 800773a:	f7fd fb1f 	bl	8004d7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800773e:	4b13      	ldr	r3, [pc, #76]	; (800778c <prvCheckForValidListAndQueue+0x6c>)
 8007740:	4a10      	ldr	r2, [pc, #64]	; (8007784 <prvCheckForValidListAndQueue+0x64>)
 8007742:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007744:	4b12      	ldr	r3, [pc, #72]	; (8007790 <prvCheckForValidListAndQueue+0x70>)
 8007746:	4a10      	ldr	r2, [pc, #64]	; (8007788 <prvCheckForValidListAndQueue+0x68>)
 8007748:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800774a:	2300      	movs	r3, #0
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	4b11      	ldr	r3, [pc, #68]	; (8007794 <prvCheckForValidListAndQueue+0x74>)
 8007750:	4a11      	ldr	r2, [pc, #68]	; (8007798 <prvCheckForValidListAndQueue+0x78>)
 8007752:	2110      	movs	r1, #16
 8007754:	200a      	movs	r0, #10
 8007756:	f7fd fc2d 	bl	8004fb4 <xQueueGenericCreateStatic>
 800775a:	4603      	mov	r3, r0
 800775c:	4a08      	ldr	r2, [pc, #32]	; (8007780 <prvCheckForValidListAndQueue+0x60>)
 800775e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007760:	4b07      	ldr	r3, [pc, #28]	; (8007780 <prvCheckForValidListAndQueue+0x60>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007768:	4b05      	ldr	r3, [pc, #20]	; (8007780 <prvCheckForValidListAndQueue+0x60>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	490b      	ldr	r1, [pc, #44]	; (800779c <prvCheckForValidListAndQueue+0x7c>)
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fb3e 	bl	8005df0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007774:	f000 f96e 	bl	8007a54 <vPortExitCritical>
}
 8007778:	bf00      	nop
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	20000c7c 	.word	0x20000c7c
 8007784:	20000c4c 	.word	0x20000c4c
 8007788:	20000c60 	.word	0x20000c60
 800778c:	20000c74 	.word	0x20000c74
 8007790:	20000c78 	.word	0x20000c78
 8007794:	20000d28 	.word	0x20000d28
 8007798:	20000c88 	.word	0x20000c88
 800779c:	0800834c 	.word	0x0800834c

080077a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3b04      	subs	r3, #4
 80077b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3b04      	subs	r3, #4
 80077be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f023 0201 	bic.w	r2, r3, #1
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3b04      	subs	r3, #4
 80077ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077d0:	4a0c      	ldr	r2, [pc, #48]	; (8007804 <pxPortInitialiseStack+0x64>)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3b14      	subs	r3, #20
 80077da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3b04      	subs	r3, #4
 80077e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f06f 0202 	mvn.w	r2, #2
 80077ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3b20      	subs	r3, #32
 80077f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077f6:	68fb      	ldr	r3, [r7, #12]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	08007809 	.word	0x08007809

08007808 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800780e:	2300      	movs	r3, #0
 8007810:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007812:	4b12      	ldr	r3, [pc, #72]	; (800785c <prvTaskExitError+0x54>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800781a:	d00a      	beq.n	8007832 <prvTaskExitError+0x2a>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	60fb      	str	r3, [r7, #12]
}
 800782e:	bf00      	nop
 8007830:	e7fe      	b.n	8007830 <prvTaskExitError+0x28>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60bb      	str	r3, [r7, #8]
}
 8007844:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007846:	bf00      	nop
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0fc      	beq.n	8007848 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800784e:	bf00      	nop
 8007850:	bf00      	nop
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	2000000c 	.word	0x2000000c

08007860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007860:	4b07      	ldr	r3, [pc, #28]	; (8007880 <pxCurrentTCBConst2>)
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	6808      	ldr	r0, [r1, #0]
 8007866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786a:	f380 8809 	msr	PSP, r0
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f04f 0000 	mov.w	r0, #0
 8007876:	f380 8811 	msr	BASEPRI, r0
 800787a:	4770      	bx	lr
 800787c:	f3af 8000 	nop.w

08007880 <pxCurrentTCBConst2>:
 8007880:	2000074c 	.word	0x2000074c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop

08007888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007888:	4808      	ldr	r0, [pc, #32]	; (80078ac <prvPortStartFirstTask+0x24>)
 800788a:	6800      	ldr	r0, [r0, #0]
 800788c:	6800      	ldr	r0, [r0, #0]
 800788e:	f380 8808 	msr	MSP, r0
 8007892:	f04f 0000 	mov.w	r0, #0
 8007896:	f380 8814 	msr	CONTROL, r0
 800789a:	b662      	cpsie	i
 800789c:	b661      	cpsie	f
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	df00      	svc	0
 80078a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078aa:	bf00      	nop
 80078ac:	e000ed08 	.word	0xe000ed08

080078b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078b6:	4b46      	ldr	r3, [pc, #280]	; (80079d0 <xPortStartScheduler+0x120>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a46      	ldr	r2, [pc, #280]	; (80079d4 <xPortStartScheduler+0x124>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d10a      	bne.n	80078d6 <xPortStartScheduler+0x26>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	613b      	str	r3, [r7, #16]
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078d6:	4b3e      	ldr	r3, [pc, #248]	; (80079d0 <xPortStartScheduler+0x120>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a3f      	ldr	r2, [pc, #252]	; (80079d8 <xPortStartScheduler+0x128>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d10a      	bne.n	80078f6 <xPortStartScheduler+0x46>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	60fb      	str	r3, [r7, #12]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078f6:	4b39      	ldr	r3, [pc, #228]	; (80079dc <xPortStartScheduler+0x12c>)
 80078f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	22ff      	movs	r2, #255	; 0xff
 8007906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007918:	b2da      	uxtb	r2, r3
 800791a:	4b31      	ldr	r3, [pc, #196]	; (80079e0 <xPortStartScheduler+0x130>)
 800791c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800791e:	4b31      	ldr	r3, [pc, #196]	; (80079e4 <xPortStartScheduler+0x134>)
 8007920:	2207      	movs	r2, #7
 8007922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007924:	e009      	b.n	800793a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007926:	4b2f      	ldr	r3, [pc, #188]	; (80079e4 <xPortStartScheduler+0x134>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3b01      	subs	r3, #1
 800792c:	4a2d      	ldr	r2, [pc, #180]	; (80079e4 <xPortStartScheduler+0x134>)
 800792e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	b2db      	uxtb	r3, r3
 8007938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007942:	2b80      	cmp	r3, #128	; 0x80
 8007944:	d0ef      	beq.n	8007926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007946:	4b27      	ldr	r3, [pc, #156]	; (80079e4 <xPortStartScheduler+0x134>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f1c3 0307 	rsb	r3, r3, #7
 800794e:	2b04      	cmp	r3, #4
 8007950:	d00a      	beq.n	8007968 <xPortStartScheduler+0xb8>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	60bb      	str	r3, [r7, #8]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007968:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <xPortStartScheduler+0x134>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	021b      	lsls	r3, r3, #8
 800796e:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <xPortStartScheduler+0x134>)
 8007970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007972:	4b1c      	ldr	r3, [pc, #112]	; (80079e4 <xPortStartScheduler+0x134>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800797a:	4a1a      	ldr	r2, [pc, #104]	; (80079e4 <xPortStartScheduler+0x134>)
 800797c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	b2da      	uxtb	r2, r3
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007986:	4b18      	ldr	r3, [pc, #96]	; (80079e8 <xPortStartScheduler+0x138>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a17      	ldr	r2, [pc, #92]	; (80079e8 <xPortStartScheduler+0x138>)
 800798c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007992:	4b15      	ldr	r3, [pc, #84]	; (80079e8 <xPortStartScheduler+0x138>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a14      	ldr	r2, [pc, #80]	; (80079e8 <xPortStartScheduler+0x138>)
 8007998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800799c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800799e:	f000 f8dd 	bl	8007b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079a2:	4b12      	ldr	r3, [pc, #72]	; (80079ec <xPortStartScheduler+0x13c>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079a8:	f000 f8fc 	bl	8007ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079ac:	4b10      	ldr	r3, [pc, #64]	; (80079f0 <xPortStartScheduler+0x140>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a0f      	ldr	r2, [pc, #60]	; (80079f0 <xPortStartScheduler+0x140>)
 80079b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079b8:	f7ff ff66 	bl	8007888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079bc:	f7fe ff58 	bl	8006870 <vTaskSwitchContext>
	prvTaskExitError();
 80079c0:	f7ff ff22 	bl	8007808 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	e000ed00 	.word	0xe000ed00
 80079d4:	410fc271 	.word	0x410fc271
 80079d8:	410fc270 	.word	0x410fc270
 80079dc:	e000e400 	.word	0xe000e400
 80079e0:	20000d78 	.word	0x20000d78
 80079e4:	20000d7c 	.word	0x20000d7c
 80079e8:	e000ed20 	.word	0xe000ed20
 80079ec:	2000000c 	.word	0x2000000c
 80079f0:	e000ef34 	.word	0xe000ef34

080079f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	607b      	str	r3, [r7, #4]
}
 8007a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a0e:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <vPortEnterCritical+0x58>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3301      	adds	r3, #1
 8007a14:	4a0d      	ldr	r2, [pc, #52]	; (8007a4c <vPortEnterCritical+0x58>)
 8007a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a18:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <vPortEnterCritical+0x58>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d10f      	bne.n	8007a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <vPortEnterCritical+0x5c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	603b      	str	r3, [r7, #0]
}
 8007a3c:	bf00      	nop
 8007a3e:	e7fe      	b.n	8007a3e <vPortEnterCritical+0x4a>
	}
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	2000000c 	.word	0x2000000c
 8007a50:	e000ed04 	.word	0xe000ed04

08007a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a5a:	4b12      	ldr	r3, [pc, #72]	; (8007aa4 <vPortExitCritical+0x50>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10a      	bne.n	8007a78 <vPortExitCritical+0x24>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	607b      	str	r3, [r7, #4]
}
 8007a74:	bf00      	nop
 8007a76:	e7fe      	b.n	8007a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a78:	4b0a      	ldr	r3, [pc, #40]	; (8007aa4 <vPortExitCritical+0x50>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	4a09      	ldr	r2, [pc, #36]	; (8007aa4 <vPortExitCritical+0x50>)
 8007a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a82:	4b08      	ldr	r3, [pc, #32]	; (8007aa4 <vPortExitCritical+0x50>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d105      	bne.n	8007a96 <vPortExitCritical+0x42>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	f383 8811 	msr	BASEPRI, r3
}
 8007a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a96:	bf00      	nop
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	2000000c 	.word	0x2000000c
	...

08007ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ab0:	f3ef 8009 	mrs	r0, PSP
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	4b15      	ldr	r3, [pc, #84]	; (8007b10 <pxCurrentTCBConst>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	f01e 0f10 	tst.w	lr, #16
 8007ac0:	bf08      	it	eq
 8007ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aca:	6010      	str	r0, [r2, #0]
 8007acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ad4:	f380 8811 	msr	BASEPRI, r0
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f7fe fec6 	bl	8006870 <vTaskSwitchContext>
 8007ae4:	f04f 0000 	mov.w	r0, #0
 8007ae8:	f380 8811 	msr	BASEPRI, r0
 8007aec:	bc09      	pop	{r0, r3}
 8007aee:	6819      	ldr	r1, [r3, #0]
 8007af0:	6808      	ldr	r0, [r1, #0]
 8007af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af6:	f01e 0f10 	tst.w	lr, #16
 8007afa:	bf08      	it	eq
 8007afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b00:	f380 8809 	msr	PSP, r0
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	f3af 8000 	nop.w

08007b10 <pxCurrentTCBConst>:
 8007b10:	2000074c 	.word	0x2000074c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop

08007b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	607b      	str	r3, [r7, #4]
}
 8007b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b32:	f7fe fde3 	bl	80066fc <xTaskIncrementTick>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b3c:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <xPortSysTickHandler+0x40>)
 8007b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	2300      	movs	r3, #0
 8007b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f383 8811 	msr	BASEPRI, r3
}
 8007b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b60:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <vPortSetupTimerInterrupt+0x34>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b66:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <vPortSetupTimerInterrupt+0x38>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b6c:	4b0a      	ldr	r3, [pc, #40]	; (8007b98 <vPortSetupTimerInterrupt+0x3c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a0a      	ldr	r2, [pc, #40]	; (8007b9c <vPortSetupTimerInterrupt+0x40>)
 8007b72:	fba2 2303 	umull	r2, r3, r2, r3
 8007b76:	099b      	lsrs	r3, r3, #6
 8007b78:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <vPortSetupTimerInterrupt+0x44>)
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b7e:	4b04      	ldr	r3, [pc, #16]	; (8007b90 <vPortSetupTimerInterrupt+0x34>)
 8007b80:	2207      	movs	r2, #7
 8007b82:	601a      	str	r2, [r3, #0]
}
 8007b84:	bf00      	nop
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	e000e010 	.word	0xe000e010
 8007b94:	e000e018 	.word	0xe000e018
 8007b98:	20000000 	.word	0x20000000
 8007b9c:	10624dd3 	.word	0x10624dd3
 8007ba0:	e000e014 	.word	0xe000e014

08007ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007bb4 <vPortEnableVFP+0x10>
 8007ba8:	6801      	ldr	r1, [r0, #0]
 8007baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007bae:	6001      	str	r1, [r0, #0]
 8007bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007bb2:	bf00      	nop
 8007bb4:	e000ed88 	.word	0xe000ed88

08007bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bbe:	f3ef 8305 	mrs	r3, IPSR
 8007bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b0f      	cmp	r3, #15
 8007bc8:	d914      	bls.n	8007bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bca:	4a17      	ldr	r2, [pc, #92]	; (8007c28 <vPortValidateInterruptPriority+0x70>)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bd4:	4b15      	ldr	r3, [pc, #84]	; (8007c2c <vPortValidateInterruptPriority+0x74>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	7afa      	ldrb	r2, [r7, #11]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d20a      	bcs.n	8007bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	607b      	str	r3, [r7, #4]
}
 8007bf0:	bf00      	nop
 8007bf2:	e7fe      	b.n	8007bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bf4:	4b0e      	ldr	r3, [pc, #56]	; (8007c30 <vPortValidateInterruptPriority+0x78>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bfc:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <vPortValidateInterruptPriority+0x7c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d90a      	bls.n	8007c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	603b      	str	r3, [r7, #0]
}
 8007c16:	bf00      	nop
 8007c18:	e7fe      	b.n	8007c18 <vPortValidateInterruptPriority+0x60>
	}
 8007c1a:	bf00      	nop
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	e000e3f0 	.word	0xe000e3f0
 8007c2c:	20000d78 	.word	0x20000d78
 8007c30:	e000ed0c 	.word	0xe000ed0c
 8007c34:	20000d7c 	.word	0x20000d7c

08007c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	; 0x28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c44:	f7fe fc9e 	bl	8006584 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c48:	4b5b      	ldr	r3, [pc, #364]	; (8007db8 <pvPortMalloc+0x180>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c50:	f000 f920 	bl	8007e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c54:	4b59      	ldr	r3, [pc, #356]	; (8007dbc <pvPortMalloc+0x184>)
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f040 8093 	bne.w	8007d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01d      	beq.n	8007ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c68:	2208      	movs	r2, #8
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f003 0307 	and.w	r3, r3, #7
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d014      	beq.n	8007ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f023 0307 	bic.w	r3, r3, #7
 8007c80:	3308      	adds	r3, #8
 8007c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	617b      	str	r3, [r7, #20]
}
 8007ca0:	bf00      	nop
 8007ca2:	e7fe      	b.n	8007ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d06e      	beq.n	8007d88 <pvPortMalloc+0x150>
 8007caa:	4b45      	ldr	r3, [pc, #276]	; (8007dc0 <pvPortMalloc+0x188>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d869      	bhi.n	8007d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cb4:	4b43      	ldr	r3, [pc, #268]	; (8007dc4 <pvPortMalloc+0x18c>)
 8007cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cb8:	4b42      	ldr	r3, [pc, #264]	; (8007dc4 <pvPortMalloc+0x18c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cbe:	e004      	b.n	8007cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d903      	bls.n	8007cdc <pvPortMalloc+0xa4>
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1f1      	bne.n	8007cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007cdc:	4b36      	ldr	r3, [pc, #216]	; (8007db8 <pvPortMalloc+0x180>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d050      	beq.n	8007d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2208      	movs	r2, #8
 8007cec:	4413      	add	r3, r2
 8007cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	2308      	movs	r3, #8
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d91f      	bls.n	8007d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	f003 0307 	and.w	r3, r3, #7
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <pvPortMalloc+0xf8>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	613b      	str	r3, [r7, #16]
}
 8007d2c:	bf00      	nop
 8007d2e:	e7fe      	b.n	8007d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	1ad2      	subs	r2, r2, r3
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d42:	69b8      	ldr	r0, [r7, #24]
 8007d44:	f000 f908 	bl	8007f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d48:	4b1d      	ldr	r3, [pc, #116]	; (8007dc0 <pvPortMalloc+0x188>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	4a1b      	ldr	r2, [pc, #108]	; (8007dc0 <pvPortMalloc+0x188>)
 8007d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d56:	4b1a      	ldr	r3, [pc, #104]	; (8007dc0 <pvPortMalloc+0x188>)
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <pvPortMalloc+0x190>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d203      	bcs.n	8007d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d62:	4b17      	ldr	r3, [pc, #92]	; (8007dc0 <pvPortMalloc+0x188>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <pvPortMalloc+0x190>)
 8007d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <pvPortMalloc+0x184>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d7e:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <pvPortMalloc+0x194>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3301      	adds	r3, #1
 8007d84:	4a11      	ldr	r2, [pc, #68]	; (8007dcc <pvPortMalloc+0x194>)
 8007d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d88:	f7fe fc0a 	bl	80065a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <pvPortMalloc+0x174>
	__asm volatile
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	60fb      	str	r3, [r7, #12]
}
 8007da8:	bf00      	nop
 8007daa:	e7fe      	b.n	8007daa <pvPortMalloc+0x172>
	return pvReturn;
 8007dac:	69fb      	ldr	r3, [r7, #28]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3728      	adds	r7, #40	; 0x28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20001940 	.word	0x20001940
 8007dbc:	20001954 	.word	0x20001954
 8007dc0:	20001944 	.word	0x20001944
 8007dc4:	20001938 	.word	0x20001938
 8007dc8:	20001948 	.word	0x20001948
 8007dcc:	2000194c 	.word	0x2000194c

08007dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d04d      	beq.n	8007e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007de2:	2308      	movs	r3, #8
 8007de4:	425b      	negs	r3, r3
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	4413      	add	r3, r2
 8007dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	4b24      	ldr	r3, [pc, #144]	; (8007e88 <vPortFree+0xb8>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10a      	bne.n	8007e14 <vPortFree+0x44>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	60fb      	str	r3, [r7, #12]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <vPortFree+0x62>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	60bb      	str	r3, [r7, #8]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	4b14      	ldr	r3, [pc, #80]	; (8007e88 <vPortFree+0xb8>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01e      	beq.n	8007e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d11a      	bne.n	8007e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	4b0e      	ldr	r3, [pc, #56]	; (8007e88 <vPortFree+0xb8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	43db      	mvns	r3, r3
 8007e52:	401a      	ands	r2, r3
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e58:	f7fe fb94 	bl	8006584 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	4b0a      	ldr	r3, [pc, #40]	; (8007e8c <vPortFree+0xbc>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4413      	add	r3, r2
 8007e66:	4a09      	ldr	r2, [pc, #36]	; (8007e8c <vPortFree+0xbc>)
 8007e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e6a:	6938      	ldr	r0, [r7, #16]
 8007e6c:	f000 f874 	bl	8007f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e70:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <vPortFree+0xc0>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3301      	adds	r3, #1
 8007e76:	4a06      	ldr	r2, [pc, #24]	; (8007e90 <vPortFree+0xc0>)
 8007e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e7a:	f7fe fb91 	bl	80065a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e7e:	bf00      	nop
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20001954 	.word	0x20001954
 8007e8c:	20001944 	.word	0x20001944
 8007e90:	20001950 	.word	0x20001950

08007e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ea0:	4b27      	ldr	r3, [pc, #156]	; (8007f40 <prvHeapInit+0xac>)
 8007ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00c      	beq.n	8007ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3307      	adds	r3, #7
 8007eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0307 	bic.w	r3, r3, #7
 8007eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	4a1f      	ldr	r2, [pc, #124]	; (8007f40 <prvHeapInit+0xac>)
 8007ec4:	4413      	add	r3, r2
 8007ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ecc:	4a1d      	ldr	r2, [pc, #116]	; (8007f44 <prvHeapInit+0xb0>)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ed2:	4b1c      	ldr	r3, [pc, #112]	; (8007f44 <prvHeapInit+0xb0>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4413      	add	r3, r2
 8007ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	1a9b      	subs	r3, r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f023 0307 	bic.w	r3, r3, #7
 8007eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4a15      	ldr	r2, [pc, #84]	; (8007f48 <prvHeapInit+0xb4>)
 8007ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ef6:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <prvHeapInit+0xb4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2200      	movs	r2, #0
 8007efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007efe:	4b12      	ldr	r3, [pc, #72]	; (8007f48 <prvHeapInit+0xb4>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	1ad2      	subs	r2, r2, r3
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f14:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <prvHeapInit+0xb4>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	4a0a      	ldr	r2, [pc, #40]	; (8007f4c <prvHeapInit+0xb8>)
 8007f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	4a09      	ldr	r2, [pc, #36]	; (8007f50 <prvHeapInit+0xbc>)
 8007f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f2c:	4b09      	ldr	r3, [pc, #36]	; (8007f54 <prvHeapInit+0xc0>)
 8007f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f32:	601a      	str	r2, [r3, #0]
}
 8007f34:	bf00      	nop
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	20000d80 	.word	0x20000d80
 8007f44:	20001938 	.word	0x20001938
 8007f48:	20001940 	.word	0x20001940
 8007f4c:	20001948 	.word	0x20001948
 8007f50:	20001944 	.word	0x20001944
 8007f54:	20001954 	.word	0x20001954

08007f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f60:	4b28      	ldr	r3, [pc, #160]	; (8008004 <prvInsertBlockIntoFreeList+0xac>)
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	e002      	b.n	8007f6c <prvInsertBlockIntoFreeList+0x14>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d8f7      	bhi.n	8007f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	4413      	add	r3, r2
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d108      	bne.n	8007f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	441a      	add	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	441a      	add	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d118      	bne.n	8007fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	4b15      	ldr	r3, [pc, #84]	; (8008008 <prvInsertBlockIntoFreeList+0xb0>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d00d      	beq.n	8007fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	441a      	add	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e008      	b.n	8007fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <prvInsertBlockIntoFreeList+0xb0>)
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e003      	b.n	8007fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d002      	beq.n	8007ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	20001938 	.word	0x20001938
 8008008:	20001940 	.word	0x20001940

0800800c <atoi>:
 800800c:	220a      	movs	r2, #10
 800800e:	2100      	movs	r1, #0
 8008010:	f000 b8ea 	b.w	80081e8 <strtol>

08008014 <__errno>:
 8008014:	4b01      	ldr	r3, [pc, #4]	; (800801c <__errno+0x8>)
 8008016:	6818      	ldr	r0, [r3, #0]
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	20000010 	.word	0x20000010

08008020 <__libc_init_array>:
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	4d0d      	ldr	r5, [pc, #52]	; (8008058 <__libc_init_array+0x38>)
 8008024:	4c0d      	ldr	r4, [pc, #52]	; (800805c <__libc_init_array+0x3c>)
 8008026:	1b64      	subs	r4, r4, r5
 8008028:	10a4      	asrs	r4, r4, #2
 800802a:	2600      	movs	r6, #0
 800802c:	42a6      	cmp	r6, r4
 800802e:	d109      	bne.n	8008044 <__libc_init_array+0x24>
 8008030:	4d0b      	ldr	r5, [pc, #44]	; (8008060 <__libc_init_array+0x40>)
 8008032:	4c0c      	ldr	r4, [pc, #48]	; (8008064 <__libc_init_array+0x44>)
 8008034:	f000 f8e2 	bl	80081fc <_init>
 8008038:	1b64      	subs	r4, r4, r5
 800803a:	10a4      	asrs	r4, r4, #2
 800803c:	2600      	movs	r6, #0
 800803e:	42a6      	cmp	r6, r4
 8008040:	d105      	bne.n	800804e <__libc_init_array+0x2e>
 8008042:	bd70      	pop	{r4, r5, r6, pc}
 8008044:	f855 3b04 	ldr.w	r3, [r5], #4
 8008048:	4798      	blx	r3
 800804a:	3601      	adds	r6, #1
 800804c:	e7ee      	b.n	800802c <__libc_init_array+0xc>
 800804e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008052:	4798      	blx	r3
 8008054:	3601      	adds	r6, #1
 8008056:	e7f2      	b.n	800803e <__libc_init_array+0x1e>
 8008058:	08008590 	.word	0x08008590
 800805c:	08008590 	.word	0x08008590
 8008060:	08008590 	.word	0x08008590
 8008064:	08008594 	.word	0x08008594

08008068 <memcpy>:
 8008068:	440a      	add	r2, r1
 800806a:	4291      	cmp	r1, r2
 800806c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008070:	d100      	bne.n	8008074 <memcpy+0xc>
 8008072:	4770      	bx	lr
 8008074:	b510      	push	{r4, lr}
 8008076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800807a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800807e:	4291      	cmp	r1, r2
 8008080:	d1f9      	bne.n	8008076 <memcpy+0xe>
 8008082:	bd10      	pop	{r4, pc}

08008084 <memset>:
 8008084:	4402      	add	r2, r0
 8008086:	4603      	mov	r3, r0
 8008088:	4293      	cmp	r3, r2
 800808a:	d100      	bne.n	800808e <memset+0xa>
 800808c:	4770      	bx	lr
 800808e:	f803 1b01 	strb.w	r1, [r3], #1
 8008092:	e7f9      	b.n	8008088 <memset+0x4>

08008094 <strncat>:
 8008094:	b530      	push	{r4, r5, lr}
 8008096:	4604      	mov	r4, r0
 8008098:	7825      	ldrb	r5, [r4, #0]
 800809a:	4623      	mov	r3, r4
 800809c:	3401      	adds	r4, #1
 800809e:	2d00      	cmp	r5, #0
 80080a0:	d1fa      	bne.n	8008098 <strncat+0x4>
 80080a2:	3a01      	subs	r2, #1
 80080a4:	d304      	bcc.n	80080b0 <strncat+0x1c>
 80080a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080aa:	f803 4b01 	strb.w	r4, [r3], #1
 80080ae:	b904      	cbnz	r4, 80080b2 <strncat+0x1e>
 80080b0:	bd30      	pop	{r4, r5, pc}
 80080b2:	2a00      	cmp	r2, #0
 80080b4:	d1f5      	bne.n	80080a2 <strncat+0xe>
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	e7f3      	b.n	80080a2 <strncat+0xe>

080080ba <strncmp>:
 80080ba:	b510      	push	{r4, lr}
 80080bc:	b16a      	cbz	r2, 80080da <strncmp+0x20>
 80080be:	3901      	subs	r1, #1
 80080c0:	1884      	adds	r4, r0, r2
 80080c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d103      	bne.n	80080d6 <strncmp+0x1c>
 80080ce:	42a0      	cmp	r0, r4
 80080d0:	d001      	beq.n	80080d6 <strncmp+0x1c>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1f5      	bne.n	80080c2 <strncmp+0x8>
 80080d6:	1a98      	subs	r0, r3, r2
 80080d8:	bd10      	pop	{r4, pc}
 80080da:	4610      	mov	r0, r2
 80080dc:	e7fc      	b.n	80080d8 <strncmp+0x1e>
	...

080080e0 <_strtol_l.isra.0>:
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e6:	d001      	beq.n	80080ec <_strtol_l.isra.0+0xc>
 80080e8:	2b24      	cmp	r3, #36	; 0x24
 80080ea:	d906      	bls.n	80080fa <_strtol_l.isra.0+0x1a>
 80080ec:	f7ff ff92 	bl	8008014 <__errno>
 80080f0:	2316      	movs	r3, #22
 80080f2:	6003      	str	r3, [r0, #0]
 80080f4:	2000      	movs	r0, #0
 80080f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fa:	4f3a      	ldr	r7, [pc, #232]	; (80081e4 <_strtol_l.isra.0+0x104>)
 80080fc:	468e      	mov	lr, r1
 80080fe:	4676      	mov	r6, lr
 8008100:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008104:	5de5      	ldrb	r5, [r4, r7]
 8008106:	f015 0508 	ands.w	r5, r5, #8
 800810a:	d1f8      	bne.n	80080fe <_strtol_l.isra.0+0x1e>
 800810c:	2c2d      	cmp	r4, #45	; 0x2d
 800810e:	d134      	bne.n	800817a <_strtol_l.isra.0+0x9a>
 8008110:	f89e 4000 	ldrb.w	r4, [lr]
 8008114:	f04f 0801 	mov.w	r8, #1
 8008118:	f106 0e02 	add.w	lr, r6, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d05c      	beq.n	80081da <_strtol_l.isra.0+0xfa>
 8008120:	2b10      	cmp	r3, #16
 8008122:	d10c      	bne.n	800813e <_strtol_l.isra.0+0x5e>
 8008124:	2c30      	cmp	r4, #48	; 0x30
 8008126:	d10a      	bne.n	800813e <_strtol_l.isra.0+0x5e>
 8008128:	f89e 4000 	ldrb.w	r4, [lr]
 800812c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008130:	2c58      	cmp	r4, #88	; 0x58
 8008132:	d14d      	bne.n	80081d0 <_strtol_l.isra.0+0xf0>
 8008134:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008138:	2310      	movs	r3, #16
 800813a:	f10e 0e02 	add.w	lr, lr, #2
 800813e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008142:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008146:	2600      	movs	r6, #0
 8008148:	fbbc f9f3 	udiv	r9, ip, r3
 800814c:	4635      	mov	r5, r6
 800814e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008152:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008156:	2f09      	cmp	r7, #9
 8008158:	d818      	bhi.n	800818c <_strtol_l.isra.0+0xac>
 800815a:	463c      	mov	r4, r7
 800815c:	42a3      	cmp	r3, r4
 800815e:	dd24      	ble.n	80081aa <_strtol_l.isra.0+0xca>
 8008160:	2e00      	cmp	r6, #0
 8008162:	db1f      	blt.n	80081a4 <_strtol_l.isra.0+0xc4>
 8008164:	45a9      	cmp	r9, r5
 8008166:	d31d      	bcc.n	80081a4 <_strtol_l.isra.0+0xc4>
 8008168:	d101      	bne.n	800816e <_strtol_l.isra.0+0x8e>
 800816a:	45a2      	cmp	sl, r4
 800816c:	db1a      	blt.n	80081a4 <_strtol_l.isra.0+0xc4>
 800816e:	fb05 4503 	mla	r5, r5, r3, r4
 8008172:	2601      	movs	r6, #1
 8008174:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008178:	e7eb      	b.n	8008152 <_strtol_l.isra.0+0x72>
 800817a:	2c2b      	cmp	r4, #43	; 0x2b
 800817c:	bf08      	it	eq
 800817e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008182:	46a8      	mov	r8, r5
 8008184:	bf08      	it	eq
 8008186:	f106 0e02 	addeq.w	lr, r6, #2
 800818a:	e7c7      	b.n	800811c <_strtol_l.isra.0+0x3c>
 800818c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008190:	2f19      	cmp	r7, #25
 8008192:	d801      	bhi.n	8008198 <_strtol_l.isra.0+0xb8>
 8008194:	3c37      	subs	r4, #55	; 0x37
 8008196:	e7e1      	b.n	800815c <_strtol_l.isra.0+0x7c>
 8008198:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800819c:	2f19      	cmp	r7, #25
 800819e:	d804      	bhi.n	80081aa <_strtol_l.isra.0+0xca>
 80081a0:	3c57      	subs	r4, #87	; 0x57
 80081a2:	e7db      	b.n	800815c <_strtol_l.isra.0+0x7c>
 80081a4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80081a8:	e7e4      	b.n	8008174 <_strtol_l.isra.0+0x94>
 80081aa:	2e00      	cmp	r6, #0
 80081ac:	da05      	bge.n	80081ba <_strtol_l.isra.0+0xda>
 80081ae:	2322      	movs	r3, #34	; 0x22
 80081b0:	6003      	str	r3, [r0, #0]
 80081b2:	4665      	mov	r5, ip
 80081b4:	b942      	cbnz	r2, 80081c8 <_strtol_l.isra.0+0xe8>
 80081b6:	4628      	mov	r0, r5
 80081b8:	e79d      	b.n	80080f6 <_strtol_l.isra.0+0x16>
 80081ba:	f1b8 0f00 	cmp.w	r8, #0
 80081be:	d000      	beq.n	80081c2 <_strtol_l.isra.0+0xe2>
 80081c0:	426d      	negs	r5, r5
 80081c2:	2a00      	cmp	r2, #0
 80081c4:	d0f7      	beq.n	80081b6 <_strtol_l.isra.0+0xd6>
 80081c6:	b10e      	cbz	r6, 80081cc <_strtol_l.isra.0+0xec>
 80081c8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80081cc:	6011      	str	r1, [r2, #0]
 80081ce:	e7f2      	b.n	80081b6 <_strtol_l.isra.0+0xd6>
 80081d0:	2430      	movs	r4, #48	; 0x30
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1b3      	bne.n	800813e <_strtol_l.isra.0+0x5e>
 80081d6:	2308      	movs	r3, #8
 80081d8:	e7b1      	b.n	800813e <_strtol_l.isra.0+0x5e>
 80081da:	2c30      	cmp	r4, #48	; 0x30
 80081dc:	d0a4      	beq.n	8008128 <_strtol_l.isra.0+0x48>
 80081de:	230a      	movs	r3, #10
 80081e0:	e7ad      	b.n	800813e <_strtol_l.isra.0+0x5e>
 80081e2:	bf00      	nop
 80081e4:	08008485 	.word	0x08008485

080081e8 <strtol>:
 80081e8:	4613      	mov	r3, r2
 80081ea:	460a      	mov	r2, r1
 80081ec:	4601      	mov	r1, r0
 80081ee:	4802      	ldr	r0, [pc, #8]	; (80081f8 <strtol+0x10>)
 80081f0:	6800      	ldr	r0, [r0, #0]
 80081f2:	f7ff bf75 	b.w	80080e0 <_strtol_l.isra.0>
 80081f6:	bf00      	nop
 80081f8:	20000010 	.word	0x20000010

080081fc <_init>:
 80081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fe:	bf00      	nop
 8008200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008202:	bc08      	pop	{r3}
 8008204:	469e      	mov	lr, r3
 8008206:	4770      	bx	lr

08008208 <_fini>:
 8008208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820a:	bf00      	nop
 800820c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820e:	bc08      	pop	{r3}
 8008210:	469e      	mov	lr, r3
 8008212:	4770      	bx	lr
