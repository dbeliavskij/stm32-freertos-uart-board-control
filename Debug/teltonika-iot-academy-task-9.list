
teltonika-iot-academy-task-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08007f64  08007f64  00017f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008148  08008148  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008148  08008148  00018148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008150  08008150  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008150  08008150  00018150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a18  20000010  08008168  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a28  08008168  00021a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5f7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003862  00000000  00000000  0003e637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00041ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  000435f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e68  00000000  00000000  00044c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018620  00000000  00000000  00048a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdb47  00000000  00000000  00061090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015ebd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b4  00000000  00000000  0015ec2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f4c 	.word	0x08007f4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007f4c 	.word	0x08007f4c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fcdc 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f870 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8fc 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f8ca 	bl	8000680 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004ec:	f000 f8bb 	bl	8000666 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	4920      	ldr	r1, [pc, #128]	; (8000574 <main+0x9c>)
 80004f4:	4820      	ldr	r0, [pc, #128]	; (8000578 <main+0xa0>)
 80004f6:	f002 feed 	bl	80032d4 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fa:	f003 ffbd 	bl	8004478 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UARTTxSemaphore */
  UARTTxSemaphoreHandle = osSemaphoreNew(1, 1, &UARTTxSemaphore_attributes);
 80004fe:	4a1f      	ldr	r2, [pc, #124]	; (800057c <main+0xa4>)
 8000500:	2101      	movs	r1, #1
 8000502:	2001      	movs	r0, #1
 8000504:	f004 f8f1 	bl	80046ea <osSemaphoreNew>
 8000508:	4603      	mov	r3, r0
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <main+0xa8>)
 800050c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RxQueue */
  RxQueueHandle = osMessageQueueNew (12, sizeof(uint8_t), &RxQueue_attributes);
 800050e:	4a1d      	ldr	r2, [pc, #116]	; (8000584 <main+0xac>)
 8000510:	2101      	movs	r1, #1
 8000512:	200c      	movs	r0, #12
 8000514:	f004 fa08 	bl	8004928 <osMessageQueueNew>
 8000518:	4603      	mov	r3, r0
 800051a:	4a1b      	ldr	r2, [pc, #108]	; (8000588 <main+0xb0>)
 800051c:	6013      	str	r3, [r2, #0]

  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (1, 13, &CommandQueue_attributes);
 800051e:	4a1b      	ldr	r2, [pc, #108]	; (800058c <main+0xb4>)
 8000520:	210d      	movs	r1, #13
 8000522:	2001      	movs	r0, #1
 8000524:	f004 fa00 	bl	8004928 <osMessageQueueNew>
 8000528:	4603      	mov	r3, r0
 800052a:	4a19      	ldr	r2, [pc, #100]	; (8000590 <main+0xb8>)
 800052c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UARTRx */
  UARTRxHandle = osThreadNew(StartUARTRx, NULL, &UARTRx_attributes);
 800052e:	4a19      	ldr	r2, [pc, #100]	; (8000594 <main+0xbc>)
 8000530:	2100      	movs	r1, #0
 8000532:	4819      	ldr	r0, [pc, #100]	; (8000598 <main+0xc0>)
 8000534:	f003 ffea 	bl	800450c <osThreadNew>
 8000538:	4603      	mov	r3, r0
 800053a:	4a18      	ldr	r2, [pc, #96]	; (800059c <main+0xc4>)
 800053c:	6013      	str	r3, [r2, #0]

  /* creation of TaskHandler */
  TaskHandlerHandle = osThreadNew(StartTTaskHandler, NULL, &TaskHandler_attributes);
 800053e:	4a18      	ldr	r2, [pc, #96]	; (80005a0 <main+0xc8>)
 8000540:	2100      	movs	r1, #0
 8000542:	4818      	ldr	r0, [pc, #96]	; (80005a4 <main+0xcc>)
 8000544:	f003 ffe2 	bl	800450c <osThreadNew>
 8000548:	4603      	mov	r3, r0
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <main+0xd0>)
 800054c:	6013      	str	r3, [r2, #0]

  /* creation of ButTask */
  ButTaskHandle = osThreadNew(StartButTask, NULL, &ButTask_attributes);
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <main+0xd4>)
 8000550:	2100      	movs	r1, #0
 8000552:	4817      	ldr	r0, [pc, #92]	; (80005b0 <main+0xd8>)
 8000554:	f003 ffda 	bl	800450c <osThreadNew>
 8000558:	4603      	mov	r3, r0
 800055a:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <main+0xdc>)
 800055c:	6013      	str	r3, [r2, #0]

  /* creation of LedBlinkTask */
  LedBlinkTaskHandle = osThreadNew(StartLedBlinkTask, NULL, &LedBlinkTask_attributes);
 800055e:	4a16      	ldr	r2, [pc, #88]	; (80005b8 <main+0xe0>)
 8000560:	2100      	movs	r1, #0
 8000562:	4816      	ldr	r0, [pc, #88]	; (80005bc <main+0xe4>)
 8000564:	f003 ffd2 	bl	800450c <osThreadNew>
 8000568:	4603      	mov	r3, r0
 800056a:	4a15      	ldr	r2, [pc, #84]	; (80005c0 <main+0xe8>)
 800056c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800056e:	f003 ffa7 	bl	80044c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000572:	e7fe      	b.n	8000572 <main+0x9a>
 8000574:	20001994 	.word	0x20001994
 8000578:	20001908 	.word	0x20001908
 800057c:	080080f0 	.word	0x080080f0
 8000580:	20001900 	.word	0x20001900
 8000584:	080080c0 	.word	0x080080c0
 8000588:	200018f4 	.word	0x200018f4
 800058c:	080080d8 	.word	0x080080d8
 8000590:	2000198c 	.word	0x2000198c
 8000594:	08008030 	.word	0x08008030
 8000598:	08000821 	.word	0x08000821
 800059c:	20001990 	.word	0x20001990
 80005a0:	08008054 	.word	0x08008054
 80005a4:	08000a71 	.word	0x08000a71
 80005a8:	200018fc 	.word	0x200018fc
 80005ac:	08008078 	.word	0x08008078
 80005b0:	08000b89 	.word	0x08000b89
 80005b4:	20001904 	.word	0x20001904
 80005b8:	0800809c 	.word	0x0800809c
 80005bc:	08000b99 	.word	0x08000b99
 80005c0:	200018f8 	.word	0x200018f8

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	; 0x58
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2244      	movs	r2, #68	; 0x44
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f007 fc8c 	bl	8007ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ea:	f000 ffc7 	bl	800157c <HAL_PWREx_ControlVoltageScaling>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f4:	f000 faea 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000600:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000602:	2310      	movs	r3, #16
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060a:	2302      	movs	r3, #2
 800060c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800060e:	2301      	movs	r3, #1
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000612:	230a      	movs	r3, #10
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000616:	2307      	movs	r3, #7
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fffe 	bl	8001628 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000632:	f000 facb 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2303      	movs	r3, #3
 800063c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064a:	463b      	mov	r3, r7
 800064c:	2104      	movs	r1, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fbd0 	bl	8001df4 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800065a:	f000 fab7 	bl	8000bcc <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3758      	adds	r7, #88	; 0x58
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2105      	movs	r1, #5
 800066e:	2026      	movs	r0, #38	; 0x26
 8000670:	f000 fd0a 	bl	8001088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000674:	2026      	movs	r0, #38	; 0x26
 8000676:	f000 fd23 	bl	80010c0 <HAL_NVIC_EnableIRQ>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <MX_USART2_UART_Init+0x5c>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 800068c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006c4:	f002 fd5c 	bl	8003180 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 fa7d 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20001908 	.word	0x20001908
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a2a      	ldr	r2, [pc, #168]	; (80007a4 <MX_GPIO_Init+0xc4>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2120      	movs	r1, #32
 800075a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075e:	f000 fee7 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_GPIO_Init+0xc8>)
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	480d      	ldr	r0, [pc, #52]	; (80007ac <MX_GPIO_Init+0xcc>)
 8000778:	f000 fd30 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077c:	2320      	movs	r3, #32
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f000 fd21 	bl	80011dc <HAL_GPIO_Init>

}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	; 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000
 80007a8:	10210000 	.word	0x10210000
 80007ac:	48000800 	.word	0x48000800

080007b0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <HAL_UART_RxCpltCallback+0x34>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d10b      	bne.n	80007da <HAL_UART_RxCpltCallback+0x2a>
  {
    osMessageQueuePut(RxQueueHandle, &rx_char, 1, 0);
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_UART_RxCpltCallback+0x38>)
 80007c4:	6818      	ldr	r0, [r3, #0]
 80007c6:	2300      	movs	r3, #0
 80007c8:	2201      	movs	r2, #1
 80007ca:	4908      	ldr	r1, [pc, #32]	; (80007ec <HAL_UART_RxCpltCallback+0x3c>)
 80007cc:	f004 f920 	bl	8004a10 <osMessageQueuePut>
	HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 80007d0:	2201      	movs	r2, #1
 80007d2:	4906      	ldr	r1, [pc, #24]	; (80007ec <HAL_UART_RxCpltCallback+0x3c>)
 80007d4:	4806      	ldr	r0, [pc, #24]	; (80007f0 <HAL_UART_RxCpltCallback+0x40>)
 80007d6:	f002 fd7d 	bl	80032d4 <HAL_UART_Receive_IT>

  }
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40004400 	.word	0x40004400
 80007e8:	200018f4 	.word	0x200018f4
 80007ec:	20001994 	.word	0x20001994
 80007f0:	20001908 	.word	0x20001908

080007f4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a05      	ldr	r2, [pc, #20]	; (8000818 <HAL_UART_TxCpltCallback+0x24>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d104      	bne.n	8000810 <HAL_UART_TxCpltCallback+0x1c>
	{
		osSemaphoreRelease(UARTTxSemaphoreHandle);
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_UART_TxCpltCallback+0x28>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f004 f848 	bl	80048a0 <osSemaphoreRelease>

	}
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40004400 	.word	0x40004400
 800081c:	20001900 	.word	0x20001900

08000820 <StartUARTRx>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTRx */
void StartUARTRx(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t temp_rx[2] = { '\0' };
 8000828:	2300      	movs	r3, #0
 800082a:	833b      	strh	r3, [r7, #24]
  char rx_msg[13] = { '\0' };
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	721a      	strb	r2, [r3, #8]
  size_t str_sp = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  osStatus_t status;
  bool send = false;
 8000840:	2300      	movs	r3, #0
 8000842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Infinite loop */
  for(;;)
  {
    status = osMessageQueueGet(RxQueueHandle, temp_rx, NULL, 500);
 8000846:	4b83      	ldr	r3, [pc, #524]	; (8000a54 <StartUARTRx+0x234>)
 8000848:	6818      	ldr	r0, [r3, #0]
 800084a:	f107 0118 	add.w	r1, r7, #24
 800084e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000852:	2200      	movs	r2, #0
 8000854:	f004 f93c 	bl	8004ad0 <osMessageQueueGet>
 8000858:	61f8      	str	r0, [r7, #28]

    if (status == osOK)
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d110      	bne.n	8000882 <StartUARTRx+0x62>
    {
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fcb3 	bl	80001d0 <strlen>
 800086a:	4603      	mov	r3, r0
 800086c:	f1c3 030c 	rsb	r3, r3, #12
 8000870:	623b      	str	r3, [r7, #32]
    	strncat(rx_msg, (char *)temp_rx, str_sp);
 8000872:	f107 0118 	add.w	r1, r7, #24
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	6a3a      	ldr	r2, [r7, #32]
 800087c:	4618      	mov	r0, r3
 800087e:	f007 fb3f 	bl	8007f00 <strncat>

    }

    str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fca2 	bl	80001d0 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	f1c3 030c 	rsb	r3, r3, #12
 8000892:	623b      	str	r3, [r7, #32]

    if (str_sp == 0)
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d11d      	bne.n	80008d6 <StartUARTRx+0xb6>
    {
    	rx_msg[strlen(rx_msg)-1] = '\r';
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fc96 	bl	80001d0 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	3b01      	subs	r3, #1
 80008a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008ac:	4413      	add	r3, r2
 80008ae:	220d      	movs	r2, #13
 80008b0:	f803 2c20 	strb.w	r2, [r3, #-32]
    	rx_msg[strlen(rx_msg)-2] = '\n';
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fc89 	bl	80001d0 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	3b02      	subs	r3, #2
 80008c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008c6:	4413      	add	r3, r2
 80008c8:	220a      	movs	r2, #10
 80008ca:	f803 2c20 	strb.w	r2, [r3, #-32]
    	send = true;
 80008ce:	2301      	movs	r3, #1
 80008d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008d4:	e088      	b.n	80009e8 <StartUARTRx+0x1c8>

    }

    else if (status == osErrorTimeout && strlen(rx_msg) > 0 && str_sp >= 2)
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	f113 0f02 	cmn.w	r3, #2
 80008dc:	d11b      	bne.n	8000916 <StartUARTRx+0xf6>
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d016      	beq.n	8000916 <StartUARTRx+0xf6>
 80008e8:	6a3b      	ldr	r3, [r7, #32]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d913      	bls.n	8000916 <StartUARTRx+0xf6>
    {
    	strncat(rx_msg, "\n\r", str_sp);
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	6a3a      	ldr	r2, [r7, #32]
 80008f4:	4958      	ldr	r1, [pc, #352]	; (8000a58 <StartUARTRx+0x238>)
 80008f6:	4618      	mov	r0, r3
 80008f8:	f007 fb02 	bl	8007f00 <strncat>
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fc65 	bl	80001d0 <strlen>
 8000906:	4603      	mov	r3, r0
 8000908:	f1c3 030c 	rsb	r3, r3, #12
 800090c:	623b      	str	r3, [r7, #32]
    	send = true;
 800090e:	2301      	movs	r3, #1
 8000910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000914:	e068      	b.n	80009e8 <StartUARTRx+0x1c8>

    }

    else if (status == osErrorTimeout && strlen(rx_msg) > 0 && str_sp == 1)
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	f113 0f02 	cmn.w	r3, #2
 800091c:	d128      	bne.n	8000970 <StartUARTRx+0x150>
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d023      	beq.n	8000970 <StartUARTRx+0x150>
 8000928:	6a3b      	ldr	r3, [r7, #32]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d120      	bne.n	8000970 <StartUARTRx+0x150>
    {
    	strncat(rx_msg, "\r", str_sp);
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	6a3a      	ldr	r2, [r7, #32]
 8000934:	4949      	ldr	r1, [pc, #292]	; (8000a5c <StartUARTRx+0x23c>)
 8000936:	4618      	mov	r0, r3
 8000938:	f007 fae2 	bl	8007f00 <strncat>
    	rx_msg[strlen(rx_msg)-2] = '\n';
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fc45 	bl	80001d0 <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	3b02      	subs	r3, #2
 800094a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800094e:	4413      	add	r3, r2
 8000950:	220a      	movs	r2, #10
 8000952:	f803 2c20 	strb.w	r2, [r3, #-32]
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fc38 	bl	80001d0 <strlen>
 8000960:	4603      	mov	r3, r0
 8000962:	f1c3 030c 	rsb	r3, r3, #12
 8000966:	623b      	str	r3, [r7, #32]
    	send = true;
 8000968:	2301      	movs	r3, #1
 800096a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800096e:	e03b      	b.n	80009e8 <StartUARTRx+0x1c8>

    }

    else if (rx_msg[strlen(rx_msg)-1] == '\n' || rx_msg[strlen(rx_msg)-1] == '\r')
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fc2b 	bl	80001d0 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	3b01      	subs	r3, #1
 800097e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000982:	4413      	add	r3, r2
 8000984:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000988:	2b0a      	cmp	r3, #10
 800098a:	d00d      	beq.n	80009a8 <StartUARTRx+0x188>
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fc1d 	bl	80001d0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	3b01      	subs	r3, #1
 800099a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800099e:	4413      	add	r3, r2
 80009a0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80009a4:	2b0d      	cmp	r3, #13
 80009a6:	d11f      	bne.n	80009e8 <StartUARTRx+0x1c8>
    {
    	rx_msg[strlen(rx_msg)-1] = '\n';
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fc0f 	bl	80001d0 <strlen>
 80009b2:	4603      	mov	r3, r0
 80009b4:	3b01      	subs	r3, #1
 80009b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009ba:	4413      	add	r3, r2
 80009bc:	220a      	movs	r2, #10
 80009be:	f803 2c20 	strb.w	r2, [r3, #-32]
    	strncat(rx_msg, "\r", str_sp);
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	6a3a      	ldr	r2, [r7, #32]
 80009c8:	4924      	ldr	r1, [pc, #144]	; (8000a5c <StartUARTRx+0x23c>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f007 fa98 	bl	8007f00 <strncat>
    	str_sp = sizeof(rx_msg) - strlen(rx_msg) - 1;
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fbfb 	bl	80001d0 <strlen>
 80009da:	4603      	mov	r3, r0
 80009dc:	f1c3 030c 	rsb	r3, r3, #12
 80009e0:	623b      	str	r3, [r7, #32]
    	send = true;
 80009e2:	2301      	movs	r3, #1
 80009e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    }

    if (send)
 80009e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f43f af2a 	beq.w	8000846 <StartUARTRx+0x26>
    {
    	osMessageQueuePut(CommandQueueHandle, rx_msg, 1, osWaitForever);
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <StartUARTRx+0x240>)
 80009f4:	6818      	ldr	r0, [r3, #0]
 80009f6:	f107 0108 	add.w	r1, r7, #8
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009fe:	2201      	movs	r2, #1
 8000a00:	f004 f806 	bl	8004a10 <osMessageQueuePut>
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <StartUARTRx+0x244>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f003 fef5 	bl	80047fc <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Received command:\n\r", 19);
 8000a12:	2213      	movs	r2, #19
 8000a14:	4914      	ldr	r1, [pc, #80]	; (8000a68 <StartUARTRx+0x248>)
 8000a16:	4815      	ldr	r0, [pc, #84]	; (8000a6c <StartUARTRx+0x24c>)
 8000a18:	f002 fc00 	bl	800321c <HAL_UART_Transmit_IT>

    	str_sp = strlen(rx_msg);
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fbd5 	bl	80001d0 <strlen>
 8000a26:	6238      	str	r0, [r7, #32]
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <StartUARTRx+0x244>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a30:	4618      	mov	r0, r3
 8000a32:	f003 fee3 	bl	80047fc <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)rx_msg, str_sp);
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480a      	ldr	r0, [pc, #40]	; (8000a6c <StartUARTRx+0x24c>)
 8000a42:	f002 fbeb 	bl	800321c <HAL_UART_Transmit_IT>
    	rx_msg[0] = '\0';
 8000a46:	2300      	movs	r3, #0
 8000a48:	723b      	strb	r3, [r7, #8]
    	send = false;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = osMessageQueueGet(RxQueueHandle, temp_rx, NULL, 500);
 8000a50:	e6f9      	b.n	8000846 <StartUARTRx+0x26>
 8000a52:	bf00      	nop
 8000a54:	200018f4 	.word	0x200018f4
 8000a58:	08007fb8 	.word	0x08007fb8
 8000a5c:	08007fbc 	.word	0x08007fbc
 8000a60:	2000198c 	.word	0x2000198c
 8000a64:	20001900 	.word	0x20001900
 8000a68:	08007fc0 	.word	0x08007fc0
 8000a6c:	20001908 	.word	0x20001908

08000a70 <StartTTaskHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTTaskHandler */
void StartTTaskHandler(void *argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTTaskHandler */
  osThreadSuspend(ButTaskHandle);
 8000a78:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <StartTTaskHandler+0xe8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 fdd7 	bl	8004630 <osThreadSuspend>
  osThreadSuspend(LedBlinkTaskHandle);
 8000a82:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <StartTTaskHandler+0xec>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 fdd2 	bl	8004630 <osThreadSuspend>

  char command[13] = { '\0' };
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	721a      	strb	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(CommandQueueHandle, command, NULL, osWaitForever);
 8000a9c:	4b30      	ldr	r3, [pc, #192]	; (8000b60 <StartTTaskHandler+0xf0>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	f107 0108 	add.w	r1, r7, #8
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f004 f811 	bl	8004ad0 <osMessageQueueGet>

    if (!strncmp(command, "LED", 3) || !strncmp(command, "led", 3))
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	492b      	ldr	r1, [pc, #172]	; (8000b64 <StartTTaskHandler+0xf4>)
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f007 fa35 	bl	8007f26 <strncmp>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d009      	beq.n	8000ad6 <StartTTaskHandler+0x66>
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	4927      	ldr	r1, [pc, #156]	; (8000b68 <StartTTaskHandler+0xf8>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 fa2b 	bl	8007f26 <strncmp>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d111      	bne.n	8000afa <StartTTaskHandler+0x8a>
    {
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000ad6:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <StartTTaskHandler+0xfc>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f003 fe8c 	bl	80047fc <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"LED command\n\r", 13);
 8000ae4:	220d      	movs	r2, #13
 8000ae6:	4922      	ldr	r1, [pc, #136]	; (8000b70 <StartTTaskHandler+0x100>)
 8000ae8:	4822      	ldr	r0, [pc, #136]	; (8000b74 <StartTTaskHandler+0x104>)
 8000aea:	f002 fb97 	bl	800321c <HAL_UART_Transmit_IT>

    	osThreadResume(LedBlinkTaskHandle);
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <StartTTaskHandler+0xec>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 fdbd 	bl	8004672 <osThreadResume>
 8000af8:	e02c      	b.n	8000b54 <StartTTaskHandler+0xe4>

    }

    else if (!strncmp(command, "BUT", 3) || !strncmp(command, "but", 3))
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	2203      	movs	r2, #3
 8000b00:	491d      	ldr	r1, [pc, #116]	; (8000b78 <StartTTaskHandler+0x108>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f007 fa0f 	bl	8007f26 <strncmp>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d009      	beq.n	8000b22 <StartTTaskHandler+0xb2>
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	2203      	movs	r2, #3
 8000b14:	4919      	ldr	r1, [pc, #100]	; (8000b7c <StartTTaskHandler+0x10c>)
 8000b16:	4618      	mov	r0, r3
 8000b18:	f007 fa05 	bl	8007f26 <strncmp>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10c      	bne.n	8000b3c <StartTTaskHandler+0xcc>
    {
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <StartTTaskHandler+0xfc>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 fe66 	bl	80047fc <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"BUT command\n\r", 15);
 8000b30:	220f      	movs	r2, #15
 8000b32:	4913      	ldr	r1, [pc, #76]	; (8000b80 <StartTTaskHandler+0x110>)
 8000b34:	480f      	ldr	r0, [pc, #60]	; (8000b74 <StartTTaskHandler+0x104>)
 8000b36:	f002 fb71 	bl	800321c <HAL_UART_Transmit_IT>
 8000b3a:	e00b      	b.n	8000b54 <StartTTaskHandler+0xe4>

    }

    else
    {
    	osSemaphoreAcquire(UARTTxSemaphoreHandle, osWaitForever);
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <StartTTaskHandler+0xfc>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 fe59 	bl	80047fc <osSemaphoreAcquire>
    	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Invalid command\n\r", 17);
 8000b4a:	2211      	movs	r2, #17
 8000b4c:	490d      	ldr	r1, [pc, #52]	; (8000b84 <StartTTaskHandler+0x114>)
 8000b4e:	4809      	ldr	r0, [pc, #36]	; (8000b74 <StartTTaskHandler+0x104>)
 8000b50:	f002 fb64 	bl	800321c <HAL_UART_Transmit_IT>
    osMessageQueueGet(CommandQueueHandle, command, NULL, osWaitForever);
 8000b54:	e7a2      	b.n	8000a9c <StartTTaskHandler+0x2c>
 8000b56:	bf00      	nop
 8000b58:	20001904 	.word	0x20001904
 8000b5c:	200018f8 	.word	0x200018f8
 8000b60:	2000198c 	.word	0x2000198c
 8000b64:	08007fd4 	.word	0x08007fd4
 8000b68:	08007fd8 	.word	0x08007fd8
 8000b6c:	20001900 	.word	0x20001900
 8000b70:	08007fdc 	.word	0x08007fdc
 8000b74:	20001908 	.word	0x20001908
 8000b78:	08007fec 	.word	0x08007fec
 8000b7c:	08007ff0 	.word	0x08007ff0
 8000b80:	08007ff4 	.word	0x08007ff4
 8000b84:	08008004 	.word	0x08008004

08000b88 <StartButTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButTask */
void StartButTask(void *argument)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f003 fd8f 	bl	80046b4 <osDelay>
 8000b96:	e7fb      	b.n	8000b90 <StartButTask+0x8>

08000b98 <StartLedBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedBlinkTask */
void StartLedBlinkTask(void *argument)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedBlinkTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f003 fd87 	bl	80046b4 <osDelay>
 8000ba6:	e7fb      	b.n	8000ba0 <StartLedBlinkTask+0x8>

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d101      	bne.n	8000bbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bba:	f000 f98d 	bl	8000ed8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40001000 	.word	0x40001000

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be2:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_MspInit+0x4c>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_MspInit+0x4c>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6593      	str	r3, [r2, #88]	; 0x58
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	210f      	movs	r1, #15
 8000c12:	f06f 0001 	mvn.w	r0, #1
 8000c16:	f000 fa37 	bl	8001088 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0ac      	sub	sp, #176	; 0xb0
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2288      	movs	r2, #136	; 0x88
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f007 f951 	bl	8007ef0 <memset>
  if(huart->Instance==USART2)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <HAL_UART_MspInit+0xb0>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d13b      	bne.n	8000cd0 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 fafd 	bl	8002264 <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c70:	f7ff ffac 	bl	8000bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0xb4>)
 8000c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c78:	4a18      	ldr	r2, [pc, #96]	; (8000cdc <HAL_UART_MspInit+0xb4>)
 8000c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_UART_MspInit+0xb4>)
 8000c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <HAL_UART_MspInit+0xb4>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c90:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <HAL_UART_MspInit+0xb4>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c98:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_UART_MspInit+0xb4>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ccc:	f000 fa86 	bl	80011dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	37b0      	adds	r7, #176	; 0xb0
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40004400 	.word	0x40004400
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08c      	sub	sp, #48	; 0x30
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	2036      	movs	r0, #54	; 0x36
 8000cf6:	f000 f9c7 	bl	8001088 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cfa:	2036      	movs	r0, #54	; 0x36
 8000cfc:	f000 f9e0 	bl	80010c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <HAL_InitTick+0x9c>)
 8000d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <HAL_InitTick+0x9c>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <HAL_InitTick+0x9c>)
 8000d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d10:	f003 0310 	and.w	r3, r3, #16
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d18:	f107 0210 	add.w	r2, r7, #16
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 fa0c 	bl	8002140 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d28:	f001 f9de 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 8000d2c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d30:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <HAL_InitTick+0xa0>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	0c9b      	lsrs	r3, r3, #18
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <HAL_InitTick+0xa8>)
 8000d40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d48:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d5e:	f001 ff3d 	bl	8002bdc <HAL_TIM_Base_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d104      	bne.n	8000d72 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d6a:	f001 ff99 	bl	8002ca0 <HAL_TIM_Base_Start_IT>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3730      	adds	r7, #48	; 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	431bde83 	.word	0x431bde83
 8000d84:	20001998 	.word	0x20001998
 8000d88:	40001000 	.word	0x40001000

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <USART2_IRQHandler+0x10>)
 8000dbe:	f002 facd 	bl	800335c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20001908 	.word	0x20001908

08000dcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM6_DAC_IRQHandler+0x10>)
 8000dd2:	f001 ffd5 	bl	8002d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20001998 	.word	0x20001998

08000de0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <SystemInit+0x5c>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <SystemInit+0x5c>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <SystemInit+0x60>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a11      	ldr	r2, [pc, #68]	; (8000e40 <SystemInit+0x60>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <SystemInit+0x60>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <SystemInit+0x60>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <SystemInit+0x60>)
 8000e0c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e10:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <SystemInit+0x60>)
 8000e18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e1c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <SystemInit+0x60>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <SystemInit+0x60>)
 8000e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e28:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SystemInit+0x60>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00
 8000e40:	40021000 	.word	0x40021000

08000e44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e48:	f7ff ffca 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e4e:	e003      	b.n	8000e58 <LoopCopyDataInit>

08000e50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e56:	3104      	adds	r1, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e58:	480a      	ldr	r0, [pc, #40]	; (8000e84 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e60:	d3f6      	bcc.n	8000e50 <CopyDataInit>
	ldr	r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e64:	e002      	b.n	8000e6c <LoopFillZerobss>

08000e66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e68:	f842 3b04 	str.w	r3, [r2], #4

08000e6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <LoopForever+0x16>)
	cmp	r2, r3
 8000e6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e70:	d3f9      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e72:	f007 f80b 	bl	8007e8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e76:	f7ff fb2f 	bl	80004d8 <main>

08000e7a <LoopForever>:

LoopForever:
    b LoopForever
 8000e7a:	e7fe      	b.n	8000e7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e7c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e80:	08008158 	.word	0x08008158
	ldr	r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e88:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000e8c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000e90:	20001a28 	.word	0x20001a28

08000e94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC1_2_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_Init+0x3c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <HAL_Init+0x3c>)
 8000ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f000 f8df 	bl	8001072 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb4:	200f      	movs	r0, #15
 8000eb6:	f7ff ff13 	bl	8000ce0 <HAL_InitTick>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d002      	beq.n	8000ec6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	71fb      	strb	r3, [r7, #7]
 8000ec4:	e001      	b.n	8000eca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec6:	f7ff fe87 	bl	8000bd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eca:	79fb      	ldrb	r3, [r7, #7]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	200019e4 	.word	0x200019e4

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200019e4 	.word	0x200019e4

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db0b      	blt.n	8000fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 021f 	and.w	r2, r3, #31
 8000f94:	4907      	ldr	r1, [pc, #28]	; (8000fb4 <__NVIC_EnableIRQ+0x38>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff4c 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800109a:	f7ff ff61 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 800109e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	6978      	ldr	r0, [r7, #20]
 80010a6:	f7ff ffb1 	bl	800100c <NVIC_EncodePriority>
 80010aa:	4602      	mov	r2, r0
 80010ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff80 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010b8:	bf00      	nop
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff54 	bl	8000f7c <__NVIC_EnableIRQ>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d008      	beq.n	8001106 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2204      	movs	r2, #4
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e022      	b.n	800114c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 020e 	bic.w	r2, r2, #14
 8001114:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0201 	bic.w	r2, r2, #1
 8001124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f003 021c 	and.w	r2, r3, #28
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	2101      	movs	r1, #1
 8001134:	fa01 f202 	lsl.w	r2, r1, r2
 8001138:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d005      	beq.n	800117c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2204      	movs	r2, #4
 8001174:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e029      	b.n	80011d0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 020e 	bic.w	r2, r2, #14
 800118a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0201 	bic.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	f003 021c 	and.w	r2, r3, #28
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	2101      	movs	r1, #1
 80011aa:	fa01 f202 	lsl.w	r2, r1, r2
 80011ae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	4798      	blx	r3
    }
  }
  return status;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	e17f      	b.n	80014ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2101      	movs	r1, #1
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	4013      	ands	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 8171 	beq.w	80014e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d00b      	beq.n	8001224 <HAL_GPIO_Init+0x48>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d007      	beq.n	8001224 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001218:	2b11      	cmp	r3, #17
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b12      	cmp	r3, #18
 8001222:	d130      	bne.n	8001286 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800125a:	2201      	movs	r2, #1
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	091b      	lsrs	r3, r3, #4
 8001270:	f003 0201 	and.w	r2, r3, #1
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b03      	cmp	r3, #3
 8001290:	d118      	bne.n	80012c4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001298:	2201      	movs	r2, #1
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	f003 0201 	and.w	r2, r3, #1
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x128>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b12      	cmp	r3, #18
 8001302:	d123      	bne.n	800134c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	08da      	lsrs	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	6939      	ldr	r1, [r7, #16]
 8001348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0203 	and.w	r2, r3, #3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80ac 	beq.w	80014e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	4b5f      	ldr	r3, [pc, #380]	; (800150c <HAL_GPIO_Init+0x330>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	4a5e      	ldr	r2, [pc, #376]	; (800150c <HAL_GPIO_Init+0x330>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6613      	str	r3, [r2, #96]	; 0x60
 800139a:	4b5c      	ldr	r3, [pc, #368]	; (800150c <HAL_GPIO_Init+0x330>)
 800139c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013a6:	4a5a      	ldr	r2, [pc, #360]	; (8001510 <HAL_GPIO_Init+0x334>)
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013d0:	d025      	beq.n	800141e <HAL_GPIO_Init+0x242>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4f      	ldr	r2, [pc, #316]	; (8001514 <HAL_GPIO_Init+0x338>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01f      	beq.n	800141a <HAL_GPIO_Init+0x23e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4e      	ldr	r2, [pc, #312]	; (8001518 <HAL_GPIO_Init+0x33c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x23a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4d      	ldr	r2, [pc, #308]	; (800151c <HAL_GPIO_Init+0x340>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x236>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4c      	ldr	r2, [pc, #304]	; (8001520 <HAL_GPIO_Init+0x344>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x232>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4b      	ldr	r2, [pc, #300]	; (8001524 <HAL_GPIO_Init+0x348>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x22e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4a      	ldr	r2, [pc, #296]	; (8001528 <HAL_GPIO_Init+0x34c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x22a>
 8001402:	2306      	movs	r3, #6
 8001404:	e00c      	b.n	8001420 <HAL_GPIO_Init+0x244>
 8001406:	2307      	movs	r3, #7
 8001408:	e00a      	b.n	8001420 <HAL_GPIO_Init+0x244>
 800140a:	2305      	movs	r3, #5
 800140c:	e008      	b.n	8001420 <HAL_GPIO_Init+0x244>
 800140e:	2304      	movs	r3, #4
 8001410:	e006      	b.n	8001420 <HAL_GPIO_Init+0x244>
 8001412:	2303      	movs	r3, #3
 8001414:	e004      	b.n	8001420 <HAL_GPIO_Init+0x244>
 8001416:	2302      	movs	r3, #2
 8001418:	e002      	b.n	8001420 <HAL_GPIO_Init+0x244>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_GPIO_Init+0x244>
 800141e:	2300      	movs	r3, #0
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	f002 0203 	and.w	r2, r2, #3
 8001426:	0092      	lsls	r2, r2, #2
 8001428:	4093      	lsls	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001430:	4937      	ldr	r1, [pc, #220]	; (8001510 <HAL_GPIO_Init+0x334>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800143e:	4b3b      	ldr	r3, [pc, #236]	; (800152c <HAL_GPIO_Init+0x350>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001462:	4a32      	ldr	r2, [pc, #200]	; (800152c <HAL_GPIO_Init+0x350>)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001468:	4b30      	ldr	r3, [pc, #192]	; (800152c <HAL_GPIO_Init+0x350>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800148c:	4a27      	ldr	r2, [pc, #156]	; (800152c <HAL_GPIO_Init+0x350>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <HAL_GPIO_Init+0x350>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014b6:	4a1d      	ldr	r2, [pc, #116]	; (800152c <HAL_GPIO_Init+0x350>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_GPIO_Init+0x350>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014e0:	4a12      	ldr	r2, [pc, #72]	; (800152c <HAL_GPIO_Init+0x350>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa22 f303 	lsr.w	r3, r2, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f47f ae78 	bne.w	80011ec <HAL_GPIO_Init+0x10>
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	40010000 	.word	0x40010000
 8001514:	48000400 	.word	0x48000400
 8001518:	48000800 	.word	0x48000800
 800151c:	48000c00 	.word	0x48000c00
 8001520:	48001000 	.word	0x48001000
 8001524:	48001400 	.word	0x48001400
 8001528:	48001800 	.word	0x48001800
 800152c:	40010400 	.word	0x40010400

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800154c:	e002      	b.n	8001554 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <HAL_PWREx_GetVoltageRange+0x18>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40007000 	.word	0x40007000

0800157c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800158a:	d130      	bne.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800158c:	4b23      	ldr	r3, [pc, #140]	; (800161c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001598:	d038      	beq.n	800160c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015a2:	4a1e      	ldr	r2, [pc, #120]	; (800161c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2232      	movs	r2, #50	; 0x32
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0c9b      	lsrs	r3, r3, #18
 80015bc:	3301      	adds	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015c0:	e002      	b.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d4:	d102      	bne.n	80015dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f2      	bne.n	80015c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e8:	d110      	bne.n	800160c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e00f      	b.n	800160e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015fa:	d007      	beq.n	800160c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800160a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40007000 	.word	0x40007000
 8001620:	20000000 	.word	0x20000000
 8001624:	431bde83 	.word	0x431bde83

08001628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e3d4      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800163a:	4ba1      	ldr	r3, [pc, #644]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001644:	4b9e      	ldr	r3, [pc, #632]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 80e4 	beq.w	8001824 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d007      	beq.n	8001672 <HAL_RCC_OscConfig+0x4a>
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2b0c      	cmp	r3, #12
 8001666:	f040 808b 	bne.w	8001780 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2b01      	cmp	r3, #1
 800166e:	f040 8087 	bne.w	8001780 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001672:	4b93      	ldr	r3, [pc, #588]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_RCC_OscConfig+0x62>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e3ac      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1a      	ldr	r2, [r3, #32]
 800168e:	4b8c      	ldr	r3, [pc, #560]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d004      	beq.n	80016a4 <HAL_RCC_OscConfig+0x7c>
 800169a:	4b89      	ldr	r3, [pc, #548]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016a2:	e005      	b.n	80016b0 <HAL_RCC_OscConfig+0x88>
 80016a4:	4b86      	ldr	r3, [pc, #536]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80016a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d223      	bcs.n	80016fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fd73 	bl	80021a4 <RCC_SetFlashLatencyFromMSIRange>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e38d      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c8:	4b7d      	ldr	r3, [pc, #500]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a7c      	ldr	r2, [pc, #496]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80016ce:	f043 0308 	orr.w	r3, r3, #8
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	4b7a      	ldr	r3, [pc, #488]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4977      	ldr	r1, [pc, #476]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e6:	4b76      	ldr	r3, [pc, #472]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	4972      	ldr	r1, [pc, #456]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	604b      	str	r3, [r1, #4]
 80016fa:	e025      	b.n	8001748 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016fc:	4b70      	ldr	r3, [pc, #448]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a6f      	ldr	r2, [pc, #444]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 8001702:	f043 0308 	orr.w	r3, r3, #8
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b6d      	ldr	r3, [pc, #436]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	496a      	ldr	r1, [pc, #424]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171a:	4b69      	ldr	r3, [pc, #420]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	4965      	ldr	r1, [pc, #404]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 800172a:	4313      	orrs	r3, r2
 800172c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d109      	bne.n	8001748 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fd33 	bl	80021a4 <RCC_SetFlashLatencyFromMSIRange>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e34d      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001748:	f000 fc36 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 800174c:	4602      	mov	r2, r0
 800174e:	4b5c      	ldr	r3, [pc, #368]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	f003 030f 	and.w	r3, r3, #15
 8001758:	495a      	ldr	r1, [pc, #360]	; (80018c4 <HAL_RCC_OscConfig+0x29c>)
 800175a:	5ccb      	ldrb	r3, [r1, r3]
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	fa22 f303 	lsr.w	r3, r2, r3
 8001764:	4a58      	ldr	r2, [pc, #352]	; (80018c8 <HAL_RCC_OscConfig+0x2a0>)
 8001766:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001768:	4b58      	ldr	r3, [pc, #352]	; (80018cc <HAL_RCC_OscConfig+0x2a4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fab7 	bl	8000ce0 <HAL_InitTick>
 8001772:	4603      	mov	r3, r0
 8001774:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d052      	beq.n	8001822 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	e331      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d032      	beq.n	80017ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001788:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a4c      	ldr	r2, [pc, #304]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001794:	f7ff fbb4 	bl	8000f00 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800179c:	f7ff fbb0 	bl	8000f00 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e31a      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ae:	4b44      	ldr	r3, [pc, #272]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ba:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a40      	ldr	r2, [pc, #256]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80017c0:	f043 0308 	orr.w	r3, r3, #8
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b3e      	ldr	r3, [pc, #248]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	493b      	ldr	r1, [pc, #236]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017d8:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	4936      	ldr	r1, [pc, #216]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]
 80017ec:	e01a      	b.n	8001824 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017ee:	4b34      	ldr	r3, [pc, #208]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a33      	ldr	r2, [pc, #204]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017fa:	f7ff fb81 	bl	8000f00 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001802:	f7ff fb7d 	bl	8000f00 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e2e7      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001814:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f0      	bne.n	8001802 <HAL_RCC_OscConfig+0x1da>
 8001820:	e000      	b.n	8001824 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001822:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d074      	beq.n	800191a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2b08      	cmp	r3, #8
 8001834:	d005      	beq.n	8001842 <HAL_RCC_OscConfig+0x21a>
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b0c      	cmp	r3, #12
 800183a:	d10e      	bne.n	800185a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d10b      	bne.n	800185a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d064      	beq.n	8001918 <HAL_RCC_OscConfig+0x2f0>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d160      	bne.n	8001918 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e2c4      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x24a>
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 800186a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e01d      	b.n	80018ae <HAL_RCC_OscConfig+0x286>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_OscConfig+0x26e>
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 8001882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0c      	ldr	r2, [pc, #48]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 800188e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e00b      	b.n	80018ae <HAL_RCC_OscConfig+0x286>
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 800189c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <HAL_RCC_OscConfig+0x298>)
 80018a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d01c      	beq.n	80018f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff fb23 	bl	8000f00 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018bc:	e011      	b.n	80018e2 <HAL_RCC_OscConfig+0x2ba>
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	08008100 	.word	0x08008100
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff fb16 	bl	8000f00 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e280      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018e2:	4baf      	ldr	r3, [pc, #700]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x2a8>
 80018ee:	e014      	b.n	800191a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fb06 	bl	8000f00 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fb02 	bl	8000f00 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e26c      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800190a:	4ba5      	ldr	r3, [pc, #660]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2d0>
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d060      	beq.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	2b04      	cmp	r3, #4
 800192a:	d005      	beq.n	8001938 <HAL_RCC_OscConfig+0x310>
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2b0c      	cmp	r3, #12
 8001930:	d119      	bne.n	8001966 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d116      	bne.n	8001966 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001938:	4b99      	ldr	r3, [pc, #612]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_OscConfig+0x328>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e249      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b93      	ldr	r3, [pc, #588]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	061b      	lsls	r3, r3, #24
 800195e:	4990      	ldr	r1, [pc, #576]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001964:	e040      	b.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d023      	beq.n	80019b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800196e:	4b8c      	ldr	r3, [pc, #560]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a8b      	ldr	r2, [pc, #556]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197a:	f7ff fac1 	bl	8000f00 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001982:	f7ff fabd 	bl	8000f00 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e227      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001994:	4b82      	ldr	r3, [pc, #520]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	4b7f      	ldr	r3, [pc, #508]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	497c      	ldr	r1, [pc, #496]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
 80019b4:	e018      	b.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b6:	4b7a      	ldr	r3, [pc, #488]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a79      	ldr	r2, [pc, #484]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 80019bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff fa9d 	bl	8000f00 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff fa99 	bl	8000f00 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e203      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019dc:	4b70      	ldr	r3, [pc, #448]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f0      	bne.n	80019ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d03c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d01c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fc:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 80019fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a02:	4a67      	ldr	r2, [pc, #412]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fa78 	bl	8000f00 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff fa74 	bl	8000f00 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e1de      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a26:	4b5e      	ldr	r3, [pc, #376]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0ef      	beq.n	8001a14 <HAL_RCC_OscConfig+0x3ec>
 8001a34:	e01b      	b.n	8001a6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a36:	4b5a      	ldr	r3, [pc, #360]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3c:	4a58      	ldr	r2, [pc, #352]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a46:	f7ff fa5b 	bl	8000f00 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4e:	f7ff fa57 	bl	8000f00 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e1c1      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a60:	4b4f      	ldr	r3, [pc, #316]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1ef      	bne.n	8001a4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80a6 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a80:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10d      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8c:	4b44      	ldr	r3, [pc, #272]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	4a43      	ldr	r2, [pc, #268]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a96:	6593      	str	r3, [r2, #88]	; 0x58
 8001a98:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa8:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <HAL_RCC_OscConfig+0x57c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d118      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ab4:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HAL_RCC_OscConfig+0x57c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a3a      	ldr	r2, [pc, #232]	; (8001ba4 <HAL_RCC_OscConfig+0x57c>)
 8001aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fa1e 	bl	8000f00 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac8:	f7ff fa1a 	bl	8000f00 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e184      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ada:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <HAL_RCC_OscConfig+0x57c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d108      	bne.n	8001b00 <HAL_RCC_OscConfig+0x4d8>
 8001aee:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af4:	4a2a      	ldr	r2, [pc, #168]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afe:	e024      	b.n	8001b4a <HAL_RCC_OscConfig+0x522>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d110      	bne.n	8001b2a <HAL_RCC_OscConfig+0x502>
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0e:	4a24      	ldr	r2, [pc, #144]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b28:	e00f      	b.n	8001b4a <HAL_RCC_OscConfig+0x522>
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b30:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001b32:	f023 0301 	bic.w	r3, r3, #1
 8001b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b40:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001b42:	f023 0304 	bic.w	r3, r3, #4
 8001b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d016      	beq.n	8001b80 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b52:	f7ff f9d5 	bl	8000f00 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f7ff f9d1 	bl	8000f00 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e139      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_OscConfig+0x578>)
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0ed      	beq.n	8001b5a <HAL_RCC_OscConfig+0x532>
 8001b7e:	e01a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff f9be 	bl	8000f00 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b86:	e00f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b88:	f7ff f9ba 	bl	8000f00 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d906      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e122      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba8:	4b90      	ldr	r3, [pc, #576]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1e8      	bne.n	8001b88 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bb6:	7ffb      	ldrb	r3, [r7, #31]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbc:	4b8b      	ldr	r3, [pc, #556]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc0:	4a8a      	ldr	r2, [pc, #552]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 8108 	beq.w	8001de2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	f040 80d0 	bne.w	8001d7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bdc:	4b83      	ldr	r3, [pc, #524]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d130      	bne.n	8001c52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d127      	bne.n	8001c52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d11f      	bne.n	8001c52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c1c:	2a07      	cmp	r2, #7
 8001c1e:	bf14      	ite	ne
 8001c20:	2201      	movne	r2, #1
 8001c22:	2200      	moveq	r2, #0
 8001c24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d113      	bne.n	8001c52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	3b01      	subs	r3, #1
 8001c38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d109      	bne.n	8001c52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	085b      	lsrs	r3, r3, #1
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d06e      	beq.n	8001d30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	2b0c      	cmp	r3, #12
 8001c56:	d069      	beq.n	8001d2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c58:	4b64      	ldr	r3, [pc, #400]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c64:	4b61      	ldr	r3, [pc, #388]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0b7      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c74:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a5c      	ldr	r2, [pc, #368]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c80:	f7ff f93e 	bl	8000f00 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff f93a 	bl	8000f00 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e0a4      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9a:	4b54      	ldr	r3, [pc, #336]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca6:	4b51      	ldr	r3, [pc, #324]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <HAL_RCC_OscConfig+0x7c8>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cb6:	3a01      	subs	r2, #1
 8001cb8:	0112      	lsls	r2, r2, #4
 8001cba:	4311      	orrs	r1, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cc0:	0212      	lsls	r2, r2, #8
 8001cc2:	4311      	orrs	r1, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cc8:	0852      	lsrs	r2, r2, #1
 8001cca:	3a01      	subs	r2, #1
 8001ccc:	0552      	lsls	r2, r2, #21
 8001cce:	4311      	orrs	r1, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cd4:	0852      	lsrs	r2, r2, #1
 8001cd6:	3a01      	subs	r2, #1
 8001cd8:	0652      	lsls	r2, r2, #25
 8001cda:	4311      	orrs	r1, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ce0:	0912      	lsrs	r2, r2, #4
 8001ce2:	0452      	lsls	r2, r2, #17
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	4941      	ldr	r1, [pc, #260]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a3e      	ldr	r2, [pc, #248]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf8:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4a3b      	ldr	r2, [pc, #236]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d04:	f7ff f8fc 	bl	8000f00 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7ff f8f8 	bl	8000f00 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e062      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1e:	4b33      	ldr	r3, [pc, #204]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d2a:	e05a      	b.n	8001de2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e059      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d152      	bne.n	8001de2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a2a      	ldr	r2, [pc, #168]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d48:	4b28      	ldr	r3, [pc, #160]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a27      	ldr	r2, [pc, #156]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d54:	f7ff f8d4 	bl	8000f00 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7ff f8d0 	bl	8000f00 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e03a      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6e:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x734>
 8001d7a:	e032      	b.n	8001de2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d02d      	beq.n	8001dde <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a19      	ldr	r2, [pc, #100]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001d88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d105      	bne.n	8001da6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	4a13      	ldr	r2, [pc, #76]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001da0:	f023 0303 	bic.w	r3, r3, #3
 8001da4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	4a10      	ldr	r2, [pc, #64]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001dac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff f8a3 	bl	8000f00 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7ff f89f 	bl	8000f00 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e009      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_RCC_OscConfig+0x7c4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x796>
 8001ddc:	e001      	b.n	8001de2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	f99d808c 	.word	0xf99d808c

08001df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0c8      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e08:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d910      	bls.n	8001e38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 0207 	bic.w	r2, r3, #7
 8001e1e:	4961      	ldr	r1, [pc, #388]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b5f      	ldr	r3, [pc, #380]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0b0      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d04c      	beq.n	8001ede <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d107      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4c:	4b56      	ldr	r3, [pc, #344]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d121      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e09e      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e64:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d115      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e092      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e7c:	4b4a      	ldr	r3, [pc, #296]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e086      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e8c:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e07e      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e9c:	4b42      	ldr	r3, [pc, #264]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f023 0203 	bic.w	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	493f      	ldr	r1, [pc, #252]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eae:	f7ff f827 	bl	8000f00 <HAL_GetTick>
 8001eb2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb6:	f7ff f823 	bl	8000f00 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e066      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ecc:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 020c 	and.w	r2, r3, #12
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d1eb      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d008      	beq.n	8001efc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eea:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	492c      	ldr	r1, [pc, #176]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d210      	bcs.n	8001f2c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0207 	bic.w	r2, r3, #7
 8001f12:	4924      	ldr	r1, [pc, #144]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e036      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4918      	ldr	r1, [pc, #96]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4910      	ldr	r1, [pc, #64]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f6a:	f000 f825 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	490c      	ldr	r1, [pc, #48]	; (8001fac <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	5ccb      	ldrb	r3, [r1, r3]
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fea6 	bl	8000ce0 <HAL_InitTick>
 8001f94:	4603      	mov	r3, r0
 8001f96:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f98:	7afb      	ldrb	r3, [r7, #11]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08008100 	.word	0x08008100
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc6:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd0:	4b3b      	ldr	r3, [pc, #236]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x34>
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d121      	bne.n	800202a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d11e      	bne.n	800202a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fec:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ff8:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e005      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002014:	4a2b      	ldr	r2, [pc, #172]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10d      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002028:	e00a      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	2b04      	cmp	r3, #4
 800202e:	d102      	bne.n	8002036 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	e004      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b08      	cmp	r3, #8
 800203a:	d101      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800203c:	4b23      	ldr	r3, [pc, #140]	; (80020cc <HAL_RCC_GetSysClockFreq+0x114>)
 800203e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b0c      	cmp	r3, #12
 8002044:	d134      	bne.n	80020b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d003      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0xa6>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d003      	beq.n	8002064 <HAL_RCC_GetSysClockFreq+0xac>
 800205c:	e005      	b.n	800206a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002060:	617b      	str	r3, [r7, #20]
      break;
 8002062:	e005      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002064:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002066:	617b      	str	r3, [r7, #20]
      break;
 8002068:	e002      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	617b      	str	r3, [r7, #20]
      break;
 800206e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	3301      	adds	r3, #1
 800207c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	fb02 f203 	mul.w	r2, r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	0e5b      	lsrs	r3, r3, #25
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	3301      	adds	r3, #1
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020b0:	69bb      	ldr	r3, [r7, #24]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	08008118 	.word	0x08008118
 80020c8:	00f42400 	.word	0x00f42400
 80020cc:	007a1200 	.word	0x007a1200

080020d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000000 	.word	0x20000000

080020e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020ec:	f7ff fff0 	bl	80020d0 <HAL_RCC_GetHCLKFreq>
 80020f0:	4602      	mov	r2, r0
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_RCC_GetPCLK1Freq+0x24>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	0a1b      	lsrs	r3, r3, #8
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	4904      	ldr	r1, [pc, #16]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020fe:	5ccb      	ldrb	r3, [r1, r3]
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000
 8002110:	08008110 	.word	0x08008110

08002114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002118:	f7ff ffda 	bl	80020d0 <HAL_RCC_GetHCLKFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	0adb      	lsrs	r3, r3, #11
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4904      	ldr	r1, [pc, #16]	; (800213c <HAL_RCC_GetPCLK2Freq+0x28>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	08008110 	.word	0x08008110

08002140 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	220f      	movs	r2, #15
 800214e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_RCC_GetClockConfig+0x5c>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0203 	and.w	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_RCC_GetClockConfig+0x5c>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_RCC_GetClockConfig+0x5c>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_GetClockConfig+0x5c>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	08db      	lsrs	r3, r3, #3
 800217a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <HAL_RCC_GetClockConfig+0x60>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0207 	and.w	r2, r3, #7
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	601a      	str	r2, [r3, #0]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	40022000 	.word	0x40022000

080021a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021b0:	4b2a      	ldr	r3, [pc, #168]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021bc:	f7ff f9d0 	bl	8001560 <HAL_PWREx_GetVoltageRange>
 80021c0:	6178      	str	r0, [r7, #20]
 80021c2:	e014      	b.n	80021ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021c4:	4b25      	ldr	r3, [pc, #148]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	4a24      	ldr	r2, [pc, #144]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ce:	6593      	str	r3, [r2, #88]	; 0x58
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021dc:	f7ff f9c0 	bl	8001560 <HAL_PWREx_GetVoltageRange>
 80021e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021f4:	d10b      	bne.n	800220e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b80      	cmp	r3, #128	; 0x80
 80021fa:	d919      	bls.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002200:	d902      	bls.n	8002208 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002202:	2302      	movs	r3, #2
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	e013      	b.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002208:	2301      	movs	r3, #1
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	e010      	b.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b80      	cmp	r3, #128	; 0x80
 8002212:	d902      	bls.n	800221a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002214:	2303      	movs	r3, #3
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	e00a      	b.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b80      	cmp	r3, #128	; 0x80
 800221e:	d102      	bne.n	8002226 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002220:	2302      	movs	r3, #2
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	e004      	b.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b70      	cmp	r3, #112	; 0x70
 800222a:	d101      	bne.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800222c:	2301      	movs	r3, #1
 800222e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 0207 	bic.w	r2, r3, #7
 8002238:	4909      	ldr	r1, [pc, #36]	; (8002260 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002240:	4b07      	ldr	r3, [pc, #28]	; (8002260 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	429a      	cmp	r2, r3
 800224c:	d001      	beq.n	8002252 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	40022000 	.word	0x40022000

08002264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800226c:	2300      	movs	r3, #0
 800226e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002270:	2300      	movs	r3, #0
 8002272:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800227c:	2b00      	cmp	r3, #0
 800227e:	d041      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002284:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002288:	d02a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800228a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800228e:	d824      	bhi.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002290:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002294:	d008      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002296:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800229a:	d81e      	bhi.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a4:	d010      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022a6:	e018      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022a8:	4b86      	ldr	r3, [pc, #536]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4a85      	ldr	r2, [pc, #532]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022b4:	e015      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2100      	movs	r1, #0
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fabb 	bl	8002838 <RCCEx_PLLSAI1_Config>
 80022c2:	4603      	mov	r3, r0
 80022c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022c6:	e00c      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3320      	adds	r3, #32
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fba6 	bl	8002a20 <RCCEx_PLLSAI2_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022d8:	e003      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	74fb      	strb	r3, [r7, #19]
      break;
 80022de:	e000      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022e2:	7cfb      	ldrb	r3, [r7, #19]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10b      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022e8:	4b76      	ldr	r3, [pc, #472]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022f6:	4973      	ldr	r1, [pc, #460]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022fe:	e001      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d041      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002314:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002318:	d02a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800231a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800231e:	d824      	bhi.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002320:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002324:	d008      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800232a:	d81e      	bhi.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002334:	d010      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002336:	e018      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002338:	4b62      	ldr	r3, [pc, #392]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a61      	ldr	r2, [pc, #388]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002342:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002344:	e015      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3304      	adds	r3, #4
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fa73 	bl	8002838 <RCCEx_PLLSAI1_Config>
 8002352:	4603      	mov	r3, r0
 8002354:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002356:	e00c      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3320      	adds	r3, #32
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fb5e 	bl	8002a20 <RCCEx_PLLSAI2_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002368:	e003      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	74fb      	strb	r3, [r7, #19]
      break;
 800236e:	e000      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10b      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002378:	4b52      	ldr	r3, [pc, #328]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002386:	494f      	ldr	r1, [pc, #316]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800238e:	e001      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80a0 	beq.w	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a2:	2300      	movs	r3, #0
 80023a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023b6:	2300      	movs	r3, #0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00d      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023bc:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	4a40      	ldr	r2, [pc, #256]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c6:	6593      	str	r3, [r2, #88]	; 0x58
 80023c8:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d4:	2301      	movs	r3, #1
 80023d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023d8:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a3a      	ldr	r2, [pc, #232]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023e4:	f7fe fd8c 	bl	8000f00 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023ea:	e009      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ec:	f7fe fd88 	bl	8000f00 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d902      	bls.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	74fb      	strb	r3, [r7, #19]
        break;
 80023fe:	e005      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002400:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0ef      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d15c      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002412:	4b2c      	ldr	r3, [pc, #176]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01f      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	429a      	cmp	r2, r3
 800242e:	d019      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800243c:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002442:	4a20      	ldr	r2, [pc, #128]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800244c:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002452:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800245c:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d016      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246e:	f7fe fd47 	bl	8000f00 <HAL_GetTick>
 8002472:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002474:	e00b      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7fe fd43 	bl	8000f00 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	; 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d902      	bls.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	74fb      	strb	r3, [r7, #19]
            break;
 800248c:	e006      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0ec      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800249c:	7cfb      	ldrb	r3, [r7, #19]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b2:	4904      	ldr	r1, [pc, #16]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024ba:	e009      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
 80024c0:	e006      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d0:	7c7b      	ldrb	r3, [r7, #17]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d105      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d6:	4b9e      	ldr	r3, [pc, #632]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	4a9d      	ldr	r2, [pc, #628]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ee:	4b98      	ldr	r3, [pc, #608]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f4:	f023 0203 	bic.w	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fc:	4994      	ldr	r1, [pc, #592]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002510:	4b8f      	ldr	r3, [pc, #572]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002516:	f023 020c 	bic.w	r2, r3, #12
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	498c      	ldr	r1, [pc, #560]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002532:	4b87      	ldr	r3, [pc, #540]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002538:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	4983      	ldr	r1, [pc, #524]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002554:	4b7e      	ldr	r3, [pc, #504]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	497b      	ldr	r1, [pc, #492]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002576:	4b76      	ldr	r3, [pc, #472]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002584:	4972      	ldr	r1, [pc, #456]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002598:	4b6d      	ldr	r3, [pc, #436]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a6:	496a      	ldr	r1, [pc, #424]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ba:	4b65      	ldr	r3, [pc, #404]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	4961      	ldr	r1, [pc, #388]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025dc:	4b5c      	ldr	r3, [pc, #368]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ea:	4959      	ldr	r1, [pc, #356]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025fe:	4b54      	ldr	r3, [pc, #336]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260c:	4950      	ldr	r1, [pc, #320]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002620:	4b4b      	ldr	r3, [pc, #300]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	4948      	ldr	r1, [pc, #288]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002642:	4b43      	ldr	r3, [pc, #268]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002648:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	493f      	ldr	r1, [pc, #252]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d028      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002664:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002672:	4937      	ldr	r1, [pc, #220]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002682:	d106      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002684:	4b32      	ldr	r3, [pc, #200]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a31      	ldr	r2, [pc, #196]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800268e:	60d3      	str	r3, [r2, #12]
 8002690:	e011      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002696:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800269a:	d10c      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3304      	adds	r3, #4
 80026a0:	2101      	movs	r1, #1
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f8c8 	bl	8002838 <RCCEx_PLLSAI1_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026b2:	7cfb      	ldrb	r3, [r7, #19]
 80026b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d028      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026c2:	4b23      	ldr	r3, [pc, #140]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	491f      	ldr	r1, [pc, #124]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e0:	d106      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e2:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	4a1a      	ldr	r2, [pc, #104]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ec:	60d3      	str	r3, [r2, #12]
 80026ee:	e011      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026f8:	d10c      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2101      	movs	r1, #1
 8002700:	4618      	mov	r0, r3
 8002702:	f000 f899 	bl	8002838 <RCCEx_PLLSAI1_Config>
 8002706:	4603      	mov	r3, r0
 8002708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800270a:	7cfb      	ldrb	r3, [r7, #19]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d02b      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272e:	4908      	ldr	r1, [pc, #32]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800273e:	d109      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a02      	ldr	r2, [pc, #8]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800274a:	60d3      	str	r3, [r2, #12]
 800274c:	e014      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002758:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800275c:	d10c      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	2101      	movs	r1, #1
 8002764:	4618      	mov	r0, r3
 8002766:	f000 f867 	bl	8002838 <RCCEx_PLLSAI1_Config>
 800276a:	4603      	mov	r3, r0
 800276c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d02f      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002784:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002792:	4928      	ldr	r1, [pc, #160]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800279e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027a2:	d10d      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3304      	adds	r3, #4
 80027a8:	2102      	movs	r1, #2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f844 	bl	8002838 <RCCEx_PLLSAI1_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d014      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	74bb      	strb	r3, [r7, #18]
 80027be:	e011      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3320      	adds	r3, #32
 80027ce:	2102      	movs	r1, #2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f925 	bl	8002a20 <RCCEx_PLLSAI2_Config>
 80027d6:	4603      	mov	r3, r0
 80027d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027da:	7cfb      	ldrb	r3, [r7, #19]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027f0:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027fe:	490d      	ldr	r1, [pc, #52]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002818:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002822:	4904      	ldr	r1, [pc, #16]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800282a:	7cbb      	ldrb	r3, [r7, #18]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000

08002838 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002846:	4b75      	ldr	r3, [pc, #468]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d018      	beq.n	8002884 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002852:	4b72      	ldr	r3, [pc, #456]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f003 0203 	and.w	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d10d      	bne.n	800287e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
       ||
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800286a:	4b6c      	ldr	r3, [pc, #432]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	091b      	lsrs	r3, r3, #4
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
       ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d047      	beq.n	800290e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
 8002882:	e044      	b.n	800290e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b03      	cmp	r3, #3
 800288a:	d018      	beq.n	80028be <RCCEx_PLLSAI1_Config+0x86>
 800288c:	2b03      	cmp	r3, #3
 800288e:	d825      	bhi.n	80028dc <RCCEx_PLLSAI1_Config+0xa4>
 8002890:	2b01      	cmp	r3, #1
 8002892:	d002      	beq.n	800289a <RCCEx_PLLSAI1_Config+0x62>
 8002894:	2b02      	cmp	r3, #2
 8002896:	d009      	beq.n	80028ac <RCCEx_PLLSAI1_Config+0x74>
 8002898:	e020      	b.n	80028dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800289a:	4b60      	ldr	r3, [pc, #384]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d11d      	bne.n	80028e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028aa:	e01a      	b.n	80028e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028ac:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d116      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028bc:	e013      	b.n	80028e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028be:	4b57      	ldr	r3, [pc, #348]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10f      	bne.n	80028ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ca:	4b54      	ldr	r3, [pc, #336]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028da:	e006      	b.n	80028ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
      break;
 80028e0:	e004      	b.n	80028ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028e2:	bf00      	nop
 80028e4:	e002      	b.n	80028ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028e6:	bf00      	nop
 80028e8:	e000      	b.n	80028ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10d      	bne.n	800290e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028f2:	4b4a      	ldr	r3, [pc, #296]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6819      	ldr	r1, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	430b      	orrs	r3, r1
 8002908:	4944      	ldr	r1, [pc, #272]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d17d      	bne.n	8002a10 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002914:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a40      	ldr	r2, [pc, #256]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 800291a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800291e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002920:	f7fe faee 	bl	8000f00 <HAL_GetTick>
 8002924:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002926:	e009      	b.n	800293c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002928:	f7fe faea 	bl	8000f00 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d902      	bls.n	800293c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	73fb      	strb	r3, [r7, #15]
        break;
 800293a:	e005      	b.n	8002948 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800293c:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ef      	bne.n	8002928 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d160      	bne.n	8002a10 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d111      	bne.n	8002978 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002954:	4b31      	ldr	r3, [pc, #196]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800295c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6892      	ldr	r2, [r2, #8]
 8002964:	0211      	lsls	r1, r2, #8
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68d2      	ldr	r2, [r2, #12]
 800296a:	0912      	lsrs	r2, r2, #4
 800296c:	0452      	lsls	r2, r2, #17
 800296e:	430a      	orrs	r2, r1
 8002970:	492a      	ldr	r1, [pc, #168]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	610b      	str	r3, [r1, #16]
 8002976:	e027      	b.n	80029c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d112      	bne.n	80029a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800297e:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002986:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6892      	ldr	r2, [r2, #8]
 800298e:	0211      	lsls	r1, r2, #8
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6912      	ldr	r2, [r2, #16]
 8002994:	0852      	lsrs	r2, r2, #1
 8002996:	3a01      	subs	r2, #1
 8002998:	0552      	lsls	r2, r2, #21
 800299a:	430a      	orrs	r2, r1
 800299c:	491f      	ldr	r1, [pc, #124]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	610b      	str	r3, [r1, #16]
 80029a2:	e011      	b.n	80029c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a4:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6892      	ldr	r2, [r2, #8]
 80029b4:	0211      	lsls	r1, r2, #8
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6952      	ldr	r2, [r2, #20]
 80029ba:	0852      	lsrs	r2, r2, #1
 80029bc:	3a01      	subs	r2, #1
 80029be:	0652      	lsls	r2, r2, #25
 80029c0:	430a      	orrs	r2, r1
 80029c2:	4916      	ldr	r1, [pc, #88]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029c8:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe fa94 	bl	8000f00 <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029da:	e009      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029dc:	f7fe fa90 	bl	8000f00 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d902      	bls.n	80029f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	73fb      	strb	r3, [r7, #15]
          break;
 80029ee:	e005      	b.n	80029fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ef      	beq.n	80029dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	4904      	ldr	r1, [pc, #16]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000

08002a20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a2e:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d018      	beq.n	8002a6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a3a:	4b67      	ldr	r3, [pc, #412]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0203 	and.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d10d      	bne.n	8002a66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a52:	4b61      	ldr	r3, [pc, #388]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
       ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d047      	beq.n	8002af6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	73fb      	strb	r3, [r7, #15]
 8002a6a:	e044      	b.n	8002af6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d018      	beq.n	8002aa6 <RCCEx_PLLSAI2_Config+0x86>
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d825      	bhi.n	8002ac4 <RCCEx_PLLSAI2_Config+0xa4>
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d002      	beq.n	8002a82 <RCCEx_PLLSAI2_Config+0x62>
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d009      	beq.n	8002a94 <RCCEx_PLLSAI2_Config+0x74>
 8002a80:	e020      	b.n	8002ac4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a82:	4b55      	ldr	r3, [pc, #340]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11d      	bne.n	8002aca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a92:	e01a      	b.n	8002aca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a94:	4b50      	ldr	r3, [pc, #320]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d116      	bne.n	8002ace <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa4:	e013      	b.n	8002ace <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aa6:	4b4c      	ldr	r3, [pc, #304]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10f      	bne.n	8002ad2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ab2:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ac2:	e006      	b.n	8002ad2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac8:	e004      	b.n	8002ad4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aca:	bf00      	nop
 8002acc:	e002      	b.n	8002ad4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e000      	b.n	8002ad4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ad2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10d      	bne.n	8002af6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ada:	4b3f      	ldr	r3, [pc, #252]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6819      	ldr	r1, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	430b      	orrs	r3, r1
 8002af0:	4939      	ldr	r1, [pc, #228]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d167      	bne.n	8002bcc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002afc:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a35      	ldr	r2, [pc, #212]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b08:	f7fe f9fa 	bl	8000f00 <HAL_GetTick>
 8002b0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b0e:	e009      	b.n	8002b24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b10:	f7fe f9f6 	bl	8000f00 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d902      	bls.n	8002b24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	73fb      	strb	r3, [r7, #15]
        break;
 8002b22:	e005      	b.n	8002b30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b24:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ef      	bne.n	8002b10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d14a      	bne.n	8002bcc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d111      	bne.n	8002b60 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b3c:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6892      	ldr	r2, [r2, #8]
 8002b4c:	0211      	lsls	r1, r2, #8
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68d2      	ldr	r2, [r2, #12]
 8002b52:	0912      	lsrs	r2, r2, #4
 8002b54:	0452      	lsls	r2, r2, #17
 8002b56:	430a      	orrs	r2, r1
 8002b58:	491f      	ldr	r1, [pc, #124]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	614b      	str	r3, [r1, #20]
 8002b5e:	e011      	b.n	8002b84 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b60:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6892      	ldr	r2, [r2, #8]
 8002b70:	0211      	lsls	r1, r2, #8
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6912      	ldr	r2, [r2, #16]
 8002b76:	0852      	lsrs	r2, r2, #1
 8002b78:	3a01      	subs	r2, #1
 8002b7a:	0652      	lsls	r2, r2, #25
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	4916      	ldr	r1, [pc, #88]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a13      	ldr	r2, [pc, #76]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7fe f9b6 	bl	8000f00 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b96:	e009      	b.n	8002bac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b98:	f7fe f9b2 	bl	8000f00 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d902      	bls.n	8002bac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	73fb      	strb	r3, [r7, #15]
          break;
 8002baa:	e005      	b.n	8002bb8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ef      	beq.n	8002b98 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	4904      	ldr	r1, [pc, #16]	; (8002bd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000

08002bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e049      	b.n	8002c82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f841 	bl	8002c8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3304      	adds	r3, #4
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	f000 f9f8 	bl	8003010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d001      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e04f      	b.n	8002d58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a23      	ldr	r2, [pc, #140]	; (8002d64 <HAL_TIM_Base_Start_IT+0xc4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d01d      	beq.n	8002d16 <HAL_TIM_Base_Start_IT+0x76>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce2:	d018      	beq.n	8002d16 <HAL_TIM_Base_Start_IT+0x76>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <HAL_TIM_Base_Start_IT+0xc8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d013      	beq.n	8002d16 <HAL_TIM_Base_Start_IT+0x76>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1e      	ldr	r2, [pc, #120]	; (8002d6c <HAL_TIM_Base_Start_IT+0xcc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00e      	beq.n	8002d16 <HAL_TIM_Base_Start_IT+0x76>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <HAL_TIM_Base_Start_IT+0xd0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d009      	beq.n	8002d16 <HAL_TIM_Base_Start_IT+0x76>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1b      	ldr	r2, [pc, #108]	; (8002d74 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d004      	beq.n	8002d16 <HAL_TIM_Base_Start_IT+0x76>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d115      	bne.n	8002d42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <HAL_TIM_Base_Start_IT+0xdc>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b06      	cmp	r3, #6
 8002d26:	d015      	beq.n	8002d54 <HAL_TIM_Base_Start_IT+0xb4>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2e:	d011      	beq.n	8002d54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d40:	e008      	b.n	8002d54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0201 	orr.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e000      	b.n	8002d56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40012c00 	.word	0x40012c00
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	40000800 	.word	0x40000800
 8002d70:	40000c00 	.word	0x40000c00
 8002d74:	40013400 	.word	0x40013400
 8002d78:	40014000 	.word	0x40014000
 8002d7c:	00010007 	.word	0x00010007

08002d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d122      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d11b      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0202 	mvn.w	r2, #2
 8002dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f905 	bl	8002fd2 <HAL_TIM_IC_CaptureCallback>
 8002dc8:	e005      	b.n	8002dd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f8f7 	bl	8002fbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f908 	bl	8002fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d122      	bne.n	8002e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d11b      	bne.n	8002e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0204 	mvn.w	r2, #4
 8002e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2202      	movs	r2, #2
 8002e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f8db 	bl	8002fd2 <HAL_TIM_IC_CaptureCallback>
 8002e1c:	e005      	b.n	8002e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f8cd 	bl	8002fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f8de 	bl	8002fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d122      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d11b      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0208 	mvn.w	r2, #8
 8002e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2204      	movs	r2, #4
 8002e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f8b1 	bl	8002fd2 <HAL_TIM_IC_CaptureCallback>
 8002e70:	e005      	b.n	8002e7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f8a3 	bl	8002fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f8b4 	bl	8002fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	2b10      	cmp	r3, #16
 8002e90:	d122      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b10      	cmp	r3, #16
 8002e9e:	d11b      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0210 	mvn.w	r2, #16
 8002ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2208      	movs	r2, #8
 8002eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f887 	bl	8002fd2 <HAL_TIM_IC_CaptureCallback>
 8002ec4:	e005      	b.n	8002ed2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f879 	bl	8002fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f88a 	bl	8002fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d10e      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d107      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0201 	mvn.w	r2, #1
 8002efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fd fe52 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0e:	2b80      	cmp	r3, #128	; 0x80
 8002f10:	d10e      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1c:	2b80      	cmp	r3, #128	; 0x80
 8002f1e:	d107      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f914 	bl	8003158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3e:	d10e      	bne.n	8002f5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	2b80      	cmp	r3, #128	; 0x80
 8002f4c:	d107      	bne.n	8002f5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f907 	bl	800316c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f68:	2b40      	cmp	r3, #64	; 0x40
 8002f6a:	d10e      	bne.n	8002f8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d107      	bne.n	8002f8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f838 	bl	8002ffa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d10e      	bne.n	8002fb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d107      	bne.n	8002fb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f06f 0220 	mvn.w	r2, #32
 8002fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f8c7 	bl	8003144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a40      	ldr	r2, [pc, #256]	; (8003124 <TIM_Base_SetConfig+0x114>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d013      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302e:	d00f      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a3d      	ldr	r2, [pc, #244]	; (8003128 <TIM_Base_SetConfig+0x118>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00b      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a3c      	ldr	r2, [pc, #240]	; (800312c <TIM_Base_SetConfig+0x11c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a3b      	ldr	r2, [pc, #236]	; (8003130 <TIM_Base_SetConfig+0x120>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a3a      	ldr	r2, [pc, #232]	; (8003134 <TIM_Base_SetConfig+0x124>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d108      	bne.n	8003062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a2f      	ldr	r2, [pc, #188]	; (8003124 <TIM_Base_SetConfig+0x114>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01f      	beq.n	80030aa <TIM_Base_SetConfig+0x9a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003070:	d01b      	beq.n	80030aa <TIM_Base_SetConfig+0x9a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a2c      	ldr	r2, [pc, #176]	; (8003128 <TIM_Base_SetConfig+0x118>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d017      	beq.n	80030aa <TIM_Base_SetConfig+0x9a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2b      	ldr	r2, [pc, #172]	; (800312c <TIM_Base_SetConfig+0x11c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <TIM_Base_SetConfig+0x9a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a2a      	ldr	r2, [pc, #168]	; (8003130 <TIM_Base_SetConfig+0x120>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00f      	beq.n	80030aa <TIM_Base_SetConfig+0x9a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a29      	ldr	r2, [pc, #164]	; (8003134 <TIM_Base_SetConfig+0x124>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00b      	beq.n	80030aa <TIM_Base_SetConfig+0x9a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a28      	ldr	r2, [pc, #160]	; (8003138 <TIM_Base_SetConfig+0x128>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d007      	beq.n	80030aa <TIM_Base_SetConfig+0x9a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a27      	ldr	r2, [pc, #156]	; (800313c <TIM_Base_SetConfig+0x12c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <TIM_Base_SetConfig+0x9a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a26      	ldr	r2, [pc, #152]	; (8003140 <TIM_Base_SetConfig+0x130>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d108      	bne.n	80030bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a10      	ldr	r2, [pc, #64]	; (8003124 <TIM_Base_SetConfig+0x114>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00f      	beq.n	8003108 <TIM_Base_SetConfig+0xf8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a12      	ldr	r2, [pc, #72]	; (8003134 <TIM_Base_SetConfig+0x124>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00b      	beq.n	8003108 <TIM_Base_SetConfig+0xf8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a11      	ldr	r2, [pc, #68]	; (8003138 <TIM_Base_SetConfig+0x128>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d007      	beq.n	8003108 <TIM_Base_SetConfig+0xf8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a10      	ldr	r2, [pc, #64]	; (800313c <TIM_Base_SetConfig+0x12c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d003      	beq.n	8003108 <TIM_Base_SetConfig+0xf8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a0f      	ldr	r2, [pc, #60]	; (8003140 <TIM_Base_SetConfig+0x130>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d103      	bne.n	8003110 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	615a      	str	r2, [r3, #20]
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40012c00 	.word	0x40012c00
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800
 8003130:	40000c00 	.word	0x40000c00
 8003134:	40013400 	.word	0x40013400
 8003138:	40014000 	.word	0x40014000
 800313c:	40014400 	.word	0x40014400
 8003140:	40014800 	.word	0x40014800

08003144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e040      	b.n	8003214 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd fd40 	bl	8000c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2224      	movs	r2, #36	; 0x24
 80031ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0201 	bic.w	r2, r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fae4 	bl	800378c <UART_SetConfig>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e022      	b.n	8003214 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fd62 	bl	8003ca0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fde9 	bl	8003de4 <UART_CheckIdleState>
 8003212:	4603      	mov	r3, r0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800322e:	2b20      	cmp	r3, #32
 8003230:	d145      	bne.n	80032be <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_UART_Transmit_IT+0x22>
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e03e      	b.n	80032c0 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_UART_Transmit_IT+0x34>
 800324c:	2302      	movs	r3, #2
 800324e:	e037      	b.n	80032c0 <HAL_UART_Transmit_IT+0xa4>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	88fa      	ldrh	r2, [r7, #6]
 8003262:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	88fa      	ldrh	r2, [r7, #6]
 800326a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2221      	movs	r2, #33	; 0x21
 8003280:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328a:	d107      	bne.n	800329c <HAL_UART_Transmit_IT+0x80>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d103      	bne.n	800329c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <HAL_UART_Transmit_IT+0xb0>)
 8003298:	669a      	str	r2, [r3, #104]	; 0x68
 800329a:	e002      	b.n	80032a2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <HAL_UART_Transmit_IT+0xb4>)
 80032a0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e000      	b.n	80032c0 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
  }
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	0800417f 	.word	0x0800417f
 80032d0:	0800410b 	.word	0x0800410b

080032d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	4613      	mov	r3, r2
 80032e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d131      	bne.n	800334e <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_UART_Receive_IT+0x22>
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e02a      	b.n	8003350 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_UART_Receive_IT+0x34>
 8003304:	2302      	movs	r3, #2
 8003306:	e023      	b.n	8003350 <HAL_UART_Receive_IT+0x7c>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a0f      	ldr	r2, [pc, #60]	; (8003358 <HAL_UART_Receive_IT+0x84>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00e      	beq.n	800333e <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800333c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	461a      	mov	r2, r3
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 fe13 	bl	8003f70 <UART_Start_Receive_IT>
 800334a:	4603      	mov	r3, r0
 800334c:	e000      	b.n	8003350 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800334e:	2302      	movs	r3, #2
  }
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40008000 	.word	0x40008000

0800335c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d113      	bne.n	80033b4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00e      	beq.n	80033b4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d009      	beq.n	80033b4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 81ce 	beq.w	8003746 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	4798      	blx	r3
      }
      return;
 80033b2:	e1c8      	b.n	8003746 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80e3 	beq.w	8003582 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4ba6      	ldr	r3, [pc, #664]	; (8003664 <HAL_UART_IRQHandler+0x308>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80d8 	beq.w	8003582 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d010      	beq.n	80033fe <HAL_UART_IRQHandler+0xa2>
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2201      	movs	r2, #1
 80033ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d010      	beq.n	800342a <HAL_UART_IRQHandler+0xce>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00b      	beq.n	800342a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2202      	movs	r2, #2
 8003418:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003420:	f043 0204 	orr.w	r2, r3, #4
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d010      	beq.n	8003456 <HAL_UART_IRQHandler+0xfa>
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2204      	movs	r2, #4
 8003444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800344c:	f043 0202 	orr.w	r2, r3, #2
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d015      	beq.n	800348c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d104      	bne.n	8003474 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00b      	beq.n	800348c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2208      	movs	r2, #8
 800347a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003482:	f043 0208 	orr.w	r2, r3, #8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003492:	2b00      	cmp	r3, #0
 8003494:	d011      	beq.n	80034ba <HAL_UART_IRQHandler+0x15e>
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00c      	beq.n	80034ba <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8142 	beq.w	800374a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00c      	beq.n	80034ea <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b40      	cmp	r3, #64	; 0x40
 80034fe:	d004      	beq.n	800350a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003506:	2b00      	cmp	r3, #0
 8003508:	d031      	beq.n	800356e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fdb8 	bl	8004080 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b40      	cmp	r3, #64	; 0x40
 800351c:	d123      	bne.n	8003566 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800352c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003532:	2b00      	cmp	r3, #0
 8003534:	d013      	beq.n	800355e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	4a4b      	ldr	r2, [pc, #300]	; (8003668 <HAL_UART_IRQHandler+0x30c>)
 800353c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	4618      	mov	r0, r3
 8003544:	f7fd fe08 	bl	8001158 <HAL_DMA_Abort_IT>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d017      	beq.n	800357e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003558:	4610      	mov	r0, r2
 800355a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355c:	e00f      	b.n	800357e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8fe 	bl	8003760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003564:	e00b      	b.n	800357e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f8fa 	bl	8003760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	e007      	b.n	800357e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f8f6 	bl	8003760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800357c:	e0e5      	b.n	800374a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357e:	bf00      	nop
    return;
 8003580:	e0e3      	b.n	800374a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003586:	2b01      	cmp	r3, #1
 8003588:	f040 80a9 	bne.w	80036de <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80a3 	beq.w	80036de <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 809d 	beq.w	80036de <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2210      	movs	r2, #16
 80035aa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d158      	bne.n	800366c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80035c4:	893b      	ldrh	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80c1 	beq.w	800374e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80035d2:	893a      	ldrh	r2, [r7, #8]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	f080 80ba 	bcs.w	800374e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	893a      	ldrh	r2, [r7, #8]
 80035de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d12a      	bne.n	8003648 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003600:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003620:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0210 	bic.w	r2, r2, #16
 800363c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd fd4a 	bl	80010dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003654:	b29b      	uxth	r3, r3
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	b29b      	uxth	r3, r3
 800365a:	4619      	mov	r1, r3
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f889 	bl	8003774 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003662:	e074      	b.n	800374e <HAL_UART_IRQHandler+0x3f2>
 8003664:	04000120 	.word	0x04000120
 8003668:	080040df 	.word	0x080040df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003678:	b29b      	uxth	r3, r3
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d063      	beq.n	8003752 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d060      	beq.n	8003752 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800369e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0210 	bic.w	r2, r2, #16
 80036d0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036d2:	897b      	ldrh	r3, [r7, #10]
 80036d4:	4619      	mov	r1, r3
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f84c 	bl	8003774 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80036dc:	e039      	b.n	8003752 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00d      	beq.n	8003704 <HAL_UART_IRQHandler+0x3a8>
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fe6d 	bl	80043dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003702:	e029      	b.n	8003758 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00d      	beq.n	800372a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01a      	beq.n	8003756 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
    }
    return;
 8003728:	e015      	b.n	8003756 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	2b00      	cmp	r3, #0
 8003732:	d011      	beq.n	8003758 <HAL_UART_IRQHandler+0x3fc>
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00c      	beq.n	8003758 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fd5b 	bl	80041fa <UART_EndTransmit_IT>
    return;
 8003744:	e008      	b.n	8003758 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003746:	bf00      	nop
 8003748:	e006      	b.n	8003758 <HAL_UART_IRQHandler+0x3fc>
    return;
 800374a:	bf00      	nop
 800374c:	e004      	b.n	8003758 <HAL_UART_IRQHandler+0x3fc>
      return;
 800374e:	bf00      	nop
 8003750:	e002      	b.n	8003758 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003752:	bf00      	nop
 8003754:	e000      	b.n	8003758 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003756:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003758:	3720      	adds	r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop

08003760 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800378c:	b5b0      	push	{r4, r5, r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4bad      	ldr	r3, [pc, #692]	; (8003a6c <UART_SetConfig+0x2e0>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	69f9      	ldr	r1, [r7, #28]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4aa2      	ldr	r2, [pc, #648]	; (8003a70 <UART_SetConfig+0x2e4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	430a      	orrs	r2, r1
 8003806:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a99      	ldr	r2, [pc, #612]	; (8003a74 <UART_SetConfig+0x2e8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d121      	bne.n	8003856 <UART_SetConfig+0xca>
 8003812:	4b99      	ldr	r3, [pc, #612]	; (8003a78 <UART_SetConfig+0x2ec>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	2b03      	cmp	r3, #3
 800381e:	d817      	bhi.n	8003850 <UART_SetConfig+0xc4>
 8003820:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <UART_SetConfig+0x9c>)
 8003822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003826:	bf00      	nop
 8003828:	08003839 	.word	0x08003839
 800382c:	08003845 	.word	0x08003845
 8003830:	0800383f 	.word	0x0800383f
 8003834:	0800384b 	.word	0x0800384b
 8003838:	2301      	movs	r3, #1
 800383a:	76fb      	strb	r3, [r7, #27]
 800383c:	e0e7      	b.n	8003a0e <UART_SetConfig+0x282>
 800383e:	2302      	movs	r3, #2
 8003840:	76fb      	strb	r3, [r7, #27]
 8003842:	e0e4      	b.n	8003a0e <UART_SetConfig+0x282>
 8003844:	2304      	movs	r3, #4
 8003846:	76fb      	strb	r3, [r7, #27]
 8003848:	e0e1      	b.n	8003a0e <UART_SetConfig+0x282>
 800384a:	2308      	movs	r3, #8
 800384c:	76fb      	strb	r3, [r7, #27]
 800384e:	e0de      	b.n	8003a0e <UART_SetConfig+0x282>
 8003850:	2310      	movs	r3, #16
 8003852:	76fb      	strb	r3, [r7, #27]
 8003854:	e0db      	b.n	8003a0e <UART_SetConfig+0x282>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a88      	ldr	r2, [pc, #544]	; (8003a7c <UART_SetConfig+0x2f0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d132      	bne.n	80038c6 <UART_SetConfig+0x13a>
 8003860:	4b85      	ldr	r3, [pc, #532]	; (8003a78 <UART_SetConfig+0x2ec>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d828      	bhi.n	80038c0 <UART_SetConfig+0x134>
 800386e:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <UART_SetConfig+0xe8>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	080038a9 	.word	0x080038a9
 8003878:	080038c1 	.word	0x080038c1
 800387c:	080038c1 	.word	0x080038c1
 8003880:	080038c1 	.word	0x080038c1
 8003884:	080038b5 	.word	0x080038b5
 8003888:	080038c1 	.word	0x080038c1
 800388c:	080038c1 	.word	0x080038c1
 8003890:	080038c1 	.word	0x080038c1
 8003894:	080038af 	.word	0x080038af
 8003898:	080038c1 	.word	0x080038c1
 800389c:	080038c1 	.word	0x080038c1
 80038a0:	080038c1 	.word	0x080038c1
 80038a4:	080038bb 	.word	0x080038bb
 80038a8:	2300      	movs	r3, #0
 80038aa:	76fb      	strb	r3, [r7, #27]
 80038ac:	e0af      	b.n	8003a0e <UART_SetConfig+0x282>
 80038ae:	2302      	movs	r3, #2
 80038b0:	76fb      	strb	r3, [r7, #27]
 80038b2:	e0ac      	b.n	8003a0e <UART_SetConfig+0x282>
 80038b4:	2304      	movs	r3, #4
 80038b6:	76fb      	strb	r3, [r7, #27]
 80038b8:	e0a9      	b.n	8003a0e <UART_SetConfig+0x282>
 80038ba:	2308      	movs	r3, #8
 80038bc:	76fb      	strb	r3, [r7, #27]
 80038be:	e0a6      	b.n	8003a0e <UART_SetConfig+0x282>
 80038c0:	2310      	movs	r3, #16
 80038c2:	76fb      	strb	r3, [r7, #27]
 80038c4:	e0a3      	b.n	8003a0e <UART_SetConfig+0x282>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a6d      	ldr	r2, [pc, #436]	; (8003a80 <UART_SetConfig+0x2f4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d120      	bne.n	8003912 <UART_SetConfig+0x186>
 80038d0:	4b69      	ldr	r3, [pc, #420]	; (8003a78 <UART_SetConfig+0x2ec>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038da:	2b30      	cmp	r3, #48	; 0x30
 80038dc:	d013      	beq.n	8003906 <UART_SetConfig+0x17a>
 80038de:	2b30      	cmp	r3, #48	; 0x30
 80038e0:	d814      	bhi.n	800390c <UART_SetConfig+0x180>
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d009      	beq.n	80038fa <UART_SetConfig+0x16e>
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d810      	bhi.n	800390c <UART_SetConfig+0x180>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <UART_SetConfig+0x168>
 80038ee:	2b10      	cmp	r3, #16
 80038f0:	d006      	beq.n	8003900 <UART_SetConfig+0x174>
 80038f2:	e00b      	b.n	800390c <UART_SetConfig+0x180>
 80038f4:	2300      	movs	r3, #0
 80038f6:	76fb      	strb	r3, [r7, #27]
 80038f8:	e089      	b.n	8003a0e <UART_SetConfig+0x282>
 80038fa:	2302      	movs	r3, #2
 80038fc:	76fb      	strb	r3, [r7, #27]
 80038fe:	e086      	b.n	8003a0e <UART_SetConfig+0x282>
 8003900:	2304      	movs	r3, #4
 8003902:	76fb      	strb	r3, [r7, #27]
 8003904:	e083      	b.n	8003a0e <UART_SetConfig+0x282>
 8003906:	2308      	movs	r3, #8
 8003908:	76fb      	strb	r3, [r7, #27]
 800390a:	e080      	b.n	8003a0e <UART_SetConfig+0x282>
 800390c:	2310      	movs	r3, #16
 800390e:	76fb      	strb	r3, [r7, #27]
 8003910:	e07d      	b.n	8003a0e <UART_SetConfig+0x282>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a5b      	ldr	r2, [pc, #364]	; (8003a84 <UART_SetConfig+0x2f8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d120      	bne.n	800395e <UART_SetConfig+0x1d2>
 800391c:	4b56      	ldr	r3, [pc, #344]	; (8003a78 <UART_SetConfig+0x2ec>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003926:	2bc0      	cmp	r3, #192	; 0xc0
 8003928:	d013      	beq.n	8003952 <UART_SetConfig+0x1c6>
 800392a:	2bc0      	cmp	r3, #192	; 0xc0
 800392c:	d814      	bhi.n	8003958 <UART_SetConfig+0x1cc>
 800392e:	2b80      	cmp	r3, #128	; 0x80
 8003930:	d009      	beq.n	8003946 <UART_SetConfig+0x1ba>
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	d810      	bhi.n	8003958 <UART_SetConfig+0x1cc>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <UART_SetConfig+0x1b4>
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d006      	beq.n	800394c <UART_SetConfig+0x1c0>
 800393e:	e00b      	b.n	8003958 <UART_SetConfig+0x1cc>
 8003940:	2300      	movs	r3, #0
 8003942:	76fb      	strb	r3, [r7, #27]
 8003944:	e063      	b.n	8003a0e <UART_SetConfig+0x282>
 8003946:	2302      	movs	r3, #2
 8003948:	76fb      	strb	r3, [r7, #27]
 800394a:	e060      	b.n	8003a0e <UART_SetConfig+0x282>
 800394c:	2304      	movs	r3, #4
 800394e:	76fb      	strb	r3, [r7, #27]
 8003950:	e05d      	b.n	8003a0e <UART_SetConfig+0x282>
 8003952:	2308      	movs	r3, #8
 8003954:	76fb      	strb	r3, [r7, #27]
 8003956:	e05a      	b.n	8003a0e <UART_SetConfig+0x282>
 8003958:	2310      	movs	r3, #16
 800395a:	76fb      	strb	r3, [r7, #27]
 800395c:	e057      	b.n	8003a0e <UART_SetConfig+0x282>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a49      	ldr	r2, [pc, #292]	; (8003a88 <UART_SetConfig+0x2fc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d125      	bne.n	80039b4 <UART_SetConfig+0x228>
 8003968:	4b43      	ldr	r3, [pc, #268]	; (8003a78 <UART_SetConfig+0x2ec>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003976:	d017      	beq.n	80039a8 <UART_SetConfig+0x21c>
 8003978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397c:	d817      	bhi.n	80039ae <UART_SetConfig+0x222>
 800397e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003982:	d00b      	beq.n	800399c <UART_SetConfig+0x210>
 8003984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003988:	d811      	bhi.n	80039ae <UART_SetConfig+0x222>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <UART_SetConfig+0x20a>
 800398e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003992:	d006      	beq.n	80039a2 <UART_SetConfig+0x216>
 8003994:	e00b      	b.n	80039ae <UART_SetConfig+0x222>
 8003996:	2300      	movs	r3, #0
 8003998:	76fb      	strb	r3, [r7, #27]
 800399a:	e038      	b.n	8003a0e <UART_SetConfig+0x282>
 800399c:	2302      	movs	r3, #2
 800399e:	76fb      	strb	r3, [r7, #27]
 80039a0:	e035      	b.n	8003a0e <UART_SetConfig+0x282>
 80039a2:	2304      	movs	r3, #4
 80039a4:	76fb      	strb	r3, [r7, #27]
 80039a6:	e032      	b.n	8003a0e <UART_SetConfig+0x282>
 80039a8:	2308      	movs	r3, #8
 80039aa:	76fb      	strb	r3, [r7, #27]
 80039ac:	e02f      	b.n	8003a0e <UART_SetConfig+0x282>
 80039ae:	2310      	movs	r3, #16
 80039b0:	76fb      	strb	r3, [r7, #27]
 80039b2:	e02c      	b.n	8003a0e <UART_SetConfig+0x282>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a2d      	ldr	r2, [pc, #180]	; (8003a70 <UART_SetConfig+0x2e4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d125      	bne.n	8003a0a <UART_SetConfig+0x27e>
 80039be:	4b2e      	ldr	r3, [pc, #184]	; (8003a78 <UART_SetConfig+0x2ec>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039cc:	d017      	beq.n	80039fe <UART_SetConfig+0x272>
 80039ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039d2:	d817      	bhi.n	8003a04 <UART_SetConfig+0x278>
 80039d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d8:	d00b      	beq.n	80039f2 <UART_SetConfig+0x266>
 80039da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039de:	d811      	bhi.n	8003a04 <UART_SetConfig+0x278>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <UART_SetConfig+0x260>
 80039e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e8:	d006      	beq.n	80039f8 <UART_SetConfig+0x26c>
 80039ea:	e00b      	b.n	8003a04 <UART_SetConfig+0x278>
 80039ec:	2300      	movs	r3, #0
 80039ee:	76fb      	strb	r3, [r7, #27]
 80039f0:	e00d      	b.n	8003a0e <UART_SetConfig+0x282>
 80039f2:	2302      	movs	r3, #2
 80039f4:	76fb      	strb	r3, [r7, #27]
 80039f6:	e00a      	b.n	8003a0e <UART_SetConfig+0x282>
 80039f8:	2304      	movs	r3, #4
 80039fa:	76fb      	strb	r3, [r7, #27]
 80039fc:	e007      	b.n	8003a0e <UART_SetConfig+0x282>
 80039fe:	2308      	movs	r3, #8
 8003a00:	76fb      	strb	r3, [r7, #27]
 8003a02:	e004      	b.n	8003a0e <UART_SetConfig+0x282>
 8003a04:	2310      	movs	r3, #16
 8003a06:	76fb      	strb	r3, [r7, #27]
 8003a08:	e001      	b.n	8003a0e <UART_SetConfig+0x282>
 8003a0a:	2310      	movs	r3, #16
 8003a0c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a17      	ldr	r2, [pc, #92]	; (8003a70 <UART_SetConfig+0x2e4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	f040 8087 	bne.w	8003b28 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a1a:	7efb      	ldrb	r3, [r7, #27]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d837      	bhi.n	8003a90 <UART_SetConfig+0x304>
 8003a20:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <UART_SetConfig+0x29c>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a4d 	.word	0x08003a4d
 8003a2c:	08003a91 	.word	0x08003a91
 8003a30:	08003a55 	.word	0x08003a55
 8003a34:	08003a91 	.word	0x08003a91
 8003a38:	08003a5b 	.word	0x08003a5b
 8003a3c:	08003a91 	.word	0x08003a91
 8003a40:	08003a91 	.word	0x08003a91
 8003a44:	08003a91 	.word	0x08003a91
 8003a48:	08003a63 	.word	0x08003a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a4c:	f7fe fb4c 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 8003a50:	6178      	str	r0, [r7, #20]
        break;
 8003a52:	e022      	b.n	8003a9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a54:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <UART_SetConfig+0x300>)
 8003a56:	617b      	str	r3, [r7, #20]
        break;
 8003a58:	e01f      	b.n	8003a9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a5a:	f7fe faad 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8003a5e:	6178      	str	r0, [r7, #20]
        break;
 8003a60:	e01b      	b.n	8003a9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a66:	617b      	str	r3, [r7, #20]
        break;
 8003a68:	e017      	b.n	8003a9a <UART_SetConfig+0x30e>
 8003a6a:	bf00      	nop
 8003a6c:	efff69f3 	.word	0xefff69f3
 8003a70:	40008000 	.word	0x40008000
 8003a74:	40013800 	.word	0x40013800
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40004400 	.word	0x40004400
 8003a80:	40004800 	.word	0x40004800
 8003a84:	40004c00 	.word	0x40004c00
 8003a88:	40005000 	.word	0x40005000
 8003a8c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	76bb      	strb	r3, [r7, #26]
        break;
 8003a98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80f1 	beq.w	8003c84 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d305      	bcc.n	8003abe <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d902      	bls.n	8003ac4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	76bb      	strb	r3, [r7, #26]
 8003ac2:	e0df      	b.n	8003c84 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	020b      	lsls	r3, r1, #8
 8003ad6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ada:	0202      	lsls	r2, r0, #8
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	6849      	ldr	r1, [r1, #4]
 8003ae0:	0849      	lsrs	r1, r1, #1
 8003ae2:	4608      	mov	r0, r1
 8003ae4:	f04f 0100 	mov.w	r1, #0
 8003ae8:	1814      	adds	r4, r2, r0
 8003aea:	eb43 0501 	adc.w	r5, r3, r1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	4620      	mov	r0, r4
 8003afa:	4629      	mov	r1, r5
 8003afc:	f7fc fb70 	bl	80001e0 <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4613      	mov	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b0e:	d308      	bcc.n	8003b22 <UART_SetConfig+0x396>
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b16:	d204      	bcs.n	8003b22 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	60da      	str	r2, [r3, #12]
 8003b20:	e0b0      	b.n	8003c84 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	76bb      	strb	r3, [r7, #26]
 8003b26:	e0ad      	b.n	8003c84 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b30:	d15c      	bne.n	8003bec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003b32:	7efb      	ldrb	r3, [r7, #27]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d828      	bhi.n	8003b8a <UART_SetConfig+0x3fe>
 8003b38:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <UART_SetConfig+0x3b4>)
 8003b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3e:	bf00      	nop
 8003b40:	08003b65 	.word	0x08003b65
 8003b44:	08003b6d 	.word	0x08003b6d
 8003b48:	08003b75 	.word	0x08003b75
 8003b4c:	08003b8b 	.word	0x08003b8b
 8003b50:	08003b7b 	.word	0x08003b7b
 8003b54:	08003b8b 	.word	0x08003b8b
 8003b58:	08003b8b 	.word	0x08003b8b
 8003b5c:	08003b8b 	.word	0x08003b8b
 8003b60:	08003b83 	.word	0x08003b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b64:	f7fe fac0 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 8003b68:	6178      	str	r0, [r7, #20]
        break;
 8003b6a:	e013      	b.n	8003b94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b6c:	f7fe fad2 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 8003b70:	6178      	str	r0, [r7, #20]
        break;
 8003b72:	e00f      	b.n	8003b94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b74:	4b49      	ldr	r3, [pc, #292]	; (8003c9c <UART_SetConfig+0x510>)
 8003b76:	617b      	str	r3, [r7, #20]
        break;
 8003b78:	e00c      	b.n	8003b94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7a:	f7fe fa1d 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8003b7e:	6178      	str	r0, [r7, #20]
        break;
 8003b80:	e008      	b.n	8003b94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b86:	617b      	str	r3, [r7, #20]
        break;
 8003b88:	e004      	b.n	8003b94 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	76bb      	strb	r3, [r7, #26]
        break;
 8003b92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d074      	beq.n	8003c84 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	005a      	lsls	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	441a      	add	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b0f      	cmp	r3, #15
 8003bb6:	d916      	bls.n	8003be6 <UART_SetConfig+0x45a>
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbe:	d212      	bcs.n	8003be6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f023 030f 	bic.w	r3, r3, #15
 8003bc8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	89fb      	ldrh	r3, [r7, #14]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	89fa      	ldrh	r2, [r7, #14]
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	e04e      	b.n	8003c84 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	76bb      	strb	r3, [r7, #26]
 8003bea:	e04b      	b.n	8003c84 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bec:	7efb      	ldrb	r3, [r7, #27]
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d827      	bhi.n	8003c42 <UART_SetConfig+0x4b6>
 8003bf2:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <UART_SetConfig+0x46c>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c1d 	.word	0x08003c1d
 8003bfc:	08003c25 	.word	0x08003c25
 8003c00:	08003c2d 	.word	0x08003c2d
 8003c04:	08003c43 	.word	0x08003c43
 8003c08:	08003c33 	.word	0x08003c33
 8003c0c:	08003c43 	.word	0x08003c43
 8003c10:	08003c43 	.word	0x08003c43
 8003c14:	08003c43 	.word	0x08003c43
 8003c18:	08003c3b 	.word	0x08003c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c1c:	f7fe fa64 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 8003c20:	6178      	str	r0, [r7, #20]
        break;
 8003c22:	e013      	b.n	8003c4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c24:	f7fe fa76 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 8003c28:	6178      	str	r0, [r7, #20]
        break;
 8003c2a:	e00f      	b.n	8003c4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <UART_SetConfig+0x510>)
 8003c2e:	617b      	str	r3, [r7, #20]
        break;
 8003c30:	e00c      	b.n	8003c4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c32:	f7fe f9c1 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8003c36:	6178      	str	r0, [r7, #20]
        break;
 8003c38:	e008      	b.n	8003c4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c3e:	617b      	str	r3, [r7, #20]
        break;
 8003c40:	e004      	b.n	8003c4c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	76bb      	strb	r3, [r7, #26]
        break;
 8003c4a:	bf00      	nop
    }

    if (pclk != 0U)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d018      	beq.n	8003c84 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	085a      	lsrs	r2, r3, #1
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	441a      	add	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b0f      	cmp	r3, #15
 8003c6c:	d908      	bls.n	8003c80 <UART_SetConfig+0x4f4>
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c74:	d204      	bcs.n	8003c80 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	e001      	b.n	8003c84 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c90:	7ebb      	ldrb	r3, [r7, #26]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3720      	adds	r7, #32
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bdb0      	pop	{r4, r5, r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	00f42400 	.word	0x00f42400

08003ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01a      	beq.n	8003db6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d9e:	d10a      	bne.n	8003db6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	605a      	str	r2, [r3, #4]
  }
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003df4:	f7fd f884 	bl	8000f00 <HAL_GetTick>
 8003df8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d10e      	bne.n	8003e26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f82d 	bl	8003e76 <UART_WaitOnFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e023      	b.n	8003e6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d10e      	bne.n	8003e52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f817 	bl	8003e76 <UART_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e00d      	b.n	8003e6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	603b      	str	r3, [r7, #0]
 8003e82:	4613      	mov	r3, r2
 8003e84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e86:	e05e      	b.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e8e:	d05a      	beq.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e90:	f7fd f836 	bl	8000f00 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d302      	bcc.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d11b      	bne.n	8003ede <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003eb4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e043      	b.n	8003f66 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d02c      	beq.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efa:	d124      	bne.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f04:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f14:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e00f      	b.n	8003f66 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	bf0c      	ite	eq
 8003f56:	2301      	moveq	r3, #1
 8003f58:	2300      	movne	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d091      	beq.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	88fa      	ldrh	r2, [r7, #6]
 8003f88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	88fa      	ldrh	r2, [r7, #6]
 8003f90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa2:	d10e      	bne.n	8003fc2 <UART_Start_Receive_IT+0x52>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <UART_Start_Receive_IT+0x48>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003fb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fb6:	e02d      	b.n	8004014 <UART_Start_Receive_IT+0xa4>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	22ff      	movs	r2, #255	; 0xff
 8003fbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fc0:	e028      	b.n	8004014 <UART_Start_Receive_IT+0xa4>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10d      	bne.n	8003fe6 <UART_Start_Receive_IT+0x76>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d104      	bne.n	8003fdc <UART_Start_Receive_IT+0x6c>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	22ff      	movs	r2, #255	; 0xff
 8003fd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fda:	e01b      	b.n	8004014 <UART_Start_Receive_IT+0xa4>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	227f      	movs	r2, #127	; 0x7f
 8003fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fe4:	e016      	b.n	8004014 <UART_Start_Receive_IT+0xa4>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fee:	d10d      	bne.n	800400c <UART_Start_Receive_IT+0x9c>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d104      	bne.n	8004002 <UART_Start_Receive_IT+0x92>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	227f      	movs	r2, #127	; 0x7f
 8003ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004000:	e008      	b.n	8004014 <UART_Start_Receive_IT+0xa4>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	223f      	movs	r2, #63	; 0x3f
 8004006:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800400a:	e003      	b.n	8004014 <UART_Start_Receive_IT+0xa4>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2222      	movs	r2, #34	; 0x22
 8004020:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403a:	d107      	bne.n	800404c <UART_Start_Receive_IT+0xdc>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d103      	bne.n	800404c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4a0c      	ldr	r2, [pc, #48]	; (8004078 <UART_Start_Receive_IT+0x108>)
 8004048:	665a      	str	r2, [r3, #100]	; 0x64
 800404a:	e002      	b.n	8004052 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4a0b      	ldr	r2, [pc, #44]	; (800407c <UART_Start_Receive_IT+0x10c>)
 8004050:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004068:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	08004305 	.word	0x08004305
 800407c:	0800422d 	.word	0x0800422d

08004080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004096:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d107      	bne.n	80040c0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0210 	bic.w	r2, r2, #16
 80040be:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff fb2f 	bl	8003760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004116:	2b21      	cmp	r3, #33	; 0x21
 8004118:	d12b      	bne.n	8004172 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d110      	bne.n	8004148 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004134:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004144:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004146:	e014      	b.n	8004172 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414c:	781a      	ldrb	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	b292      	uxth	r2, r2
 8004154:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800418a:	2b21      	cmp	r3, #33	; 0x21
 800418c:	d12f      	bne.n	80041ee <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d110      	bne.n	80041bc <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041a8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041b8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80041ba:	e018      	b.n	80041ee <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	881a      	ldrh	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ce:	b292      	uxth	r2, r2
 80041d0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	1c9a      	adds	r2, r3, #2
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004210:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fc fae8 	bl	80007f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800423a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004240:	2b22      	cmp	r3, #34	; 0x22
 8004242:	d151      	bne.n	80042e8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800424a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800424c:	89bb      	ldrh	r3, [r7, #12]
 800424e:	b2d9      	uxtb	r1, r3
 8004250:	89fb      	ldrh	r3, [r7, #14]
 8004252:	b2da      	uxtb	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004258:	400a      	ands	r2, r1
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d13a      	bne.n	80042fc <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004294:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0201 	bic.w	r2, r2, #1
 80042a4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d10f      	bne.n	80042da <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0210 	bic.w	r2, r2, #16
 80042c8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042d0:	4619      	mov	r1, r3
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff fa4e 	bl	8003774 <HAL_UARTEx_RxEventCallback>
 80042d8:	e002      	b.n	80042e0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fc fa68 	bl	80007b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042e6:	e009      	b.n	80042fc <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	8b1b      	ldrh	r3, [r3, #24]
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0208 	orr.w	r2, r2, #8
 80042f8:	b292      	uxth	r2, r2
 80042fa:	831a      	strh	r2, [r3, #24]
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004312:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004318:	2b22      	cmp	r3, #34	; 0x22
 800431a:	d151      	bne.n	80043c0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004322:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800432a:	89ba      	ldrh	r2, [r7, #12]
 800432c:	89fb      	ldrh	r3, [r7, #14]
 800432e:	4013      	ands	r3, r2
 8004330:	b29a      	uxth	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	1c9a      	adds	r2, r3, #2
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d13a      	bne.n	80043d4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800436c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0201 	bic.w	r2, r2, #1
 800437c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438e:	2b01      	cmp	r3, #1
 8004390:	d10f      	bne.n	80043b2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0210 	bic.w	r2, r2, #16
 80043a0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff f9e2 	bl	8003774 <HAL_UARTEx_RxEventCallback>
 80043b0:	e002      	b.n	80043b8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fc f9fc 	bl	80007b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043be:	e009      	b.n	80043d4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	8b1b      	ldrh	r3, [r3, #24]
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0208 	orr.w	r2, r2, #8
 80043d0:	b292      	uxth	r2, r2
 80043d2:	831a      	strh	r2, [r3, #24]
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <__NVIC_SetPriority>:
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	6039      	str	r1, [r7, #0]
 80043fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004400:	2b00      	cmp	r3, #0
 8004402:	db0a      	blt.n	800441a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	490c      	ldr	r1, [pc, #48]	; (800443c <__NVIC_SetPriority+0x4c>)
 800440a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	440b      	add	r3, r1
 8004414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004418:	e00a      	b.n	8004430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	b2da      	uxtb	r2, r3
 800441e:	4908      	ldr	r1, [pc, #32]	; (8004440 <__NVIC_SetPriority+0x50>)
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	3b04      	subs	r3, #4
 8004428:	0112      	lsls	r2, r2, #4
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	440b      	add	r3, r1
 800442e:	761a      	strb	r2, [r3, #24]
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	e000e100 	.word	0xe000e100
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <SysTick_Handler+0x1c>)
 800444a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800444c:	f002 fbb8 	bl	8006bc0 <xTaskGetSchedulerState>
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	d001      	beq.n	800445a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004456:	f003 fa9f 	bl	8007998 <xPortSysTickHandler>
  }
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	e000e010 	.word	0xe000e010

08004464 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004468:	2100      	movs	r1, #0
 800446a:	f06f 0004 	mvn.w	r0, #4
 800446e:	f7ff ffbf 	bl	80043f0 <__NVIC_SetPriority>
#endif
}
 8004472:	bf00      	nop
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800447e:	f3ef 8305 	mrs	r3, IPSR
 8004482:	603b      	str	r3, [r7, #0]
  return(result);
 8004484:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800448a:	f06f 0305 	mvn.w	r3, #5
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	e00c      	b.n	80044ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <osKernelInitialize+0x44>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d105      	bne.n	80044a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <osKernelInitialize+0x44>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	e002      	b.n	80044ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044ac:	687b      	ldr	r3, [r7, #4]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	2000002c 	.word	0x2000002c

080044c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c6:	f3ef 8305 	mrs	r3, IPSR
 80044ca:	603b      	str	r3, [r7, #0]
  return(result);
 80044cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <osKernelStart+0x1a>
    stat = osErrorISR;
 80044d2:	f06f 0305 	mvn.w	r3, #5
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	e010      	b.n	80044fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <osKernelStart+0x48>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d109      	bne.n	80044f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044e2:	f7ff ffbf 	bl	8004464 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044e6:	4b08      	ldr	r3, [pc, #32]	; (8004508 <osKernelStart+0x48>)
 80044e8:	2202      	movs	r2, #2
 80044ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044ec:	f001 ff20 	bl	8006330 <vTaskStartScheduler>
      stat = osOK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	e002      	b.n	80044fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044fc:	687b      	ldr	r3, [r7, #4]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	2000002c 	.word	0x2000002c

0800450c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b08e      	sub	sp, #56	; 0x38
 8004510:	af04      	add	r7, sp, #16
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800451c:	f3ef 8305 	mrs	r3, IPSR
 8004520:	617b      	str	r3, [r7, #20]
  return(result);
 8004522:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004524:	2b00      	cmp	r3, #0
 8004526:	d17e      	bne.n	8004626 <osThreadNew+0x11a>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d07b      	beq.n	8004626 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004532:	2318      	movs	r3, #24
 8004534:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800453a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800453e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d045      	beq.n	80045d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <osThreadNew+0x48>
        name = attr->name;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <osThreadNew+0x6e>
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	2b38      	cmp	r3, #56	; 0x38
 800456c:	d805      	bhi.n	800457a <osThreadNew+0x6e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <osThreadNew+0x72>
        return (NULL);
 800457a:	2300      	movs	r3, #0
 800457c:	e054      	b.n	8004628 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	089b      	lsrs	r3, r3, #2
 800458c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00e      	beq.n	80045b4 <osThreadNew+0xa8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b5b      	cmp	r3, #91	; 0x5b
 800459c:	d90a      	bls.n	80045b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d006      	beq.n	80045b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <osThreadNew+0xa8>
        mem = 1;
 80045ae:	2301      	movs	r3, #1
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	e010      	b.n	80045d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10c      	bne.n	80045d6 <osThreadNew+0xca>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d108      	bne.n	80045d6 <osThreadNew+0xca>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d104      	bne.n	80045d6 <osThreadNew+0xca>
          mem = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	e001      	b.n	80045d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d110      	bne.n	80045fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045e4:	9202      	str	r2, [sp, #8]
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	6a3a      	ldr	r2, [r7, #32]
 80045f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f001 fbc0 	bl	8005d78 <xTaskCreateStatic>
 80045f8:	4603      	mov	r3, r0
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	e013      	b.n	8004626 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d110      	bne.n	8004626 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	b29a      	uxth	r2, r3
 8004608:	f107 0310 	add.w	r3, r7, #16
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f001 fc0b 	bl	8005e32 <xTaskCreate>
 800461c:	4603      	mov	r3, r0
 800461e:	2b01      	cmp	r3, #1
 8004620:	d001      	beq.n	8004626 <osThreadNew+0x11a>
            hTask = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004626:	693b      	ldr	r3, [r7, #16]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3728      	adds	r7, #40	; 0x28
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800463c:	f3ef 8305 	mrs	r3, IPSR
 8004640:	60fb      	str	r3, [r7, #12]
  return(result);
 8004642:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8004648:	f06f 0305 	mvn.w	r3, #5
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e00b      	b.n	8004668 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8004656:	f06f 0303 	mvn.w	r3, #3
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e004      	b.n	8004668 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8004662:	6938      	ldr	r0, [r7, #16]
 8004664:	f001 fd5e 	bl	8006124 <vTaskSuspend>
  }

  return (stat);
 8004668:	697b      	ldr	r3, [r7, #20]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8004672:	b580      	push	{r7, lr}
 8004674:	b086      	sub	sp, #24
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800467e:	f3ef 8305 	mrs	r3, IPSR
 8004682:	60fb      	str	r3, [r7, #12]
  return(result);
 8004684:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <osThreadResume+0x20>
    stat = osErrorISR;
 800468a:	f06f 0305 	mvn.w	r3, #5
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e00b      	b.n	80046aa <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8004698:	f06f 0303 	mvn.w	r3, #3
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	e004      	b.n	80046aa <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80046a4:	6938      	ldr	r0, [r7, #16]
 80046a6:	f001 fde5 	bl	8006274 <vTaskResume>
  }

  return (stat);
 80046aa:	697b      	ldr	r3, [r7, #20]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046bc:	f3ef 8305 	mrs	r3, IPSR
 80046c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80046c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <osDelay+0x1c>
    stat = osErrorISR;
 80046c8:	f06f 0305 	mvn.w	r3, #5
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e007      	b.n	80046e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f001 fcee 	bl	80060bc <vTaskDelay>
    }
  }

  return (stat);
 80046e0:	68fb      	ldr	r3, [r7, #12]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b08a      	sub	sp, #40	; 0x28
 80046ee:	af02      	add	r7, sp, #8
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046fa:	f3ef 8305 	mrs	r3, IPSR
 80046fe:	613b      	str	r3, [r7, #16]
  return(result);
 8004700:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004702:	2b00      	cmp	r3, #0
 8004704:	d175      	bne.n	80047f2 <osSemaphoreNew+0x108>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d072      	beq.n	80047f2 <osSemaphoreNew+0x108>
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	429a      	cmp	r2, r3
 8004712:	d86e      	bhi.n	80047f2 <osSemaphoreNew+0x108>
    mem = -1;
 8004714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004718:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d015      	beq.n	800474c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d006      	beq.n	8004736 <osSemaphoreNew+0x4c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b4f      	cmp	r3, #79	; 0x4f
 800472e:	d902      	bls.n	8004736 <osSemaphoreNew+0x4c>
        mem = 1;
 8004730:	2301      	movs	r3, #1
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	e00c      	b.n	8004750 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d108      	bne.n	8004750 <osSemaphoreNew+0x66>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d104      	bne.n	8004750 <osSemaphoreNew+0x66>
          mem = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	e001      	b.n	8004750 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004756:	d04c      	beq.n	80047f2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d128      	bne.n	80047b0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d10a      	bne.n	800477a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2203      	movs	r2, #3
 800476a:	9200      	str	r2, [sp, #0]
 800476c:	2200      	movs	r2, #0
 800476e:	2100      	movs	r1, #0
 8004770:	2001      	movs	r0, #1
 8004772:	f000 fb5b 	bl	8004e2c <xQueueGenericCreateStatic>
 8004776:	61f8      	str	r0, [r7, #28]
 8004778:	e005      	b.n	8004786 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800477a:	2203      	movs	r2, #3
 800477c:	2100      	movs	r1, #0
 800477e:	2001      	movs	r0, #1
 8004780:	f000 fbcc 	bl	8004f1c <xQueueGenericCreate>
 8004784:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d022      	beq.n	80047d2 <osSemaphoreNew+0xe8>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01f      	beq.n	80047d2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004792:	2300      	movs	r3, #0
 8004794:	2200      	movs	r2, #0
 8004796:	2100      	movs	r1, #0
 8004798:	69f8      	ldr	r0, [r7, #28]
 800479a:	f000 fc87 	bl	80050ac <xQueueGenericSend>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d016      	beq.n	80047d2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80047a4:	69f8      	ldr	r0, [r7, #28]
 80047a6:	f001 f913 	bl	80059d0 <vQueueDelete>
            hSemaphore = NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	e010      	b.n	80047d2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d108      	bne.n	80047c8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	461a      	mov	r2, r3
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fc09 	bl	8004fd6 <xQueueCreateCountingSemaphoreStatic>
 80047c4:	61f8      	str	r0, [r7, #28]
 80047c6:	e004      	b.n	80047d2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fc3a 	bl	8005044 <xQueueCreateCountingSemaphore>
 80047d0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00c      	beq.n	80047f2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	e001      	b.n	80047ea <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80047ea:	6979      	ldr	r1, [r7, #20]
 80047ec:	69f8      	ldr	r0, [r7, #28]
 80047ee:	f001 fa3b 	bl	8005c68 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80047f2:	69fb      	ldr	r3, [r7, #28]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d103      	bne.n	800481c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004814:	f06f 0303 	mvn.w	r3, #3
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	e039      	b.n	8004890 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800481c:	f3ef 8305 	mrs	r3, IPSR
 8004820:	60fb      	str	r3, [r7, #12]
  return(result);
 8004822:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004824:	2b00      	cmp	r3, #0
 8004826:	d022      	beq.n	800486e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800482e:	f06f 0303 	mvn.w	r3, #3
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e02c      	b.n	8004890 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004836:	2300      	movs	r3, #0
 8004838:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800483a:	f107 0308 	add.w	r3, r7, #8
 800483e:	461a      	mov	r2, r3
 8004840:	2100      	movs	r1, #0
 8004842:	6938      	ldr	r0, [r7, #16]
 8004844:	f001 f844 	bl	80058d0 <xQueueReceiveFromISR>
 8004848:	4603      	mov	r3, r0
 800484a:	2b01      	cmp	r3, #1
 800484c:	d003      	beq.n	8004856 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800484e:	f06f 0302 	mvn.w	r3, #2
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e01c      	b.n	8004890 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d019      	beq.n	8004890 <osSemaphoreAcquire+0x94>
 800485c:	4b0f      	ldr	r3, [pc, #60]	; (800489c <osSemaphoreAcquire+0xa0>)
 800485e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	e010      	b.n	8004890 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800486e:	6839      	ldr	r1, [r7, #0]
 8004870:	6938      	ldr	r0, [r7, #16]
 8004872:	f000 ff21 	bl	80056b8 <xQueueSemaphoreTake>
 8004876:	4603      	mov	r3, r0
 8004878:	2b01      	cmp	r3, #1
 800487a:	d009      	beq.n	8004890 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004882:	f06f 0301 	mvn.w	r3, #1
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	e002      	b.n	8004890 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800488a:	f06f 0302 	mvn.w	r3, #2
 800488e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004890:	697b      	ldr	r3, [r7, #20]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	e000ed04 	.word	0xe000ed04

080048a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d103      	bne.n	80048be <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80048b6:	f06f 0303 	mvn.w	r3, #3
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	e02c      	b.n	8004918 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048be:	f3ef 8305 	mrs	r3, IPSR
 80048c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80048c4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01a      	beq.n	8004900 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80048ce:	f107 0308 	add.w	r3, r7, #8
 80048d2:	4619      	mov	r1, r3
 80048d4:	6938      	ldr	r0, [r7, #16]
 80048d6:	f000 fd82 	bl	80053de <xQueueGiveFromISR>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d003      	beq.n	80048e8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80048e0:	f06f 0302 	mvn.w	r3, #2
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	e017      	b.n	8004918 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d014      	beq.n	8004918 <osSemaphoreRelease+0x78>
 80048ee:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <osSemaphoreRelease+0x84>)
 80048f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	e00b      	b.n	8004918 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004900:	2300      	movs	r3, #0
 8004902:	2200      	movs	r2, #0
 8004904:	2100      	movs	r1, #0
 8004906:	6938      	ldr	r0, [r7, #16]
 8004908:	f000 fbd0 	bl	80050ac <xQueueGenericSend>
 800490c:	4603      	mov	r3, r0
 800490e:	2b01      	cmp	r3, #1
 8004910:	d002      	beq.n	8004918 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004912:	f06f 0302 	mvn.w	r3, #2
 8004916:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004918:	697b      	ldr	r3, [r7, #20]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	e000ed04 	.word	0xe000ed04

08004928 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004938:	f3ef 8305 	mrs	r3, IPSR
 800493c:	613b      	str	r3, [r7, #16]
  return(result);
 800493e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004940:	2b00      	cmp	r3, #0
 8004942:	d15f      	bne.n	8004a04 <osMessageQueueNew+0xdc>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d05c      	beq.n	8004a04 <osMessageQueueNew+0xdc>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d059      	beq.n	8004a04 <osMessageQueueNew+0xdc>
    mem = -1;
 8004950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004954:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d029      	beq.n	80049b0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d012      	beq.n	800498a <osMessageQueueNew+0x62>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b4f      	cmp	r3, #79	; 0x4f
 800496a:	d90e      	bls.n	800498a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	429a      	cmp	r2, r3
 8004982:	d302      	bcc.n	800498a <osMessageQueueNew+0x62>
        mem = 1;
 8004984:	2301      	movs	r3, #1
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	e014      	b.n	80049b4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d110      	bne.n	80049b4 <osMessageQueueNew+0x8c>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10c      	bne.n	80049b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d108      	bne.n	80049b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d104      	bne.n	80049b4 <osMessageQueueNew+0x8c>
          mem = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	e001      	b.n	80049b4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d10b      	bne.n	80049d2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2100      	movs	r1, #0
 80049c4:	9100      	str	r1, [sp, #0]
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fa2f 	bl	8004e2c <xQueueGenericCreateStatic>
 80049ce:	61f8      	str	r0, [r7, #28]
 80049d0:	e008      	b.n	80049e4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80049d8:	2200      	movs	r2, #0
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fa9d 	bl	8004f1c <xQueueGenericCreate>
 80049e2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00c      	beq.n	8004a04 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	e001      	b.n	80049fc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80049fc:	6979      	ldr	r1, [r7, #20]
 80049fe:	69f8      	ldr	r0, [r7, #28]
 8004a00:	f001 f932 	bl	8005c68 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004a04:	69fb      	ldr	r3, [r7, #28]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3720      	adds	r7, #32
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a28:	f3ef 8305 	mrs	r3, IPSR
 8004a2c:	617b      	str	r3, [r7, #20]
  return(result);
 8004a2e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d028      	beq.n	8004a86 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <osMessageQueuePut+0x36>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <osMessageQueuePut+0x36>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004a46:	f06f 0303 	mvn.w	r3, #3
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	e038      	b.n	8004ac0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004a52:	f107 0210 	add.w	r2, r7, #16
 8004a56:	2300      	movs	r3, #0
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	69b8      	ldr	r0, [r7, #24]
 8004a5c:	f000 fc24 	bl	80052a8 <xQueueGenericSendFromISR>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d003      	beq.n	8004a6e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004a66:	f06f 0302 	mvn.w	r3, #2
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	e028      	b.n	8004ac0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d025      	beq.n	8004ac0 <osMessageQueuePut+0xb0>
 8004a74:	4b15      	ldr	r3, [pc, #84]	; (8004acc <osMessageQueuePut+0xbc>)
 8004a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	e01c      	b.n	8004ac0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <osMessageQueuePut+0x82>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d103      	bne.n	8004a9a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004a92:	f06f 0303 	mvn.w	r3, #3
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	e012      	b.n	8004ac0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	68b9      	ldr	r1, [r7, #8]
 8004aa0:	69b8      	ldr	r0, [r7, #24]
 8004aa2:	f000 fb03 	bl	80050ac <xQueueGenericSend>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d009      	beq.n	8004ac0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004ab2:	f06f 0301 	mvn.w	r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	e002      	b.n	8004ac0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004aba:	f06f 0302 	mvn.w	r3, #2
 8004abe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004ac0:	69fb      	ldr	r3, [r7, #28]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	e000ed04 	.word	0xe000ed04

08004ad0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ae6:	f3ef 8305 	mrs	r3, IPSR
 8004aea:	617b      	str	r3, [r7, #20]
  return(result);
 8004aec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d028      	beq.n	8004b44 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <osMessageQueueGet+0x34>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <osMessageQueueGet+0x34>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004b04:	f06f 0303 	mvn.w	r3, #3
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	e037      	b.n	8004b7c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004b10:	f107 0310 	add.w	r3, r7, #16
 8004b14:	461a      	mov	r2, r3
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	69b8      	ldr	r0, [r7, #24]
 8004b1a:	f000 fed9 	bl	80058d0 <xQueueReceiveFromISR>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d003      	beq.n	8004b2c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004b24:	f06f 0302 	mvn.w	r3, #2
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	e027      	b.n	8004b7c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d024      	beq.n	8004b7c <osMessageQueueGet+0xac>
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <osMessageQueueGet+0xb8>)
 8004b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	e01b      	b.n	8004b7c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <osMessageQueueGet+0x80>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d103      	bne.n	8004b58 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004b50:	f06f 0303 	mvn.w	r3, #3
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	e011      	b.n	8004b7c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	69b8      	ldr	r0, [r7, #24]
 8004b5e:	f000 fccb 	bl	80054f8 <xQueueReceive>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d009      	beq.n	8004b7c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004b6e:	f06f 0301 	mvn.w	r3, #1
 8004b72:	61fb      	str	r3, [r7, #28]
 8004b74:	e002      	b.n	8004b7c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004b76:	f06f 0302 	mvn.w	r3, #2
 8004b7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004b7c:	69fb      	ldr	r3, [r7, #28]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4a07      	ldr	r2, [pc, #28]	; (8004bb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4a06      	ldr	r2, [pc, #24]	; (8004bbc <vApplicationGetIdleTaskMemory+0x30>)
 8004ba2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2280      	movs	r2, #128	; 0x80
 8004ba8:	601a      	str	r2, [r3, #0]
}
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000030 	.word	0x20000030
 8004bbc:	2000008c 	.word	0x2000008c

08004bc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a07      	ldr	r2, [pc, #28]	; (8004bec <vApplicationGetTimerTaskMemory+0x2c>)
 8004bd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4a06      	ldr	r2, [pc, #24]	; (8004bf0 <vApplicationGetTimerTaskMemory+0x30>)
 8004bd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bde:	601a      	str	r2, [r3, #0]
}
 8004be0:	bf00      	nop
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	2000028c 	.word	0x2000028c
 8004bf0:	200002e8 	.word	0x200002e8

08004bf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f103 0208 	add.w	r2, r3, #8
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f103 0208 	add.w	r2, r3, #8
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f103 0208 	add.w	r2, r3, #8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	601a      	str	r2, [r3, #0]
}
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c96:	b480      	push	{r7}
 8004c98:	b085      	sub	sp, #20
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cac:	d103      	bne.n	8004cb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	e00c      	b.n	8004cd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3308      	adds	r3, #8
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e002      	b.n	8004cc4 <vListInsert+0x2e>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d2f6      	bcs.n	8004cbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	601a      	str	r2, [r3, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6892      	ldr	r2, [r2, #8]
 8004d1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6852      	ldr	r2, [r2, #4]
 8004d28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d103      	bne.n	8004d3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	1e5a      	subs	r2, r3, #1
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d82:	bf00      	nop
 8004d84:	e7fe      	b.n	8004d84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d86:	f002 fd75 	bl	8007874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	441a      	add	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db6:	3b01      	subs	r3, #1
 8004db8:	68f9      	ldr	r1, [r7, #12]
 8004dba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dbc:	fb01 f303 	mul.w	r3, r1, r3
 8004dc0:	441a      	add	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	22ff      	movs	r2, #255	; 0xff
 8004dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	22ff      	movs	r2, #255	; 0xff
 8004dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d114      	bne.n	8004e06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01a      	beq.n	8004e1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3310      	adds	r3, #16
 8004de8:	4618      	mov	r0, r3
 8004dea:	f001 fd2b 	bl	8006844 <xTaskRemoveFromEventList>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d012      	beq.n	8004e1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004df4:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <xQueueGenericReset+0xcc>)
 8004df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	e009      	b.n	8004e1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3310      	adds	r3, #16
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff fef2 	bl	8004bf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3324      	adds	r3, #36	; 0x24
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff feed 	bl	8004bf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e1a:	f002 fd5b 	bl	80078d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e1e:	2301      	movs	r3, #1
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08e      	sub	sp, #56	; 0x38
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e6e:	bf00      	nop
 8004e70:	e7fe      	b.n	8004e70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <xQueueGenericCreateStatic+0x52>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <xQueueGenericCreateStatic+0x56>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <xQueueGenericCreateStatic+0x58>
 8004e82:	2300      	movs	r3, #0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	623b      	str	r3, [r7, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	e7fe      	b.n	8004e9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d102      	bne.n	8004eaa <xQueueGenericCreateStatic+0x7e>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <xQueueGenericCreateStatic+0x82>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <xQueueGenericCreateStatic+0x84>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10a      	bne.n	8004eca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	61fb      	str	r3, [r7, #28]
}
 8004ec6:	bf00      	nop
 8004ec8:	e7fe      	b.n	8004ec8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004eca:	2350      	movs	r3, #80	; 0x50
 8004ecc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b50      	cmp	r3, #80	; 0x50
 8004ed2:	d00a      	beq.n	8004eea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	61bb      	str	r3, [r7, #24]
}
 8004ee6:	bf00      	nop
 8004ee8:	e7fe      	b.n	8004ee8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004eea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004efe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	4613      	mov	r3, r2
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f83f 	bl	8004f90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3730      	adds	r7, #48	; 0x30
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08a      	sub	sp, #40	; 0x28
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10a      	bne.n	8004f46 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	613b      	str	r3, [r7, #16]
}
 8004f42:	bf00      	nop
 8004f44:	e7fe      	b.n	8004f44 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	3350      	adds	r3, #80	; 0x50
 8004f54:	4618      	mov	r0, r3
 8004f56:	f002 fdaf 	bl	8007ab8 <pvPortMalloc>
 8004f5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d011      	beq.n	8004f86 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	3350      	adds	r3, #80	; 0x50
 8004f6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f74:	79fa      	ldrb	r2, [r7, #7]
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f805 	bl	8004f90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f86:	69bb      	ldr	r3, [r7, #24]
	}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3720      	adds	r7, #32
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d103      	bne.n	8004fac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e002      	b.n	8004fb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	69b8      	ldr	r0, [r7, #24]
 8004fc2:	f7ff fecb 	bl	8004d5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b08a      	sub	sp, #40	; 0x28
 8004fda:	af02      	add	r7, sp, #8
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	61bb      	str	r3, [r7, #24]
}
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	429a      	cmp	r2, r3
 8005004:	d90a      	bls.n	800501c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	617b      	str	r3, [r7, #20]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800501c:	2302      	movs	r3, #2
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	2100      	movs	r1, #0
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7ff ff00 	bl	8004e2c <xQueueGenericCreateStatic>
 800502c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800503a:	69fb      	ldr	r3, [r7, #28]
	}
 800503c:	4618      	mov	r0, r3
 800503e:	3720      	adds	r7, #32
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10a      	bne.n	800506a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	613b      	str	r3, [r7, #16]
}
 8005066:	bf00      	nop
 8005068:	e7fe      	b.n	8005068 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	429a      	cmp	r2, r3
 8005070:	d90a      	bls.n	8005088 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	60fb      	str	r3, [r7, #12]
}
 8005084:	bf00      	nop
 8005086:	e7fe      	b.n	8005086 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005088:	2202      	movs	r2, #2
 800508a:	2100      	movs	r1, #0
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff ff45 	bl	8004f1c <xQueueGenericCreate>
 8005092:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80050a0:	697b      	ldr	r3, [r7, #20]
	}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08e      	sub	sp, #56	; 0x38
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050ba:	2300      	movs	r3, #0
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10a      	bne.n	80050de <xQueueGenericSend+0x32>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050da:	bf00      	nop
 80050dc:	e7fe      	b.n	80050dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d103      	bne.n	80050ec <xQueueGenericSend+0x40>
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <xQueueGenericSend+0x44>
 80050ec:	2301      	movs	r3, #1
 80050ee:	e000      	b.n	80050f2 <xQueueGenericSend+0x46>
 80050f0:	2300      	movs	r3, #0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <xQueueGenericSend+0x60>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005108:	bf00      	nop
 800510a:	e7fe      	b.n	800510a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d103      	bne.n	800511a <xQueueGenericSend+0x6e>
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <xQueueGenericSend+0x72>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <xQueueGenericSend+0x74>
 800511e:	2300      	movs	r3, #0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <xQueueGenericSend+0x8e>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	623b      	str	r3, [r7, #32]
}
 8005136:	bf00      	nop
 8005138:	e7fe      	b.n	8005138 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800513a:	f001 fd41 	bl	8006bc0 <xTaskGetSchedulerState>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <xQueueGenericSend+0x9e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <xQueueGenericSend+0xa2>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <xQueueGenericSend+0xa4>
 800514e:	2300      	movs	r3, #0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <xQueueGenericSend+0xbe>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	61fb      	str	r3, [r7, #28]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800516a:	f002 fb83 	bl	8007874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	429a      	cmp	r2, r3
 8005178:	d302      	bcc.n	8005180 <xQueueGenericSend+0xd4>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d129      	bne.n	80051d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005186:	f000 fc5e 	bl	8005a46 <prvCopyDataToQueue>
 800518a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2b00      	cmp	r3, #0
 8005192:	d010      	beq.n	80051b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	3324      	adds	r3, #36	; 0x24
 8005198:	4618      	mov	r0, r3
 800519a:	f001 fb53 	bl	8006844 <xTaskRemoveFromEventList>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d013      	beq.n	80051cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80051a4:	4b3f      	ldr	r3, [pc, #252]	; (80052a4 <xQueueGenericSend+0x1f8>)
 80051a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	e00a      	b.n	80051cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051bc:	4b39      	ldr	r3, [pc, #228]	; (80052a4 <xQueueGenericSend+0x1f8>)
 80051be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051cc:	f002 fb82 	bl	80078d4 <vPortExitCritical>
				return pdPASS;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e063      	b.n	800529c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d103      	bne.n	80051e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051da:	f002 fb7b 	bl	80078d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	e05c      	b.n	800529c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051e8:	f107 0314 	add.w	r3, r7, #20
 80051ec:	4618      	mov	r0, r3
 80051ee:	f001 fb8d 	bl	800690c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051f2:	2301      	movs	r3, #1
 80051f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051f6:	f002 fb6d 	bl	80078d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051fa:	f001 f8ff 	bl	80063fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051fe:	f002 fb39 	bl	8007874 <vPortEnterCritical>
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005208:	b25b      	sxtb	r3, r3
 800520a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800520e:	d103      	bne.n	8005218 <xQueueGenericSend+0x16c>
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800521e:	b25b      	sxtb	r3, r3
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005224:	d103      	bne.n	800522e <xQueueGenericSend+0x182>
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800522e:	f002 fb51 	bl	80078d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005232:	1d3a      	adds	r2, r7, #4
 8005234:	f107 0314 	add.w	r3, r7, #20
 8005238:	4611      	mov	r1, r2
 800523a:	4618      	mov	r0, r3
 800523c:	f001 fb7c 	bl	8006938 <xTaskCheckForTimeOut>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d124      	bne.n	8005290 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005248:	f000 fcf5 	bl	8005c36 <prvIsQueueFull>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d018      	beq.n	8005284 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	3310      	adds	r3, #16
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	4611      	mov	r1, r2
 800525a:	4618      	mov	r0, r3
 800525c:	f001 faa2 	bl	80067a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005262:	f000 fc80 	bl	8005b66 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005266:	f001 f8d7 	bl	8006418 <xTaskResumeAll>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	f47f af7c 	bne.w	800516a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005272:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <xQueueGenericSend+0x1f8>)
 8005274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	e772      	b.n	800516a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005286:	f000 fc6e 	bl	8005b66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800528a:	f001 f8c5 	bl	8006418 <xTaskResumeAll>
 800528e:	e76c      	b.n	800516a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005292:	f000 fc68 	bl	8005b66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005296:	f001 f8bf 	bl	8006418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800529a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800529c:	4618      	mov	r0, r3
 800529e:	3738      	adds	r7, #56	; 0x38
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b090      	sub	sp, #64	; 0x40
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d103      	bne.n	80052e4 <xQueueGenericSendFromISR+0x3c>
 80052dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <xQueueGenericSendFromISR+0x40>
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <xQueueGenericSendFromISR+0x42>
 80052e8:	2300      	movs	r3, #0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005300:	bf00      	nop
 8005302:	e7fe      	b.n	8005302 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d103      	bne.n	8005312 <xQueueGenericSendFromISR+0x6a>
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <xQueueGenericSendFromISR+0x6e>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <xQueueGenericSendFromISR+0x70>
 8005316:	2300      	movs	r3, #0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	623b      	str	r3, [r7, #32]
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005332:	f002 fb81 	bl	8007a38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005336:	f3ef 8211 	mrs	r2, BASEPRI
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	61fa      	str	r2, [r7, #28]
 800534c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800534e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <xQueueGenericSendFromISR+0xbc>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d12f      	bne.n	80053c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800536a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800537a:	f000 fb64 	bl	8005a46 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800537e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005386:	d112      	bne.n	80053ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	2b00      	cmp	r3, #0
 800538e:	d016      	beq.n	80053be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	3324      	adds	r3, #36	; 0x24
 8005394:	4618      	mov	r0, r3
 8005396:	f001 fa55 	bl	8006844 <xTaskRemoveFromEventList>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00e      	beq.n	80053be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	e007      	b.n	80053be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053b2:	3301      	adds	r3, #1
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	b25a      	sxtb	r2, r3
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80053be:	2301      	movs	r3, #1
 80053c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80053c2:	e001      	b.n	80053c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3740      	adds	r7, #64	; 0x40
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b08e      	sub	sp, #56	; 0x38
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	623b      	str	r3, [r7, #32]
}
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	61fb      	str	r3, [r7, #28]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d103      	bne.n	8005436 <xQueueGiveFromISR+0x58>
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <xQueueGiveFromISR+0x5c>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <xQueueGiveFromISR+0x5e>
 800543a:	2300      	movs	r3, #0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	61bb      	str	r3, [r7, #24]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005456:	f002 faef 	bl	8007a38 <vPortValidateInterruptPriority>
	__asm volatile
 800545a:	f3ef 8211 	mrs	r2, BASEPRI
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	617a      	str	r2, [r7, #20]
 8005470:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005472:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005474:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005482:	429a      	cmp	r2, r3
 8005484:	d22b      	bcs.n	80054de <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800548c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005498:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a0:	d112      	bne.n	80054c8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d016      	beq.n	80054d8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	3324      	adds	r3, #36	; 0x24
 80054ae:	4618      	mov	r0, r3
 80054b0:	f001 f9c8 	bl	8006844 <xTaskRemoveFromEventList>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00e      	beq.n	80054d8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00b      	beq.n	80054d8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	e007      	b.n	80054d8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054cc:	3301      	adds	r3, #1
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	b25a      	sxtb	r2, r3
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054d8:	2301      	movs	r3, #1
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
 80054dc:	e001      	b.n	80054e2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	637b      	str	r3, [r7, #52]	; 0x34
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f383 8811 	msr	BASEPRI, r3
}
 80054ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3738      	adds	r7, #56	; 0x38
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08c      	sub	sp, #48	; 0x30
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005504:	2300      	movs	r3, #0
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <xQueueReceive+0x30>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	623b      	str	r3, [r7, #32]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <xQueueReceive+0x3e>
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <xQueueReceive+0x42>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <xQueueReceive+0x44>
 800553a:	2300      	movs	r3, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <xQueueReceive+0x5e>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	61fb      	str	r3, [r7, #28]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005556:	f001 fb33 	bl	8006bc0 <xTaskGetSchedulerState>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <xQueueReceive+0x6e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <xQueueReceive+0x72>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <xQueueReceive+0x74>
 800556a:	2300      	movs	r3, #0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <xQueueReceive+0x8e>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	61bb      	str	r3, [r7, #24]
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005586:	f002 f975 	bl	8007874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01f      	beq.n	80055d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800559a:	f000 fabe 	bl	8005b1a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	1e5a      	subs	r2, r3, #1
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00f      	beq.n	80055ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	3310      	adds	r3, #16
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 f946 	bl	8006844 <xTaskRemoveFromEventList>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055be:	4b3d      	ldr	r3, [pc, #244]	; (80056b4 <xQueueReceive+0x1bc>)
 80055c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055ce:	f002 f981 	bl	80078d4 <vPortExitCritical>
				return pdPASS;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e069      	b.n	80056aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d103      	bne.n	80055e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055dc:	f002 f97a 	bl	80078d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055e0:	2300      	movs	r3, #0
 80055e2:	e062      	b.n	80056aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055ea:	f107 0310 	add.w	r3, r7, #16
 80055ee:	4618      	mov	r0, r3
 80055f0:	f001 f98c 	bl	800690c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055f4:	2301      	movs	r3, #1
 80055f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055f8:	f002 f96c 	bl	80078d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055fc:	f000 fefe 	bl	80063fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005600:	f002 f938 	bl	8007874 <vPortEnterCritical>
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800560a:	b25b      	sxtb	r3, r3
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005610:	d103      	bne.n	800561a <xQueueReceive+0x122>
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005620:	b25b      	sxtb	r3, r3
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005626:	d103      	bne.n	8005630 <xQueueReceive+0x138>
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005630:	f002 f950 	bl	80078d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005634:	1d3a      	adds	r2, r7, #4
 8005636:	f107 0310 	add.w	r3, r7, #16
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f001 f97b 	bl	8006938 <xTaskCheckForTimeOut>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d123      	bne.n	8005690 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800564a:	f000 fade 	bl	8005c0a <prvIsQueueEmpty>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d017      	beq.n	8005684 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	3324      	adds	r3, #36	; 0x24
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	4611      	mov	r1, r2
 800565c:	4618      	mov	r0, r3
 800565e:	f001 f8a1 	bl	80067a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005664:	f000 fa7f 	bl	8005b66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005668:	f000 fed6 	bl	8006418 <xTaskResumeAll>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d189      	bne.n	8005586 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005672:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <xQueueReceive+0x1bc>)
 8005674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	e780      	b.n	8005586 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005686:	f000 fa6e 	bl	8005b66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800568a:	f000 fec5 	bl	8006418 <xTaskResumeAll>
 800568e:	e77a      	b.n	8005586 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005692:	f000 fa68 	bl	8005b66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005696:	f000 febf 	bl	8006418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800569a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800569c:	f000 fab5 	bl	8005c0a <prvIsQueueEmpty>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f43f af6f 	beq.w	8005586 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3730      	adds	r7, #48	; 0x30
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	e000ed04 	.word	0xe000ed04

080056b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08e      	sub	sp, #56	; 0x38
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80056c2:	2300      	movs	r3, #0
 80056c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10a      	bne.n	80056ea <xQueueSemaphoreTake+0x32>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	623b      	str	r3, [r7, #32]
}
 80056e6:	bf00      	nop
 80056e8:	e7fe      	b.n	80056e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	61fb      	str	r3, [r7, #28]
}
 8005704:	bf00      	nop
 8005706:	e7fe      	b.n	8005706 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005708:	f001 fa5a 	bl	8006bc0 <xTaskGetSchedulerState>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d102      	bne.n	8005718 <xQueueSemaphoreTake+0x60>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <xQueueSemaphoreTake+0x64>
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <xQueueSemaphoreTake+0x66>
 800571c:	2300      	movs	r3, #0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	61bb      	str	r3, [r7, #24]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005738:	f002 f89c 	bl	8007874 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	2b00      	cmp	r3, #0
 8005746:	d024      	beq.n	8005792 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	1e5a      	subs	r2, r3, #1
 800574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d104      	bne.n	8005762 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005758:	f001 fba8 	bl	8006eac <pvTaskIncrementMutexHeldCount>
 800575c:	4602      	mov	r2, r0
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00f      	beq.n	800578a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800576a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576c:	3310      	adds	r3, #16
 800576e:	4618      	mov	r0, r3
 8005770:	f001 f868 	bl	8006844 <xTaskRemoveFromEventList>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800577a:	4b54      	ldr	r3, [pc, #336]	; (80058cc <xQueueSemaphoreTake+0x214>)
 800577c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800578a:	f002 f8a3 	bl	80078d4 <vPortExitCritical>
				return pdPASS;
 800578e:	2301      	movs	r3, #1
 8005790:	e097      	b.n	80058c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d111      	bne.n	80057bc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	617b      	str	r3, [r7, #20]
}
 80057b0:	bf00      	nop
 80057b2:	e7fe      	b.n	80057b2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80057b4:	f002 f88e 	bl	80078d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057b8:	2300      	movs	r3, #0
 80057ba:	e082      	b.n	80058c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057c2:	f107 030c 	add.w	r3, r7, #12
 80057c6:	4618      	mov	r0, r3
 80057c8:	f001 f8a0 	bl	800690c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057cc:	2301      	movs	r3, #1
 80057ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057d0:	f002 f880 	bl	80078d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057d4:	f000 fe12 	bl	80063fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057d8:	f002 f84c 	bl	8007874 <vPortEnterCritical>
 80057dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057e2:	b25b      	sxtb	r3, r3
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e8:	d103      	bne.n	80057f2 <xQueueSemaphoreTake+0x13a>
 80057ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057f8:	b25b      	sxtb	r3, r3
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057fe:	d103      	bne.n	8005808 <xQueueSemaphoreTake+0x150>
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005808:	f002 f864 	bl	80078d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800580c:	463a      	mov	r2, r7
 800580e:	f107 030c 	add.w	r3, r7, #12
 8005812:	4611      	mov	r1, r2
 8005814:	4618      	mov	r0, r3
 8005816:	f001 f88f 	bl	8006938 <xTaskCheckForTimeOut>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d132      	bne.n	8005886 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005822:	f000 f9f2 	bl	8005c0a <prvIsQueueEmpty>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d026      	beq.n	800587a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d109      	bne.n	8005848 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005834:	f002 f81e 	bl	8007874 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	4618      	mov	r0, r3
 800583e:	f001 f9dd 	bl	8006bfc <xTaskPriorityInherit>
 8005842:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005844:	f002 f846 	bl	80078d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	3324      	adds	r3, #36	; 0x24
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	4611      	mov	r1, r2
 8005850:	4618      	mov	r0, r3
 8005852:	f000 ffa7 	bl	80067a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005858:	f000 f985 	bl	8005b66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800585c:	f000 fddc 	bl	8006418 <xTaskResumeAll>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	f47f af68 	bne.w	8005738 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005868:	4b18      	ldr	r3, [pc, #96]	; (80058cc <xQueueSemaphoreTake+0x214>)
 800586a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	e75e      	b.n	8005738 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800587a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800587c:	f000 f973 	bl	8005b66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005880:	f000 fdca 	bl	8006418 <xTaskResumeAll>
 8005884:	e758      	b.n	8005738 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005886:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005888:	f000 f96d 	bl	8005b66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800588c:	f000 fdc4 	bl	8006418 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005892:	f000 f9ba 	bl	8005c0a <prvIsQueueEmpty>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	f43f af4d 	beq.w	8005738 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00d      	beq.n	80058c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80058a4:	f001 ffe6 	bl	8007874 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80058a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058aa:	f000 f8b4 	bl	8005a16 <prvGetDisinheritPriorityAfterTimeout>
 80058ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80058b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058b6:	4618      	mov	r0, r3
 80058b8:	f001 fa76 	bl	8006da8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80058bc:	f002 f80a 	bl	80078d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3738      	adds	r7, #56	; 0x38
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	e000ed04 	.word	0xe000ed04

080058d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08e      	sub	sp, #56	; 0x38
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10a      	bne.n	80058fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	623b      	str	r3, [r7, #32]
}
 80058f8:	bf00      	nop
 80058fa:	e7fe      	b.n	80058fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d103      	bne.n	800590a <xQueueReceiveFromISR+0x3a>
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <xQueueReceiveFromISR+0x3e>
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <xQueueReceiveFromISR+0x40>
 800590e:	2300      	movs	r3, #0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	61fb      	str	r3, [r7, #28]
}
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800592a:	f002 f885 	bl	8007a38 <vPortValidateInterruptPriority>
	__asm volatile
 800592e:	f3ef 8211 	mrs	r2, BASEPRI
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	61ba      	str	r2, [r7, #24]
 8005944:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005946:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	2b00      	cmp	r3, #0
 8005954:	d02f      	beq.n	80059b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800595c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005964:	f000 f8d9 	bl	8005b1a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	1e5a      	subs	r2, r3, #1
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005970:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005978:	d112      	bne.n	80059a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d016      	beq.n	80059b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	3310      	adds	r3, #16
 8005986:	4618      	mov	r0, r3
 8005988:	f000 ff5c 	bl	8006844 <xTaskRemoveFromEventList>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00e      	beq.n	80059b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00b      	beq.n	80059b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	e007      	b.n	80059b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80059a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059a4:	3301      	adds	r3, #1
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	b25a      	sxtb	r2, r3
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80059b0:	2301      	movs	r3, #1
 80059b2:	637b      	str	r3, [r7, #52]	; 0x34
 80059b4:	e001      	b.n	80059ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f383 8811 	msr	BASEPRI, r3
}
 80059c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3738      	adds	r7, #56	; 0x38
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <vQueueDelete+0x28>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	60bb      	str	r3, [r7, #8]
}
 80059f4:	bf00      	nop
 80059f6:	e7fe      	b.n	80059f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f95f 	bl	8005cbc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f002 f921 	bl	8007c50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005a0e:	bf00      	nop
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005a16:	b480      	push	{r7}
 8005a18:	b085      	sub	sp, #20
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d006      	beq.n	8005a34 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	e001      	b.n	8005a38 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005a38:	68fb      	ldr	r3, [r7, #12]
	}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b086      	sub	sp, #24
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a52:	2300      	movs	r3, #0
 8005a54:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10d      	bne.n	8005a80 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d14d      	bne.n	8005b08 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 f92b 	bl	8006ccc <xTaskPriorityDisinherit>
 8005a76:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
 8005a7e:	e043      	b.n	8005b08 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d119      	bne.n	8005aba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6858      	ldr	r0, [r3, #4]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	f002 fa1f 	bl	8007ed4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	441a      	add	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d32b      	bcc.n	8005b08 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	605a      	str	r2, [r3, #4]
 8005ab8:	e026      	b.n	8005b08 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68d8      	ldr	r0, [r3, #12]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	f002 fa05 	bl	8007ed4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	425b      	negs	r3, r3
 8005ad4:	441a      	add	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d207      	bcs.n	8005af6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	425b      	negs	r3, r3
 8005af0:	441a      	add	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d105      	bne.n	8005b08 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b10:	697b      	ldr	r3, [r7, #20]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b082      	sub	sp, #8
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d018      	beq.n	8005b5e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	441a      	add	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d303      	bcc.n	8005b4e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68d9      	ldr	r1, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	461a      	mov	r2, r3
 8005b58:	6838      	ldr	r0, [r7, #0]
 8005b5a:	f002 f9bb 	bl	8007ed4 <memcpy>
	}
}
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b6e:	f001 fe81 	bl	8007874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b78:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b7a:	e011      	b.n	8005ba0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d012      	beq.n	8005baa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3324      	adds	r3, #36	; 0x24
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 fe5b 	bl	8006844 <xTaskRemoveFromEventList>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b94:	f000 ff32 	bl	80069fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	dce9      	bgt.n	8005b7c <prvUnlockQueue+0x16>
 8005ba8:	e000      	b.n	8005bac <prvUnlockQueue+0x46>
					break;
 8005baa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	22ff      	movs	r2, #255	; 0xff
 8005bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005bb4:	f001 fe8e 	bl	80078d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bb8:	f001 fe5c 	bl	8007874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bc2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bc4:	e011      	b.n	8005bea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d012      	beq.n	8005bf4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3310      	adds	r3, #16
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fe36 	bl	8006844 <xTaskRemoveFromEventList>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bde:	f000 ff0d 	bl	80069fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005be2:	7bbb      	ldrb	r3, [r7, #14]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	dce9      	bgt.n	8005bc6 <prvUnlockQueue+0x60>
 8005bf2:	e000      	b.n	8005bf6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bf4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	22ff      	movs	r2, #255	; 0xff
 8005bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005bfe:	f001 fe69 	bl	80078d4 <vPortExitCritical>
}
 8005c02:	bf00      	nop
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c12:	f001 fe2f 	bl	8007874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e001      	b.n	8005c28 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c28:	f001 fe54 	bl	80078d4 <vPortExitCritical>

	return xReturn;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c3e:	f001 fe19 	bl	8007874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d102      	bne.n	8005c54 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	e001      	b.n	8005c58 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c58:	f001 fe3c 	bl	80078d4 <vPortExitCritical>

	return xReturn;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	e014      	b.n	8005ca2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c78:	4a0f      	ldr	r2, [pc, #60]	; (8005cb8 <vQueueAddToRegistry+0x50>)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10b      	bne.n	8005c9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c84:	490c      	ldr	r1, [pc, #48]	; (8005cb8 <vQueueAddToRegistry+0x50>)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c8e:	4a0a      	ldr	r2, [pc, #40]	; (8005cb8 <vQueueAddToRegistry+0x50>)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4413      	add	r3, r2
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c9a:	e006      	b.n	8005caa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b07      	cmp	r3, #7
 8005ca6:	d9e7      	bls.n	8005c78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	200019e8 	.word	0x200019e8

08005cbc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	e016      	b.n	8005cf8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005cca:	4a10      	ldr	r2, [pc, #64]	; (8005d0c <vQueueUnregisterQueue+0x50>)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d10b      	bne.n	8005cf2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005cda:	4a0c      	ldr	r2, [pc, #48]	; (8005d0c <vQueueUnregisterQueue+0x50>)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2100      	movs	r1, #0
 8005ce0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005ce4:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <vQueueUnregisterQueue+0x50>)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	4413      	add	r3, r2
 8005cec:	2200      	movs	r2, #0
 8005cee:	605a      	str	r2, [r3, #4]
				break;
 8005cf0:	e006      	b.n	8005d00 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b07      	cmp	r3, #7
 8005cfc:	d9e5      	bls.n	8005cca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005cfe:	bf00      	nop
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	200019e8 	.word	0x200019e8

08005d10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d20:	f001 fda8 	bl	8007874 <vPortEnterCritical>
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d2a:	b25b      	sxtb	r3, r3
 8005d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d30:	d103      	bne.n	8005d3a <vQueueWaitForMessageRestricted+0x2a>
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d40:	b25b      	sxtb	r3, r3
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d46:	d103      	bne.n	8005d50 <vQueueWaitForMessageRestricted+0x40>
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d50:	f001 fdc0 	bl	80078d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d106      	bne.n	8005d6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	3324      	adds	r3, #36	; 0x24
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fd41 	bl	80067ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d6a:	6978      	ldr	r0, [r7, #20]
 8005d6c:	f7ff fefb 	bl	8005b66 <prvUnlockQueue>
	}
 8005d70:	bf00      	nop
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08e      	sub	sp, #56	; 0x38
 8005d7c:	af04      	add	r7, sp, #16
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	623b      	str	r3, [r7, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	e7fe      	b.n	8005da0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <xTaskCreateStatic+0x46>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	61fb      	str	r3, [r7, #28]
}
 8005dba:	bf00      	nop
 8005dbc:	e7fe      	b.n	8005dbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dbe:	235c      	movs	r3, #92	; 0x5c
 8005dc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b5c      	cmp	r3, #92	; 0x5c
 8005dc6:	d00a      	beq.n	8005dde <xTaskCreateStatic+0x66>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	61bb      	str	r3, [r7, #24]
}
 8005dda:	bf00      	nop
 8005ddc:	e7fe      	b.n	8005ddc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005dde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d01e      	beq.n	8005e24 <xTaskCreateStatic+0xac>
 8005de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01b      	beq.n	8005e24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005df4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	2202      	movs	r2, #2
 8005dfa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005dfe:	2300      	movs	r3, #0
 8005e00:	9303      	str	r3, [sp, #12]
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	9302      	str	r3, [sp, #8]
 8005e06:	f107 0314 	add.w	r3, r7, #20
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	68b9      	ldr	r1, [r7, #8]
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 f850 	bl	8005ebc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e1e:	f000 f8dd 	bl	8005fdc <prvAddNewTaskToReadyList>
 8005e22:	e001      	b.n	8005e28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e28:	697b      	ldr	r3, [r7, #20]
	}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3728      	adds	r7, #40	; 0x28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b08c      	sub	sp, #48	; 0x30
 8005e36:	af04      	add	r7, sp, #16
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 fe36 	bl	8007ab8 <pvPortMalloc>
 8005e4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00e      	beq.n	8005e72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e54:	205c      	movs	r0, #92	; 0x5c
 8005e56:	f001 fe2f 	bl	8007ab8 <pvPortMalloc>
 8005e5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
 8005e68:	e005      	b.n	8005e76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e6a:	6978      	ldr	r0, [r7, #20]
 8005e6c:	f001 fef0 	bl	8007c50 <vPortFree>
 8005e70:	e001      	b.n	8005e76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d017      	beq.n	8005eac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e84:	88fa      	ldrh	r2, [r7, #6]
 8005e86:	2300      	movs	r3, #0
 8005e88:	9303      	str	r3, [sp, #12]
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	9302      	str	r3, [sp, #8]
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	9301      	str	r3, [sp, #4]
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 f80e 	bl	8005ebc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ea0:	69f8      	ldr	r0, [r7, #28]
 8005ea2:	f000 f89b 	bl	8005fdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	61bb      	str	r3, [r7, #24]
 8005eaa:	e002      	b.n	8005eb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
	}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3720      	adds	r7, #32
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	21a5      	movs	r1, #165	; 0xa5
 8005ed6:	f002 f80b 	bl	8007ef0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	f023 0307 	bic.w	r3, r3, #7
 8005ef2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	617b      	str	r3, [r7, #20]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d01f      	beq.n	8005f5a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61fb      	str	r3, [r7, #28]
 8005f1e:	e012      	b.n	8005f46 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	4413      	add	r3, r2
 8005f26:	7819      	ldrb	r1, [r3, #0]
 8005f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3334      	adds	r3, #52	; 0x34
 8005f30:	460a      	mov	r2, r1
 8005f32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d006      	beq.n	8005f4e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	3301      	adds	r3, #1
 8005f44:	61fb      	str	r3, [r7, #28]
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	2b0f      	cmp	r3, #15
 8005f4a:	d9e9      	bls.n	8005f20 <prvInitialiseNewTask+0x64>
 8005f4c:	e000      	b.n	8005f50 <prvInitialiseNewTask+0x94>
			{
				break;
 8005f4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f58:	e003      	b.n	8005f62 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	2b37      	cmp	r3, #55	; 0x37
 8005f66:	d901      	bls.n	8005f6c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f68:	2337      	movs	r3, #55	; 0x37
 8005f6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	3304      	adds	r3, #4
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fe fe56 	bl	8004c34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	3318      	adds	r3, #24
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe fe51 	bl	8004c34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	2200      	movs	r2, #0
 8005fac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	68f9      	ldr	r1, [r7, #12]
 8005fba:	69b8      	ldr	r0, [r7, #24]
 8005fbc:	f001 fb2c 	bl	8007618 <pxPortInitialiseStack>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fd2:	bf00      	nop
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fe4:	f001 fc46 	bl	8007874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fe8:	4b2d      	ldr	r3, [pc, #180]	; (80060a0 <prvAddNewTaskToReadyList+0xc4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3301      	adds	r3, #1
 8005fee:	4a2c      	ldr	r2, [pc, #176]	; (80060a0 <prvAddNewTaskToReadyList+0xc4>)
 8005ff0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ff2:	4b2c      	ldr	r3, [pc, #176]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d109      	bne.n	800600e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ffa:	4a2a      	ldr	r2, [pc, #168]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006000:	4b27      	ldr	r3, [pc, #156]	; (80060a0 <prvAddNewTaskToReadyList+0xc4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d110      	bne.n	800602a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006008:	f000 fd1c 	bl	8006a44 <prvInitialiseTaskLists>
 800600c:	e00d      	b.n	800602a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800600e:	4b26      	ldr	r3, [pc, #152]	; (80060a8 <prvAddNewTaskToReadyList+0xcc>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006016:	4b23      	ldr	r3, [pc, #140]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	429a      	cmp	r2, r3
 8006022:	d802      	bhi.n	800602a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006024:	4a1f      	ldr	r2, [pc, #124]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800602a:	4b20      	ldr	r3, [pc, #128]	; (80060ac <prvAddNewTaskToReadyList+0xd0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3301      	adds	r3, #1
 8006030:	4a1e      	ldr	r2, [pc, #120]	; (80060ac <prvAddNewTaskToReadyList+0xd0>)
 8006032:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006034:	4b1d      	ldr	r3, [pc, #116]	; (80060ac <prvAddNewTaskToReadyList+0xd0>)
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <prvAddNewTaskToReadyList+0xd4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d903      	bls.n	8006050 <prvAddNewTaskToReadyList+0x74>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	4a18      	ldr	r2, [pc, #96]	; (80060b0 <prvAddNewTaskToReadyList+0xd4>)
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4a15      	ldr	r2, [pc, #84]	; (80060b4 <prvAddNewTaskToReadyList+0xd8>)
 800605e:	441a      	add	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3304      	adds	r3, #4
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f7fe fdf1 	bl	8004c4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800606c:	f001 fc32 	bl	80078d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006070:	4b0d      	ldr	r3, [pc, #52]	; (80060a8 <prvAddNewTaskToReadyList+0xcc>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00e      	beq.n	8006096 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006078:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	429a      	cmp	r2, r3
 8006084:	d207      	bcs.n	8006096 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006086:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <prvAddNewTaskToReadyList+0xdc>)
 8006088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20000bbc 	.word	0x20000bbc
 80060a4:	200006e8 	.word	0x200006e8
 80060a8:	20000bc8 	.word	0x20000bc8
 80060ac:	20000bd8 	.word	0x20000bd8
 80060b0:	20000bc4 	.word	0x20000bc4
 80060b4:	200006ec 	.word	0x200006ec
 80060b8:	e000ed04 	.word	0xe000ed04

080060bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d017      	beq.n	80060fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <vTaskDelay+0x60>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <vTaskDelay+0x30>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	60bb      	str	r3, [r7, #8]
}
 80060e8:	bf00      	nop
 80060ea:	e7fe      	b.n	80060ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060ec:	f000 f986 	bl	80063fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060f0:	2100      	movs	r1, #0
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 feee 	bl	8006ed4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060f8:	f000 f98e 	bl	8006418 <xTaskResumeAll>
 80060fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d107      	bne.n	8006114 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006104:	4b06      	ldr	r3, [pc, #24]	; (8006120 <vTaskDelay+0x64>)
 8006106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006114:	bf00      	nop
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20000be4 	.word	0x20000be4
 8006120:	e000ed04 	.word	0xe000ed04

08006124 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800612c:	f001 fba2 	bl	8007874 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d102      	bne.n	800613c <vTaskSuspend+0x18>
 8006136:	4b30      	ldr	r3, [pc, #192]	; (80061f8 <vTaskSuspend+0xd4>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	e000      	b.n	800613e <vTaskSuspend+0x1a>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3304      	adds	r3, #4
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe fddf 	bl	8004d08 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	2b00      	cmp	r3, #0
 8006150:	d004      	beq.n	800615c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3318      	adds	r3, #24
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe fdd6 	bl	8004d08 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3304      	adds	r3, #4
 8006160:	4619      	mov	r1, r3
 8006162:	4826      	ldr	r0, [pc, #152]	; (80061fc <vTaskSuspend+0xd8>)
 8006164:	f7fe fd73 	bl	8004c4e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b01      	cmp	r3, #1
 8006172:	d103      	bne.n	800617c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800617c:	f001 fbaa 	bl	80078d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006180:	4b1f      	ldr	r3, [pc, #124]	; (8006200 <vTaskSuspend+0xdc>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006188:	f001 fb74 	bl	8007874 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800618c:	f000 fcf8 	bl	8006b80 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006190:	f001 fba0 	bl	80078d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006194:	4b18      	ldr	r3, [pc, #96]	; (80061f8 <vTaskSuspend+0xd4>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	429a      	cmp	r2, r3
 800619c:	d127      	bne.n	80061ee <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800619e:	4b18      	ldr	r3, [pc, #96]	; (8006200 <vTaskSuspend+0xdc>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d017      	beq.n	80061d6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80061a6:	4b17      	ldr	r3, [pc, #92]	; (8006204 <vTaskSuspend+0xe0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <vTaskSuspend+0xa0>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60bb      	str	r3, [r7, #8]
}
 80061c0:	bf00      	nop
 80061c2:	e7fe      	b.n	80061c2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80061c4:	4b10      	ldr	r3, [pc, #64]	; (8006208 <vTaskSuspend+0xe4>)
 80061c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061d4:	e00b      	b.n	80061ee <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80061d6:	4b09      	ldr	r3, [pc, #36]	; (80061fc <vTaskSuspend+0xd8>)
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4b0c      	ldr	r3, [pc, #48]	; (800620c <vTaskSuspend+0xe8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d103      	bne.n	80061ea <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <vTaskSuspend+0xd4>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
	}
 80061e8:	e001      	b.n	80061ee <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80061ea:	f000 fa7d 	bl	80066e8 <vTaskSwitchContext>
	}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	200006e8 	.word	0x200006e8
 80061fc:	20000ba8 	.word	0x20000ba8
 8006200:	20000bc8 	.word	0x20000bc8
 8006204:	20000be4 	.word	0x20000be4
 8006208:	e000ed04 	.word	0xe000ed04
 800620c:	20000bbc 	.word	0x20000bbc

08006210 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	60fb      	str	r3, [r7, #12]
}
 8006238:	bf00      	nop
 800623a:	e7fe      	b.n	800623a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	4a0a      	ldr	r2, [pc, #40]	; (800626c <prvTaskIsTaskSuspended+0x5c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d10a      	bne.n	800625c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624a:	4a09      	ldr	r2, [pc, #36]	; (8006270 <prvTaskIsTaskSuspended+0x60>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d005      	beq.n	800625c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8006258:	2301      	movs	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800625c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800625e:	4618      	mov	r0, r3
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	20000ba8 	.word	0x20000ba8
 8006270:	20000b7c 	.word	0x20000b7c

08006274 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <vTaskResume+0x28>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	60bb      	str	r3, [r7, #8]
}
 8006298:	bf00      	nop
 800629a:	e7fe      	b.n	800629a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800629c:	4b20      	ldr	r3, [pc, #128]	; (8006320 <vTaskResume+0xac>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d038      	beq.n	8006318 <vTaskResume+0xa4>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d035      	beq.n	8006318 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80062ac:	f001 fae2 	bl	8007874 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f7ff ffad 	bl	8006210 <prvTaskIsTaskSuspended>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d02b      	beq.n	8006314 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3304      	adds	r3, #4
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe fd21 	bl	8004d08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ca:	4b16      	ldr	r3, [pc, #88]	; (8006324 <vTaskResume+0xb0>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d903      	bls.n	80062da <vTaskResume+0x66>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d6:	4a13      	ldr	r2, [pc, #76]	; (8006324 <vTaskResume+0xb0>)
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4a10      	ldr	r2, [pc, #64]	; (8006328 <vTaskResume+0xb4>)
 80062e8:	441a      	add	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f7fe fcac 	bl	8004c4e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fa:	4b09      	ldr	r3, [pc, #36]	; (8006320 <vTaskResume+0xac>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	429a      	cmp	r2, r3
 8006302:	d307      	bcc.n	8006314 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006304:	4b09      	ldr	r3, [pc, #36]	; (800632c <vTaskResume+0xb8>)
 8006306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006314:	f001 fade 	bl	80078d4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006318:	bf00      	nop
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	200006e8 	.word	0x200006e8
 8006324:	20000bc4 	.word	0x20000bc4
 8006328:	200006ec 	.word	0x200006ec
 800632c:	e000ed04 	.word	0xe000ed04

08006330 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	; 0x28
 8006334:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006336:	2300      	movs	r3, #0
 8006338:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800633a:	2300      	movs	r3, #0
 800633c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800633e:	463a      	mov	r2, r7
 8006340:	1d39      	adds	r1, r7, #4
 8006342:	f107 0308 	add.w	r3, r7, #8
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe fc20 	bl	8004b8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	9202      	str	r2, [sp, #8]
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	2300      	movs	r3, #0
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	2300      	movs	r3, #0
 800635c:	460a      	mov	r2, r1
 800635e:	4921      	ldr	r1, [pc, #132]	; (80063e4 <vTaskStartScheduler+0xb4>)
 8006360:	4821      	ldr	r0, [pc, #132]	; (80063e8 <vTaskStartScheduler+0xb8>)
 8006362:	f7ff fd09 	bl	8005d78 <xTaskCreateStatic>
 8006366:	4603      	mov	r3, r0
 8006368:	4a20      	ldr	r2, [pc, #128]	; (80063ec <vTaskStartScheduler+0xbc>)
 800636a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800636c:	4b1f      	ldr	r3, [pc, #124]	; (80063ec <vTaskStartScheduler+0xbc>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006374:	2301      	movs	r3, #1
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	e001      	b.n	800637e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d102      	bne.n	800638a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006384:	f000 fdfa 	bl	8006f7c <xTimerCreateTimerTask>
 8006388:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d116      	bne.n	80063be <vTaskStartScheduler+0x8e>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	613b      	str	r3, [r7, #16]
}
 80063a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063a4:	4b12      	ldr	r3, [pc, #72]	; (80063f0 <vTaskStartScheduler+0xc0>)
 80063a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063ac:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <vTaskStartScheduler+0xc4>)
 80063ae:	2201      	movs	r2, #1
 80063b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063b2:	4b11      	ldr	r3, [pc, #68]	; (80063f8 <vTaskStartScheduler+0xc8>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063b8:	f001 f9ba 	bl	8007730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063bc:	e00e      	b.n	80063dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063c4:	d10a      	bne.n	80063dc <vTaskStartScheduler+0xac>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	60fb      	str	r3, [r7, #12]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <vTaskStartScheduler+0xaa>
}
 80063dc:	bf00      	nop
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	08008018 	.word	0x08008018
 80063e8:	08006a15 	.word	0x08006a15
 80063ec:	20000be0 	.word	0x20000be0
 80063f0:	20000bdc 	.word	0x20000bdc
 80063f4:	20000bc8 	.word	0x20000bc8
 80063f8:	20000bc0 	.word	0x20000bc0

080063fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006400:	4b04      	ldr	r3, [pc, #16]	; (8006414 <vTaskSuspendAll+0x18>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	4a03      	ldr	r2, [pc, #12]	; (8006414 <vTaskSuspendAll+0x18>)
 8006408:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800640a:	bf00      	nop
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	20000be4 	.word	0x20000be4

08006418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006422:	2300      	movs	r3, #0
 8006424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006426:	4b42      	ldr	r3, [pc, #264]	; (8006530 <xTaskResumeAll+0x118>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10a      	bne.n	8006444 <xTaskResumeAll+0x2c>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	603b      	str	r3, [r7, #0]
}
 8006440:	bf00      	nop
 8006442:	e7fe      	b.n	8006442 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006444:	f001 fa16 	bl	8007874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006448:	4b39      	ldr	r3, [pc, #228]	; (8006530 <xTaskResumeAll+0x118>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3b01      	subs	r3, #1
 800644e:	4a38      	ldr	r2, [pc, #224]	; (8006530 <xTaskResumeAll+0x118>)
 8006450:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006452:	4b37      	ldr	r3, [pc, #220]	; (8006530 <xTaskResumeAll+0x118>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d162      	bne.n	8006520 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800645a:	4b36      	ldr	r3, [pc, #216]	; (8006534 <xTaskResumeAll+0x11c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d05e      	beq.n	8006520 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006462:	e02f      	b.n	80064c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006464:	4b34      	ldr	r3, [pc, #208]	; (8006538 <xTaskResumeAll+0x120>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	3318      	adds	r3, #24
 8006470:	4618      	mov	r0, r3
 8006472:	f7fe fc49 	bl	8004d08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3304      	adds	r3, #4
 800647a:	4618      	mov	r0, r3
 800647c:	f7fe fc44 	bl	8004d08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006484:	4b2d      	ldr	r3, [pc, #180]	; (800653c <xTaskResumeAll+0x124>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d903      	bls.n	8006494 <xTaskResumeAll+0x7c>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	4a2a      	ldr	r2, [pc, #168]	; (800653c <xTaskResumeAll+0x124>)
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4a27      	ldr	r2, [pc, #156]	; (8006540 <xTaskResumeAll+0x128>)
 80064a2:	441a      	add	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4619      	mov	r1, r3
 80064aa:	4610      	mov	r0, r2
 80064ac:	f7fe fbcf 	bl	8004c4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b4:	4b23      	ldr	r3, [pc, #140]	; (8006544 <xTaskResumeAll+0x12c>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d302      	bcc.n	80064c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80064be:	4b22      	ldr	r3, [pc, #136]	; (8006548 <xTaskResumeAll+0x130>)
 80064c0:	2201      	movs	r2, #1
 80064c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064c4:	4b1c      	ldr	r3, [pc, #112]	; (8006538 <xTaskResumeAll+0x120>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1cb      	bne.n	8006464 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064d2:	f000 fb55 	bl	8006b80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064d6:	4b1d      	ldr	r3, [pc, #116]	; (800654c <xTaskResumeAll+0x134>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d010      	beq.n	8006504 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064e2:	f000 f847 	bl	8006574 <xTaskIncrementTick>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80064ec:	4b16      	ldr	r3, [pc, #88]	; (8006548 <xTaskResumeAll+0x130>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1f1      	bne.n	80064e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80064fe:	4b13      	ldr	r3, [pc, #76]	; (800654c <xTaskResumeAll+0x134>)
 8006500:	2200      	movs	r2, #0
 8006502:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006504:	4b10      	ldr	r3, [pc, #64]	; (8006548 <xTaskResumeAll+0x130>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d009      	beq.n	8006520 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800650c:	2301      	movs	r3, #1
 800650e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006510:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <xTaskResumeAll+0x138>)
 8006512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006520:	f001 f9d8 	bl	80078d4 <vPortExitCritical>

	return xAlreadyYielded;
 8006524:	68bb      	ldr	r3, [r7, #8]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000be4 	.word	0x20000be4
 8006534:	20000bbc 	.word	0x20000bbc
 8006538:	20000b7c 	.word	0x20000b7c
 800653c:	20000bc4 	.word	0x20000bc4
 8006540:	200006ec 	.word	0x200006ec
 8006544:	200006e8 	.word	0x200006e8
 8006548:	20000bd0 	.word	0x20000bd0
 800654c:	20000bcc 	.word	0x20000bcc
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800655a:	4b05      	ldr	r3, [pc, #20]	; (8006570 <xTaskGetTickCount+0x1c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006560:	687b      	ldr	r3, [r7, #4]
}
 8006562:	4618      	mov	r0, r3
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	20000bc0 	.word	0x20000bc0

08006574 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800657a:	2300      	movs	r3, #0
 800657c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800657e:	4b4f      	ldr	r3, [pc, #316]	; (80066bc <xTaskIncrementTick+0x148>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	f040 808f 	bne.w	80066a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006588:	4b4d      	ldr	r3, [pc, #308]	; (80066c0 <xTaskIncrementTick+0x14c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3301      	adds	r3, #1
 800658e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006590:	4a4b      	ldr	r2, [pc, #300]	; (80066c0 <xTaskIncrementTick+0x14c>)
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d120      	bne.n	80065de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800659c:	4b49      	ldr	r3, [pc, #292]	; (80066c4 <xTaskIncrementTick+0x150>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <xTaskIncrementTick+0x48>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	603b      	str	r3, [r7, #0]
}
 80065b8:	bf00      	nop
 80065ba:	e7fe      	b.n	80065ba <xTaskIncrementTick+0x46>
 80065bc:	4b41      	ldr	r3, [pc, #260]	; (80066c4 <xTaskIncrementTick+0x150>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	4b41      	ldr	r3, [pc, #260]	; (80066c8 <xTaskIncrementTick+0x154>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a3f      	ldr	r2, [pc, #252]	; (80066c4 <xTaskIncrementTick+0x150>)
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	4a3f      	ldr	r2, [pc, #252]	; (80066c8 <xTaskIncrementTick+0x154>)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6013      	str	r3, [r2, #0]
 80065d0:	4b3e      	ldr	r3, [pc, #248]	; (80066cc <xTaskIncrementTick+0x158>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	4a3d      	ldr	r2, [pc, #244]	; (80066cc <xTaskIncrementTick+0x158>)
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	f000 fad1 	bl	8006b80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065de:	4b3c      	ldr	r3, [pc, #240]	; (80066d0 <xTaskIncrementTick+0x15c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d349      	bcc.n	800667c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065e8:	4b36      	ldr	r3, [pc, #216]	; (80066c4 <xTaskIncrementTick+0x150>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d104      	bne.n	80065fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f2:	4b37      	ldr	r3, [pc, #220]	; (80066d0 <xTaskIncrementTick+0x15c>)
 80065f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065f8:	601a      	str	r2, [r3, #0]
					break;
 80065fa:	e03f      	b.n	800667c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065fc:	4b31      	ldr	r3, [pc, #196]	; (80066c4 <xTaskIncrementTick+0x150>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	429a      	cmp	r2, r3
 8006612:	d203      	bcs.n	800661c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006614:	4a2e      	ldr	r2, [pc, #184]	; (80066d0 <xTaskIncrementTick+0x15c>)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800661a:	e02f      	b.n	800667c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	3304      	adds	r3, #4
 8006620:	4618      	mov	r0, r3
 8006622:	f7fe fb71 	bl	8004d08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	3318      	adds	r3, #24
 8006632:	4618      	mov	r0, r3
 8006634:	f7fe fb68 	bl	8004d08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663c:	4b25      	ldr	r3, [pc, #148]	; (80066d4 <xTaskIncrementTick+0x160>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	429a      	cmp	r2, r3
 8006642:	d903      	bls.n	800664c <xTaskIncrementTick+0xd8>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006648:	4a22      	ldr	r2, [pc, #136]	; (80066d4 <xTaskIncrementTick+0x160>)
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006650:	4613      	mov	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4a1f      	ldr	r2, [pc, #124]	; (80066d8 <xTaskIncrementTick+0x164>)
 800665a:	441a      	add	r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	3304      	adds	r3, #4
 8006660:	4619      	mov	r1, r3
 8006662:	4610      	mov	r0, r2
 8006664:	f7fe faf3 	bl	8004c4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666c:	4b1b      	ldr	r3, [pc, #108]	; (80066dc <xTaskIncrementTick+0x168>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006672:	429a      	cmp	r2, r3
 8006674:	d3b8      	bcc.n	80065e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006676:	2301      	movs	r3, #1
 8006678:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800667a:	e7b5      	b.n	80065e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800667c:	4b17      	ldr	r3, [pc, #92]	; (80066dc <xTaskIncrementTick+0x168>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006682:	4915      	ldr	r1, [pc, #84]	; (80066d8 <xTaskIncrementTick+0x164>)
 8006684:	4613      	mov	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d901      	bls.n	8006698 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006694:	2301      	movs	r3, #1
 8006696:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006698:	4b11      	ldr	r3, [pc, #68]	; (80066e0 <xTaskIncrementTick+0x16c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d007      	beq.n	80066b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80066a0:	2301      	movs	r3, #1
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	e004      	b.n	80066b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066a6:	4b0f      	ldr	r3, [pc, #60]	; (80066e4 <xTaskIncrementTick+0x170>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3301      	adds	r3, #1
 80066ac:	4a0d      	ldr	r2, [pc, #52]	; (80066e4 <xTaskIncrementTick+0x170>)
 80066ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066b0:	697b      	ldr	r3, [r7, #20]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20000be4 	.word	0x20000be4
 80066c0:	20000bc0 	.word	0x20000bc0
 80066c4:	20000b74 	.word	0x20000b74
 80066c8:	20000b78 	.word	0x20000b78
 80066cc:	20000bd4 	.word	0x20000bd4
 80066d0:	20000bdc 	.word	0x20000bdc
 80066d4:	20000bc4 	.word	0x20000bc4
 80066d8:	200006ec 	.word	0x200006ec
 80066dc:	200006e8 	.word	0x200006e8
 80066e0:	20000bd0 	.word	0x20000bd0
 80066e4:	20000bcc 	.word	0x20000bcc

080066e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066ee:	4b28      	ldr	r3, [pc, #160]	; (8006790 <vTaskSwitchContext+0xa8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066f6:	4b27      	ldr	r3, [pc, #156]	; (8006794 <vTaskSwitchContext+0xac>)
 80066f8:	2201      	movs	r2, #1
 80066fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066fc:	e041      	b.n	8006782 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80066fe:	4b25      	ldr	r3, [pc, #148]	; (8006794 <vTaskSwitchContext+0xac>)
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006704:	4b24      	ldr	r3, [pc, #144]	; (8006798 <vTaskSwitchContext+0xb0>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	e010      	b.n	800672e <vTaskSwitchContext+0x46>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <vTaskSwitchContext+0x40>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	607b      	str	r3, [r7, #4]
}
 8006724:	bf00      	nop
 8006726:	e7fe      	b.n	8006726 <vTaskSwitchContext+0x3e>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3b01      	subs	r3, #1
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	491b      	ldr	r1, [pc, #108]	; (800679c <vTaskSwitchContext+0xb4>)
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	440b      	add	r3, r1
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0e4      	beq.n	800670c <vTaskSwitchContext+0x24>
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4613      	mov	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4a13      	ldr	r2, [pc, #76]	; (800679c <vTaskSwitchContext+0xb4>)
 800674e:	4413      	add	r3, r2
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	605a      	str	r2, [r3, #4]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	3308      	adds	r3, #8
 8006764:	429a      	cmp	r2, r3
 8006766:	d104      	bne.n	8006772 <vTaskSwitchContext+0x8a>
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	605a      	str	r2, [r3, #4]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <vTaskSwitchContext+0xb8>)
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	4a06      	ldr	r2, [pc, #24]	; (8006798 <vTaskSwitchContext+0xb0>)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6013      	str	r3, [r2, #0]
}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20000be4 	.word	0x20000be4
 8006794:	20000bd0 	.word	0x20000bd0
 8006798:	20000bc4 	.word	0x20000bc4
 800679c:	200006ec 	.word	0x200006ec
 80067a0:	200006e8 	.word	0x200006e8

080067a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	60fb      	str	r3, [r7, #12]
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067ca:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <vTaskPlaceOnEventList+0x44>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3318      	adds	r3, #24
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fe fa5f 	bl	8004c96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067d8:	2101      	movs	r1, #1
 80067da:	6838      	ldr	r0, [r7, #0]
 80067dc:	f000 fb7a 	bl	8006ed4 <prvAddCurrentTaskToDelayedList>
}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	200006e8 	.word	0x200006e8

080067ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	617b      	str	r3, [r7, #20]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006814:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <vTaskPlaceOnEventListRestricted+0x54>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3318      	adds	r3, #24
 800681a:	4619      	mov	r1, r3
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f7fe fa16 	bl	8004c4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800682c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	68b8      	ldr	r0, [r7, #8]
 8006832:	f000 fb4f 	bl	8006ed4 <prvAddCurrentTaskToDelayedList>
	}
 8006836:	bf00      	nop
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	200006e8 	.word	0x200006e8

08006844 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	60fb      	str	r3, [r7, #12]
}
 800686c:	bf00      	nop
 800686e:	e7fe      	b.n	800686e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	3318      	adds	r3, #24
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe fa47 	bl	8004d08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800687a:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <xTaskRemoveFromEventList+0xb0>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d11d      	bne.n	80068be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	3304      	adds	r3, #4
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe fa3e 	bl	8004d08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006890:	4b19      	ldr	r3, [pc, #100]	; (80068f8 <xTaskRemoveFromEventList+0xb4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d903      	bls.n	80068a0 <xTaskRemoveFromEventList+0x5c>
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	4a16      	ldr	r2, [pc, #88]	; (80068f8 <xTaskRemoveFromEventList+0xb4>)
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4a13      	ldr	r2, [pc, #76]	; (80068fc <xTaskRemoveFromEventList+0xb8>)
 80068ae:	441a      	add	r2, r3
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	3304      	adds	r3, #4
 80068b4:	4619      	mov	r1, r3
 80068b6:	4610      	mov	r0, r2
 80068b8:	f7fe f9c9 	bl	8004c4e <vListInsertEnd>
 80068bc:	e005      	b.n	80068ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	3318      	adds	r3, #24
 80068c2:	4619      	mov	r1, r3
 80068c4:	480e      	ldr	r0, [pc, #56]	; (8006900 <xTaskRemoveFromEventList+0xbc>)
 80068c6:	f7fe f9c2 	bl	8004c4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ce:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <xTaskRemoveFromEventList+0xc0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d905      	bls.n	80068e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068d8:	2301      	movs	r3, #1
 80068da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068dc:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <xTaskRemoveFromEventList+0xc4>)
 80068de:	2201      	movs	r2, #1
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	e001      	b.n	80068e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068e4:	2300      	movs	r3, #0
 80068e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068e8:	697b      	ldr	r3, [r7, #20]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20000be4 	.word	0x20000be4
 80068f8:	20000bc4 	.word	0x20000bc4
 80068fc:	200006ec 	.word	0x200006ec
 8006900:	20000b7c 	.word	0x20000b7c
 8006904:	200006e8 	.word	0x200006e8
 8006908:	20000bd0 	.word	0x20000bd0

0800690c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006914:	4b06      	ldr	r3, [pc, #24]	; (8006930 <vTaskInternalSetTimeOutState+0x24>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800691c:	4b05      	ldr	r3, [pc, #20]	; (8006934 <vTaskInternalSetTimeOutState+0x28>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	605a      	str	r2, [r3, #4]
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	20000bd4 	.word	0x20000bd4
 8006934:	20000bc0 	.word	0x20000bc0

08006938 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10a      	bne.n	800695e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	613b      	str	r3, [r7, #16]
}
 800695a:	bf00      	nop
 800695c:	e7fe      	b.n	800695c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	60fb      	str	r3, [r7, #12]
}
 8006976:	bf00      	nop
 8006978:	e7fe      	b.n	8006978 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800697a:	f000 ff7b 	bl	8007874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800697e:	4b1d      	ldr	r3, [pc, #116]	; (80069f4 <xTaskCheckForTimeOut+0xbc>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006996:	d102      	bne.n	800699e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006998:	2300      	movs	r3, #0
 800699a:	61fb      	str	r3, [r7, #28]
 800699c:	e023      	b.n	80069e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4b15      	ldr	r3, [pc, #84]	; (80069f8 <xTaskCheckForTimeOut+0xc0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d007      	beq.n	80069ba <xTaskCheckForTimeOut+0x82>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d302      	bcc.n	80069ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069b4:	2301      	movs	r3, #1
 80069b6:	61fb      	str	r3, [r7, #28]
 80069b8:	e015      	b.n	80069e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d20b      	bcs.n	80069dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	1ad2      	subs	r2, r2, r3
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff ff9b 	bl	800690c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61fb      	str	r3, [r7, #28]
 80069da:	e004      	b.n	80069e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069e2:	2301      	movs	r3, #1
 80069e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069e6:	f000 ff75 	bl	80078d4 <vPortExitCritical>

	return xReturn;
 80069ea:	69fb      	ldr	r3, [r7, #28]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3720      	adds	r7, #32
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20000bc0 	.word	0x20000bc0
 80069f8:	20000bd4 	.word	0x20000bd4

080069fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a00:	4b03      	ldr	r3, [pc, #12]	; (8006a10 <vTaskMissedYield+0x14>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	601a      	str	r2, [r3, #0]
}
 8006a06:	bf00      	nop
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	20000bd0 	.word	0x20000bd0

08006a14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a1c:	f000 f852 	bl	8006ac4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <prvIdleTask+0x28>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d9f9      	bls.n	8006a1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a28:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <prvIdleTask+0x2c>)
 8006a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a38:	e7f0      	b.n	8006a1c <prvIdleTask+0x8>
 8006a3a:	bf00      	nop
 8006a3c:	200006ec 	.word	0x200006ec
 8006a40:	e000ed04 	.word	0xe000ed04

08006a44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	607b      	str	r3, [r7, #4]
 8006a4e:	e00c      	b.n	8006a6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4a12      	ldr	r2, [pc, #72]	; (8006aa4 <prvInitialiseTaskLists+0x60>)
 8006a5c:	4413      	add	r3, r2
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe f8c8 	bl	8004bf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3301      	adds	r3, #1
 8006a68:	607b      	str	r3, [r7, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b37      	cmp	r3, #55	; 0x37
 8006a6e:	d9ef      	bls.n	8006a50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a70:	480d      	ldr	r0, [pc, #52]	; (8006aa8 <prvInitialiseTaskLists+0x64>)
 8006a72:	f7fe f8bf 	bl	8004bf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a76:	480d      	ldr	r0, [pc, #52]	; (8006aac <prvInitialiseTaskLists+0x68>)
 8006a78:	f7fe f8bc 	bl	8004bf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a7c:	480c      	ldr	r0, [pc, #48]	; (8006ab0 <prvInitialiseTaskLists+0x6c>)
 8006a7e:	f7fe f8b9 	bl	8004bf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a82:	480c      	ldr	r0, [pc, #48]	; (8006ab4 <prvInitialiseTaskLists+0x70>)
 8006a84:	f7fe f8b6 	bl	8004bf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a88:	480b      	ldr	r0, [pc, #44]	; (8006ab8 <prvInitialiseTaskLists+0x74>)
 8006a8a:	f7fe f8b3 	bl	8004bf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a8e:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <prvInitialiseTaskLists+0x78>)
 8006a90:	4a05      	ldr	r2, [pc, #20]	; (8006aa8 <prvInitialiseTaskLists+0x64>)
 8006a92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a94:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <prvInitialiseTaskLists+0x7c>)
 8006a96:	4a05      	ldr	r2, [pc, #20]	; (8006aac <prvInitialiseTaskLists+0x68>)
 8006a98:	601a      	str	r2, [r3, #0]
}
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	200006ec 	.word	0x200006ec
 8006aa8:	20000b4c 	.word	0x20000b4c
 8006aac:	20000b60 	.word	0x20000b60
 8006ab0:	20000b7c 	.word	0x20000b7c
 8006ab4:	20000b90 	.word	0x20000b90
 8006ab8:	20000ba8 	.word	0x20000ba8
 8006abc:	20000b74 	.word	0x20000b74
 8006ac0:	20000b78 	.word	0x20000b78

08006ac4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006aca:	e019      	b.n	8006b00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006acc:	f000 fed2 	bl	8007874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad0:	4b10      	ldr	r3, [pc, #64]	; (8006b14 <prvCheckTasksWaitingTermination+0x50>)
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fe f913 	bl	8004d08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ae2:	4b0d      	ldr	r3, [pc, #52]	; (8006b18 <prvCheckTasksWaitingTermination+0x54>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	4a0b      	ldr	r2, [pc, #44]	; (8006b18 <prvCheckTasksWaitingTermination+0x54>)
 8006aea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006aec:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <prvCheckTasksWaitingTermination+0x58>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <prvCheckTasksWaitingTermination+0x58>)
 8006af4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006af6:	f000 feed 	bl	80078d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f810 	bl	8006b20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b00:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <prvCheckTasksWaitingTermination+0x58>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e1      	bne.n	8006acc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20000b90 	.word	0x20000b90
 8006b18:	20000bbc 	.word	0x20000bbc
 8006b1c:	20000ba4 	.word	0x20000ba4

08006b20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d108      	bne.n	8006b44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	4618      	mov	r0, r3
 8006b38:	f001 f88a 	bl	8007c50 <vPortFree>
				vPortFree( pxTCB );
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f001 f887 	bl	8007c50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b42:	e018      	b.n	8006b76 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d103      	bne.n	8006b56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 f87e 	bl	8007c50 <vPortFree>
	}
 8006b54:	e00f      	b.n	8006b76 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d00a      	beq.n	8006b76 <prvDeleteTCB+0x56>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	60fb      	str	r3, [r7, #12]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <prvDeleteTCB+0x54>
	}
 8006b76:	bf00      	nop
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b86:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <prvResetNextTaskUnblockTime+0x38>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d104      	bne.n	8006b9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b90:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <prvResetNextTaskUnblockTime+0x3c>)
 8006b92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b98:	e008      	b.n	8006bac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b9a:	4b07      	ldr	r3, [pc, #28]	; (8006bb8 <prvResetNextTaskUnblockTime+0x38>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	4a04      	ldr	r2, [pc, #16]	; (8006bbc <prvResetNextTaskUnblockTime+0x3c>)
 8006baa:	6013      	str	r3, [r2, #0]
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	20000b74 	.word	0x20000b74
 8006bbc:	20000bdc 	.word	0x20000bdc

08006bc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bc6:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <xTaskGetSchedulerState+0x34>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d102      	bne.n	8006bd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	607b      	str	r3, [r7, #4]
 8006bd2:	e008      	b.n	8006be6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bd4:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <xTaskGetSchedulerState+0x38>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d102      	bne.n	8006be2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	607b      	str	r3, [r7, #4]
 8006be0:	e001      	b.n	8006be6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006be2:	2300      	movs	r3, #0
 8006be4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006be6:	687b      	ldr	r3, [r7, #4]
	}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	20000bc8 	.word	0x20000bc8
 8006bf8:	20000be4 	.word	0x20000be4

08006bfc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d051      	beq.n	8006cb6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c16:	4b2a      	ldr	r3, [pc, #168]	; (8006cc0 <xTaskPriorityInherit+0xc4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d241      	bcs.n	8006ca4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	db06      	blt.n	8006c36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c28:	4b25      	ldr	r3, [pc, #148]	; (8006cc0 <xTaskPriorityInherit+0xc4>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6959      	ldr	r1, [r3, #20]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4a1f      	ldr	r2, [pc, #124]	; (8006cc4 <xTaskPriorityInherit+0xc8>)
 8006c48:	4413      	add	r3, r2
 8006c4a:	4299      	cmp	r1, r3
 8006c4c:	d122      	bne.n	8006c94 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	3304      	adds	r3, #4
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fe f858 	bl	8004d08 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c58:	4b19      	ldr	r3, [pc, #100]	; (8006cc0 <xTaskPriorityInherit+0xc4>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c66:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <xTaskPriorityInherit+0xcc>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d903      	bls.n	8006c76 <xTaskPriorityInherit+0x7a>
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c72:	4a15      	ldr	r2, [pc, #84]	; (8006cc8 <xTaskPriorityInherit+0xcc>)
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4a10      	ldr	r2, [pc, #64]	; (8006cc4 <xTaskPriorityInherit+0xc8>)
 8006c84:	441a      	add	r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f7fd ffde 	bl	8004c4e <vListInsertEnd>
 8006c92:	e004      	b.n	8006c9e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c94:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <xTaskPriorityInherit+0xc4>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	e008      	b.n	8006cb6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ca8:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <xTaskPriorityInherit+0xc4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d201      	bcs.n	8006cb6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
	}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	200006e8 	.word	0x200006e8
 8006cc4:	200006ec 	.word	0x200006ec
 8006cc8:	20000bc4 	.word	0x20000bc4

08006ccc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d056      	beq.n	8006d90 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ce2:	4b2e      	ldr	r3, [pc, #184]	; (8006d9c <xTaskPriorityDisinherit+0xd0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d00a      	beq.n	8006d02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	60fb      	str	r3, [r7, #12]
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10a      	bne.n	8006d20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	60bb      	str	r3, [r7, #8]
}
 8006d1c:	bf00      	nop
 8006d1e:	e7fe      	b.n	8006d1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d24:	1e5a      	subs	r2, r3, #1
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d02c      	beq.n	8006d90 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d128      	bne.n	8006d90 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	3304      	adds	r3, #4
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fd ffe0 	bl	8004d08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d60:	4b0f      	ldr	r3, [pc, #60]	; (8006da0 <xTaskPriorityDisinherit+0xd4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d903      	bls.n	8006d70 <xTaskPriorityDisinherit+0xa4>
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	4a0c      	ldr	r2, [pc, #48]	; (8006da0 <xTaskPriorityDisinherit+0xd4>)
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4a09      	ldr	r2, [pc, #36]	; (8006da4 <xTaskPriorityDisinherit+0xd8>)
 8006d7e:	441a      	add	r2, r3
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	3304      	adds	r3, #4
 8006d84:	4619      	mov	r1, r3
 8006d86:	4610      	mov	r0, r2
 8006d88:	f7fd ff61 	bl	8004c4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d90:	697b      	ldr	r3, [r7, #20]
	}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	200006e8 	.word	0x200006e8
 8006da0:	20000bc4 	.word	0x20000bc4
 8006da4:	200006ec 	.word	0x200006ec

08006da8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006db6:	2301      	movs	r3, #1
 8006db8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d06a      	beq.n	8006e96 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	60fb      	str	r3, [r7, #12]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d902      	bls.n	8006dee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	61fb      	str	r3, [r7, #28]
 8006dec:	e002      	b.n	8006df4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d04b      	beq.n	8006e96 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d146      	bne.n	8006e96 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e08:	4b25      	ldr	r3, [pc, #148]	; (8006ea0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d10a      	bne.n	8006e28 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	60bb      	str	r3, [r7, #8]
}
 8006e24:	bf00      	nop
 8006e26:	e7fe      	b.n	8006e26 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	db04      	blt.n	8006e46 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	6959      	ldr	r1, [r3, #20]
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4a13      	ldr	r2, [pc, #76]	; (8006ea4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006e56:	4413      	add	r3, r2
 8006e58:	4299      	cmp	r1, r3
 8006e5a:	d11c      	bne.n	8006e96 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	3304      	adds	r3, #4
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fd ff51 	bl	8004d08 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6a:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d903      	bls.n	8006e7a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e76:	4a0c      	ldr	r2, [pc, #48]	; (8006ea8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4a07      	ldr	r2, [pc, #28]	; (8006ea4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006e88:	441a      	add	r2, r3
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4610      	mov	r0, r2
 8006e92:	f7fd fedc 	bl	8004c4e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e96:	bf00      	nop
 8006e98:	3720      	adds	r7, #32
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	200006e8 	.word	0x200006e8
 8006ea4:	200006ec 	.word	0x200006ec
 8006ea8:	20000bc4 	.word	0x20000bc4

08006eac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006eb0:	4b07      	ldr	r3, [pc, #28]	; (8006ed0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d004      	beq.n	8006ec2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006eb8:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ebe:	3201      	adds	r2, #1
 8006ec0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006ec2:	4b03      	ldr	r3, [pc, #12]	; (8006ed0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
	}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	200006e8 	.word	0x200006e8

08006ed4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ede:	4b21      	ldr	r3, [pc, #132]	; (8006f64 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ee4:	4b20      	ldr	r3, [pc, #128]	; (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fd ff0c 	bl	8004d08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef6:	d10a      	bne.n	8006f0e <prvAddCurrentTaskToDelayedList+0x3a>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d007      	beq.n	8006f0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006efe:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4619      	mov	r1, r3
 8006f06:	4819      	ldr	r0, [pc, #100]	; (8006f6c <prvAddCurrentTaskToDelayedList+0x98>)
 8006f08:	f7fd fea1 	bl	8004c4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f0c:	e026      	b.n	8006f5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4413      	add	r3, r2
 8006f14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f16:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d209      	bcs.n	8006f3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f26:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f7fd feaf 	bl	8004c96 <vListInsert>
}
 8006f38:	e010      	b.n	8006f5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f3a:	4b0e      	ldr	r3, [pc, #56]	; (8006f74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3304      	adds	r3, #4
 8006f44:	4619      	mov	r1, r3
 8006f46:	4610      	mov	r0, r2
 8006f48:	f7fd fea5 	bl	8004c96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d202      	bcs.n	8006f5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f56:	4a08      	ldr	r2, [pc, #32]	; (8006f78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	6013      	str	r3, [r2, #0]
}
 8006f5c:	bf00      	nop
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20000bc0 	.word	0x20000bc0
 8006f68:	200006e8 	.word	0x200006e8
 8006f6c:	20000ba8 	.word	0x20000ba8
 8006f70:	20000b78 	.word	0x20000b78
 8006f74:	20000b74 	.word	0x20000b74
 8006f78:	20000bdc 	.word	0x20000bdc

08006f7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	; 0x28
 8006f80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f86:	f000 fb07 	bl	8007598 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f8a:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <xTimerCreateTimerTask+0x80>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d021      	beq.n	8006fd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f9a:	1d3a      	adds	r2, r7, #4
 8006f9c:	f107 0108 	add.w	r1, r7, #8
 8006fa0:	f107 030c 	add.w	r3, r7, #12
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fd fe0b 	bl	8004bc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	9202      	str	r2, [sp, #8]
 8006fb2:	9301      	str	r3, [sp, #4]
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	460a      	mov	r2, r1
 8006fbc:	4910      	ldr	r1, [pc, #64]	; (8007000 <xTimerCreateTimerTask+0x84>)
 8006fbe:	4811      	ldr	r0, [pc, #68]	; (8007004 <xTimerCreateTimerTask+0x88>)
 8006fc0:	f7fe feda 	bl	8005d78 <xTaskCreateStatic>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	4a10      	ldr	r2, [pc, #64]	; (8007008 <xTimerCreateTimerTask+0x8c>)
 8006fc8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006fca:	4b0f      	ldr	r3, [pc, #60]	; (8007008 <xTimerCreateTimerTask+0x8c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10a      	bne.n	8006ff2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	613b      	str	r3, [r7, #16]
}
 8006fee:	bf00      	nop
 8006ff0:	e7fe      	b.n	8006ff0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ff2:	697b      	ldr	r3, [r7, #20]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20000c18 	.word	0x20000c18
 8007000:	08008020 	.word	0x08008020
 8007004:	08007141 	.word	0x08007141
 8007008:	20000c1c 	.word	0x20000c1c

0800700c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08a      	sub	sp, #40	; 0x28
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800701a:	2300      	movs	r3, #0
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10a      	bne.n	800703a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	623b      	str	r3, [r7, #32]
}
 8007036:	bf00      	nop
 8007038:	e7fe      	b.n	8007038 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800703a:	4b1a      	ldr	r3, [pc, #104]	; (80070a4 <xTimerGenericCommand+0x98>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d02a      	beq.n	8007098 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b05      	cmp	r3, #5
 8007052:	dc18      	bgt.n	8007086 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007054:	f7ff fdb4 	bl	8006bc0 <xTaskGetSchedulerState>
 8007058:	4603      	mov	r3, r0
 800705a:	2b02      	cmp	r3, #2
 800705c:	d109      	bne.n	8007072 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800705e:	4b11      	ldr	r3, [pc, #68]	; (80070a4 <xTimerGenericCommand+0x98>)
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	f107 0110 	add.w	r1, r7, #16
 8007066:	2300      	movs	r3, #0
 8007068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800706a:	f7fe f81f 	bl	80050ac <xQueueGenericSend>
 800706e:	6278      	str	r0, [r7, #36]	; 0x24
 8007070:	e012      	b.n	8007098 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007072:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <xTimerGenericCommand+0x98>)
 8007074:	6818      	ldr	r0, [r3, #0]
 8007076:	f107 0110 	add.w	r1, r7, #16
 800707a:	2300      	movs	r3, #0
 800707c:	2200      	movs	r2, #0
 800707e:	f7fe f815 	bl	80050ac <xQueueGenericSend>
 8007082:	6278      	str	r0, [r7, #36]	; 0x24
 8007084:	e008      	b.n	8007098 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007086:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <xTimerGenericCommand+0x98>)
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	f107 0110 	add.w	r1, r7, #16
 800708e:	2300      	movs	r3, #0
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	f7fe f909 	bl	80052a8 <xQueueGenericSendFromISR>
 8007096:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800709a:	4618      	mov	r0, r3
 800709c:	3728      	adds	r7, #40	; 0x28
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20000c18 	.word	0x20000c18

080070a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b2:	4b22      	ldr	r3, [pc, #136]	; (800713c <prvProcessExpiredTimer+0x94>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	3304      	adds	r3, #4
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fd fe21 	bl	8004d08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d022      	beq.n	800711a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	699a      	ldr	r2, [r3, #24]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	18d1      	adds	r1, r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	6978      	ldr	r0, [r7, #20]
 80070e2:	f000 f8d1 	bl	8007288 <prvInsertTimerInActiveList>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01f      	beq.n	800712c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070ec:	2300      	movs	r3, #0
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	2300      	movs	r3, #0
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	2100      	movs	r1, #0
 80070f6:	6978      	ldr	r0, [r7, #20]
 80070f8:	f7ff ff88 	bl	800700c <xTimerGenericCommand>
 80070fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d113      	bne.n	800712c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	60fb      	str	r3, [r7, #12]
}
 8007116:	bf00      	nop
 8007118:	e7fe      	b.n	8007118 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007120:	f023 0301 	bic.w	r3, r3, #1
 8007124:	b2da      	uxtb	r2, r3
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	6978      	ldr	r0, [r7, #20]
 8007132:	4798      	blx	r3
}
 8007134:	bf00      	nop
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000c10 	.word	0x20000c10

08007140 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007148:	f107 0308 	add.w	r3, r7, #8
 800714c:	4618      	mov	r0, r3
 800714e:	f000 f857 	bl	8007200 <prvGetNextExpireTime>
 8007152:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4619      	mov	r1, r3
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f803 	bl	8007164 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800715e:	f000 f8d5 	bl	800730c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007162:	e7f1      	b.n	8007148 <prvTimerTask+0x8>

08007164 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800716e:	f7ff f945 	bl	80063fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007172:	f107 0308 	add.w	r3, r7, #8
 8007176:	4618      	mov	r0, r3
 8007178:	f000 f866 	bl	8007248 <prvSampleTimeNow>
 800717c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d130      	bne.n	80071e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10a      	bne.n	80071a0 <prvProcessTimerOrBlockTask+0x3c>
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	429a      	cmp	r2, r3
 8007190:	d806      	bhi.n	80071a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007192:	f7ff f941 	bl	8006418 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff ff85 	bl	80070a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800719e:	e024      	b.n	80071ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d008      	beq.n	80071b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071a6:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <prvProcessTimerOrBlockTask+0x90>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <prvProcessTimerOrBlockTask+0x50>
 80071b0:	2301      	movs	r3, #1
 80071b2:	e000      	b.n	80071b6 <prvProcessTimerOrBlockTask+0x52>
 80071b4:	2300      	movs	r3, #0
 80071b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071b8:	4b0f      	ldr	r3, [pc, #60]	; (80071f8 <prvProcessTimerOrBlockTask+0x94>)
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	4619      	mov	r1, r3
 80071c6:	f7fe fda3 	bl	8005d10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071ca:	f7ff f925 	bl	8006418 <xTaskResumeAll>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071d4:	4b09      	ldr	r3, [pc, #36]	; (80071fc <prvProcessTimerOrBlockTask+0x98>)
 80071d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	f3bf 8f6f 	isb	sy
}
 80071e4:	e001      	b.n	80071ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071e6:	f7ff f917 	bl	8006418 <xTaskResumeAll>
}
 80071ea:	bf00      	nop
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000c14 	.word	0x20000c14
 80071f8:	20000c18 	.word	0x20000c18
 80071fc:	e000ed04 	.word	0xe000ed04

08007200 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007208:	4b0e      	ldr	r3, [pc, #56]	; (8007244 <prvGetNextExpireTime+0x44>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <prvGetNextExpireTime+0x16>
 8007212:	2201      	movs	r2, #1
 8007214:	e000      	b.n	8007218 <prvGetNextExpireTime+0x18>
 8007216:	2200      	movs	r2, #0
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d105      	bne.n	8007230 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007224:	4b07      	ldr	r3, [pc, #28]	; (8007244 <prvGetNextExpireTime+0x44>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	e001      	b.n	8007234 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007234:	68fb      	ldr	r3, [r7, #12]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	20000c10 	.word	0x20000c10

08007248 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007250:	f7ff f980 	bl	8006554 <xTaskGetTickCount>
 8007254:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007256:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <prvSampleTimeNow+0x3c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	429a      	cmp	r2, r3
 800725e:	d205      	bcs.n	800726c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007260:	f000 f936 	bl	80074d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	e002      	b.n	8007272 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007272:	4a04      	ldr	r2, [pc, #16]	; (8007284 <prvSampleTimeNow+0x3c>)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007278:	68fb      	ldr	r3, [r7, #12]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20000c20 	.word	0x20000c20

08007288 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d812      	bhi.n	80072d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	1ad2      	subs	r2, r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d302      	bcc.n	80072c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072bc:	2301      	movs	r3, #1
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	e01b      	b.n	80072fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072c2:	4b10      	ldr	r3, [pc, #64]	; (8007304 <prvInsertTimerInActiveList+0x7c>)
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3304      	adds	r3, #4
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f7fd fce2 	bl	8004c96 <vListInsert>
 80072d2:	e012      	b.n	80072fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d206      	bcs.n	80072ea <prvInsertTimerInActiveList+0x62>
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d302      	bcc.n	80072ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072e4:	2301      	movs	r3, #1
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	e007      	b.n	80072fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072ea:	4b07      	ldr	r3, [pc, #28]	; (8007308 <prvInsertTimerInActiveList+0x80>)
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3304      	adds	r3, #4
 80072f2:	4619      	mov	r1, r3
 80072f4:	4610      	mov	r0, r2
 80072f6:	f7fd fcce 	bl	8004c96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072fa:	697b      	ldr	r3, [r7, #20]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	20000c14 	.word	0x20000c14
 8007308:	20000c10 	.word	0x20000c10

0800730c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08e      	sub	sp, #56	; 0x38
 8007310:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007312:	e0ca      	b.n	80074aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	da18      	bge.n	800734c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800731a:	1d3b      	adds	r3, r7, #4
 800731c:	3304      	adds	r3, #4
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	61fb      	str	r3, [r7, #28]
}
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007342:	6850      	ldr	r0, [r2, #4]
 8007344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007346:	6892      	ldr	r2, [r2, #8]
 8007348:	4611      	mov	r1, r2
 800734a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f2c0 80aa 	blt.w	80074a8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d004      	beq.n	800736a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	3304      	adds	r3, #4
 8007364:	4618      	mov	r0, r3
 8007366:	f7fd fccf 	bl	8004d08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800736a:	463b      	mov	r3, r7
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff ff6b 	bl	8007248 <prvSampleTimeNow>
 8007372:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b09      	cmp	r3, #9
 8007378:	f200 8097 	bhi.w	80074aa <prvProcessReceivedCommands+0x19e>
 800737c:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <prvProcessReceivedCommands+0x78>)
 800737e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007382:	bf00      	nop
 8007384:	080073ad 	.word	0x080073ad
 8007388:	080073ad 	.word	0x080073ad
 800738c:	080073ad 	.word	0x080073ad
 8007390:	08007421 	.word	0x08007421
 8007394:	08007435 	.word	0x08007435
 8007398:	0800747f 	.word	0x0800747f
 800739c:	080073ad 	.word	0x080073ad
 80073a0:	080073ad 	.word	0x080073ad
 80073a4:	08007421 	.word	0x08007421
 80073a8:	08007435 	.word	0x08007435
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073b2:	f043 0301 	orr.w	r3, r3, #1
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	18d1      	adds	r1, r2, r3
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073cc:	f7ff ff5c 	bl	8007288 <prvInsertTimerInActiveList>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d069      	beq.n	80074aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d05e      	beq.n	80074aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	441a      	add	r2, r3
 80073f4:	2300      	movs	r3, #0
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	2300      	movs	r3, #0
 80073fa:	2100      	movs	r1, #0
 80073fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073fe:	f7ff fe05 	bl	800700c <xTimerGenericCommand>
 8007402:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d14f      	bne.n	80074aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	61bb      	str	r3, [r7, #24]
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007426:	f023 0301 	bic.w	r3, r3, #1
 800742a:	b2da      	uxtb	r2, r3
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007432:	e03a      	b.n	80074aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	b2da      	uxtb	r2, r3
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	617b      	str	r3, [r7, #20]
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	18d1      	adds	r1, r2, r3
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007478:	f7ff ff06 	bl	8007288 <prvInsertTimerInActiveList>
					break;
 800747c:	e015      	b.n	80074aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800748c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800748e:	f000 fbdf 	bl	8007c50 <vPortFree>
 8007492:	e00a      	b.n	80074aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074a6:	e000      	b.n	80074aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80074a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074aa:	4b08      	ldr	r3, [pc, #32]	; (80074cc <prvProcessReceivedCommands+0x1c0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	1d39      	adds	r1, r7, #4
 80074b0:	2200      	movs	r2, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe f820 	bl	80054f8 <xQueueReceive>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f47f af2a 	bne.w	8007314 <prvProcessReceivedCommands+0x8>
	}
}
 80074c0:	bf00      	nop
 80074c2:	bf00      	nop
 80074c4:	3730      	adds	r7, #48	; 0x30
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000c18 	.word	0x20000c18

080074d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074d6:	e048      	b.n	800756a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074d8:	4b2d      	ldr	r3, [pc, #180]	; (8007590 <prvSwitchTimerLists+0xc0>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074e2:	4b2b      	ldr	r3, [pc, #172]	; (8007590 <prvSwitchTimerLists+0xc0>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3304      	adds	r3, #4
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fd fc09 	bl	8004d08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d02e      	beq.n	800756a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4413      	add	r3, r2
 8007514:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	429a      	cmp	r2, r3
 800751c:	d90e      	bls.n	800753c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800752a:	4b19      	ldr	r3, [pc, #100]	; (8007590 <prvSwitchTimerLists+0xc0>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3304      	adds	r3, #4
 8007532:	4619      	mov	r1, r3
 8007534:	4610      	mov	r0, r2
 8007536:	f7fd fbae 	bl	8004c96 <vListInsert>
 800753a:	e016      	b.n	800756a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800753c:	2300      	movs	r3, #0
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	2300      	movs	r3, #0
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	2100      	movs	r1, #0
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7ff fd60 	bl	800700c <xTimerGenericCommand>
 800754c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	603b      	str	r3, [r7, #0]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800756a:	4b09      	ldr	r3, [pc, #36]	; (8007590 <prvSwitchTimerLists+0xc0>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1b1      	bne.n	80074d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007574:	4b06      	ldr	r3, [pc, #24]	; (8007590 <prvSwitchTimerLists+0xc0>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800757a:	4b06      	ldr	r3, [pc, #24]	; (8007594 <prvSwitchTimerLists+0xc4>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a04      	ldr	r2, [pc, #16]	; (8007590 <prvSwitchTimerLists+0xc0>)
 8007580:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007582:	4a04      	ldr	r2, [pc, #16]	; (8007594 <prvSwitchTimerLists+0xc4>)
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	6013      	str	r3, [r2, #0]
}
 8007588:	bf00      	nop
 800758a:	3718      	adds	r7, #24
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	20000c10 	.word	0x20000c10
 8007594:	20000c14 	.word	0x20000c14

08007598 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800759e:	f000 f969 	bl	8007874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075a2:	4b15      	ldr	r3, [pc, #84]	; (80075f8 <prvCheckForValidListAndQueue+0x60>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d120      	bne.n	80075ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80075aa:	4814      	ldr	r0, [pc, #80]	; (80075fc <prvCheckForValidListAndQueue+0x64>)
 80075ac:	f7fd fb22 	bl	8004bf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80075b0:	4813      	ldr	r0, [pc, #76]	; (8007600 <prvCheckForValidListAndQueue+0x68>)
 80075b2:	f7fd fb1f 	bl	8004bf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80075b6:	4b13      	ldr	r3, [pc, #76]	; (8007604 <prvCheckForValidListAndQueue+0x6c>)
 80075b8:	4a10      	ldr	r2, [pc, #64]	; (80075fc <prvCheckForValidListAndQueue+0x64>)
 80075ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80075bc:	4b12      	ldr	r3, [pc, #72]	; (8007608 <prvCheckForValidListAndQueue+0x70>)
 80075be:	4a10      	ldr	r2, [pc, #64]	; (8007600 <prvCheckForValidListAndQueue+0x68>)
 80075c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80075c2:	2300      	movs	r3, #0
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	4b11      	ldr	r3, [pc, #68]	; (800760c <prvCheckForValidListAndQueue+0x74>)
 80075c8:	4a11      	ldr	r2, [pc, #68]	; (8007610 <prvCheckForValidListAndQueue+0x78>)
 80075ca:	2110      	movs	r1, #16
 80075cc:	200a      	movs	r0, #10
 80075ce:	f7fd fc2d 	bl	8004e2c <xQueueGenericCreateStatic>
 80075d2:	4603      	mov	r3, r0
 80075d4:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <prvCheckForValidListAndQueue+0x60>)
 80075d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075d8:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <prvCheckForValidListAndQueue+0x60>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075e0:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <prvCheckForValidListAndQueue+0x60>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	490b      	ldr	r1, [pc, #44]	; (8007614 <prvCheckForValidListAndQueue+0x7c>)
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe fb3e 	bl	8005c68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075ec:	f000 f972 	bl	80078d4 <vPortExitCritical>
}
 80075f0:	bf00      	nop
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000c18 	.word	0x20000c18
 80075fc:	20000be8 	.word	0x20000be8
 8007600:	20000bfc 	.word	0x20000bfc
 8007604:	20000c10 	.word	0x20000c10
 8007608:	20000c14 	.word	0x20000c14
 800760c:	20000cc4 	.word	0x20000cc4
 8007610:	20000c24 	.word	0x20000c24
 8007614:	08008028 	.word	0x08008028

08007618 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3b04      	subs	r3, #4
 8007628:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007630:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3b04      	subs	r3, #4
 8007636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f023 0201 	bic.w	r2, r3, #1
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3b04      	subs	r3, #4
 8007646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007648:	4a0c      	ldr	r2, [pc, #48]	; (800767c <pxPortInitialiseStack+0x64>)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3b14      	subs	r3, #20
 8007652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3b04      	subs	r3, #4
 800765e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f06f 0202 	mvn.w	r2, #2
 8007666:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3b20      	subs	r3, #32
 800766c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800766e:	68fb      	ldr	r3, [r7, #12]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	08007681 	.word	0x08007681

08007680 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800768a:	4b12      	ldr	r3, [pc, #72]	; (80076d4 <prvTaskExitError+0x54>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007692:	d00a      	beq.n	80076aa <prvTaskExitError+0x2a>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	60fb      	str	r3, [r7, #12]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <prvTaskExitError+0x28>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	60bb      	str	r3, [r7, #8]
}
 80076bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076be:	bf00      	nop
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d0fc      	beq.n	80076c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076c6:	bf00      	nop
 80076c8:	bf00      	nop
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	2000000c 	.word	0x2000000c
	...

080076e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076e0:	4b07      	ldr	r3, [pc, #28]	; (8007700 <pxCurrentTCBConst2>)
 80076e2:	6819      	ldr	r1, [r3, #0]
 80076e4:	6808      	ldr	r0, [r1, #0]
 80076e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ea:	f380 8809 	msr	PSP, r0
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f04f 0000 	mov.w	r0, #0
 80076f6:	f380 8811 	msr	BASEPRI, r0
 80076fa:	4770      	bx	lr
 80076fc:	f3af 8000 	nop.w

08007700 <pxCurrentTCBConst2>:
 8007700:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop

08007708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007708:	4808      	ldr	r0, [pc, #32]	; (800772c <prvPortStartFirstTask+0x24>)
 800770a:	6800      	ldr	r0, [r0, #0]
 800770c:	6800      	ldr	r0, [r0, #0]
 800770e:	f380 8808 	msr	MSP, r0
 8007712:	f04f 0000 	mov.w	r0, #0
 8007716:	f380 8814 	msr	CONTROL, r0
 800771a:	b662      	cpsie	i
 800771c:	b661      	cpsie	f
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	df00      	svc	0
 8007728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800772a:	bf00      	nop
 800772c:	e000ed08 	.word	0xe000ed08

08007730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007736:	4b46      	ldr	r3, [pc, #280]	; (8007850 <xPortStartScheduler+0x120>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a46      	ldr	r2, [pc, #280]	; (8007854 <xPortStartScheduler+0x124>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d10a      	bne.n	8007756 <xPortStartScheduler+0x26>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	613b      	str	r3, [r7, #16]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007756:	4b3e      	ldr	r3, [pc, #248]	; (8007850 <xPortStartScheduler+0x120>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a3f      	ldr	r2, [pc, #252]	; (8007858 <xPortStartScheduler+0x128>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d10a      	bne.n	8007776 <xPortStartScheduler+0x46>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	60fb      	str	r3, [r7, #12]
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007776:	4b39      	ldr	r3, [pc, #228]	; (800785c <xPortStartScheduler+0x12c>)
 8007778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	22ff      	movs	r2, #255	; 0xff
 8007786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007798:	b2da      	uxtb	r2, r3
 800779a:	4b31      	ldr	r3, [pc, #196]	; (8007860 <xPortStartScheduler+0x130>)
 800779c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800779e:	4b31      	ldr	r3, [pc, #196]	; (8007864 <xPortStartScheduler+0x134>)
 80077a0:	2207      	movs	r2, #7
 80077a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077a4:	e009      	b.n	80077ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80077a6:	4b2f      	ldr	r3, [pc, #188]	; (8007864 <xPortStartScheduler+0x134>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	4a2d      	ldr	r2, [pc, #180]	; (8007864 <xPortStartScheduler+0x134>)
 80077ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c2:	2b80      	cmp	r3, #128	; 0x80
 80077c4:	d0ef      	beq.n	80077a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077c6:	4b27      	ldr	r3, [pc, #156]	; (8007864 <xPortStartScheduler+0x134>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f1c3 0307 	rsb	r3, r3, #7
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d00a      	beq.n	80077e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	60bb      	str	r3, [r7, #8]
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077e8:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <xPortStartScheduler+0x134>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	4a1d      	ldr	r2, [pc, #116]	; (8007864 <xPortStartScheduler+0x134>)
 80077f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077f2:	4b1c      	ldr	r3, [pc, #112]	; (8007864 <xPortStartScheduler+0x134>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077fa:	4a1a      	ldr	r2, [pc, #104]	; (8007864 <xPortStartScheduler+0x134>)
 80077fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	b2da      	uxtb	r2, r3
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007806:	4b18      	ldr	r3, [pc, #96]	; (8007868 <xPortStartScheduler+0x138>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a17      	ldr	r2, [pc, #92]	; (8007868 <xPortStartScheduler+0x138>)
 800780c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007812:	4b15      	ldr	r3, [pc, #84]	; (8007868 <xPortStartScheduler+0x138>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a14      	ldr	r2, [pc, #80]	; (8007868 <xPortStartScheduler+0x138>)
 8007818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800781c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800781e:	f000 f8dd 	bl	80079dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007822:	4b12      	ldr	r3, [pc, #72]	; (800786c <xPortStartScheduler+0x13c>)
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007828:	f000 f8fc 	bl	8007a24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800782c:	4b10      	ldr	r3, [pc, #64]	; (8007870 <xPortStartScheduler+0x140>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a0f      	ldr	r2, [pc, #60]	; (8007870 <xPortStartScheduler+0x140>)
 8007832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007838:	f7ff ff66 	bl	8007708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800783c:	f7fe ff54 	bl	80066e8 <vTaskSwitchContext>
	prvTaskExitError();
 8007840:	f7ff ff1e 	bl	8007680 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	e000ed00 	.word	0xe000ed00
 8007854:	410fc271 	.word	0x410fc271
 8007858:	410fc270 	.word	0x410fc270
 800785c:	e000e400 	.word	0xe000e400
 8007860:	20000d14 	.word	0x20000d14
 8007864:	20000d18 	.word	0x20000d18
 8007868:	e000ed20 	.word	0xe000ed20
 800786c:	2000000c 	.word	0x2000000c
 8007870:	e000ef34 	.word	0xe000ef34

08007874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	607b      	str	r3, [r7, #4]
}
 800788c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800788e:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <vPortEnterCritical+0x58>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3301      	adds	r3, #1
 8007894:	4a0d      	ldr	r2, [pc, #52]	; (80078cc <vPortEnterCritical+0x58>)
 8007896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007898:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <vPortEnterCritical+0x58>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d10f      	bne.n	80078c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078a0:	4b0b      	ldr	r3, [pc, #44]	; (80078d0 <vPortEnterCritical+0x5c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	603b      	str	r3, [r7, #0]
}
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <vPortEnterCritical+0x4a>
	}
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	2000000c 	.word	0x2000000c
 80078d0:	e000ed04 	.word	0xe000ed04

080078d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078da:	4b12      	ldr	r3, [pc, #72]	; (8007924 <vPortExitCritical+0x50>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <vPortExitCritical+0x24>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	607b      	str	r3, [r7, #4]
}
 80078f4:	bf00      	nop
 80078f6:	e7fe      	b.n	80078f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078f8:	4b0a      	ldr	r3, [pc, #40]	; (8007924 <vPortExitCritical+0x50>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	4a09      	ldr	r2, [pc, #36]	; (8007924 <vPortExitCritical+0x50>)
 8007900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007902:	4b08      	ldr	r3, [pc, #32]	; (8007924 <vPortExitCritical+0x50>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d105      	bne.n	8007916 <vPortExitCritical+0x42>
 800790a:	2300      	movs	r3, #0
 800790c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	f383 8811 	msr	BASEPRI, r3
}
 8007914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	2000000c 	.word	0x2000000c
	...

08007930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007930:	f3ef 8009 	mrs	r0, PSP
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	4b15      	ldr	r3, [pc, #84]	; (8007990 <pxCurrentTCBConst>)
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	f01e 0f10 	tst.w	lr, #16
 8007940:	bf08      	it	eq
 8007942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794a:	6010      	str	r0, [r2, #0]
 800794c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007954:	f380 8811 	msr	BASEPRI, r0
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f7fe fec2 	bl	80066e8 <vTaskSwitchContext>
 8007964:	f04f 0000 	mov.w	r0, #0
 8007968:	f380 8811 	msr	BASEPRI, r0
 800796c:	bc09      	pop	{r0, r3}
 800796e:	6819      	ldr	r1, [r3, #0]
 8007970:	6808      	ldr	r0, [r1, #0]
 8007972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007976:	f01e 0f10 	tst.w	lr, #16
 800797a:	bf08      	it	eq
 800797c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007980:	f380 8809 	msr	PSP, r0
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	f3af 8000 	nop.w

08007990 <pxCurrentTCBConst>:
 8007990:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop

08007998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	607b      	str	r3, [r7, #4]
}
 80079b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079b2:	f7fe fddf 	bl	8006574 <xTaskIncrementTick>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079bc:	4b06      	ldr	r3, [pc, #24]	; (80079d8 <xPortSysTickHandler+0x40>)
 80079be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	2300      	movs	r3, #0
 80079c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f383 8811 	msr	BASEPRI, r3
}
 80079ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	e000ed04 	.word	0xe000ed04

080079dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079dc:	b480      	push	{r7}
 80079de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079e0:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <vPortSetupTimerInterrupt+0x34>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079e6:	4b0b      	ldr	r3, [pc, #44]	; (8007a14 <vPortSetupTimerInterrupt+0x38>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079ec:	4b0a      	ldr	r3, [pc, #40]	; (8007a18 <vPortSetupTimerInterrupt+0x3c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a0a      	ldr	r2, [pc, #40]	; (8007a1c <vPortSetupTimerInterrupt+0x40>)
 80079f2:	fba2 2303 	umull	r2, r3, r2, r3
 80079f6:	099b      	lsrs	r3, r3, #6
 80079f8:	4a09      	ldr	r2, [pc, #36]	; (8007a20 <vPortSetupTimerInterrupt+0x44>)
 80079fa:	3b01      	subs	r3, #1
 80079fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079fe:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <vPortSetupTimerInterrupt+0x34>)
 8007a00:	2207      	movs	r2, #7
 8007a02:	601a      	str	r2, [r3, #0]
}
 8007a04:	bf00      	nop
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	e000e010 	.word	0xe000e010
 8007a14:	e000e018 	.word	0xe000e018
 8007a18:	20000000 	.word	0x20000000
 8007a1c:	10624dd3 	.word	0x10624dd3
 8007a20:	e000e014 	.word	0xe000e014

08007a24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a34 <vPortEnableVFP+0x10>
 8007a28:	6801      	ldr	r1, [r0, #0]
 8007a2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a2e:	6001      	str	r1, [r0, #0]
 8007a30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a32:	bf00      	nop
 8007a34:	e000ed88 	.word	0xe000ed88

08007a38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a3e:	f3ef 8305 	mrs	r3, IPSR
 8007a42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b0f      	cmp	r3, #15
 8007a48:	d914      	bls.n	8007a74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a4a:	4a17      	ldr	r2, [pc, #92]	; (8007aa8 <vPortValidateInterruptPriority+0x70>)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a54:	4b15      	ldr	r3, [pc, #84]	; (8007aac <vPortValidateInterruptPriority+0x74>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	7afa      	ldrb	r2, [r7, #11]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d20a      	bcs.n	8007a74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	607b      	str	r3, [r7, #4]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a74:	4b0e      	ldr	r3, [pc, #56]	; (8007ab0 <vPortValidateInterruptPriority+0x78>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a7c:	4b0d      	ldr	r3, [pc, #52]	; (8007ab4 <vPortValidateInterruptPriority+0x7c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d90a      	bls.n	8007a9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	603b      	str	r3, [r7, #0]
}
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <vPortValidateInterruptPriority+0x60>
	}
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	e000e3f0 	.word	0xe000e3f0
 8007aac:	20000d14 	.word	0x20000d14
 8007ab0:	e000ed0c 	.word	0xe000ed0c
 8007ab4:	20000d18 	.word	0x20000d18

08007ab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	; 0x28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ac4:	f7fe fc9a 	bl	80063fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ac8:	4b5b      	ldr	r3, [pc, #364]	; (8007c38 <pvPortMalloc+0x180>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ad0:	f000 f920 	bl	8007d14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ad4:	4b59      	ldr	r3, [pc, #356]	; (8007c3c <pvPortMalloc+0x184>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4013      	ands	r3, r2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f040 8093 	bne.w	8007c08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d01d      	beq.n	8007b24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ae8:	2208      	movs	r2, #8
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4413      	add	r3, r2
 8007aee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f003 0307 	and.w	r3, r3, #7
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d014      	beq.n	8007b24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f023 0307 	bic.w	r3, r3, #7
 8007b00:	3308      	adds	r3, #8
 8007b02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <pvPortMalloc+0x6c>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	617b      	str	r3, [r7, #20]
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d06e      	beq.n	8007c08 <pvPortMalloc+0x150>
 8007b2a:	4b45      	ldr	r3, [pc, #276]	; (8007c40 <pvPortMalloc+0x188>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d869      	bhi.n	8007c08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b34:	4b43      	ldr	r3, [pc, #268]	; (8007c44 <pvPortMalloc+0x18c>)
 8007b36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b38:	4b42      	ldr	r3, [pc, #264]	; (8007c44 <pvPortMalloc+0x18c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b3e:	e004      	b.n	8007b4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d903      	bls.n	8007b5c <pvPortMalloc+0xa4>
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1f1      	bne.n	8007b40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b5c:	4b36      	ldr	r3, [pc, #216]	; (8007c38 <pvPortMalloc+0x180>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d050      	beq.n	8007c08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2208      	movs	r2, #8
 8007b6c:	4413      	add	r3, r2
 8007b6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	2308      	movs	r3, #8
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d91f      	bls.n	8007bc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <pvPortMalloc+0xf8>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	613b      	str	r3, [r7, #16]
}
 8007bac:	bf00      	nop
 8007bae:	e7fe      	b.n	8007bae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bc2:	69b8      	ldr	r0, [r7, #24]
 8007bc4:	f000 f908 	bl	8007dd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bc8:	4b1d      	ldr	r3, [pc, #116]	; (8007c40 <pvPortMalloc+0x188>)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	4a1b      	ldr	r2, [pc, #108]	; (8007c40 <pvPortMalloc+0x188>)
 8007bd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bd6:	4b1a      	ldr	r3, [pc, #104]	; (8007c40 <pvPortMalloc+0x188>)
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4b1b      	ldr	r3, [pc, #108]	; (8007c48 <pvPortMalloc+0x190>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d203      	bcs.n	8007bea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007be2:	4b17      	ldr	r3, [pc, #92]	; (8007c40 <pvPortMalloc+0x188>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a18      	ldr	r2, [pc, #96]	; (8007c48 <pvPortMalloc+0x190>)
 8007be8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	4b13      	ldr	r3, [pc, #76]	; (8007c3c <pvPortMalloc+0x184>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bfe:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <pvPortMalloc+0x194>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3301      	adds	r3, #1
 8007c04:	4a11      	ldr	r2, [pc, #68]	; (8007c4c <pvPortMalloc+0x194>)
 8007c06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c08:	f7fe fc06 	bl	8006418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	f003 0307 	and.w	r3, r3, #7
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <pvPortMalloc+0x174>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	60fb      	str	r3, [r7, #12]
}
 8007c28:	bf00      	nop
 8007c2a:	e7fe      	b.n	8007c2a <pvPortMalloc+0x172>
	return pvReturn;
 8007c2c:	69fb      	ldr	r3, [r7, #28]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3728      	adds	r7, #40	; 0x28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	200018dc 	.word	0x200018dc
 8007c3c:	200018f0 	.word	0x200018f0
 8007c40:	200018e0 	.word	0x200018e0
 8007c44:	200018d4 	.word	0x200018d4
 8007c48:	200018e4 	.word	0x200018e4
 8007c4c:	200018e8 	.word	0x200018e8

08007c50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d04d      	beq.n	8007cfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c62:	2308      	movs	r3, #8
 8007c64:	425b      	negs	r3, r3
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	4413      	add	r3, r2
 8007c6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <vPortFree+0xb8>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4013      	ands	r3, r2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <vPortFree+0x44>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	60fb      	str	r3, [r7, #12]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <vPortFree+0x62>
	__asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	60bb      	str	r3, [r7, #8]
}
 8007cae:	bf00      	nop
 8007cb0:	e7fe      	b.n	8007cb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	4b14      	ldr	r3, [pc, #80]	; (8007d08 <vPortFree+0xb8>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01e      	beq.n	8007cfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d11a      	bne.n	8007cfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	4b0e      	ldr	r3, [pc, #56]	; (8007d08 <vPortFree+0xb8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	43db      	mvns	r3, r3
 8007cd2:	401a      	ands	r2, r3
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007cd8:	f7fe fb90 	bl	80063fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	; (8007d0c <vPortFree+0xbc>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	4a09      	ldr	r2, [pc, #36]	; (8007d0c <vPortFree+0xbc>)
 8007ce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007cea:	6938      	ldr	r0, [r7, #16]
 8007cec:	f000 f874 	bl	8007dd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007cf0:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <vPortFree+0xc0>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	4a06      	ldr	r2, [pc, #24]	; (8007d10 <vPortFree+0xc0>)
 8007cf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007cfa:	f7fe fb8d 	bl	8006418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007cfe:	bf00      	nop
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	200018f0 	.word	0x200018f0
 8007d0c:	200018e0 	.word	0x200018e0
 8007d10:	200018ec 	.word	0x200018ec

08007d14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007d1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d20:	4b27      	ldr	r3, [pc, #156]	; (8007dc0 <prvHeapInit+0xac>)
 8007d22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f003 0307 	and.w	r3, r3, #7
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00c      	beq.n	8007d48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3307      	adds	r3, #7
 8007d32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0307 	bic.w	r3, r3, #7
 8007d3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	4a1f      	ldr	r2, [pc, #124]	; (8007dc0 <prvHeapInit+0xac>)
 8007d44:	4413      	add	r3, r2
 8007d46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d4c:	4a1d      	ldr	r2, [pc, #116]	; (8007dc4 <prvHeapInit+0xb0>)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d52:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <prvHeapInit+0xb0>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d60:	2208      	movs	r2, #8
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	1a9b      	subs	r3, r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0307 	bic.w	r3, r3, #7
 8007d6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4a15      	ldr	r2, [pc, #84]	; (8007dc8 <prvHeapInit+0xb4>)
 8007d74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <prvHeapInit+0xb4>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d7e:	4b12      	ldr	r3, [pc, #72]	; (8007dc8 <prvHeapInit+0xb4>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	1ad2      	subs	r2, r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d94:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <prvHeapInit+0xb4>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	4a0a      	ldr	r2, [pc, #40]	; (8007dcc <prvHeapInit+0xb8>)
 8007da2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	4a09      	ldr	r2, [pc, #36]	; (8007dd0 <prvHeapInit+0xbc>)
 8007daa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007dac:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <prvHeapInit+0xc0>)
 8007dae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007db2:	601a      	str	r2, [r3, #0]
}
 8007db4:	bf00      	nop
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	20000d1c 	.word	0x20000d1c
 8007dc4:	200018d4 	.word	0x200018d4
 8007dc8:	200018dc 	.word	0x200018dc
 8007dcc:	200018e4 	.word	0x200018e4
 8007dd0:	200018e0 	.word	0x200018e0
 8007dd4:	200018f0 	.word	0x200018f0

08007dd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007de0:	4b28      	ldr	r3, [pc, #160]	; (8007e84 <prvInsertBlockIntoFreeList+0xac>)
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	e002      	b.n	8007dec <prvInsertBlockIntoFreeList+0x14>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d8f7      	bhi.n	8007de6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	4413      	add	r3, r2
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d108      	bne.n	8007e1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	441a      	add	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	441a      	add	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d118      	bne.n	8007e60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	4b15      	ldr	r3, [pc, #84]	; (8007e88 <prvInsertBlockIntoFreeList+0xb0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d00d      	beq.n	8007e56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	441a      	add	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	e008      	b.n	8007e68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e56:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <prvInsertBlockIntoFreeList+0xb0>)
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	e003      	b.n	8007e68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d002      	beq.n	8007e76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e76:	bf00      	nop
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	200018d4 	.word	0x200018d4
 8007e88:	200018dc 	.word	0x200018dc

08007e8c <__libc_init_array>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	4d0d      	ldr	r5, [pc, #52]	; (8007ec4 <__libc_init_array+0x38>)
 8007e90:	4c0d      	ldr	r4, [pc, #52]	; (8007ec8 <__libc_init_array+0x3c>)
 8007e92:	1b64      	subs	r4, r4, r5
 8007e94:	10a4      	asrs	r4, r4, #2
 8007e96:	2600      	movs	r6, #0
 8007e98:	42a6      	cmp	r6, r4
 8007e9a:	d109      	bne.n	8007eb0 <__libc_init_array+0x24>
 8007e9c:	4d0b      	ldr	r5, [pc, #44]	; (8007ecc <__libc_init_array+0x40>)
 8007e9e:	4c0c      	ldr	r4, [pc, #48]	; (8007ed0 <__libc_init_array+0x44>)
 8007ea0:	f000 f854 	bl	8007f4c <_init>
 8007ea4:	1b64      	subs	r4, r4, r5
 8007ea6:	10a4      	asrs	r4, r4, #2
 8007ea8:	2600      	movs	r6, #0
 8007eaa:	42a6      	cmp	r6, r4
 8007eac:	d105      	bne.n	8007eba <__libc_init_array+0x2e>
 8007eae:	bd70      	pop	{r4, r5, r6, pc}
 8007eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb4:	4798      	blx	r3
 8007eb6:	3601      	adds	r6, #1
 8007eb8:	e7ee      	b.n	8007e98 <__libc_init_array+0xc>
 8007eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ebe:	4798      	blx	r3
 8007ec0:	3601      	adds	r6, #1
 8007ec2:	e7f2      	b.n	8007eaa <__libc_init_array+0x1e>
 8007ec4:	08008150 	.word	0x08008150
 8007ec8:	08008150 	.word	0x08008150
 8007ecc:	08008150 	.word	0x08008150
 8007ed0:	08008154 	.word	0x08008154

08007ed4 <memcpy>:
 8007ed4:	440a      	add	r2, r1
 8007ed6:	4291      	cmp	r1, r2
 8007ed8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007edc:	d100      	bne.n	8007ee0 <memcpy+0xc>
 8007ede:	4770      	bx	lr
 8007ee0:	b510      	push	{r4, lr}
 8007ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eea:	4291      	cmp	r1, r2
 8007eec:	d1f9      	bne.n	8007ee2 <memcpy+0xe>
 8007eee:	bd10      	pop	{r4, pc}

08007ef0 <memset>:
 8007ef0:	4402      	add	r2, r0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d100      	bne.n	8007efa <memset+0xa>
 8007ef8:	4770      	bx	lr
 8007efa:	f803 1b01 	strb.w	r1, [r3], #1
 8007efe:	e7f9      	b.n	8007ef4 <memset+0x4>

08007f00 <strncat>:
 8007f00:	b530      	push	{r4, r5, lr}
 8007f02:	4604      	mov	r4, r0
 8007f04:	7825      	ldrb	r5, [r4, #0]
 8007f06:	4623      	mov	r3, r4
 8007f08:	3401      	adds	r4, #1
 8007f0a:	2d00      	cmp	r5, #0
 8007f0c:	d1fa      	bne.n	8007f04 <strncat+0x4>
 8007f0e:	3a01      	subs	r2, #1
 8007f10:	d304      	bcc.n	8007f1c <strncat+0x1c>
 8007f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f16:	f803 4b01 	strb.w	r4, [r3], #1
 8007f1a:	b904      	cbnz	r4, 8007f1e <strncat+0x1e>
 8007f1c:	bd30      	pop	{r4, r5, pc}
 8007f1e:	2a00      	cmp	r2, #0
 8007f20:	d1f5      	bne.n	8007f0e <strncat+0xe>
 8007f22:	701a      	strb	r2, [r3, #0]
 8007f24:	e7f3      	b.n	8007f0e <strncat+0xe>

08007f26 <strncmp>:
 8007f26:	b510      	push	{r4, lr}
 8007f28:	b16a      	cbz	r2, 8007f46 <strncmp+0x20>
 8007f2a:	3901      	subs	r1, #1
 8007f2c:	1884      	adds	r4, r0, r2
 8007f2e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007f32:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d103      	bne.n	8007f42 <strncmp+0x1c>
 8007f3a:	42a0      	cmp	r0, r4
 8007f3c:	d001      	beq.n	8007f42 <strncmp+0x1c>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1f5      	bne.n	8007f2e <strncmp+0x8>
 8007f42:	1a98      	subs	r0, r3, r2
 8007f44:	bd10      	pop	{r4, pc}
 8007f46:	4610      	mov	r0, r2
 8007f48:	e7fc      	b.n	8007f44 <strncmp+0x1e>
	...

08007f4c <_init>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	bf00      	nop
 8007f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f52:	bc08      	pop	{r3}
 8007f54:	469e      	mov	lr, r3
 8007f56:	4770      	bx	lr

08007f58 <_fini>:
 8007f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5a:	bf00      	nop
 8007f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5e:	bc08      	pop	{r3}
 8007f60:	469e      	mov	lr, r3
 8007f62:	4770      	bx	lr
